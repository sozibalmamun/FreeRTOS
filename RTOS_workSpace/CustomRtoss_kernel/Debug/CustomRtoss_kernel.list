
CustomRtoss_kernel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d74  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000018c  08006f04  08006f04  00007f04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007090  08007090  00009060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007090  08007090  00008090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007098  08007098  00009060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007098  08007098  00008098  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800709c  0800709c  0000809c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080070a0  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00009060  2**0
                  CONTENTS
 10 .bss          000145d4  20000060  20000060  00009060  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20014634  20014634  00009060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00009060  2**0
                  CONTENTS, READONLY
 13 .debug_info   000129e2  00000000  00000000  00009090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002cac  00000000  00000000  0001ba72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001290  00000000  00000000  0001e720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e48  00000000  00000000  0001f9b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000233fe  00000000  00000000  000207f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000154fd  00000000  00000000  00043bf6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d717f  00000000  00000000  000590f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00130272  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000052f8  00000000  00000000  001302b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000098  00000000  00000000  001355b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006eec 	.word	0x08006eec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08006eec 	.word	0x08006eec

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20012f14 	.word	0x20012f14
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b988 	b.w	8000638 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	468e      	mov	lr, r1
 8000348:	4604      	mov	r4, r0
 800034a:	4688      	mov	r8, r1
 800034c:	2b00      	cmp	r3, #0
 800034e:	d14a      	bne.n	80003e6 <__udivmoddi4+0xa6>
 8000350:	428a      	cmp	r2, r1
 8000352:	4617      	mov	r7, r2
 8000354:	d962      	bls.n	800041c <__udivmoddi4+0xdc>
 8000356:	fab2 f682 	clz	r6, r2
 800035a:	b14e      	cbz	r6, 8000370 <__udivmoddi4+0x30>
 800035c:	f1c6 0320 	rsb	r3, r6, #32
 8000360:	fa01 f806 	lsl.w	r8, r1, r6
 8000364:	fa20 f303 	lsr.w	r3, r0, r3
 8000368:	40b7      	lsls	r7, r6
 800036a:	ea43 0808 	orr.w	r8, r3, r8
 800036e:	40b4      	lsls	r4, r6
 8000370:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000374:	fa1f fc87 	uxth.w	ip, r7
 8000378:	fbb8 f1fe 	udiv	r1, r8, lr
 800037c:	0c23      	lsrs	r3, r4, #16
 800037e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000382:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000386:	fb01 f20c 	mul.w	r2, r1, ip
 800038a:	429a      	cmp	r2, r3
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0x62>
 800038e:	18fb      	adds	r3, r7, r3
 8000390:	f101 30ff 	add.w	r0, r1, #4294967295
 8000394:	f080 80ea 	bcs.w	800056c <__udivmoddi4+0x22c>
 8000398:	429a      	cmp	r2, r3
 800039a:	f240 80e7 	bls.w	800056c <__udivmoddi4+0x22c>
 800039e:	3902      	subs	r1, #2
 80003a0:	443b      	add	r3, r7
 80003a2:	1a9a      	subs	r2, r3, r2
 80003a4:	b2a3      	uxth	r3, r4
 80003a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80003aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80003ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b2:	fb00 fc0c 	mul.w	ip, r0, ip
 80003b6:	459c      	cmp	ip, r3
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x8e>
 80003ba:	18fb      	adds	r3, r7, r3
 80003bc:	f100 32ff 	add.w	r2, r0, #4294967295
 80003c0:	f080 80d6 	bcs.w	8000570 <__udivmoddi4+0x230>
 80003c4:	459c      	cmp	ip, r3
 80003c6:	f240 80d3 	bls.w	8000570 <__udivmoddi4+0x230>
 80003ca:	443b      	add	r3, r7
 80003cc:	3802      	subs	r0, #2
 80003ce:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003d2:	eba3 030c 	sub.w	r3, r3, ip
 80003d6:	2100      	movs	r1, #0
 80003d8:	b11d      	cbz	r5, 80003e2 <__udivmoddi4+0xa2>
 80003da:	40f3      	lsrs	r3, r6
 80003dc:	2200      	movs	r2, #0
 80003de:	e9c5 3200 	strd	r3, r2, [r5]
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d905      	bls.n	80003f6 <__udivmoddi4+0xb6>
 80003ea:	b10d      	cbz	r5, 80003f0 <__udivmoddi4+0xb0>
 80003ec:	e9c5 0100 	strd	r0, r1, [r5]
 80003f0:	2100      	movs	r1, #0
 80003f2:	4608      	mov	r0, r1
 80003f4:	e7f5      	b.n	80003e2 <__udivmoddi4+0xa2>
 80003f6:	fab3 f183 	clz	r1, r3
 80003fa:	2900      	cmp	r1, #0
 80003fc:	d146      	bne.n	800048c <__udivmoddi4+0x14c>
 80003fe:	4573      	cmp	r3, lr
 8000400:	d302      	bcc.n	8000408 <__udivmoddi4+0xc8>
 8000402:	4282      	cmp	r2, r0
 8000404:	f200 8105 	bhi.w	8000612 <__udivmoddi4+0x2d2>
 8000408:	1a84      	subs	r4, r0, r2
 800040a:	eb6e 0203 	sbc.w	r2, lr, r3
 800040e:	2001      	movs	r0, #1
 8000410:	4690      	mov	r8, r2
 8000412:	2d00      	cmp	r5, #0
 8000414:	d0e5      	beq.n	80003e2 <__udivmoddi4+0xa2>
 8000416:	e9c5 4800 	strd	r4, r8, [r5]
 800041a:	e7e2      	b.n	80003e2 <__udivmoddi4+0xa2>
 800041c:	2a00      	cmp	r2, #0
 800041e:	f000 8090 	beq.w	8000542 <__udivmoddi4+0x202>
 8000422:	fab2 f682 	clz	r6, r2
 8000426:	2e00      	cmp	r6, #0
 8000428:	f040 80a4 	bne.w	8000574 <__udivmoddi4+0x234>
 800042c:	1a8a      	subs	r2, r1, r2
 800042e:	0c03      	lsrs	r3, r0, #16
 8000430:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000434:	b280      	uxth	r0, r0
 8000436:	b2bc      	uxth	r4, r7
 8000438:	2101      	movs	r1, #1
 800043a:	fbb2 fcfe 	udiv	ip, r2, lr
 800043e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000442:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000446:	fb04 f20c 	mul.w	r2, r4, ip
 800044a:	429a      	cmp	r2, r3
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x11e>
 800044e:	18fb      	adds	r3, r7, r3
 8000450:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x11c>
 8000456:	429a      	cmp	r2, r3
 8000458:	f200 80e0 	bhi.w	800061c <__udivmoddi4+0x2dc>
 800045c:	46c4      	mov	ip, r8
 800045e:	1a9b      	subs	r3, r3, r2
 8000460:	fbb3 f2fe 	udiv	r2, r3, lr
 8000464:	fb0e 3312 	mls	r3, lr, r2, r3
 8000468:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800046c:	fb02 f404 	mul.w	r4, r2, r4
 8000470:	429c      	cmp	r4, r3
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x144>
 8000474:	18fb      	adds	r3, r7, r3
 8000476:	f102 30ff 	add.w	r0, r2, #4294967295
 800047a:	d202      	bcs.n	8000482 <__udivmoddi4+0x142>
 800047c:	429c      	cmp	r4, r3
 800047e:	f200 80ca 	bhi.w	8000616 <__udivmoddi4+0x2d6>
 8000482:	4602      	mov	r2, r0
 8000484:	1b1b      	subs	r3, r3, r4
 8000486:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800048a:	e7a5      	b.n	80003d8 <__udivmoddi4+0x98>
 800048c:	f1c1 0620 	rsb	r6, r1, #32
 8000490:	408b      	lsls	r3, r1
 8000492:	fa22 f706 	lsr.w	r7, r2, r6
 8000496:	431f      	orrs	r7, r3
 8000498:	fa0e f401 	lsl.w	r4, lr, r1
 800049c:	fa20 f306 	lsr.w	r3, r0, r6
 80004a0:	fa2e fe06 	lsr.w	lr, lr, r6
 80004a4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80004a8:	4323      	orrs	r3, r4
 80004aa:	fa00 f801 	lsl.w	r8, r0, r1
 80004ae:	fa1f fc87 	uxth.w	ip, r7
 80004b2:	fbbe f0f9 	udiv	r0, lr, r9
 80004b6:	0c1c      	lsrs	r4, r3, #16
 80004b8:	fb09 ee10 	mls	lr, r9, r0, lr
 80004bc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80004c0:	fb00 fe0c 	mul.w	lr, r0, ip
 80004c4:	45a6      	cmp	lr, r4
 80004c6:	fa02 f201 	lsl.w	r2, r2, r1
 80004ca:	d909      	bls.n	80004e0 <__udivmoddi4+0x1a0>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f100 3aff 	add.w	sl, r0, #4294967295
 80004d2:	f080 809c 	bcs.w	800060e <__udivmoddi4+0x2ce>
 80004d6:	45a6      	cmp	lr, r4
 80004d8:	f240 8099 	bls.w	800060e <__udivmoddi4+0x2ce>
 80004dc:	3802      	subs	r0, #2
 80004de:	443c      	add	r4, r7
 80004e0:	eba4 040e 	sub.w	r4, r4, lr
 80004e4:	fa1f fe83 	uxth.w	lr, r3
 80004e8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004ec:	fb09 4413 	mls	r4, r9, r3, r4
 80004f0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004f4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004f8:	45a4      	cmp	ip, r4
 80004fa:	d908      	bls.n	800050e <__udivmoddi4+0x1ce>
 80004fc:	193c      	adds	r4, r7, r4
 80004fe:	f103 3eff 	add.w	lr, r3, #4294967295
 8000502:	f080 8082 	bcs.w	800060a <__udivmoddi4+0x2ca>
 8000506:	45a4      	cmp	ip, r4
 8000508:	d97f      	bls.n	800060a <__udivmoddi4+0x2ca>
 800050a:	3b02      	subs	r3, #2
 800050c:	443c      	add	r4, r7
 800050e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000512:	eba4 040c 	sub.w	r4, r4, ip
 8000516:	fba0 ec02 	umull	lr, ip, r0, r2
 800051a:	4564      	cmp	r4, ip
 800051c:	4673      	mov	r3, lr
 800051e:	46e1      	mov	r9, ip
 8000520:	d362      	bcc.n	80005e8 <__udivmoddi4+0x2a8>
 8000522:	d05f      	beq.n	80005e4 <__udivmoddi4+0x2a4>
 8000524:	b15d      	cbz	r5, 800053e <__udivmoddi4+0x1fe>
 8000526:	ebb8 0203 	subs.w	r2, r8, r3
 800052a:	eb64 0409 	sbc.w	r4, r4, r9
 800052e:	fa04 f606 	lsl.w	r6, r4, r6
 8000532:	fa22 f301 	lsr.w	r3, r2, r1
 8000536:	431e      	orrs	r6, r3
 8000538:	40cc      	lsrs	r4, r1
 800053a:	e9c5 6400 	strd	r6, r4, [r5]
 800053e:	2100      	movs	r1, #0
 8000540:	e74f      	b.n	80003e2 <__udivmoddi4+0xa2>
 8000542:	fbb1 fcf2 	udiv	ip, r1, r2
 8000546:	0c01      	lsrs	r1, r0, #16
 8000548:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800054c:	b280      	uxth	r0, r0
 800054e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000552:	463b      	mov	r3, r7
 8000554:	4638      	mov	r0, r7
 8000556:	463c      	mov	r4, r7
 8000558:	46b8      	mov	r8, r7
 800055a:	46be      	mov	lr, r7
 800055c:	2620      	movs	r6, #32
 800055e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000562:	eba2 0208 	sub.w	r2, r2, r8
 8000566:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800056a:	e766      	b.n	800043a <__udivmoddi4+0xfa>
 800056c:	4601      	mov	r1, r0
 800056e:	e718      	b.n	80003a2 <__udivmoddi4+0x62>
 8000570:	4610      	mov	r0, r2
 8000572:	e72c      	b.n	80003ce <__udivmoddi4+0x8e>
 8000574:	f1c6 0220 	rsb	r2, r6, #32
 8000578:	fa2e f302 	lsr.w	r3, lr, r2
 800057c:	40b7      	lsls	r7, r6
 800057e:	40b1      	lsls	r1, r6
 8000580:	fa20 f202 	lsr.w	r2, r0, r2
 8000584:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000588:	430a      	orrs	r2, r1
 800058a:	fbb3 f8fe 	udiv	r8, r3, lr
 800058e:	b2bc      	uxth	r4, r7
 8000590:	fb0e 3318 	mls	r3, lr, r8, r3
 8000594:	0c11      	lsrs	r1, r2, #16
 8000596:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800059a:	fb08 f904 	mul.w	r9, r8, r4
 800059e:	40b0      	lsls	r0, r6
 80005a0:	4589      	cmp	r9, r1
 80005a2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80005a6:	b280      	uxth	r0, r0
 80005a8:	d93e      	bls.n	8000628 <__udivmoddi4+0x2e8>
 80005aa:	1879      	adds	r1, r7, r1
 80005ac:	f108 3cff 	add.w	ip, r8, #4294967295
 80005b0:	d201      	bcs.n	80005b6 <__udivmoddi4+0x276>
 80005b2:	4589      	cmp	r9, r1
 80005b4:	d81f      	bhi.n	80005f6 <__udivmoddi4+0x2b6>
 80005b6:	eba1 0109 	sub.w	r1, r1, r9
 80005ba:	fbb1 f9fe 	udiv	r9, r1, lr
 80005be:	fb09 f804 	mul.w	r8, r9, r4
 80005c2:	fb0e 1119 	mls	r1, lr, r9, r1
 80005c6:	b292      	uxth	r2, r2
 80005c8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005cc:	4542      	cmp	r2, r8
 80005ce:	d229      	bcs.n	8000624 <__udivmoddi4+0x2e4>
 80005d0:	18ba      	adds	r2, r7, r2
 80005d2:	f109 31ff 	add.w	r1, r9, #4294967295
 80005d6:	d2c4      	bcs.n	8000562 <__udivmoddi4+0x222>
 80005d8:	4542      	cmp	r2, r8
 80005da:	d2c2      	bcs.n	8000562 <__udivmoddi4+0x222>
 80005dc:	f1a9 0102 	sub.w	r1, r9, #2
 80005e0:	443a      	add	r2, r7
 80005e2:	e7be      	b.n	8000562 <__udivmoddi4+0x222>
 80005e4:	45f0      	cmp	r8, lr
 80005e6:	d29d      	bcs.n	8000524 <__udivmoddi4+0x1e4>
 80005e8:	ebbe 0302 	subs.w	r3, lr, r2
 80005ec:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005f0:	3801      	subs	r0, #1
 80005f2:	46e1      	mov	r9, ip
 80005f4:	e796      	b.n	8000524 <__udivmoddi4+0x1e4>
 80005f6:	eba7 0909 	sub.w	r9, r7, r9
 80005fa:	4449      	add	r1, r9
 80005fc:	f1a8 0c02 	sub.w	ip, r8, #2
 8000600:	fbb1 f9fe 	udiv	r9, r1, lr
 8000604:	fb09 f804 	mul.w	r8, r9, r4
 8000608:	e7db      	b.n	80005c2 <__udivmoddi4+0x282>
 800060a:	4673      	mov	r3, lr
 800060c:	e77f      	b.n	800050e <__udivmoddi4+0x1ce>
 800060e:	4650      	mov	r0, sl
 8000610:	e766      	b.n	80004e0 <__udivmoddi4+0x1a0>
 8000612:	4608      	mov	r0, r1
 8000614:	e6fd      	b.n	8000412 <__udivmoddi4+0xd2>
 8000616:	443b      	add	r3, r7
 8000618:	3a02      	subs	r2, #2
 800061a:	e733      	b.n	8000484 <__udivmoddi4+0x144>
 800061c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000620:	443b      	add	r3, r7
 8000622:	e71c      	b.n	800045e <__udivmoddi4+0x11e>
 8000624:	4649      	mov	r1, r9
 8000626:	e79c      	b.n	8000562 <__udivmoddi4+0x222>
 8000628:	eba1 0109 	sub.w	r1, r1, r9
 800062c:	46c4      	mov	ip, r8
 800062e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000632:	fb09 f804 	mul.w	r8, r9, r4
 8000636:	e7c4      	b.n	80005c2 <__udivmoddi4+0x282>

08000638 <__aeabi_idiv0>:
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop

0800063c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b088      	sub	sp, #32
 8000640:	af02      	add	r7, sp, #8

	/* USER CODE BEGIN 1 */

	TaskHandle_t task_1_handel=NULL;
 8000642:	2300      	movs	r3, #0
 8000644:	60bb      	str	r3, [r7, #8]
	TaskHandle_t task_2_handel=NULL;
 8000646:	2300      	movs	r3, #0
 8000648:	607b      	str	r3, [r7, #4]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800064a:	f000 fa15 	bl	8000a78 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800064e:	f000 f851 	bl	80006f4 <SystemClock_Config>

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	/* USER CODE BEGIN 2 */
	DWT_CTRL |=(1<<0);
 8000652:	4b21      	ldr	r3, [pc, #132]	@ (80006d8 <main+0x9c>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	4a20      	ldr	r2, [pc, #128]	@ (80006d8 <main+0x9c>)
 8000658:	f043 0301 	orr.w	r3, r3, #1
 800065c:	6013      	str	r3, [r2, #0]
	SEGGER_SYSVIEW_Conf();
 800065e:	f003 fecf 	bl	8004400 <SEGGER_SYSVIEW_Conf>
	SEGGER_SYSVIEW_Start();
 8000662:	f005 f997 	bl	8005994 <SEGGER_SYSVIEW_Start>


	status=xTaskCreate(task_1_Handler, "Task_1", 200, "Hello world from task 1", 2, &task_1_handel);
 8000666:	f107 0308 	add.w	r3, r7, #8
 800066a:	9301      	str	r3, [sp, #4]
 800066c:	2302      	movs	r3, #2
 800066e:	9300      	str	r3, [sp, #0]
 8000670:	4b1a      	ldr	r3, [pc, #104]	@ (80006dc <main+0xa0>)
 8000672:	22c8      	movs	r2, #200	@ 0xc8
 8000674:	491a      	ldr	r1, [pc, #104]	@ (80006e0 <main+0xa4>)
 8000676:	481b      	ldr	r0, [pc, #108]	@ (80006e4 <main+0xa8>)
 8000678:	f002 f822 	bl	80026c0 <xTaskCreate>
 800067c:	6178      	str	r0, [r7, #20]
	configASSERT(status==pdPASS);//if task creat fail then code will hang here
 800067e:	697b      	ldr	r3, [r7, #20]
 8000680:	2b01      	cmp	r3, #1
 8000682:	d00b      	beq.n	800069c <main+0x60>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000684:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000688:	f383 8811 	msr	BASEPRI, r3
 800068c:	f3bf 8f6f 	isb	sy
 8000690:	f3bf 8f4f 	dsb	sy
 8000694:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000696:	bf00      	nop
 8000698:	bf00      	nop
 800069a:	e7fd      	b.n	8000698 <main+0x5c>

	status=xTaskCreate(task_2_Handler, "Task_2", 200, "Hello world from task 2", 2, &task_2_handel);
 800069c:	1d3b      	adds	r3, r7, #4
 800069e:	9301      	str	r3, [sp, #4]
 80006a0:	2302      	movs	r3, #2
 80006a2:	9300      	str	r3, [sp, #0]
 80006a4:	4b10      	ldr	r3, [pc, #64]	@ (80006e8 <main+0xac>)
 80006a6:	22c8      	movs	r2, #200	@ 0xc8
 80006a8:	4910      	ldr	r1, [pc, #64]	@ (80006ec <main+0xb0>)
 80006aa:	4811      	ldr	r0, [pc, #68]	@ (80006f0 <main+0xb4>)
 80006ac:	f002 f808 	bl	80026c0 <xTaskCreate>
 80006b0:	6178      	str	r0, [r7, #20]

	configASSERT(status==pdPASS);//if task creation fails, then the code will hang here
 80006b2:	697b      	ldr	r3, [r7, #20]
 80006b4:	2b01      	cmp	r3, #1
 80006b6:	d00b      	beq.n	80006d0 <main+0x94>
        __asm volatile
 80006b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80006bc:	f383 8811 	msr	BASEPRI, r3
 80006c0:	f3bf 8f6f 	isb	sy
 80006c4:	f3bf 8f4f 	dsb	sy
 80006c8:	60fb      	str	r3, [r7, #12]
    }
 80006ca:	bf00      	nop
 80006cc:	bf00      	nop
 80006ce:	e7fd      	b.n	80006cc <main+0x90>

	vTaskStartScheduler();//start the freeRTOS scheduler
 80006d0:	f002 f94c 	bl	800296c <vTaskStartScheduler>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 80006d4:	bf00      	nop
 80006d6:	e7fd      	b.n	80006d4 <main+0x98>
 80006d8:	e0001000 	.word	0xe0001000
 80006dc:	08006f04 	.word	0x08006f04
 80006e0:	08006f1c 	.word	0x08006f1c
 80006e4:	080007c5 	.word	0x080007c5
 80006e8:	08006f24 	.word	0x08006f24
 80006ec:	08006f3c 	.word	0x08006f3c
 80006f0:	08000801 	.word	0x08000801

080006f4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b094      	sub	sp, #80	@ 0x50
 80006f8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006fa:	f107 0320 	add.w	r3, r7, #32
 80006fe:	2230      	movs	r2, #48	@ 0x30
 8000700:	2100      	movs	r1, #0
 8000702:	4618      	mov	r0, r3
 8000704:	f005 ff6c 	bl	80065e0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000708:	f107 030c 	add.w	r3, r7, #12
 800070c:	2200      	movs	r2, #0
 800070e:	601a      	str	r2, [r3, #0]
 8000710:	605a      	str	r2, [r3, #4]
 8000712:	609a      	str	r2, [r3, #8]
 8000714:	60da      	str	r2, [r3, #12]
 8000716:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000718:	2300      	movs	r3, #0
 800071a:	60bb      	str	r3, [r7, #8]
 800071c:	4b27      	ldr	r3, [pc, #156]	@ (80007bc <SystemClock_Config+0xc8>)
 800071e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000720:	4a26      	ldr	r2, [pc, #152]	@ (80007bc <SystemClock_Config+0xc8>)
 8000722:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000726:	6413      	str	r3, [r2, #64]	@ 0x40
 8000728:	4b24      	ldr	r3, [pc, #144]	@ (80007bc <SystemClock_Config+0xc8>)
 800072a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800072c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000730:	60bb      	str	r3, [r7, #8]
 8000732:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000734:	2300      	movs	r3, #0
 8000736:	607b      	str	r3, [r7, #4]
 8000738:	4b21      	ldr	r3, [pc, #132]	@ (80007c0 <SystemClock_Config+0xcc>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a20      	ldr	r2, [pc, #128]	@ (80007c0 <SystemClock_Config+0xcc>)
 800073e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000742:	6013      	str	r3, [r2, #0]
 8000744:	4b1e      	ldr	r3, [pc, #120]	@ (80007c0 <SystemClock_Config+0xcc>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800074c:	607b      	str	r3, [r7, #4]
 800074e:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000750:	2302      	movs	r3, #2
 8000752:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000754:	2301      	movs	r3, #1
 8000756:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000758:	2310      	movs	r3, #16
 800075a:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800075c:	2302      	movs	r3, #2
 800075e:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000760:	2300      	movs	r3, #0
 8000762:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000764:	2308      	movs	r3, #8
 8000766:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 50;
 8000768:	2332      	movs	r3, #50	@ 0x32
 800076a:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800076c:	2304      	movs	r3, #4
 800076e:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8000770:	2304      	movs	r3, #4
 8000772:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000774:	f107 0320 	add.w	r3, r7, #32
 8000778:	4618      	mov	r0, r3
 800077a:	f000 faa1 	bl	8000cc0 <HAL_RCC_OscConfig>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <SystemClock_Config+0x94>
	{
		Error_Handler();
 8000784:	f000 f86c 	bl	8000860 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000788:	230f      	movs	r3, #15
 800078a:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800078c:	2302      	movs	r3, #2
 800078e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000790:	2300      	movs	r3, #0
 8000792:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000794:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000798:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800079a:	2300      	movs	r3, #0
 800079c:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800079e:	f107 030c 	add.w	r3, r7, #12
 80007a2:	2100      	movs	r1, #0
 80007a4:	4618      	mov	r0, r3
 80007a6:	f000 fd03 	bl	80011b0 <HAL_RCC_ClockConfig>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <SystemClock_Config+0xc0>
	{
		Error_Handler();
 80007b0:	f000 f856 	bl	8000860 <Error_Handler>
	}
}
 80007b4:	bf00      	nop
 80007b6:	3750      	adds	r7, #80	@ 0x50
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	40023800 	.word	0x40023800
 80007c0:	40007000 	.word	0x40007000

080007c4 <task_1_Handler>:

/* USER CODE BEGIN 4 */

static void task_1_Handler (void* arg){
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b09c      	sub	sp, #112	@ 0x70
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]

	while(1){

//				printf("%s\n",(char*)arg);

		sniprintf(msg,100,"%s\n",(char*)arg);
 80007cc:	f107 000c 	add.w	r0, r7, #12
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	4a09      	ldr	r2, [pc, #36]	@ (80007f8 <task_1_Handler+0x34>)
 80007d4:	2164      	movs	r1, #100	@ 0x64
 80007d6:	f005 febd 	bl	8006554 <sniprintf>
		SEGGER_SYSVIEW_PrintfTarget(msg);
 80007da:	f107 030c 	add.w	r3, r7, #12
 80007de:	4618      	mov	r0, r3
 80007e0:	f005 fe48 	bl	8006474 <SEGGER_SYSVIEW_PrintfTarget>
		taskYIELD();
 80007e4:	4b05      	ldr	r3, [pc, #20]	@ (80007fc <task_1_Handler+0x38>)
 80007e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80007ea:	601a      	str	r2, [r3, #0]
 80007ec:	f3bf 8f4f 	dsb	sy
 80007f0:	f3bf 8f6f 	isb	sy
		sniprintf(msg,100,"%s\n",(char*)arg);
 80007f4:	bf00      	nop
 80007f6:	e7e9      	b.n	80007cc <task_1_Handler+0x8>
 80007f8:	08006f44 	.word	0x08006f44
 80007fc:	e000ed04 	.word	0xe000ed04

08000800 <task_2_Handler>:


	}
}

static void task_2_Handler (void* arg){
 8000800:	b580      	push	{r7, lr}
 8000802:	b09c      	sub	sp, #112	@ 0x70
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]

	while(1){

//		printf("%s\n",(char*)arg);

		sniprintf(msg,100,"%s\n",(char*)arg);
 8000808:	f107 000c 	add.w	r0, r7, #12
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	4a09      	ldr	r2, [pc, #36]	@ (8000834 <task_2_Handler+0x34>)
 8000810:	2164      	movs	r1, #100	@ 0x64
 8000812:	f005 fe9f 	bl	8006554 <sniprintf>
		SEGGER_SYSVIEW_PrintfTarget(msg);
 8000816:	f107 030c 	add.w	r3, r7, #12
 800081a:	4618      	mov	r0, r3
 800081c:	f005 fe2a 	bl	8006474 <SEGGER_SYSVIEW_PrintfTarget>
		taskYIELD();
 8000820:	4b05      	ldr	r3, [pc, #20]	@ (8000838 <task_2_Handler+0x38>)
 8000822:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000826:	601a      	str	r2, [r3, #0]
 8000828:	f3bf 8f4f 	dsb	sy
 800082c:	f3bf 8f6f 	isb	sy
		sniprintf(msg,100,"%s\n",(char*)arg);
 8000830:	bf00      	nop
 8000832:	e7e9      	b.n	8000808 <task_2_Handler+0x8>
 8000834:	08006f44 	.word	0x08006f44
 8000838:	e000ed04 	.word	0xe000ed04

0800083c <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4a04      	ldr	r2, [pc, #16]	@ (800085c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800084a:	4293      	cmp	r3, r2
 800084c:	d101      	bne.n	8000852 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		HAL_IncTick();
 800084e:	f000 f935 	bl	8000abc <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000852:	bf00      	nop
 8000854:	3708      	adds	r7, #8
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	40001000 	.word	0x40001000

08000860 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000864:	b672      	cpsid	i
}
 8000866:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000868:	bf00      	nop
 800086a:	e7fd      	b.n	8000868 <Error_Handler+0x8>

0800086c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000872:	2300      	movs	r3, #0
 8000874:	607b      	str	r3, [r7, #4]
 8000876:	4b10      	ldr	r3, [pc, #64]	@ (80008b8 <HAL_MspInit+0x4c>)
 8000878:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800087a:	4a0f      	ldr	r2, [pc, #60]	@ (80008b8 <HAL_MspInit+0x4c>)
 800087c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000880:	6453      	str	r3, [r2, #68]	@ 0x44
 8000882:	4b0d      	ldr	r3, [pc, #52]	@ (80008b8 <HAL_MspInit+0x4c>)
 8000884:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000886:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800088a:	607b      	str	r3, [r7, #4]
 800088c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	603b      	str	r3, [r7, #0]
 8000892:	4b09      	ldr	r3, [pc, #36]	@ (80008b8 <HAL_MspInit+0x4c>)
 8000894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000896:	4a08      	ldr	r2, [pc, #32]	@ (80008b8 <HAL_MspInit+0x4c>)
 8000898:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800089c:	6413      	str	r3, [r2, #64]	@ 0x40
 800089e:	4b06      	ldr	r3, [pc, #24]	@ (80008b8 <HAL_MspInit+0x4c>)
 80008a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008a6:	603b      	str	r3, [r7, #0]
 80008a8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

    vInitPrioGroupValue();
 80008aa:	f003 f9e7 	bl	8003c7c <vInitPrioGroupValue>

  /* USER CODE END MspInit 1 */
}
 80008ae:	bf00      	nop
 80008b0:	3708      	adds	r7, #8
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	40023800 	.word	0x40023800

080008bc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b08e      	sub	sp, #56	@ 0x38
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80008c4:	2300      	movs	r3, #0
 80008c6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80008c8:	2300      	movs	r3, #0
 80008ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80008cc:	2300      	movs	r3, #0
 80008ce:	60fb      	str	r3, [r7, #12]
 80008d0:	4b33      	ldr	r3, [pc, #204]	@ (80009a0 <HAL_InitTick+0xe4>)
 80008d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008d4:	4a32      	ldr	r2, [pc, #200]	@ (80009a0 <HAL_InitTick+0xe4>)
 80008d6:	f043 0310 	orr.w	r3, r3, #16
 80008da:	6413      	str	r3, [r2, #64]	@ 0x40
 80008dc:	4b30      	ldr	r3, [pc, #192]	@ (80009a0 <HAL_InitTick+0xe4>)
 80008de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008e0:	f003 0310 	and.w	r3, r3, #16
 80008e4:	60fb      	str	r3, [r7, #12]
 80008e6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008e8:	f107 0210 	add.w	r2, r7, #16
 80008ec:	f107 0314 	add.w	r3, r7, #20
 80008f0:	4611      	mov	r1, r2
 80008f2:	4618      	mov	r0, r3
 80008f4:	f000 fe28 	bl	8001548 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80008f8:	6a3b      	ldr	r3, [r7, #32]
 80008fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80008fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d103      	bne.n	800090a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000902:	f000 fe0d 	bl	8001520 <HAL_RCC_GetPCLK1Freq>
 8000906:	6378      	str	r0, [r7, #52]	@ 0x34
 8000908:	e004      	b.n	8000914 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800090a:	f000 fe09 	bl	8001520 <HAL_RCC_GetPCLK1Freq>
 800090e:	4603      	mov	r3, r0
 8000910:	005b      	lsls	r3, r3, #1
 8000912:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000914:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000916:	4a23      	ldr	r2, [pc, #140]	@ (80009a4 <HAL_InitTick+0xe8>)
 8000918:	fba2 2303 	umull	r2, r3, r2, r3
 800091c:	0c9b      	lsrs	r3, r3, #18
 800091e:	3b01      	subs	r3, #1
 8000920:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000922:	4b21      	ldr	r3, [pc, #132]	@ (80009a8 <HAL_InitTick+0xec>)
 8000924:	4a21      	ldr	r2, [pc, #132]	@ (80009ac <HAL_InitTick+0xf0>)
 8000926:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000928:	4b1f      	ldr	r3, [pc, #124]	@ (80009a8 <HAL_InitTick+0xec>)
 800092a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800092e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000930:	4a1d      	ldr	r2, [pc, #116]	@ (80009a8 <HAL_InitTick+0xec>)
 8000932:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000934:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000936:	4b1c      	ldr	r3, [pc, #112]	@ (80009a8 <HAL_InitTick+0xec>)
 8000938:	2200      	movs	r2, #0
 800093a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800093c:	4b1a      	ldr	r3, [pc, #104]	@ (80009a8 <HAL_InitTick+0xec>)
 800093e:	2200      	movs	r2, #0
 8000940:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000942:	4b19      	ldr	r3, [pc, #100]	@ (80009a8 <HAL_InitTick+0xec>)
 8000944:	2200      	movs	r2, #0
 8000946:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000948:	4817      	ldr	r0, [pc, #92]	@ (80009a8 <HAL_InitTick+0xec>)
 800094a:	f000 fe2f 	bl	80015ac <HAL_TIM_Base_Init>
 800094e:	4603      	mov	r3, r0
 8000950:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000954:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000958:	2b00      	cmp	r3, #0
 800095a:	d11b      	bne.n	8000994 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800095c:	4812      	ldr	r0, [pc, #72]	@ (80009a8 <HAL_InitTick+0xec>)
 800095e:	f000 fe7f 	bl	8001660 <HAL_TIM_Base_Start_IT>
 8000962:	4603      	mov	r3, r0
 8000964:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000968:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800096c:	2b00      	cmp	r3, #0
 800096e:	d111      	bne.n	8000994 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000970:	2036      	movs	r0, #54	@ 0x36
 8000972:	f000 f997 	bl	8000ca4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	2b0f      	cmp	r3, #15
 800097a:	d808      	bhi.n	800098e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800097c:	2200      	movs	r2, #0
 800097e:	6879      	ldr	r1, [r7, #4]
 8000980:	2036      	movs	r0, #54	@ 0x36
 8000982:	f000 f973 	bl	8000c6c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000986:	4a0a      	ldr	r2, [pc, #40]	@ (80009b0 <HAL_InitTick+0xf4>)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	6013      	str	r3, [r2, #0]
 800098c:	e002      	b.n	8000994 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800098e:	2301      	movs	r3, #1
 8000990:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000994:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000998:	4618      	mov	r0, r3
 800099a:	3738      	adds	r7, #56	@ 0x38
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	40023800 	.word	0x40023800
 80009a4:	431bde83 	.word	0x431bde83
 80009a8:	2000007c 	.word	0x2000007c
 80009ac:	40001000 	.word	0x40001000
 80009b0:	20000004 	.word	0x20000004

080009b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009b8:	bf00      	nop
 80009ba:	e7fd      	b.n	80009b8 <NMI_Handler+0x4>

080009bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009c0:	bf00      	nop
 80009c2:	e7fd      	b.n	80009c0 <HardFault_Handler+0x4>

080009c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009c8:	bf00      	nop
 80009ca:	e7fd      	b.n	80009c8 <MemManage_Handler+0x4>

080009cc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009d0:	bf00      	nop
 80009d2:	e7fd      	b.n	80009d0 <BusFault_Handler+0x4>

080009d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009d8:	bf00      	nop
 80009da:	e7fd      	b.n	80009d8 <UsageFault_Handler+0x4>

080009dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009e0:	bf00      	nop
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr
	...

080009ec <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80009f0:	4802      	ldr	r0, [pc, #8]	@ (80009fc <TIM6_DAC_IRQHandler+0x10>)
 80009f2:	f000 fea5 	bl	8001740 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80009f6:	bf00      	nop
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	2000007c 	.word	0x2000007c

08000a00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a04:	4b06      	ldr	r3, [pc, #24]	@ (8000a20 <SystemInit+0x20>)
 8000a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a0a:	4a05      	ldr	r2, [pc, #20]	@ (8000a20 <SystemInit+0x20>)
 8000a0c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a10:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a14:	bf00      	nop
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	e000ed00 	.word	0xe000ed00

08000a24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000a24:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a5c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000a28:	f7ff ffea 	bl	8000a00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a2c:	480c      	ldr	r0, [pc, #48]	@ (8000a60 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a2e:	490d      	ldr	r1, [pc, #52]	@ (8000a64 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a30:	4a0d      	ldr	r2, [pc, #52]	@ (8000a68 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a34:	e002      	b.n	8000a3c <LoopCopyDataInit>

08000a36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a3a:	3304      	adds	r3, #4

08000a3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a40:	d3f9      	bcc.n	8000a36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a42:	4a0a      	ldr	r2, [pc, #40]	@ (8000a6c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a44:	4c0a      	ldr	r4, [pc, #40]	@ (8000a70 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a48:	e001      	b.n	8000a4e <LoopFillZerobss>

08000a4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a4c:	3204      	adds	r2, #4

08000a4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a50:	d3fb      	bcc.n	8000a4a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a52:	f005 fdcd 	bl	80065f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a56:	f7ff fdf1 	bl	800063c <main>
  bx  lr    
 8000a5a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000a5c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a64:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000a68:	080070a0 	.word	0x080070a0
  ldr r2, =_sbss
 8000a6c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000a70:	20014634 	.word	0x20014634

08000a74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a74:	e7fe      	b.n	8000a74 <ADC_IRQHandler>
	...

08000a78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a7c:	4b0e      	ldr	r3, [pc, #56]	@ (8000ab8 <HAL_Init+0x40>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a0d      	ldr	r2, [pc, #52]	@ (8000ab8 <HAL_Init+0x40>)
 8000a82:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a88:	4b0b      	ldr	r3, [pc, #44]	@ (8000ab8 <HAL_Init+0x40>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a0a      	ldr	r2, [pc, #40]	@ (8000ab8 <HAL_Init+0x40>)
 8000a8e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000a92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a94:	4b08      	ldr	r3, [pc, #32]	@ (8000ab8 <HAL_Init+0x40>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a07      	ldr	r2, [pc, #28]	@ (8000ab8 <HAL_Init+0x40>)
 8000a9a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aa0:	2003      	movs	r0, #3
 8000aa2:	f000 f8d8 	bl	8000c56 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aa6:	200f      	movs	r0, #15
 8000aa8:	f7ff ff08 	bl	80008bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000aac:	f7ff fede 	bl	800086c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ab0:	2300      	movs	r3, #0
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	40023c00 	.word	0x40023c00

08000abc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ac0:	4b06      	ldr	r3, [pc, #24]	@ (8000adc <HAL_IncTick+0x20>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	461a      	mov	r2, r3
 8000ac6:	4b06      	ldr	r3, [pc, #24]	@ (8000ae0 <HAL_IncTick+0x24>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	4413      	add	r3, r2
 8000acc:	4a04      	ldr	r2, [pc, #16]	@ (8000ae0 <HAL_IncTick+0x24>)
 8000ace:	6013      	str	r3, [r2, #0]
}
 8000ad0:	bf00      	nop
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	20000008 	.word	0x20000008
 8000ae0:	200000c4 	.word	0x200000c4

08000ae4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ae8:	4b03      	ldr	r3, [pc, #12]	@ (8000af8 <HAL_GetTick+0x14>)
 8000aea:	681b      	ldr	r3, [r3, #0]
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	200000c4 	.word	0x200000c4

08000afc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b085      	sub	sp, #20
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	f003 0307 	and.w	r3, r3, #7
 8000b0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b0c:	4b0c      	ldr	r3, [pc, #48]	@ (8000b40 <__NVIC_SetPriorityGrouping+0x44>)
 8000b0e:	68db      	ldr	r3, [r3, #12]
 8000b10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b12:	68ba      	ldr	r2, [r7, #8]
 8000b14:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b18:	4013      	ands	r3, r2
 8000b1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b20:	68bb      	ldr	r3, [r7, #8]
 8000b22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b24:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b2e:	4a04      	ldr	r2, [pc, #16]	@ (8000b40 <__NVIC_SetPriorityGrouping+0x44>)
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	60d3      	str	r3, [r2, #12]
}
 8000b34:	bf00      	nop
 8000b36:	3714      	adds	r7, #20
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr
 8000b40:	e000ed00 	.word	0xe000ed00

08000b44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b48:	4b04      	ldr	r3, [pc, #16]	@ (8000b5c <__NVIC_GetPriorityGrouping+0x18>)
 8000b4a:	68db      	ldr	r3, [r3, #12]
 8000b4c:	0a1b      	lsrs	r3, r3, #8
 8000b4e:	f003 0307 	and.w	r3, r3, #7
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr
 8000b5c:	e000ed00 	.word	0xe000ed00

08000b60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	4603      	mov	r3, r0
 8000b68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	db0b      	blt.n	8000b8a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b72:	79fb      	ldrb	r3, [r7, #7]
 8000b74:	f003 021f 	and.w	r2, r3, #31
 8000b78:	4907      	ldr	r1, [pc, #28]	@ (8000b98 <__NVIC_EnableIRQ+0x38>)
 8000b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b7e:	095b      	lsrs	r3, r3, #5
 8000b80:	2001      	movs	r0, #1
 8000b82:	fa00 f202 	lsl.w	r2, r0, r2
 8000b86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b8a:	bf00      	nop
 8000b8c:	370c      	adds	r7, #12
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	e000e100 	.word	0xe000e100

08000b9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	6039      	str	r1, [r7, #0]
 8000ba6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ba8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	db0a      	blt.n	8000bc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	b2da      	uxtb	r2, r3
 8000bb4:	490c      	ldr	r1, [pc, #48]	@ (8000be8 <__NVIC_SetPriority+0x4c>)
 8000bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bba:	0112      	lsls	r2, r2, #4
 8000bbc:	b2d2      	uxtb	r2, r2
 8000bbe:	440b      	add	r3, r1
 8000bc0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bc4:	e00a      	b.n	8000bdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	b2da      	uxtb	r2, r3
 8000bca:	4908      	ldr	r1, [pc, #32]	@ (8000bec <__NVIC_SetPriority+0x50>)
 8000bcc:	79fb      	ldrb	r3, [r7, #7]
 8000bce:	f003 030f 	and.w	r3, r3, #15
 8000bd2:	3b04      	subs	r3, #4
 8000bd4:	0112      	lsls	r2, r2, #4
 8000bd6:	b2d2      	uxtb	r2, r2
 8000bd8:	440b      	add	r3, r1
 8000bda:	761a      	strb	r2, [r3, #24]
}
 8000bdc:	bf00      	nop
 8000bde:	370c      	adds	r7, #12
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr
 8000be8:	e000e100 	.word	0xe000e100
 8000bec:	e000ed00 	.word	0xe000ed00

08000bf0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b089      	sub	sp, #36	@ 0x24
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	60f8      	str	r0, [r7, #12]
 8000bf8:	60b9      	str	r1, [r7, #8]
 8000bfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	f003 0307 	and.w	r3, r3, #7
 8000c02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c04:	69fb      	ldr	r3, [r7, #28]
 8000c06:	f1c3 0307 	rsb	r3, r3, #7
 8000c0a:	2b04      	cmp	r3, #4
 8000c0c:	bf28      	it	cs
 8000c0e:	2304      	movcs	r3, #4
 8000c10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c12:	69fb      	ldr	r3, [r7, #28]
 8000c14:	3304      	adds	r3, #4
 8000c16:	2b06      	cmp	r3, #6
 8000c18:	d902      	bls.n	8000c20 <NVIC_EncodePriority+0x30>
 8000c1a:	69fb      	ldr	r3, [r7, #28]
 8000c1c:	3b03      	subs	r3, #3
 8000c1e:	e000      	b.n	8000c22 <NVIC_EncodePriority+0x32>
 8000c20:	2300      	movs	r3, #0
 8000c22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c24:	f04f 32ff 	mov.w	r2, #4294967295
 8000c28:	69bb      	ldr	r3, [r7, #24]
 8000c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2e:	43da      	mvns	r2, r3
 8000c30:	68bb      	ldr	r3, [r7, #8]
 8000c32:	401a      	ands	r2, r3
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c38:	f04f 31ff 	mov.w	r1, #4294967295
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c42:	43d9      	mvns	r1, r3
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c48:	4313      	orrs	r3, r2
         );
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	3724      	adds	r7, #36	@ 0x24
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr

08000c56 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c56:	b580      	push	{r7, lr}
 8000c58:	b082      	sub	sp, #8
 8000c5a:	af00      	add	r7, sp, #0
 8000c5c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c5e:	6878      	ldr	r0, [r7, #4]
 8000c60:	f7ff ff4c 	bl	8000afc <__NVIC_SetPriorityGrouping>
}
 8000c64:	bf00      	nop
 8000c66:	3708      	adds	r7, #8
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}

08000c6c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b086      	sub	sp, #24
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	4603      	mov	r3, r0
 8000c74:	60b9      	str	r1, [r7, #8]
 8000c76:	607a      	str	r2, [r7, #4]
 8000c78:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c7e:	f7ff ff61 	bl	8000b44 <__NVIC_GetPriorityGrouping>
 8000c82:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c84:	687a      	ldr	r2, [r7, #4]
 8000c86:	68b9      	ldr	r1, [r7, #8]
 8000c88:	6978      	ldr	r0, [r7, #20]
 8000c8a:	f7ff ffb1 	bl	8000bf0 <NVIC_EncodePriority>
 8000c8e:	4602      	mov	r2, r0
 8000c90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c94:	4611      	mov	r1, r2
 8000c96:	4618      	mov	r0, r3
 8000c98:	f7ff ff80 	bl	8000b9c <__NVIC_SetPriority>
}
 8000c9c:	bf00      	nop
 8000c9e:	3718      	adds	r7, #24
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}

08000ca4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	4603      	mov	r3, r0
 8000cac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f7ff ff54 	bl	8000b60 <__NVIC_EnableIRQ>
}
 8000cb8:	bf00      	nop
 8000cba:	3708      	adds	r7, #8
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}

08000cc0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b086      	sub	sp, #24
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d101      	bne.n	8000cd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	e267      	b.n	80011a2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	f003 0301 	and.w	r3, r3, #1
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d075      	beq.n	8000dca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000cde:	4b88      	ldr	r3, [pc, #544]	@ (8000f00 <HAL_RCC_OscConfig+0x240>)
 8000ce0:	689b      	ldr	r3, [r3, #8]
 8000ce2:	f003 030c 	and.w	r3, r3, #12
 8000ce6:	2b04      	cmp	r3, #4
 8000ce8:	d00c      	beq.n	8000d04 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000cea:	4b85      	ldr	r3, [pc, #532]	@ (8000f00 <HAL_RCC_OscConfig+0x240>)
 8000cec:	689b      	ldr	r3, [r3, #8]
 8000cee:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000cf2:	2b08      	cmp	r3, #8
 8000cf4:	d112      	bne.n	8000d1c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000cf6:	4b82      	ldr	r3, [pc, #520]	@ (8000f00 <HAL_RCC_OscConfig+0x240>)
 8000cf8:	685b      	ldr	r3, [r3, #4]
 8000cfa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000cfe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8000d02:	d10b      	bne.n	8000d1c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d04:	4b7e      	ldr	r3, [pc, #504]	@ (8000f00 <HAL_RCC_OscConfig+0x240>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d05b      	beq.n	8000dc8 <HAL_RCC_OscConfig+0x108>
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d157      	bne.n	8000dc8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000d18:	2301      	movs	r3, #1
 8000d1a:	e242      	b.n	80011a2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000d24:	d106      	bne.n	8000d34 <HAL_RCC_OscConfig+0x74>
 8000d26:	4b76      	ldr	r3, [pc, #472]	@ (8000f00 <HAL_RCC_OscConfig+0x240>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	4a75      	ldr	r2, [pc, #468]	@ (8000f00 <HAL_RCC_OscConfig+0x240>)
 8000d2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d30:	6013      	str	r3, [r2, #0]
 8000d32:	e01d      	b.n	8000d70 <HAL_RCC_OscConfig+0xb0>
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000d3c:	d10c      	bne.n	8000d58 <HAL_RCC_OscConfig+0x98>
 8000d3e:	4b70      	ldr	r3, [pc, #448]	@ (8000f00 <HAL_RCC_OscConfig+0x240>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4a6f      	ldr	r2, [pc, #444]	@ (8000f00 <HAL_RCC_OscConfig+0x240>)
 8000d44:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d48:	6013      	str	r3, [r2, #0]
 8000d4a:	4b6d      	ldr	r3, [pc, #436]	@ (8000f00 <HAL_RCC_OscConfig+0x240>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	4a6c      	ldr	r2, [pc, #432]	@ (8000f00 <HAL_RCC_OscConfig+0x240>)
 8000d50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d54:	6013      	str	r3, [r2, #0]
 8000d56:	e00b      	b.n	8000d70 <HAL_RCC_OscConfig+0xb0>
 8000d58:	4b69      	ldr	r3, [pc, #420]	@ (8000f00 <HAL_RCC_OscConfig+0x240>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a68      	ldr	r2, [pc, #416]	@ (8000f00 <HAL_RCC_OscConfig+0x240>)
 8000d5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000d62:	6013      	str	r3, [r2, #0]
 8000d64:	4b66      	ldr	r3, [pc, #408]	@ (8000f00 <HAL_RCC_OscConfig+0x240>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a65      	ldr	r2, [pc, #404]	@ (8000f00 <HAL_RCC_OscConfig+0x240>)
 8000d6a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000d6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d013      	beq.n	8000da0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d78:	f7ff feb4 	bl	8000ae4 <HAL_GetTick>
 8000d7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d7e:	e008      	b.n	8000d92 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d80:	f7ff feb0 	bl	8000ae4 <HAL_GetTick>
 8000d84:	4602      	mov	r2, r0
 8000d86:	693b      	ldr	r3, [r7, #16]
 8000d88:	1ad3      	subs	r3, r2, r3
 8000d8a:	2b64      	cmp	r3, #100	@ 0x64
 8000d8c:	d901      	bls.n	8000d92 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000d8e:	2303      	movs	r3, #3
 8000d90:	e207      	b.n	80011a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d92:	4b5b      	ldr	r3, [pc, #364]	@ (8000f00 <HAL_RCC_OscConfig+0x240>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d0f0      	beq.n	8000d80 <HAL_RCC_OscConfig+0xc0>
 8000d9e:	e014      	b.n	8000dca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000da0:	f7ff fea0 	bl	8000ae4 <HAL_GetTick>
 8000da4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000da6:	e008      	b.n	8000dba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000da8:	f7ff fe9c 	bl	8000ae4 <HAL_GetTick>
 8000dac:	4602      	mov	r2, r0
 8000dae:	693b      	ldr	r3, [r7, #16]
 8000db0:	1ad3      	subs	r3, r2, r3
 8000db2:	2b64      	cmp	r3, #100	@ 0x64
 8000db4:	d901      	bls.n	8000dba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000db6:	2303      	movs	r3, #3
 8000db8:	e1f3      	b.n	80011a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dba:	4b51      	ldr	r3, [pc, #324]	@ (8000f00 <HAL_RCC_OscConfig+0x240>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d1f0      	bne.n	8000da8 <HAL_RCC_OscConfig+0xe8>
 8000dc6:	e000      	b.n	8000dca <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f003 0302 	and.w	r3, r3, #2
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d063      	beq.n	8000e9e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8000dd6:	4b4a      	ldr	r3, [pc, #296]	@ (8000f00 <HAL_RCC_OscConfig+0x240>)
 8000dd8:	689b      	ldr	r3, [r3, #8]
 8000dda:	f003 030c 	and.w	r3, r3, #12
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d00b      	beq.n	8000dfa <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000de2:	4b47      	ldr	r3, [pc, #284]	@ (8000f00 <HAL_RCC_OscConfig+0x240>)
 8000de4:	689b      	ldr	r3, [r3, #8]
 8000de6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8000dea:	2b08      	cmp	r3, #8
 8000dec:	d11c      	bne.n	8000e28 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000dee:	4b44      	ldr	r3, [pc, #272]	@ (8000f00 <HAL_RCC_OscConfig+0x240>)
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d116      	bne.n	8000e28 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dfa:	4b41      	ldr	r3, [pc, #260]	@ (8000f00 <HAL_RCC_OscConfig+0x240>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f003 0302 	and.w	r3, r3, #2
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d005      	beq.n	8000e12 <HAL_RCC_OscConfig+0x152>
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	68db      	ldr	r3, [r3, #12]
 8000e0a:	2b01      	cmp	r3, #1
 8000e0c:	d001      	beq.n	8000e12 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	e1c7      	b.n	80011a2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e12:	4b3b      	ldr	r3, [pc, #236]	@ (8000f00 <HAL_RCC_OscConfig+0x240>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	691b      	ldr	r3, [r3, #16]
 8000e1e:	00db      	lsls	r3, r3, #3
 8000e20:	4937      	ldr	r1, [pc, #220]	@ (8000f00 <HAL_RCC_OscConfig+0x240>)
 8000e22:	4313      	orrs	r3, r2
 8000e24:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e26:	e03a      	b.n	8000e9e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	68db      	ldr	r3, [r3, #12]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d020      	beq.n	8000e72 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e30:	4b34      	ldr	r3, [pc, #208]	@ (8000f04 <HAL_RCC_OscConfig+0x244>)
 8000e32:	2201      	movs	r2, #1
 8000e34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e36:	f7ff fe55 	bl	8000ae4 <HAL_GetTick>
 8000e3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e3c:	e008      	b.n	8000e50 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e3e:	f7ff fe51 	bl	8000ae4 <HAL_GetTick>
 8000e42:	4602      	mov	r2, r0
 8000e44:	693b      	ldr	r3, [r7, #16]
 8000e46:	1ad3      	subs	r3, r2, r3
 8000e48:	2b02      	cmp	r3, #2
 8000e4a:	d901      	bls.n	8000e50 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000e4c:	2303      	movs	r3, #3
 8000e4e:	e1a8      	b.n	80011a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e50:	4b2b      	ldr	r3, [pc, #172]	@ (8000f00 <HAL_RCC_OscConfig+0x240>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f003 0302 	and.w	r3, r3, #2
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d0f0      	beq.n	8000e3e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e5c:	4b28      	ldr	r3, [pc, #160]	@ (8000f00 <HAL_RCC_OscConfig+0x240>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	691b      	ldr	r3, [r3, #16]
 8000e68:	00db      	lsls	r3, r3, #3
 8000e6a:	4925      	ldr	r1, [pc, #148]	@ (8000f00 <HAL_RCC_OscConfig+0x240>)
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	600b      	str	r3, [r1, #0]
 8000e70:	e015      	b.n	8000e9e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e72:	4b24      	ldr	r3, [pc, #144]	@ (8000f04 <HAL_RCC_OscConfig+0x244>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e78:	f7ff fe34 	bl	8000ae4 <HAL_GetTick>
 8000e7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e7e:	e008      	b.n	8000e92 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e80:	f7ff fe30 	bl	8000ae4 <HAL_GetTick>
 8000e84:	4602      	mov	r2, r0
 8000e86:	693b      	ldr	r3, [r7, #16]
 8000e88:	1ad3      	subs	r3, r2, r3
 8000e8a:	2b02      	cmp	r3, #2
 8000e8c:	d901      	bls.n	8000e92 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000e8e:	2303      	movs	r3, #3
 8000e90:	e187      	b.n	80011a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e92:	4b1b      	ldr	r3, [pc, #108]	@ (8000f00 <HAL_RCC_OscConfig+0x240>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f003 0302 	and.w	r3, r3, #2
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d1f0      	bne.n	8000e80 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f003 0308 	and.w	r3, r3, #8
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d036      	beq.n	8000f18 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	695b      	ldr	r3, [r3, #20]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d016      	beq.n	8000ee0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000eb2:	4b15      	ldr	r3, [pc, #84]	@ (8000f08 <HAL_RCC_OscConfig+0x248>)
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000eb8:	f7ff fe14 	bl	8000ae4 <HAL_GetTick>
 8000ebc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ebe:	e008      	b.n	8000ed2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ec0:	f7ff fe10 	bl	8000ae4 <HAL_GetTick>
 8000ec4:	4602      	mov	r2, r0
 8000ec6:	693b      	ldr	r3, [r7, #16]
 8000ec8:	1ad3      	subs	r3, r2, r3
 8000eca:	2b02      	cmp	r3, #2
 8000ecc:	d901      	bls.n	8000ed2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000ece:	2303      	movs	r3, #3
 8000ed0:	e167      	b.n	80011a2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ed2:	4b0b      	ldr	r3, [pc, #44]	@ (8000f00 <HAL_RCC_OscConfig+0x240>)
 8000ed4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000ed6:	f003 0302 	and.w	r3, r3, #2
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d0f0      	beq.n	8000ec0 <HAL_RCC_OscConfig+0x200>
 8000ede:	e01b      	b.n	8000f18 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000ee0:	4b09      	ldr	r3, [pc, #36]	@ (8000f08 <HAL_RCC_OscConfig+0x248>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ee6:	f7ff fdfd 	bl	8000ae4 <HAL_GetTick>
 8000eea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000eec:	e00e      	b.n	8000f0c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000eee:	f7ff fdf9 	bl	8000ae4 <HAL_GetTick>
 8000ef2:	4602      	mov	r2, r0
 8000ef4:	693b      	ldr	r3, [r7, #16]
 8000ef6:	1ad3      	subs	r3, r2, r3
 8000ef8:	2b02      	cmp	r3, #2
 8000efa:	d907      	bls.n	8000f0c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8000efc:	2303      	movs	r3, #3
 8000efe:	e150      	b.n	80011a2 <HAL_RCC_OscConfig+0x4e2>
 8000f00:	40023800 	.word	0x40023800
 8000f04:	42470000 	.word	0x42470000
 8000f08:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f0c:	4b88      	ldr	r3, [pc, #544]	@ (8001130 <HAL_RCC_OscConfig+0x470>)
 8000f0e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000f10:	f003 0302 	and.w	r3, r3, #2
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d1ea      	bne.n	8000eee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f003 0304 	and.w	r3, r3, #4
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	f000 8097 	beq.w	8001054 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f26:	2300      	movs	r3, #0
 8000f28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f2a:	4b81      	ldr	r3, [pc, #516]	@ (8001130 <HAL_RCC_OscConfig+0x470>)
 8000f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d10f      	bne.n	8000f56 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f36:	2300      	movs	r3, #0
 8000f38:	60bb      	str	r3, [r7, #8]
 8000f3a:	4b7d      	ldr	r3, [pc, #500]	@ (8001130 <HAL_RCC_OscConfig+0x470>)
 8000f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f3e:	4a7c      	ldr	r2, [pc, #496]	@ (8001130 <HAL_RCC_OscConfig+0x470>)
 8000f40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f44:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f46:	4b7a      	ldr	r3, [pc, #488]	@ (8001130 <HAL_RCC_OscConfig+0x470>)
 8000f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f4e:	60bb      	str	r3, [r7, #8]
 8000f50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000f52:	2301      	movs	r3, #1
 8000f54:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f56:	4b77      	ldr	r3, [pc, #476]	@ (8001134 <HAL_RCC_OscConfig+0x474>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d118      	bne.n	8000f94 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f62:	4b74      	ldr	r3, [pc, #464]	@ (8001134 <HAL_RCC_OscConfig+0x474>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4a73      	ldr	r2, [pc, #460]	@ (8001134 <HAL_RCC_OscConfig+0x474>)
 8000f68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f6e:	f7ff fdb9 	bl	8000ae4 <HAL_GetTick>
 8000f72:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f74:	e008      	b.n	8000f88 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f76:	f7ff fdb5 	bl	8000ae4 <HAL_GetTick>
 8000f7a:	4602      	mov	r2, r0
 8000f7c:	693b      	ldr	r3, [r7, #16]
 8000f7e:	1ad3      	subs	r3, r2, r3
 8000f80:	2b02      	cmp	r3, #2
 8000f82:	d901      	bls.n	8000f88 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8000f84:	2303      	movs	r3, #3
 8000f86:	e10c      	b.n	80011a2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f88:	4b6a      	ldr	r3, [pc, #424]	@ (8001134 <HAL_RCC_OscConfig+0x474>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d0f0      	beq.n	8000f76 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	689b      	ldr	r3, [r3, #8]
 8000f98:	2b01      	cmp	r3, #1
 8000f9a:	d106      	bne.n	8000faa <HAL_RCC_OscConfig+0x2ea>
 8000f9c:	4b64      	ldr	r3, [pc, #400]	@ (8001130 <HAL_RCC_OscConfig+0x470>)
 8000f9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000fa0:	4a63      	ldr	r2, [pc, #396]	@ (8001130 <HAL_RCC_OscConfig+0x470>)
 8000fa2:	f043 0301 	orr.w	r3, r3, #1
 8000fa6:	6713      	str	r3, [r2, #112]	@ 0x70
 8000fa8:	e01c      	b.n	8000fe4 <HAL_RCC_OscConfig+0x324>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	689b      	ldr	r3, [r3, #8]
 8000fae:	2b05      	cmp	r3, #5
 8000fb0:	d10c      	bne.n	8000fcc <HAL_RCC_OscConfig+0x30c>
 8000fb2:	4b5f      	ldr	r3, [pc, #380]	@ (8001130 <HAL_RCC_OscConfig+0x470>)
 8000fb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000fb6:	4a5e      	ldr	r2, [pc, #376]	@ (8001130 <HAL_RCC_OscConfig+0x470>)
 8000fb8:	f043 0304 	orr.w	r3, r3, #4
 8000fbc:	6713      	str	r3, [r2, #112]	@ 0x70
 8000fbe:	4b5c      	ldr	r3, [pc, #368]	@ (8001130 <HAL_RCC_OscConfig+0x470>)
 8000fc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000fc2:	4a5b      	ldr	r2, [pc, #364]	@ (8001130 <HAL_RCC_OscConfig+0x470>)
 8000fc4:	f043 0301 	orr.w	r3, r3, #1
 8000fc8:	6713      	str	r3, [r2, #112]	@ 0x70
 8000fca:	e00b      	b.n	8000fe4 <HAL_RCC_OscConfig+0x324>
 8000fcc:	4b58      	ldr	r3, [pc, #352]	@ (8001130 <HAL_RCC_OscConfig+0x470>)
 8000fce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000fd0:	4a57      	ldr	r2, [pc, #348]	@ (8001130 <HAL_RCC_OscConfig+0x470>)
 8000fd2:	f023 0301 	bic.w	r3, r3, #1
 8000fd6:	6713      	str	r3, [r2, #112]	@ 0x70
 8000fd8:	4b55      	ldr	r3, [pc, #340]	@ (8001130 <HAL_RCC_OscConfig+0x470>)
 8000fda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000fdc:	4a54      	ldr	r2, [pc, #336]	@ (8001130 <HAL_RCC_OscConfig+0x470>)
 8000fde:	f023 0304 	bic.w	r3, r3, #4
 8000fe2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	689b      	ldr	r3, [r3, #8]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d015      	beq.n	8001018 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000fec:	f7ff fd7a 	bl	8000ae4 <HAL_GetTick>
 8000ff0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ff2:	e00a      	b.n	800100a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000ff4:	f7ff fd76 	bl	8000ae4 <HAL_GetTick>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	693b      	ldr	r3, [r7, #16]
 8000ffc:	1ad3      	subs	r3, r2, r3
 8000ffe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001002:	4293      	cmp	r3, r2
 8001004:	d901      	bls.n	800100a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001006:	2303      	movs	r3, #3
 8001008:	e0cb      	b.n	80011a2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800100a:	4b49      	ldr	r3, [pc, #292]	@ (8001130 <HAL_RCC_OscConfig+0x470>)
 800100c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800100e:	f003 0302 	and.w	r3, r3, #2
 8001012:	2b00      	cmp	r3, #0
 8001014:	d0ee      	beq.n	8000ff4 <HAL_RCC_OscConfig+0x334>
 8001016:	e014      	b.n	8001042 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001018:	f7ff fd64 	bl	8000ae4 <HAL_GetTick>
 800101c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800101e:	e00a      	b.n	8001036 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001020:	f7ff fd60 	bl	8000ae4 <HAL_GetTick>
 8001024:	4602      	mov	r2, r0
 8001026:	693b      	ldr	r3, [r7, #16]
 8001028:	1ad3      	subs	r3, r2, r3
 800102a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800102e:	4293      	cmp	r3, r2
 8001030:	d901      	bls.n	8001036 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001032:	2303      	movs	r3, #3
 8001034:	e0b5      	b.n	80011a2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001036:	4b3e      	ldr	r3, [pc, #248]	@ (8001130 <HAL_RCC_OscConfig+0x470>)
 8001038:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800103a:	f003 0302 	and.w	r3, r3, #2
 800103e:	2b00      	cmp	r3, #0
 8001040:	d1ee      	bne.n	8001020 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001042:	7dfb      	ldrb	r3, [r7, #23]
 8001044:	2b01      	cmp	r3, #1
 8001046:	d105      	bne.n	8001054 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001048:	4b39      	ldr	r3, [pc, #228]	@ (8001130 <HAL_RCC_OscConfig+0x470>)
 800104a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800104c:	4a38      	ldr	r2, [pc, #224]	@ (8001130 <HAL_RCC_OscConfig+0x470>)
 800104e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001052:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	699b      	ldr	r3, [r3, #24]
 8001058:	2b00      	cmp	r3, #0
 800105a:	f000 80a1 	beq.w	80011a0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800105e:	4b34      	ldr	r3, [pc, #208]	@ (8001130 <HAL_RCC_OscConfig+0x470>)
 8001060:	689b      	ldr	r3, [r3, #8]
 8001062:	f003 030c 	and.w	r3, r3, #12
 8001066:	2b08      	cmp	r3, #8
 8001068:	d05c      	beq.n	8001124 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	699b      	ldr	r3, [r3, #24]
 800106e:	2b02      	cmp	r3, #2
 8001070:	d141      	bne.n	80010f6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001072:	4b31      	ldr	r3, [pc, #196]	@ (8001138 <HAL_RCC_OscConfig+0x478>)
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001078:	f7ff fd34 	bl	8000ae4 <HAL_GetTick>
 800107c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800107e:	e008      	b.n	8001092 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001080:	f7ff fd30 	bl	8000ae4 <HAL_GetTick>
 8001084:	4602      	mov	r2, r0
 8001086:	693b      	ldr	r3, [r7, #16]
 8001088:	1ad3      	subs	r3, r2, r3
 800108a:	2b02      	cmp	r3, #2
 800108c:	d901      	bls.n	8001092 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800108e:	2303      	movs	r3, #3
 8001090:	e087      	b.n	80011a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001092:	4b27      	ldr	r3, [pc, #156]	@ (8001130 <HAL_RCC_OscConfig+0x470>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800109a:	2b00      	cmp	r3, #0
 800109c:	d1f0      	bne.n	8001080 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	69da      	ldr	r2, [r3, #28]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6a1b      	ldr	r3, [r3, #32]
 80010a6:	431a      	orrs	r2, r3
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010ac:	019b      	lsls	r3, r3, #6
 80010ae:	431a      	orrs	r2, r3
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010b4:	085b      	lsrs	r3, r3, #1
 80010b6:	3b01      	subs	r3, #1
 80010b8:	041b      	lsls	r3, r3, #16
 80010ba:	431a      	orrs	r2, r3
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010c0:	061b      	lsls	r3, r3, #24
 80010c2:	491b      	ldr	r1, [pc, #108]	@ (8001130 <HAL_RCC_OscConfig+0x470>)
 80010c4:	4313      	orrs	r3, r2
 80010c6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80010c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001138 <HAL_RCC_OscConfig+0x478>)
 80010ca:	2201      	movs	r2, #1
 80010cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010ce:	f7ff fd09 	bl	8000ae4 <HAL_GetTick>
 80010d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010d4:	e008      	b.n	80010e8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010d6:	f7ff fd05 	bl	8000ae4 <HAL_GetTick>
 80010da:	4602      	mov	r2, r0
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	1ad3      	subs	r3, r2, r3
 80010e0:	2b02      	cmp	r3, #2
 80010e2:	d901      	bls.n	80010e8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80010e4:	2303      	movs	r3, #3
 80010e6:	e05c      	b.n	80011a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010e8:	4b11      	ldr	r3, [pc, #68]	@ (8001130 <HAL_RCC_OscConfig+0x470>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d0f0      	beq.n	80010d6 <HAL_RCC_OscConfig+0x416>
 80010f4:	e054      	b.n	80011a0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010f6:	4b10      	ldr	r3, [pc, #64]	@ (8001138 <HAL_RCC_OscConfig+0x478>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010fc:	f7ff fcf2 	bl	8000ae4 <HAL_GetTick>
 8001100:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001102:	e008      	b.n	8001116 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001104:	f7ff fcee 	bl	8000ae4 <HAL_GetTick>
 8001108:	4602      	mov	r2, r0
 800110a:	693b      	ldr	r3, [r7, #16]
 800110c:	1ad3      	subs	r3, r2, r3
 800110e:	2b02      	cmp	r3, #2
 8001110:	d901      	bls.n	8001116 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001112:	2303      	movs	r3, #3
 8001114:	e045      	b.n	80011a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001116:	4b06      	ldr	r3, [pc, #24]	@ (8001130 <HAL_RCC_OscConfig+0x470>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800111e:	2b00      	cmp	r3, #0
 8001120:	d1f0      	bne.n	8001104 <HAL_RCC_OscConfig+0x444>
 8001122:	e03d      	b.n	80011a0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	699b      	ldr	r3, [r3, #24]
 8001128:	2b01      	cmp	r3, #1
 800112a:	d107      	bne.n	800113c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800112c:	2301      	movs	r3, #1
 800112e:	e038      	b.n	80011a2 <HAL_RCC_OscConfig+0x4e2>
 8001130:	40023800 	.word	0x40023800
 8001134:	40007000 	.word	0x40007000
 8001138:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800113c:	4b1b      	ldr	r3, [pc, #108]	@ (80011ac <HAL_RCC_OscConfig+0x4ec>)
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	699b      	ldr	r3, [r3, #24]
 8001146:	2b01      	cmp	r3, #1
 8001148:	d028      	beq.n	800119c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001154:	429a      	cmp	r2, r3
 8001156:	d121      	bne.n	800119c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001162:	429a      	cmp	r2, r3
 8001164:	d11a      	bne.n	800119c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001166:	68fa      	ldr	r2, [r7, #12]
 8001168:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800116c:	4013      	ands	r3, r2
 800116e:	687a      	ldr	r2, [r7, #4]
 8001170:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001172:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001174:	4293      	cmp	r3, r2
 8001176:	d111      	bne.n	800119c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001182:	085b      	lsrs	r3, r3, #1
 8001184:	3b01      	subs	r3, #1
 8001186:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001188:	429a      	cmp	r2, r3
 800118a:	d107      	bne.n	800119c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001196:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001198:	429a      	cmp	r2, r3
 800119a:	d001      	beq.n	80011a0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800119c:	2301      	movs	r3, #1
 800119e:	e000      	b.n	80011a2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80011a0:	2300      	movs	r3, #0
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3718      	adds	r7, #24
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	40023800 	.word	0x40023800

080011b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
 80011b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d101      	bne.n	80011c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80011c0:	2301      	movs	r3, #1
 80011c2:	e0cc      	b.n	800135e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80011c4:	4b68      	ldr	r3, [pc, #416]	@ (8001368 <HAL_RCC_ClockConfig+0x1b8>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f003 0307 	and.w	r3, r3, #7
 80011cc:	683a      	ldr	r2, [r7, #0]
 80011ce:	429a      	cmp	r2, r3
 80011d0:	d90c      	bls.n	80011ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011d2:	4b65      	ldr	r3, [pc, #404]	@ (8001368 <HAL_RCC_ClockConfig+0x1b8>)
 80011d4:	683a      	ldr	r2, [r7, #0]
 80011d6:	b2d2      	uxtb	r2, r2
 80011d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011da:	4b63      	ldr	r3, [pc, #396]	@ (8001368 <HAL_RCC_ClockConfig+0x1b8>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f003 0307 	and.w	r3, r3, #7
 80011e2:	683a      	ldr	r2, [r7, #0]
 80011e4:	429a      	cmp	r2, r3
 80011e6:	d001      	beq.n	80011ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80011e8:	2301      	movs	r3, #1
 80011ea:	e0b8      	b.n	800135e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f003 0302 	and.w	r3, r3, #2
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d020      	beq.n	800123a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f003 0304 	and.w	r3, r3, #4
 8001200:	2b00      	cmp	r3, #0
 8001202:	d005      	beq.n	8001210 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001204:	4b59      	ldr	r3, [pc, #356]	@ (800136c <HAL_RCC_ClockConfig+0x1bc>)
 8001206:	689b      	ldr	r3, [r3, #8]
 8001208:	4a58      	ldr	r2, [pc, #352]	@ (800136c <HAL_RCC_ClockConfig+0x1bc>)
 800120a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800120e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f003 0308 	and.w	r3, r3, #8
 8001218:	2b00      	cmp	r3, #0
 800121a:	d005      	beq.n	8001228 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800121c:	4b53      	ldr	r3, [pc, #332]	@ (800136c <HAL_RCC_ClockConfig+0x1bc>)
 800121e:	689b      	ldr	r3, [r3, #8]
 8001220:	4a52      	ldr	r2, [pc, #328]	@ (800136c <HAL_RCC_ClockConfig+0x1bc>)
 8001222:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001226:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001228:	4b50      	ldr	r3, [pc, #320]	@ (800136c <HAL_RCC_ClockConfig+0x1bc>)
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	689b      	ldr	r3, [r3, #8]
 8001234:	494d      	ldr	r1, [pc, #308]	@ (800136c <HAL_RCC_ClockConfig+0x1bc>)
 8001236:	4313      	orrs	r3, r2
 8001238:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f003 0301 	and.w	r3, r3, #1
 8001242:	2b00      	cmp	r3, #0
 8001244:	d044      	beq.n	80012d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	2b01      	cmp	r3, #1
 800124c:	d107      	bne.n	800125e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800124e:	4b47      	ldr	r3, [pc, #284]	@ (800136c <HAL_RCC_ClockConfig+0x1bc>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001256:	2b00      	cmp	r3, #0
 8001258:	d119      	bne.n	800128e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800125a:	2301      	movs	r3, #1
 800125c:	e07f      	b.n	800135e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	2b02      	cmp	r3, #2
 8001264:	d003      	beq.n	800126e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800126a:	2b03      	cmp	r3, #3
 800126c:	d107      	bne.n	800127e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800126e:	4b3f      	ldr	r3, [pc, #252]	@ (800136c <HAL_RCC_ClockConfig+0x1bc>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001276:	2b00      	cmp	r3, #0
 8001278:	d109      	bne.n	800128e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800127a:	2301      	movs	r3, #1
 800127c:	e06f      	b.n	800135e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800127e:	4b3b      	ldr	r3, [pc, #236]	@ (800136c <HAL_RCC_ClockConfig+0x1bc>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f003 0302 	and.w	r3, r3, #2
 8001286:	2b00      	cmp	r3, #0
 8001288:	d101      	bne.n	800128e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	e067      	b.n	800135e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800128e:	4b37      	ldr	r3, [pc, #220]	@ (800136c <HAL_RCC_ClockConfig+0x1bc>)
 8001290:	689b      	ldr	r3, [r3, #8]
 8001292:	f023 0203 	bic.w	r2, r3, #3
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	4934      	ldr	r1, [pc, #208]	@ (800136c <HAL_RCC_ClockConfig+0x1bc>)
 800129c:	4313      	orrs	r3, r2
 800129e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80012a0:	f7ff fc20 	bl	8000ae4 <HAL_GetTick>
 80012a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012a6:	e00a      	b.n	80012be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012a8:	f7ff fc1c 	bl	8000ae4 <HAL_GetTick>
 80012ac:	4602      	mov	r2, r0
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	1ad3      	subs	r3, r2, r3
 80012b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d901      	bls.n	80012be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80012ba:	2303      	movs	r3, #3
 80012bc:	e04f      	b.n	800135e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012be:	4b2b      	ldr	r3, [pc, #172]	@ (800136c <HAL_RCC_ClockConfig+0x1bc>)
 80012c0:	689b      	ldr	r3, [r3, #8]
 80012c2:	f003 020c 	and.w	r2, r3, #12
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	429a      	cmp	r2, r3
 80012ce:	d1eb      	bne.n	80012a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80012d0:	4b25      	ldr	r3, [pc, #148]	@ (8001368 <HAL_RCC_ClockConfig+0x1b8>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f003 0307 	and.w	r3, r3, #7
 80012d8:	683a      	ldr	r2, [r7, #0]
 80012da:	429a      	cmp	r2, r3
 80012dc:	d20c      	bcs.n	80012f8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012de:	4b22      	ldr	r3, [pc, #136]	@ (8001368 <HAL_RCC_ClockConfig+0x1b8>)
 80012e0:	683a      	ldr	r2, [r7, #0]
 80012e2:	b2d2      	uxtb	r2, r2
 80012e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012e6:	4b20      	ldr	r3, [pc, #128]	@ (8001368 <HAL_RCC_ClockConfig+0x1b8>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f003 0307 	and.w	r3, r3, #7
 80012ee:	683a      	ldr	r2, [r7, #0]
 80012f0:	429a      	cmp	r2, r3
 80012f2:	d001      	beq.n	80012f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80012f4:	2301      	movs	r3, #1
 80012f6:	e032      	b.n	800135e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f003 0304 	and.w	r3, r3, #4
 8001300:	2b00      	cmp	r3, #0
 8001302:	d008      	beq.n	8001316 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001304:	4b19      	ldr	r3, [pc, #100]	@ (800136c <HAL_RCC_ClockConfig+0x1bc>)
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	4916      	ldr	r1, [pc, #88]	@ (800136c <HAL_RCC_ClockConfig+0x1bc>)
 8001312:	4313      	orrs	r3, r2
 8001314:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f003 0308 	and.w	r3, r3, #8
 800131e:	2b00      	cmp	r3, #0
 8001320:	d009      	beq.n	8001336 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001322:	4b12      	ldr	r3, [pc, #72]	@ (800136c <HAL_RCC_ClockConfig+0x1bc>)
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	691b      	ldr	r3, [r3, #16]
 800132e:	00db      	lsls	r3, r3, #3
 8001330:	490e      	ldr	r1, [pc, #56]	@ (800136c <HAL_RCC_ClockConfig+0x1bc>)
 8001332:	4313      	orrs	r3, r2
 8001334:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001336:	f000 f821 	bl	800137c <HAL_RCC_GetSysClockFreq>
 800133a:	4602      	mov	r2, r0
 800133c:	4b0b      	ldr	r3, [pc, #44]	@ (800136c <HAL_RCC_ClockConfig+0x1bc>)
 800133e:	689b      	ldr	r3, [r3, #8]
 8001340:	091b      	lsrs	r3, r3, #4
 8001342:	f003 030f 	and.w	r3, r3, #15
 8001346:	490a      	ldr	r1, [pc, #40]	@ (8001370 <HAL_RCC_ClockConfig+0x1c0>)
 8001348:	5ccb      	ldrb	r3, [r1, r3]
 800134a:	fa22 f303 	lsr.w	r3, r2, r3
 800134e:	4a09      	ldr	r2, [pc, #36]	@ (8001374 <HAL_RCC_ClockConfig+0x1c4>)
 8001350:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001352:	4b09      	ldr	r3, [pc, #36]	@ (8001378 <HAL_RCC_ClockConfig+0x1c8>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4618      	mov	r0, r3
 8001358:	f7ff fab0 	bl	80008bc <HAL_InitTick>

  return HAL_OK;
 800135c:	2300      	movs	r3, #0
}
 800135e:	4618      	mov	r0, r3
 8001360:	3710      	adds	r7, #16
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	40023c00 	.word	0x40023c00
 800136c:	40023800 	.word	0x40023800
 8001370:	0800701c 	.word	0x0800701c
 8001374:	20000000 	.word	0x20000000
 8001378:	20000004 	.word	0x20000004

0800137c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800137c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001380:	b090      	sub	sp, #64	@ 0x40
 8001382:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001384:	2300      	movs	r3, #0
 8001386:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8001388:	2300      	movs	r3, #0
 800138a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800138c:	2300      	movs	r3, #0
 800138e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001390:	2300      	movs	r3, #0
 8001392:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001394:	4b59      	ldr	r3, [pc, #356]	@ (80014fc <HAL_RCC_GetSysClockFreq+0x180>)
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	f003 030c 	and.w	r3, r3, #12
 800139c:	2b08      	cmp	r3, #8
 800139e:	d00d      	beq.n	80013bc <HAL_RCC_GetSysClockFreq+0x40>
 80013a0:	2b08      	cmp	r3, #8
 80013a2:	f200 80a1 	bhi.w	80014e8 <HAL_RCC_GetSysClockFreq+0x16c>
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d002      	beq.n	80013b0 <HAL_RCC_GetSysClockFreq+0x34>
 80013aa:	2b04      	cmp	r3, #4
 80013ac:	d003      	beq.n	80013b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80013ae:	e09b      	b.n	80014e8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80013b0:	4b53      	ldr	r3, [pc, #332]	@ (8001500 <HAL_RCC_GetSysClockFreq+0x184>)
 80013b2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80013b4:	e09b      	b.n	80014ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80013b6:	4b53      	ldr	r3, [pc, #332]	@ (8001504 <HAL_RCC_GetSysClockFreq+0x188>)
 80013b8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80013ba:	e098      	b.n	80014ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80013bc:	4b4f      	ldr	r3, [pc, #316]	@ (80014fc <HAL_RCC_GetSysClockFreq+0x180>)
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80013c4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80013c6:	4b4d      	ldr	r3, [pc, #308]	@ (80014fc <HAL_RCC_GetSysClockFreq+0x180>)
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d028      	beq.n	8001424 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013d2:	4b4a      	ldr	r3, [pc, #296]	@ (80014fc <HAL_RCC_GetSysClockFreq+0x180>)
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	099b      	lsrs	r3, r3, #6
 80013d8:	2200      	movs	r2, #0
 80013da:	623b      	str	r3, [r7, #32]
 80013dc:	627a      	str	r2, [r7, #36]	@ 0x24
 80013de:	6a3b      	ldr	r3, [r7, #32]
 80013e0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80013e4:	2100      	movs	r1, #0
 80013e6:	4b47      	ldr	r3, [pc, #284]	@ (8001504 <HAL_RCC_GetSysClockFreq+0x188>)
 80013e8:	fb03 f201 	mul.w	r2, r3, r1
 80013ec:	2300      	movs	r3, #0
 80013ee:	fb00 f303 	mul.w	r3, r0, r3
 80013f2:	4413      	add	r3, r2
 80013f4:	4a43      	ldr	r2, [pc, #268]	@ (8001504 <HAL_RCC_GetSysClockFreq+0x188>)
 80013f6:	fba0 1202 	umull	r1, r2, r0, r2
 80013fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80013fc:	460a      	mov	r2, r1
 80013fe:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001400:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001402:	4413      	add	r3, r2
 8001404:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001406:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001408:	2200      	movs	r2, #0
 800140a:	61bb      	str	r3, [r7, #24]
 800140c:	61fa      	str	r2, [r7, #28]
 800140e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001412:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001416:	f7fe ff7b 	bl	8000310 <__aeabi_uldivmod>
 800141a:	4602      	mov	r2, r0
 800141c:	460b      	mov	r3, r1
 800141e:	4613      	mov	r3, r2
 8001420:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001422:	e053      	b.n	80014cc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001424:	4b35      	ldr	r3, [pc, #212]	@ (80014fc <HAL_RCC_GetSysClockFreq+0x180>)
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	099b      	lsrs	r3, r3, #6
 800142a:	2200      	movs	r2, #0
 800142c:	613b      	str	r3, [r7, #16]
 800142e:	617a      	str	r2, [r7, #20]
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001436:	f04f 0b00 	mov.w	fp, #0
 800143a:	4652      	mov	r2, sl
 800143c:	465b      	mov	r3, fp
 800143e:	f04f 0000 	mov.w	r0, #0
 8001442:	f04f 0100 	mov.w	r1, #0
 8001446:	0159      	lsls	r1, r3, #5
 8001448:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800144c:	0150      	lsls	r0, r2, #5
 800144e:	4602      	mov	r2, r0
 8001450:	460b      	mov	r3, r1
 8001452:	ebb2 080a 	subs.w	r8, r2, sl
 8001456:	eb63 090b 	sbc.w	r9, r3, fp
 800145a:	f04f 0200 	mov.w	r2, #0
 800145e:	f04f 0300 	mov.w	r3, #0
 8001462:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001466:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800146a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800146e:	ebb2 0408 	subs.w	r4, r2, r8
 8001472:	eb63 0509 	sbc.w	r5, r3, r9
 8001476:	f04f 0200 	mov.w	r2, #0
 800147a:	f04f 0300 	mov.w	r3, #0
 800147e:	00eb      	lsls	r3, r5, #3
 8001480:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001484:	00e2      	lsls	r2, r4, #3
 8001486:	4614      	mov	r4, r2
 8001488:	461d      	mov	r5, r3
 800148a:	eb14 030a 	adds.w	r3, r4, sl
 800148e:	603b      	str	r3, [r7, #0]
 8001490:	eb45 030b 	adc.w	r3, r5, fp
 8001494:	607b      	str	r3, [r7, #4]
 8001496:	f04f 0200 	mov.w	r2, #0
 800149a:	f04f 0300 	mov.w	r3, #0
 800149e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80014a2:	4629      	mov	r1, r5
 80014a4:	028b      	lsls	r3, r1, #10
 80014a6:	4621      	mov	r1, r4
 80014a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80014ac:	4621      	mov	r1, r4
 80014ae:	028a      	lsls	r2, r1, #10
 80014b0:	4610      	mov	r0, r2
 80014b2:	4619      	mov	r1, r3
 80014b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80014b6:	2200      	movs	r2, #0
 80014b8:	60bb      	str	r3, [r7, #8]
 80014ba:	60fa      	str	r2, [r7, #12]
 80014bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80014c0:	f7fe ff26 	bl	8000310 <__aeabi_uldivmod>
 80014c4:	4602      	mov	r2, r0
 80014c6:	460b      	mov	r3, r1
 80014c8:	4613      	mov	r3, r2
 80014ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80014cc:	4b0b      	ldr	r3, [pc, #44]	@ (80014fc <HAL_RCC_GetSysClockFreq+0x180>)
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	0c1b      	lsrs	r3, r3, #16
 80014d2:	f003 0303 	and.w	r3, r3, #3
 80014d6:	3301      	adds	r3, #1
 80014d8:	005b      	lsls	r3, r3, #1
 80014da:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80014dc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80014de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80014e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80014e4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80014e6:	e002      	b.n	80014ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80014e8:	4b05      	ldr	r3, [pc, #20]	@ (8001500 <HAL_RCC_GetSysClockFreq+0x184>)
 80014ea:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80014ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80014ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3740      	adds	r7, #64	@ 0x40
 80014f4:	46bd      	mov	sp, r7
 80014f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80014fa:	bf00      	nop
 80014fc:	40023800 	.word	0x40023800
 8001500:	00f42400 	.word	0x00f42400
 8001504:	017d7840 	.word	0x017d7840

08001508 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800150c:	4b03      	ldr	r3, [pc, #12]	@ (800151c <HAL_RCC_GetHCLKFreq+0x14>)
 800150e:	681b      	ldr	r3, [r3, #0]
}
 8001510:	4618      	mov	r0, r3
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	20000000 	.word	0x20000000

08001520 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001524:	f7ff fff0 	bl	8001508 <HAL_RCC_GetHCLKFreq>
 8001528:	4602      	mov	r2, r0
 800152a:	4b05      	ldr	r3, [pc, #20]	@ (8001540 <HAL_RCC_GetPCLK1Freq+0x20>)
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	0a9b      	lsrs	r3, r3, #10
 8001530:	f003 0307 	and.w	r3, r3, #7
 8001534:	4903      	ldr	r1, [pc, #12]	@ (8001544 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001536:	5ccb      	ldrb	r3, [r1, r3]
 8001538:	fa22 f303 	lsr.w	r3, r2, r3
}
 800153c:	4618      	mov	r0, r3
 800153e:	bd80      	pop	{r7, pc}
 8001540:	40023800 	.word	0x40023800
 8001544:	0800702c 	.word	0x0800702c

08001548 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	220f      	movs	r2, #15
 8001556:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001558:	4b12      	ldr	r3, [pc, #72]	@ (80015a4 <HAL_RCC_GetClockConfig+0x5c>)
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	f003 0203 	and.w	r2, r3, #3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001564:	4b0f      	ldr	r3, [pc, #60]	@ (80015a4 <HAL_RCC_GetClockConfig+0x5c>)
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001570:	4b0c      	ldr	r3, [pc, #48]	@ (80015a4 <HAL_RCC_GetClockConfig+0x5c>)
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800157c:	4b09      	ldr	r3, [pc, #36]	@ (80015a4 <HAL_RCC_GetClockConfig+0x5c>)
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	08db      	lsrs	r3, r3, #3
 8001582:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800158a:	4b07      	ldr	r3, [pc, #28]	@ (80015a8 <HAL_RCC_GetClockConfig+0x60>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f003 0207 	and.w	r2, r3, #7
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	601a      	str	r2, [r3, #0]
}
 8001596:	bf00      	nop
 8001598:	370c      	adds	r7, #12
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	40023800 	.word	0x40023800
 80015a8:	40023c00 	.word	0x40023c00

080015ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d101      	bne.n	80015be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e041      	b.n	8001642 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d106      	bne.n	80015d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2200      	movs	r2, #0
 80015ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f000 f839 	bl	800164a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2202      	movs	r2, #2
 80015dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	3304      	adds	r3, #4
 80015e8:	4619      	mov	r1, r3
 80015ea:	4610      	mov	r0, r2
 80015ec:	f000 f9c0 	bl	8001970 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2201      	movs	r2, #1
 80015f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2201      	movs	r2, #1
 80015fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2201      	movs	r2, #1
 8001604:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2201      	movs	r2, #1
 800160c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2201      	movs	r2, #1
 8001614:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2201      	movs	r2, #1
 800161c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2201      	movs	r2, #1
 8001624:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2201      	movs	r2, #1
 800162c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2201      	movs	r2, #1
 8001634:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2201      	movs	r2, #1
 800163c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001640:	2300      	movs	r3, #0
}
 8001642:	4618      	mov	r0, r3
 8001644:	3708      	adds	r7, #8
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}

0800164a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800164a:	b480      	push	{r7}
 800164c:	b083      	sub	sp, #12
 800164e:	af00      	add	r7, sp, #0
 8001650:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001652:	bf00      	nop
 8001654:	370c      	adds	r7, #12
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
	...

08001660 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001660:	b480      	push	{r7}
 8001662:	b085      	sub	sp, #20
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800166e:	b2db      	uxtb	r3, r3
 8001670:	2b01      	cmp	r3, #1
 8001672:	d001      	beq.n	8001678 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	e04e      	b.n	8001716 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2202      	movs	r2, #2
 800167c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	68da      	ldr	r2, [r3, #12]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f042 0201 	orr.w	r2, r2, #1
 800168e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a23      	ldr	r2, [pc, #140]	@ (8001724 <HAL_TIM_Base_Start_IT+0xc4>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d022      	beq.n	80016e0 <HAL_TIM_Base_Start_IT+0x80>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80016a2:	d01d      	beq.n	80016e0 <HAL_TIM_Base_Start_IT+0x80>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a1f      	ldr	r2, [pc, #124]	@ (8001728 <HAL_TIM_Base_Start_IT+0xc8>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d018      	beq.n	80016e0 <HAL_TIM_Base_Start_IT+0x80>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a1e      	ldr	r2, [pc, #120]	@ (800172c <HAL_TIM_Base_Start_IT+0xcc>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d013      	beq.n	80016e0 <HAL_TIM_Base_Start_IT+0x80>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a1c      	ldr	r2, [pc, #112]	@ (8001730 <HAL_TIM_Base_Start_IT+0xd0>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d00e      	beq.n	80016e0 <HAL_TIM_Base_Start_IT+0x80>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a1b      	ldr	r2, [pc, #108]	@ (8001734 <HAL_TIM_Base_Start_IT+0xd4>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d009      	beq.n	80016e0 <HAL_TIM_Base_Start_IT+0x80>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a19      	ldr	r2, [pc, #100]	@ (8001738 <HAL_TIM_Base_Start_IT+0xd8>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d004      	beq.n	80016e0 <HAL_TIM_Base_Start_IT+0x80>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a18      	ldr	r2, [pc, #96]	@ (800173c <HAL_TIM_Base_Start_IT+0xdc>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d111      	bne.n	8001704 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	f003 0307 	and.w	r3, r3, #7
 80016ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	2b06      	cmp	r3, #6
 80016f0:	d010      	beq.n	8001714 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f042 0201 	orr.w	r2, r2, #1
 8001700:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001702:	e007      	b.n	8001714 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f042 0201 	orr.w	r2, r2, #1
 8001712:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001714:	2300      	movs	r3, #0
}
 8001716:	4618      	mov	r0, r3
 8001718:	3714      	adds	r7, #20
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	40010000 	.word	0x40010000
 8001728:	40000400 	.word	0x40000400
 800172c:	40000800 	.word	0x40000800
 8001730:	40000c00 	.word	0x40000c00
 8001734:	40010400 	.word	0x40010400
 8001738:	40014000 	.word	0x40014000
 800173c:	40001800 	.word	0x40001800

08001740 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	68db      	ldr	r3, [r3, #12]
 800174e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	691b      	ldr	r3, [r3, #16]
 8001756:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	f003 0302 	and.w	r3, r3, #2
 800175e:	2b00      	cmp	r3, #0
 8001760:	d020      	beq.n	80017a4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	f003 0302 	and.w	r3, r3, #2
 8001768:	2b00      	cmp	r3, #0
 800176a:	d01b      	beq.n	80017a4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f06f 0202 	mvn.w	r2, #2
 8001774:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2201      	movs	r2, #1
 800177a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	699b      	ldr	r3, [r3, #24]
 8001782:	f003 0303 	and.w	r3, r3, #3
 8001786:	2b00      	cmp	r3, #0
 8001788:	d003      	beq.n	8001792 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f000 f8d2 	bl	8001934 <HAL_TIM_IC_CaptureCallback>
 8001790:	e005      	b.n	800179e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001792:	6878      	ldr	r0, [r7, #4]
 8001794:	f000 f8c4 	bl	8001920 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	f000 f8d5 	bl	8001948 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2200      	movs	r2, #0
 80017a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	f003 0304 	and.w	r3, r3, #4
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d020      	beq.n	80017f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	f003 0304 	and.w	r3, r3, #4
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d01b      	beq.n	80017f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f06f 0204 	mvn.w	r2, #4
 80017c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2202      	movs	r2, #2
 80017c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	699b      	ldr	r3, [r3, #24]
 80017ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d003      	beq.n	80017de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80017d6:	6878      	ldr	r0, [r7, #4]
 80017d8:	f000 f8ac 	bl	8001934 <HAL_TIM_IC_CaptureCallback>
 80017dc:	e005      	b.n	80017ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	f000 f89e 	bl	8001920 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017e4:	6878      	ldr	r0, [r7, #4]
 80017e6:	f000 f8af 	bl	8001948 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2200      	movs	r2, #0
 80017ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	f003 0308 	and.w	r3, r3, #8
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d020      	beq.n	800183c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	f003 0308 	and.w	r3, r3, #8
 8001800:	2b00      	cmp	r3, #0
 8001802:	d01b      	beq.n	800183c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f06f 0208 	mvn.w	r2, #8
 800180c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2204      	movs	r2, #4
 8001812:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	69db      	ldr	r3, [r3, #28]
 800181a:	f003 0303 	and.w	r3, r3, #3
 800181e:	2b00      	cmp	r3, #0
 8001820:	d003      	beq.n	800182a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f000 f886 	bl	8001934 <HAL_TIM_IC_CaptureCallback>
 8001828:	e005      	b.n	8001836 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f000 f878 	bl	8001920 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	f000 f889 	bl	8001948 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2200      	movs	r2, #0
 800183a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	f003 0310 	and.w	r3, r3, #16
 8001842:	2b00      	cmp	r3, #0
 8001844:	d020      	beq.n	8001888 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	f003 0310 	and.w	r3, r3, #16
 800184c:	2b00      	cmp	r3, #0
 800184e:	d01b      	beq.n	8001888 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f06f 0210 	mvn.w	r2, #16
 8001858:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2208      	movs	r2, #8
 800185e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	69db      	ldr	r3, [r3, #28]
 8001866:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800186a:	2b00      	cmp	r3, #0
 800186c:	d003      	beq.n	8001876 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f000 f860 	bl	8001934 <HAL_TIM_IC_CaptureCallback>
 8001874:	e005      	b.n	8001882 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f000 f852 	bl	8001920 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800187c:	6878      	ldr	r0, [r7, #4]
 800187e:	f000 f863 	bl	8001948 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2200      	movs	r2, #0
 8001886:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	f003 0301 	and.w	r3, r3, #1
 800188e:	2b00      	cmp	r3, #0
 8001890:	d00c      	beq.n	80018ac <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	f003 0301 	and.w	r3, r3, #1
 8001898:	2b00      	cmp	r3, #0
 800189a:	d007      	beq.n	80018ac <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f06f 0201 	mvn.w	r2, #1
 80018a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	f7fe ffc8 	bl	800083c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d00c      	beq.n	80018d0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d007      	beq.n	80018d0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80018c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	f000 f900 	bl	8001ad0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d00c      	beq.n	80018f4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d007      	beq.n	80018f4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80018ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	f000 f834 	bl	800195c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	f003 0320 	and.w	r3, r3, #32
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d00c      	beq.n	8001918 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	f003 0320 	and.w	r3, r3, #32
 8001904:	2b00      	cmp	r3, #0
 8001906:	d007      	beq.n	8001918 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f06f 0220 	mvn.w	r2, #32
 8001910:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	f000 f8d2 	bl	8001abc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001918:	bf00      	nop
 800191a:	3710      	adds	r7, #16
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}

08001920 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001928:	bf00      	nop
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr

08001934 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800193c:	bf00      	nop
 800193e:	370c      	adds	r7, #12
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr

08001948 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001950:	bf00      	nop
 8001952:	370c      	adds	r7, #12
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr

0800195c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001964:	bf00      	nop
 8001966:	370c      	adds	r7, #12
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr

08001970 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001970:	b480      	push	{r7}
 8001972:	b085      	sub	sp, #20
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	4a43      	ldr	r2, [pc, #268]	@ (8001a90 <TIM_Base_SetConfig+0x120>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d013      	beq.n	80019b0 <TIM_Base_SetConfig+0x40>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800198e:	d00f      	beq.n	80019b0 <TIM_Base_SetConfig+0x40>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	4a40      	ldr	r2, [pc, #256]	@ (8001a94 <TIM_Base_SetConfig+0x124>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d00b      	beq.n	80019b0 <TIM_Base_SetConfig+0x40>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	4a3f      	ldr	r2, [pc, #252]	@ (8001a98 <TIM_Base_SetConfig+0x128>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d007      	beq.n	80019b0 <TIM_Base_SetConfig+0x40>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	4a3e      	ldr	r2, [pc, #248]	@ (8001a9c <TIM_Base_SetConfig+0x12c>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d003      	beq.n	80019b0 <TIM_Base_SetConfig+0x40>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	4a3d      	ldr	r2, [pc, #244]	@ (8001aa0 <TIM_Base_SetConfig+0x130>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d108      	bne.n	80019c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80019b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	68fa      	ldr	r2, [r7, #12]
 80019be:	4313      	orrs	r3, r2
 80019c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4a32      	ldr	r2, [pc, #200]	@ (8001a90 <TIM_Base_SetConfig+0x120>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d02b      	beq.n	8001a22 <TIM_Base_SetConfig+0xb2>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80019d0:	d027      	beq.n	8001a22 <TIM_Base_SetConfig+0xb2>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4a2f      	ldr	r2, [pc, #188]	@ (8001a94 <TIM_Base_SetConfig+0x124>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d023      	beq.n	8001a22 <TIM_Base_SetConfig+0xb2>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4a2e      	ldr	r2, [pc, #184]	@ (8001a98 <TIM_Base_SetConfig+0x128>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d01f      	beq.n	8001a22 <TIM_Base_SetConfig+0xb2>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4a2d      	ldr	r2, [pc, #180]	@ (8001a9c <TIM_Base_SetConfig+0x12c>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d01b      	beq.n	8001a22 <TIM_Base_SetConfig+0xb2>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4a2c      	ldr	r2, [pc, #176]	@ (8001aa0 <TIM_Base_SetConfig+0x130>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d017      	beq.n	8001a22 <TIM_Base_SetConfig+0xb2>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4a2b      	ldr	r2, [pc, #172]	@ (8001aa4 <TIM_Base_SetConfig+0x134>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d013      	beq.n	8001a22 <TIM_Base_SetConfig+0xb2>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4a2a      	ldr	r2, [pc, #168]	@ (8001aa8 <TIM_Base_SetConfig+0x138>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d00f      	beq.n	8001a22 <TIM_Base_SetConfig+0xb2>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	4a29      	ldr	r2, [pc, #164]	@ (8001aac <TIM_Base_SetConfig+0x13c>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d00b      	beq.n	8001a22 <TIM_Base_SetConfig+0xb2>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4a28      	ldr	r2, [pc, #160]	@ (8001ab0 <TIM_Base_SetConfig+0x140>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d007      	beq.n	8001a22 <TIM_Base_SetConfig+0xb2>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4a27      	ldr	r2, [pc, #156]	@ (8001ab4 <TIM_Base_SetConfig+0x144>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d003      	beq.n	8001a22 <TIM_Base_SetConfig+0xb2>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4a26      	ldr	r2, [pc, #152]	@ (8001ab8 <TIM_Base_SetConfig+0x148>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d108      	bne.n	8001a34 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001a28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	68db      	ldr	r3, [r3, #12]
 8001a2e:	68fa      	ldr	r2, [r7, #12]
 8001a30:	4313      	orrs	r3, r2
 8001a32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	695b      	ldr	r3, [r3, #20]
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	689a      	ldr	r2, [r3, #8]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4a0e      	ldr	r2, [pc, #56]	@ (8001a90 <TIM_Base_SetConfig+0x120>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d003      	beq.n	8001a62 <TIM_Base_SetConfig+0xf2>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4a10      	ldr	r2, [pc, #64]	@ (8001aa0 <TIM_Base_SetConfig+0x130>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d103      	bne.n	8001a6a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	691a      	ldr	r2, [r3, #16]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f043 0204 	orr.w	r2, r3, #4
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2201      	movs	r2, #1
 8001a7a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	68fa      	ldr	r2, [r7, #12]
 8001a80:	601a      	str	r2, [r3, #0]
}
 8001a82:	bf00      	nop
 8001a84:	3714      	adds	r7, #20
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	40010000 	.word	0x40010000
 8001a94:	40000400 	.word	0x40000400
 8001a98:	40000800 	.word	0x40000800
 8001a9c:	40000c00 	.word	0x40000c00
 8001aa0:	40010400 	.word	0x40010400
 8001aa4:	40014000 	.word	0x40014000
 8001aa8:	40014400 	.word	0x40014400
 8001aac:	40014800 	.word	0x40014800
 8001ab0:	40001800 	.word	0x40001800
 8001ab4:	40001c00 	.word	0x40001c00
 8001ab8:	40002000 	.word	0x40002000

08001abc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001ac4:	bf00      	nop
 8001ac6:	370c      	adds	r7, #12
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr

08001ad0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001ad8:	bf00      	nop
 8001ada:	370c      	adds	r7, #12
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr

08001ae4 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	f103 0208 	add.w	r2, r3, #8
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	f04f 32ff 	mov.w	r2, #4294967295
 8001afc:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	f103 0208 	add.w	r2, r3, #8
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	f103 0208 	add.w	r2, r3, #8
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2200      	movs	r2, #0
 8001b16:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001b18:	bf00      	nop
 8001b1a:	370c      	adds	r7, #12
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr

08001b24 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001b32:	bf00      	nop
 8001b34:	370c      	adds	r7, #12
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr

08001b3e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8001b3e:	b480      	push	{r7}
 8001b40:	b085      	sub	sp, #20
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	6078      	str	r0, [r7, #4]
 8001b46:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	68fa      	ldr	r2, [r7, #12]
 8001b52:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	689a      	ldr	r2, [r3, #8]
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	683a      	ldr	r2, [r7, #0]
 8001b62:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	683a      	ldr	r2, [r7, #0]
 8001b68:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	687a      	ldr	r2, [r7, #4]
 8001b6e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	1c5a      	adds	r2, r3, #1
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	601a      	str	r2, [r3, #0]
}
 8001b7a:	bf00      	nop
 8001b7c:	3714      	adds	r7, #20
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr

08001b86 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8001b86:	b480      	push	{r7}
 8001b88:	b085      	sub	sp, #20
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	6078      	str	r0, [r7, #4]
 8001b8e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8001b96:	68bb      	ldr	r3, [r7, #8]
 8001b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b9c:	d103      	bne.n	8001ba6 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	691b      	ldr	r3, [r3, #16]
 8001ba2:	60fb      	str	r3, [r7, #12]
 8001ba4:	e00c      	b.n	8001bc0 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	3308      	adds	r3, #8
 8001baa:	60fb      	str	r3, [r7, #12]
 8001bac:	e002      	b.n	8001bb4 <vListInsert+0x2e>
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	60fb      	str	r3, [r7, #12]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	68ba      	ldr	r2, [r7, #8]
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d2f6      	bcs.n	8001bae <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	685a      	ldr	r2, [r3, #4]
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	683a      	ldr	r2, [r7, #0]
 8001bce:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	68fa      	ldr	r2, [r7, #12]
 8001bd4:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	683a      	ldr	r2, [r7, #0]
 8001bda:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	687a      	ldr	r2, [r7, #4]
 8001be0:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	1c5a      	adds	r2, r3, #1
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	601a      	str	r2, [r3, #0]
}
 8001bec:	bf00      	nop
 8001bee:	3714      	adds	r7, #20
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr

08001bf8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b085      	sub	sp, #20
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	691b      	ldr	r3, [r3, #16]
 8001c04:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	687a      	ldr	r2, [r7, #4]
 8001c0c:	6892      	ldr	r2, [r2, #8]
 8001c0e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	687a      	ldr	r2, [r7, #4]
 8001c16:	6852      	ldr	r2, [r2, #4]
 8001c18:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	687a      	ldr	r2, [r7, #4]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d103      	bne.n	8001c2c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	689a      	ldr	r2, [r3, #8]
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	1e5a      	subs	r2, r3, #1
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3714      	adds	r7, #20
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr

08001c4c <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b084      	sub	sp, #16
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d10b      	bne.n	8001c78 <xQueueGenericReset+0x2c>
        __asm volatile
 8001c60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001c64:	f383 8811 	msr	BASEPRI, r3
 8001c68:	f3bf 8f6f 	isb	sy
 8001c6c:	f3bf 8f4f 	dsb	sy
 8001c70:	60bb      	str	r3, [r7, #8]
    }
 8001c72:	bf00      	nop
 8001c74:	bf00      	nop
 8001c76:	e7fd      	b.n	8001c74 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8001c78:	f002 f880 	bl	8003d7c <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c84:	68f9      	ldr	r1, [r7, #12]
 8001c86:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8001c88:	fb01 f303 	mul.w	r3, r1, r3
 8001c8c:	441a      	add	r2, r3
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	2200      	movs	r2, #0
 8001c96:	639a      	str	r2, [r3, #56]	@ 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ca8:	3b01      	subs	r3, #1
 8001caa:	68f9      	ldr	r1, [r7, #12]
 8001cac:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8001cae:	fb01 f303 	mul.w	r3, r1, r3
 8001cb2:	441a      	add	r2, r3
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	22ff      	movs	r2, #255	@ 0xff
 8001cbc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	22ff      	movs	r2, #255	@ 0xff
 8001cc4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

        if( xNewQueue == pdFALSE )
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d109      	bne.n	8001ce2 <xQueueGenericReset+0x96>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	691b      	ldr	r3, [r3, #16]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d00f      	beq.n	8001cf6 <xQueueGenericReset+0xaa>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	3310      	adds	r3, #16
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f001 f8c6 	bl	8002e6c <xTaskRemoveFromEventList>
 8001ce0:	e009      	b.n	8001cf6 <xQueueGenericReset+0xaa>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	3310      	adds	r3, #16
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f7ff fefc 	bl	8001ae4 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	3324      	adds	r3, #36	@ 0x24
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f7ff fef7 	bl	8001ae4 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8001cf6:	f002 f873 	bl	8003de0 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8001cfa:	2301      	movs	r3, #1
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3710      	adds	r7, #16
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}

08001d04 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b08c      	sub	sp, #48	@ 0x30
 8001d08:	af02      	add	r7, sp, #8
 8001d0a:	60f8      	str	r0, [r7, #12]
 8001d0c:	60b9      	str	r1, [r7, #8]
 8001d0e:	4613      	mov	r3, r2
 8001d10:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d10b      	bne.n	8001d30 <xQueueGenericCreate+0x2c>
        __asm volatile
 8001d18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d1c:	f383 8811 	msr	BASEPRI, r3
 8001d20:	f3bf 8f6f 	isb	sy
 8001d24:	f3bf 8f4f 	dsb	sy
 8001d28:	61bb      	str	r3, [r7, #24]
    }
 8001d2a:	bf00      	nop
 8001d2c:	bf00      	nop
 8001d2e:	e7fd      	b.n	8001d2c <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	68ba      	ldr	r2, [r7, #8]
 8001d34:	fb02 f303 	mul.w	r3, r2, r3
 8001d38:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d006      	beq.n	8001d4e <xQueueGenericCreate+0x4a>
 8001d40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d48:	68fa      	ldr	r2, [r7, #12]
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	d101      	bne.n	8001d52 <xQueueGenericCreate+0x4e>
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e000      	b.n	8001d54 <xQueueGenericCreate+0x50>
 8001d52:	2300      	movs	r3, #0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d10b      	bne.n	8001d70 <xQueueGenericCreate+0x6c>
        __asm volatile
 8001d58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d5c:	f383 8811 	msr	BASEPRI, r3
 8001d60:	f3bf 8f6f 	isb	sy
 8001d64:	f3bf 8f4f 	dsb	sy
 8001d68:	617b      	str	r3, [r7, #20]
    }
 8001d6a:	bf00      	nop
 8001d6c:	bf00      	nop
 8001d6e:	e7fd      	b.n	8001d6c <xQueueGenericCreate+0x68>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8001d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d72:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 8001d76:	d90b      	bls.n	8001d90 <xQueueGenericCreate+0x8c>
        __asm volatile
 8001d78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d7c:	f383 8811 	msr	BASEPRI, r3
 8001d80:	f3bf 8f6f 	isb	sy
 8001d84:	f3bf 8f4f 	dsb	sy
 8001d88:	613b      	str	r3, [r7, #16]
    }
 8001d8a:	bf00      	nop
 8001d8c:	bf00      	nop
 8001d8e:	e7fd      	b.n	8001d8c <xQueueGenericCreate+0x88>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8001d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d92:	3350      	adds	r3, #80	@ 0x50
 8001d94:	4618      	mov	r0, r3
 8001d96:	f002 f923 	bl	8003fe0 <pvPortMalloc>
 8001d9a:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8001d9c:	6a3b      	ldr	r3, [r7, #32]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d00d      	beq.n	8001dbe <xQueueGenericCreate+0xba>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8001da2:	6a3b      	ldr	r3, [r7, #32]
 8001da4:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	3350      	adds	r3, #80	@ 0x50
 8001daa:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001dac:	79fa      	ldrb	r2, [r7, #7]
 8001dae:	6a3b      	ldr	r3, [r7, #32]
 8001db0:	9300      	str	r3, [sp, #0]
 8001db2:	4613      	mov	r3, r2
 8001db4:	69fa      	ldr	r2, [r7, #28]
 8001db6:	68b9      	ldr	r1, [r7, #8]
 8001db8:	68f8      	ldr	r0, [r7, #12]
 8001dba:	f000 f805 	bl	8001dc8 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8001dbe:	6a3b      	ldr	r3, [r7, #32]
    }
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3728      	adds	r7, #40	@ 0x28
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}

08001dc8 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b084      	sub	sp, #16
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	60f8      	str	r0, [r7, #12]
 8001dd0:	60b9      	str	r1, [r7, #8]
 8001dd2:	607a      	str	r2, [r7, #4]
 8001dd4:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d103      	bne.n	8001de4 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001ddc:	69bb      	ldr	r3, [r7, #24]
 8001dde:	69ba      	ldr	r2, [r7, #24]
 8001de0:	601a      	str	r2, [r3, #0]
 8001de2:	e002      	b.n	8001dea <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001de4:	69bb      	ldr	r3, [r7, #24]
 8001de6:	687a      	ldr	r2, [r7, #4]
 8001de8:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8001dea:	69bb      	ldr	r3, [r7, #24]
 8001dec:	68fa      	ldr	r2, [r7, #12]
 8001dee:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8001df0:	69bb      	ldr	r3, [r7, #24]
 8001df2:	68ba      	ldr	r2, [r7, #8]
 8001df4:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001df6:	2101      	movs	r1, #1
 8001df8:	69b8      	ldr	r0, [r7, #24]
 8001dfa:	f7ff ff27 	bl	8001c4c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8001dfe:	69bb      	ldr	r3, [r7, #24]
 8001e00:	78fa      	ldrb	r2, [r7, #3]
 8001e02:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8001e06:	78fb      	ldrb	r3, [r7, #3]
 8001e08:	68ba      	ldr	r2, [r7, #8]
 8001e0a:	68f9      	ldr	r1, [r7, #12]
 8001e0c:	2073      	movs	r0, #115	@ 0x73
 8001e0e:	f003 fcb9 	bl	8005784 <SEGGER_SYSVIEW_RecordU32x3>
}
 8001e12:	bf00      	nop
 8001e14:	3710      	adds	r7, #16
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
	...

08001e1c <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b090      	sub	sp, #64	@ 0x40
 8001e20:	af02      	add	r7, sp, #8
 8001e22:	60f8      	str	r0, [r7, #12]
 8001e24:	60b9      	str	r1, [r7, #8]
 8001e26:	607a      	str	r2, [r7, #4]
 8001e28:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	633b      	str	r3, [r7, #48]	@ 0x30

    configASSERT( pxQueue );
 8001e32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d10b      	bne.n	8001e50 <xQueueGenericSend+0x34>
        __asm volatile
 8001e38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e3c:	f383 8811 	msr	BASEPRI, r3
 8001e40:	f3bf 8f6f 	isb	sy
 8001e44:	f3bf 8f4f 	dsb	sy
 8001e48:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8001e4a:	bf00      	nop
 8001e4c:	bf00      	nop
 8001e4e:	e7fd      	b.n	8001e4c <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d103      	bne.n	8001e5e <xQueueGenericSend+0x42>
 8001e56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d101      	bne.n	8001e62 <xQueueGenericSend+0x46>
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e000      	b.n	8001e64 <xQueueGenericSend+0x48>
 8001e62:	2300      	movs	r3, #0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d10b      	bne.n	8001e80 <xQueueGenericSend+0x64>
        __asm volatile
 8001e68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e6c:	f383 8811 	msr	BASEPRI, r3
 8001e70:	f3bf 8f6f 	isb	sy
 8001e74:	f3bf 8f4f 	dsb	sy
 8001e78:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8001e7a:	bf00      	nop
 8001e7c:	bf00      	nop
 8001e7e:	e7fd      	b.n	8001e7c <xQueueGenericSend+0x60>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	d103      	bne.n	8001e8e <xQueueGenericSend+0x72>
 8001e86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d101      	bne.n	8001e92 <xQueueGenericSend+0x76>
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e000      	b.n	8001e94 <xQueueGenericSend+0x78>
 8001e92:	2300      	movs	r3, #0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d10b      	bne.n	8001eb0 <xQueueGenericSend+0x94>
        __asm volatile
 8001e98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e9c:	f383 8811 	msr	BASEPRI, r3
 8001ea0:	f3bf 8f6f 	isb	sy
 8001ea4:	f3bf 8f4f 	dsb	sy
 8001ea8:	623b      	str	r3, [r7, #32]
    }
 8001eaa:	bf00      	nop
 8001eac:	bf00      	nop
 8001eae:	e7fd      	b.n	8001eac <xQueueGenericSend+0x90>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001eb0:	f001 f97a 	bl	80031a8 <xTaskGetSchedulerState>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d102      	bne.n	8001ec0 <xQueueGenericSend+0xa4>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d101      	bne.n	8001ec4 <xQueueGenericSend+0xa8>
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e000      	b.n	8001ec6 <xQueueGenericSend+0xaa>
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d10b      	bne.n	8001ee2 <xQueueGenericSend+0xc6>
        __asm volatile
 8001eca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001ece:	f383 8811 	msr	BASEPRI, r3
 8001ed2:	f3bf 8f6f 	isb	sy
 8001ed6:	f3bf 8f4f 	dsb	sy
 8001eda:	61fb      	str	r3, [r7, #28]
    }
 8001edc:	bf00      	nop
 8001ede:	bf00      	nop
 8001ee0:	e7fd      	b.n	8001ede <xQueueGenericSend+0xc2>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8001ee2:	f001 ff4b 	bl	8003d7c <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001ee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ee8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001eea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001eec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	d302      	bcc.n	8001ef8 <xQueueGenericSend+0xdc>
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	2b02      	cmp	r3, #2
 8001ef6:	d11f      	bne.n	8001f38 <xQueueGenericSend+0x11c>
            {
                traceQUEUE_SEND( pxQueue );
 8001ef8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001efa:	4618      	mov	r0, r3
 8001efc:	f004 f9ce 	bl	800629c <SEGGER_SYSVIEW_ShrinkId>
 8001f00:	68ba      	ldr	r2, [r7, #8]
 8001f02:	6879      	ldr	r1, [r7, #4]
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	9300      	str	r3, [sp, #0]
 8001f08:	460b      	mov	r3, r1
 8001f0a:	4601      	mov	r1, r0
 8001f0c:	205a      	movs	r0, #90	@ 0x5a
 8001f0e:	f003 fcaf 	bl	8005870 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001f12:	683a      	ldr	r2, [r7, #0]
 8001f14:	68b9      	ldr	r1, [r7, #8]
 8001f16:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001f18:	f000 fa5c 	bl	80023d4 <prvCopyDataToQueue>
 8001f1c:	62f8      	str	r0, [r7, #44]	@ 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001f1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d004      	beq.n	8001f30 <xQueueGenericSend+0x114>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001f26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f28:	3324      	adds	r3, #36	@ 0x24
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f000 ff9e 	bl	8002e6c <xTaskRemoveFromEventList>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8001f30:	f001 ff56 	bl	8003de0 <vPortExitCritical>
                return pdPASS;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e07d      	b.n	8002034 <xQueueGenericSend+0x218>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d110      	bne.n	8001f60 <xQueueGenericSend+0x144>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8001f3e:	f001 ff4f 	bl	8003de0 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 8001f42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f44:	4618      	mov	r0, r3
 8001f46:	f004 f9a9 	bl	800629c <SEGGER_SYSVIEW_ShrinkId>
 8001f4a:	68ba      	ldr	r2, [r7, #8]
 8001f4c:	6879      	ldr	r1, [r7, #4]
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	9300      	str	r3, [sp, #0]
 8001f52:	460b      	mov	r3, r1
 8001f54:	4601      	mov	r1, r0
 8001f56:	205a      	movs	r0, #90	@ 0x5a
 8001f58:	f003 fc8a 	bl	8005870 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	e069      	b.n	8002034 <xQueueGenericSend+0x218>
                }
                else if( xEntryTimeSet == pdFALSE )
 8001f60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d106      	bne.n	8001f74 <xQueueGenericSend+0x158>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8001f66:	f107 0314 	add.w	r3, r7, #20
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f000 ffe6 	bl	8002f3c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8001f70:	2301      	movs	r3, #1
 8001f72:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8001f74:	f001 ff34 	bl	8003de0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8001f78:	f000 fd5a 	bl	8002a30 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8001f7c:	f001 fefe 	bl	8003d7c <vPortEnterCritical>
 8001f80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f82:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001f86:	b25b      	sxtb	r3, r3
 8001f88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f8c:	d103      	bne.n	8001f96 <xQueueGenericSend+0x17a>
 8001f8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f90:	2200      	movs	r2, #0
 8001f92:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001f96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f98:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001f9c:	b25b      	sxtb	r3, r3
 8001f9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fa2:	d103      	bne.n	8001fac <xQueueGenericSend+0x190>
 8001fa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001fac:	f001 ff18 	bl	8003de0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001fb0:	1d3a      	adds	r2, r7, #4
 8001fb2:	f107 0314 	add.w	r3, r7, #20
 8001fb6:	4611      	mov	r1, r2
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f000 ffd5 	bl	8002f68 <xTaskCheckForTimeOut>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d124      	bne.n	800200e <xQueueGenericSend+0x1f2>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001fc4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001fc6:	f000 fafd 	bl	80025c4 <prvIsQueueFull>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d018      	beq.n	8002002 <xQueueGenericSend+0x1e6>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001fd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fd2:	3310      	adds	r3, #16
 8001fd4:	687a      	ldr	r2, [r7, #4]
 8001fd6:	4611      	mov	r1, r2
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f000 fef1 	bl	8002dc0 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8001fde:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001fe0:	f000 fa88 	bl	80024f4 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8001fe4:	f000 fd32 	bl	8002a4c <xTaskResumeAll>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	f47f af79 	bne.w	8001ee2 <xQueueGenericSend+0xc6>
                {
                    portYIELD_WITHIN_API();
 8001ff0:	4b12      	ldr	r3, [pc, #72]	@ (800203c <xQueueGenericSend+0x220>)
 8001ff2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001ff6:	601a      	str	r2, [r3, #0]
 8001ff8:	f3bf 8f4f 	dsb	sy
 8001ffc:	f3bf 8f6f 	isb	sy
 8002000:	e76f      	b.n	8001ee2 <xQueueGenericSend+0xc6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8002002:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002004:	f000 fa76 	bl	80024f4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002008:	f000 fd20 	bl	8002a4c <xTaskResumeAll>
 800200c:	e769      	b.n	8001ee2 <xQueueGenericSend+0xc6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 800200e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002010:	f000 fa70 	bl	80024f4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002014:	f000 fd1a 	bl	8002a4c <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 8002018:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800201a:	4618      	mov	r0, r3
 800201c:	f004 f93e 	bl	800629c <SEGGER_SYSVIEW_ShrinkId>
 8002020:	68ba      	ldr	r2, [r7, #8]
 8002022:	6879      	ldr	r1, [r7, #4]
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	9300      	str	r3, [sp, #0]
 8002028:	460b      	mov	r3, r1
 800202a:	4601      	mov	r1, r0
 800202c:	205a      	movs	r0, #90	@ 0x5a
 800202e:	f003 fc1f 	bl	8005870 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8002032:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8002034:	4618      	mov	r0, r3
 8002036:	3738      	adds	r7, #56	@ 0x38
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}
 800203c:	e000ed04 	.word	0xe000ed04

08002040 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b090      	sub	sp, #64	@ 0x40
 8002044:	af00      	add	r7, sp, #0
 8002046:	60f8      	str	r0, [r7, #12]
 8002048:	60b9      	str	r1, [r7, #8]
 800204a:	607a      	str	r2, [r7, #4]
 800204c:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	63bb      	str	r3, [r7, #56]	@ 0x38

    configASSERT( pxQueue );
 8002052:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002054:	2b00      	cmp	r3, #0
 8002056:	d10b      	bne.n	8002070 <xQueueGenericSendFromISR+0x30>
        __asm volatile
 8002058:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800205c:	f383 8811 	msr	BASEPRI, r3
 8002060:	f3bf 8f6f 	isb	sy
 8002064:	f3bf 8f4f 	dsb	sy
 8002068:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 800206a:	bf00      	nop
 800206c:	bf00      	nop
 800206e:	e7fd      	b.n	800206c <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d103      	bne.n	800207e <xQueueGenericSendFromISR+0x3e>
 8002076:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800207a:	2b00      	cmp	r3, #0
 800207c:	d101      	bne.n	8002082 <xQueueGenericSendFromISR+0x42>
 800207e:	2301      	movs	r3, #1
 8002080:	e000      	b.n	8002084 <xQueueGenericSendFromISR+0x44>
 8002082:	2300      	movs	r3, #0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d10b      	bne.n	80020a0 <xQueueGenericSendFromISR+0x60>
        __asm volatile
 8002088:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800208c:	f383 8811 	msr	BASEPRI, r3
 8002090:	f3bf 8f6f 	isb	sy
 8002094:	f3bf 8f4f 	dsb	sy
 8002098:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 800209a:	bf00      	nop
 800209c:	bf00      	nop
 800209e:	e7fd      	b.n	800209c <xQueueGenericSendFromISR+0x5c>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d103      	bne.n	80020ae <xQueueGenericSendFromISR+0x6e>
 80020a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d101      	bne.n	80020b2 <xQueueGenericSendFromISR+0x72>
 80020ae:	2301      	movs	r3, #1
 80020b0:	e000      	b.n	80020b4 <xQueueGenericSendFromISR+0x74>
 80020b2:	2300      	movs	r3, #0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d10b      	bne.n	80020d0 <xQueueGenericSendFromISR+0x90>
        __asm volatile
 80020b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80020bc:	f383 8811 	msr	BASEPRI, r3
 80020c0:	f3bf 8f6f 	isb	sy
 80020c4:	f3bf 8f4f 	dsb	sy
 80020c8:	623b      	str	r3, [r7, #32]
    }
 80020ca:	bf00      	nop
 80020cc:	bf00      	nop
 80020ce:	e7fd      	b.n	80020cc <xQueueGenericSendFromISR+0x8c>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80020d0:	f001 ff44 	bl	8003f5c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 80020d4:	f3ef 8211 	mrs	r2, BASEPRI
 80020d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80020dc:	f383 8811 	msr	BASEPRI, r3
 80020e0:	f3bf 8f6f 	isb	sy
 80020e4:	f3bf 8f4f 	dsb	sy
 80020e8:	61fa      	str	r2, [r7, #28]
 80020ea:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 80020ec:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80020ee:	637b      	str	r3, [r7, #52]	@ 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80020f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020f2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80020f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d302      	bcc.n	8002102 <xQueueGenericSendFromISR+0xc2>
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d149      	bne.n	8002196 <xQueueGenericSendFromISR+0x156>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8002102:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002104:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002108:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800210c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800210e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002110:	62fb      	str	r3, [r7, #44]	@ 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8002112:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002114:	4618      	mov	r0, r3
 8002116:	f004 f8c1 	bl	800629c <SEGGER_SYSVIEW_ShrinkId>
 800211a:	4601      	mov	r1, r0
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	461a      	mov	r2, r3
 8002120:	2060      	movs	r0, #96	@ 0x60
 8002122:	f003 fad5 	bl	80056d0 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002126:	683a      	ldr	r2, [r7, #0]
 8002128:	68b9      	ldr	r1, [r7, #8]
 800212a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800212c:	f000 f952 	bl	80023d4 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8002130:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8002134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002138:	d112      	bne.n	8002160 <xQueueGenericSendFromISR+0x120>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800213a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800213c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800213e:	2b00      	cmp	r3, #0
 8002140:	d026      	beq.n	8002190 <xQueueGenericSendFromISR+0x150>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002142:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002144:	3324      	adds	r3, #36	@ 0x24
 8002146:	4618      	mov	r0, r3
 8002148:	f000 fe90 	bl	8002e6c <xTaskRemoveFromEventList>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d01e      	beq.n	8002190 <xQueueGenericSendFromISR+0x150>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d01b      	beq.n	8002190 <xQueueGenericSendFromISR+0x150>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2201      	movs	r2, #1
 800215c:	601a      	str	r2, [r3, #0]
 800215e:	e017      	b.n	8002190 <xQueueGenericSendFromISR+0x150>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8002160:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8002164:	2b7f      	cmp	r3, #127	@ 0x7f
 8002166:	d10b      	bne.n	8002180 <xQueueGenericSendFromISR+0x140>
        __asm volatile
 8002168:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800216c:	f383 8811 	msr	BASEPRI, r3
 8002170:	f3bf 8f6f 	isb	sy
 8002174:	f3bf 8f4f 	dsb	sy
 8002178:	617b      	str	r3, [r7, #20]
    }
 800217a:	bf00      	nop
 800217c:	bf00      	nop
 800217e:	e7fd      	b.n	800217c <xQueueGenericSendFromISR+0x13c>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002180:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002184:	3301      	adds	r3, #1
 8002186:	b2db      	uxtb	r3, r3
 8002188:	b25a      	sxtb	r2, r3
 800218a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800218c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 8002190:	2301      	movs	r3, #1
 8002192:	63fb      	str	r3, [r7, #60]	@ 0x3c
        {
 8002194:	e00b      	b.n	80021ae <xQueueGenericSendFromISR+0x16e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8002196:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002198:	4618      	mov	r0, r3
 800219a:	f004 f87f 	bl	800629c <SEGGER_SYSVIEW_ShrinkId>
 800219e:	4601      	mov	r1, r0
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	461a      	mov	r2, r3
 80021a4:	2060      	movs	r0, #96	@ 0x60
 80021a6:	f003 fa93 	bl	80056d0 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 80021aa:	2300      	movs	r3, #0
 80021ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80021ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021b0:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80021b8:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80021ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3740      	adds	r7, #64	@ 0x40
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}

080021c4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80021c4:	b590      	push	{r4, r7, lr}
 80021c6:	b08f      	sub	sp, #60	@ 0x3c
 80021c8:	af02      	add	r7, sp, #8
 80021ca:	60f8      	str	r0, [r7, #12]
 80021cc:	60b9      	str	r1, [r7, #8]
 80021ce:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80021d0:	2300      	movs	r3, #0
 80021d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80021d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d10b      	bne.n	80021f6 <xQueueReceive+0x32>
        __asm volatile
 80021de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021e2:	f383 8811 	msr	BASEPRI, r3
 80021e6:	f3bf 8f6f 	isb	sy
 80021ea:	f3bf 8f4f 	dsb	sy
 80021ee:	623b      	str	r3, [r7, #32]
    }
 80021f0:	bf00      	nop
 80021f2:	bf00      	nop
 80021f4:	e7fd      	b.n	80021f2 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d103      	bne.n	8002204 <xQueueReceive+0x40>
 80021fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002200:	2b00      	cmp	r3, #0
 8002202:	d101      	bne.n	8002208 <xQueueReceive+0x44>
 8002204:	2301      	movs	r3, #1
 8002206:	e000      	b.n	800220a <xQueueReceive+0x46>
 8002208:	2300      	movs	r3, #0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d10b      	bne.n	8002226 <xQueueReceive+0x62>
        __asm volatile
 800220e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002212:	f383 8811 	msr	BASEPRI, r3
 8002216:	f3bf 8f6f 	isb	sy
 800221a:	f3bf 8f4f 	dsb	sy
 800221e:	61fb      	str	r3, [r7, #28]
    }
 8002220:	bf00      	nop
 8002222:	bf00      	nop
 8002224:	e7fd      	b.n	8002222 <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002226:	f000 ffbf 	bl	80031a8 <xTaskGetSchedulerState>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d102      	bne.n	8002236 <xQueueReceive+0x72>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d101      	bne.n	800223a <xQueueReceive+0x76>
 8002236:	2301      	movs	r3, #1
 8002238:	e000      	b.n	800223c <xQueueReceive+0x78>
 800223a:	2300      	movs	r3, #0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d10b      	bne.n	8002258 <xQueueReceive+0x94>
        __asm volatile
 8002240:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002244:	f383 8811 	msr	BASEPRI, r3
 8002248:	f3bf 8f6f 	isb	sy
 800224c:	f3bf 8f4f 	dsb	sy
 8002250:	61bb      	str	r3, [r7, #24]
    }
 8002252:	bf00      	nop
 8002254:	bf00      	nop
 8002256:	e7fd      	b.n	8002254 <xQueueReceive+0x90>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002258:	f001 fd90 	bl	8003d7c <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800225c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800225e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002260:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002264:	2b00      	cmp	r3, #0
 8002266:	d024      	beq.n	80022b2 <xQueueReceive+0xee>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002268:	68b9      	ldr	r1, [r7, #8]
 800226a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800226c:	f000 f91c 	bl	80024a8 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8002270:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002272:	4618      	mov	r0, r3
 8002274:	f004 f812 	bl	800629c <SEGGER_SYSVIEW_ShrinkId>
 8002278:	4604      	mov	r4, r0
 800227a:	2000      	movs	r0, #0
 800227c:	f004 f80e 	bl	800629c <SEGGER_SYSVIEW_ShrinkId>
 8002280:	4602      	mov	r2, r0
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2101      	movs	r1, #1
 8002286:	9100      	str	r1, [sp, #0]
 8002288:	4621      	mov	r1, r4
 800228a:	205c      	movs	r0, #92	@ 0x5c
 800228c:	f003 faf0 	bl	8005870 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002292:	1e5a      	subs	r2, r3, #1
 8002294:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002296:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002298:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800229a:	691b      	ldr	r3, [r3, #16]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d004      	beq.n	80022aa <xQueueReceive+0xe6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80022a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022a2:	3310      	adds	r3, #16
 80022a4:	4618      	mov	r0, r3
 80022a6:	f000 fde1 	bl	8002e6c <xTaskRemoveFromEventList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80022aa:	f001 fd99 	bl	8003de0 <vPortExitCritical>
                return pdPASS;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e08a      	b.n	80023c8 <xQueueReceive+0x204>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d113      	bne.n	80022e0 <xQueueReceive+0x11c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80022b8:	f001 fd92 	bl	8003de0 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 80022bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022be:	4618      	mov	r0, r3
 80022c0:	f003 ffec 	bl	800629c <SEGGER_SYSVIEW_ShrinkId>
 80022c4:	4604      	mov	r4, r0
 80022c6:	2000      	movs	r0, #0
 80022c8:	f003 ffe8 	bl	800629c <SEGGER_SYSVIEW_ShrinkId>
 80022cc:	4602      	mov	r2, r0
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2101      	movs	r1, #1
 80022d2:	9100      	str	r1, [sp, #0]
 80022d4:	4621      	mov	r1, r4
 80022d6:	205c      	movs	r0, #92	@ 0x5c
 80022d8:	f003 faca 	bl	8005870 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 80022dc:	2300      	movs	r3, #0
 80022de:	e073      	b.n	80023c8 <xQueueReceive+0x204>
                }
                else if( xEntryTimeSet == pdFALSE )
 80022e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d106      	bne.n	80022f4 <xQueueReceive+0x130>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80022e6:	f107 0310 	add.w	r3, r7, #16
 80022ea:	4618      	mov	r0, r3
 80022ec:	f000 fe26 	bl	8002f3c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80022f0:	2301      	movs	r3, #1
 80022f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80022f4:	f001 fd74 	bl	8003de0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80022f8:	f000 fb9a 	bl	8002a30 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80022fc:	f001 fd3e 	bl	8003d7c <vPortEnterCritical>
 8002300:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002302:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002306:	b25b      	sxtb	r3, r3
 8002308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800230c:	d103      	bne.n	8002316 <xQueueReceive+0x152>
 800230e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002310:	2200      	movs	r2, #0
 8002312:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002316:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002318:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800231c:	b25b      	sxtb	r3, r3
 800231e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002322:	d103      	bne.n	800232c <xQueueReceive+0x168>
 8002324:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002326:	2200      	movs	r2, #0
 8002328:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800232c:	f001 fd58 	bl	8003de0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002330:	1d3a      	adds	r2, r7, #4
 8002332:	f107 0310 	add.w	r3, r7, #16
 8002336:	4611      	mov	r1, r2
 8002338:	4618      	mov	r0, r3
 800233a:	f000 fe15 	bl	8002f68 <xTaskCheckForTimeOut>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d124      	bne.n	800238e <xQueueReceive+0x1ca>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002344:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002346:	f000 f927 	bl	8002598 <prvIsQueueEmpty>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d018      	beq.n	8002382 <xQueueReceive+0x1be>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002350:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002352:	3324      	adds	r3, #36	@ 0x24
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	4611      	mov	r1, r2
 8002358:	4618      	mov	r0, r3
 800235a:	f000 fd31 	bl	8002dc0 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800235e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002360:	f000 f8c8 	bl	80024f4 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002364:	f000 fb72 	bl	8002a4c <xTaskResumeAll>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	f47f af74 	bne.w	8002258 <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
 8002370:	4b17      	ldr	r3, [pc, #92]	@ (80023d0 <xQueueReceive+0x20c>)
 8002372:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002376:	601a      	str	r2, [r3, #0]
 8002378:	f3bf 8f4f 	dsb	sy
 800237c:	f3bf 8f6f 	isb	sy
 8002380:	e76a      	b.n	8002258 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002382:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002384:	f000 f8b6 	bl	80024f4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002388:	f000 fb60 	bl	8002a4c <xTaskResumeAll>
 800238c:	e764      	b.n	8002258 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800238e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002390:	f000 f8b0 	bl	80024f4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002394:	f000 fb5a 	bl	8002a4c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002398:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800239a:	f000 f8fd 	bl	8002598 <prvIsQueueEmpty>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	f43f af59 	beq.w	8002258 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 80023a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023a8:	4618      	mov	r0, r3
 80023aa:	f003 ff77 	bl	800629c <SEGGER_SYSVIEW_ShrinkId>
 80023ae:	4604      	mov	r4, r0
 80023b0:	2000      	movs	r0, #0
 80023b2:	f003 ff73 	bl	800629c <SEGGER_SYSVIEW_ShrinkId>
 80023b6:	4602      	mov	r2, r0
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2101      	movs	r1, #1
 80023bc:	9100      	str	r1, [sp, #0]
 80023be:	4621      	mov	r1, r4
 80023c0:	205c      	movs	r0, #92	@ 0x5c
 80023c2:	f003 fa55 	bl	8005870 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 80023c6:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3734      	adds	r7, #52	@ 0x34
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd90      	pop	{r4, r7, pc}
 80023d0:	e000ed04 	.word	0xe000ed04

080023d4 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b086      	sub	sp, #24
 80023d8:	af00      	add	r7, sp, #0
 80023da:	60f8      	str	r0, [r7, #12]
 80023dc:	60b9      	str	r1, [r7, #8]
 80023de:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80023e0:	2300      	movs	r3, #0
 80023e2:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023e8:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d10d      	bne.n	800240e <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d14d      	bne.n	8002496 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	4618      	mov	r0, r3
 8002400:	f000 fef0 	bl	80031e4 <xTaskPriorityDisinherit>
 8002404:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	2200      	movs	r2, #0
 800240a:	609a      	str	r2, [r3, #8]
 800240c:	e043      	b.n	8002496 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d119      	bne.n	8002448 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	6858      	ldr	r0, [r3, #4]
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800241c:	461a      	mov	r2, r3
 800241e:	68b9      	ldr	r1, [r7, #8]
 8002420:	f004 f90c 	bl	800663c <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	685a      	ldr	r2, [r3, #4]
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800242c:	441a      	add	r2, r3
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	685a      	ldr	r2, [r3, #4]
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	429a      	cmp	r2, r3
 800243c:	d32b      	bcc.n	8002496 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	605a      	str	r2, [r3, #4]
 8002446:	e026      	b.n	8002496 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	68d8      	ldr	r0, [r3, #12]
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002450:	461a      	mov	r2, r3
 8002452:	68b9      	ldr	r1, [r7, #8]
 8002454:	f004 f8f2 	bl	800663c <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	68da      	ldr	r2, [r3, #12]
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002460:	425b      	negs	r3, r3
 8002462:	441a      	add	r2, r3
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	68da      	ldr	r2, [r3, #12]
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	429a      	cmp	r2, r3
 8002472:	d207      	bcs.n	8002484 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	689a      	ldr	r2, [r3, #8]
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800247c:	425b      	negs	r3, r3
 800247e:	441a      	add	r2, r3
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2b02      	cmp	r3, #2
 8002488:	d105      	bne.n	8002496 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d002      	beq.n	8002496 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	3b01      	subs	r3, #1
 8002494:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	1c5a      	adds	r2, r3, #1
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 800249e:	697b      	ldr	r3, [r7, #20]
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3718      	adds	r7, #24
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}

080024a8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d018      	beq.n	80024ec <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	68da      	ldr	r2, [r3, #12]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024c2:	441a      	add	r2, r3
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	68da      	ldr	r2, [r3, #12]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d303      	bcc.n	80024dc <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	68d9      	ldr	r1, [r3, #12]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024e4:	461a      	mov	r2, r3
 80024e6:	6838      	ldr	r0, [r7, #0]
 80024e8:	f004 f8a8 	bl	800663c <memcpy>
    }
}
 80024ec:	bf00      	nop
 80024ee:	3708      	adds	r7, #8
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}

080024f4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80024fc:	f001 fc3e 	bl	8003d7c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002506:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002508:	e011      	b.n	800252e <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800250e:	2b00      	cmp	r3, #0
 8002510:	d012      	beq.n	8002538 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	3324      	adds	r3, #36	@ 0x24
 8002516:	4618      	mov	r0, r3
 8002518:	f000 fca8 	bl	8002e6c <xTaskRemoveFromEventList>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d001      	beq.n	8002526 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8002522:	f000 fd89 	bl	8003038 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002526:	7bfb      	ldrb	r3, [r7, #15]
 8002528:	3b01      	subs	r3, #1
 800252a:	b2db      	uxtb	r3, r3
 800252c:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800252e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002532:	2b00      	cmp	r3, #0
 8002534:	dce9      	bgt.n	800250a <prvUnlockQueue+0x16>
 8002536:	e000      	b.n	800253a <prvUnlockQueue+0x46>
                        break;
 8002538:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	22ff      	movs	r2, #255	@ 0xff
 800253e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8002542:	f001 fc4d 	bl	8003de0 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002546:	f001 fc19 	bl	8003d7c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002550:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002552:	e011      	b.n	8002578 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	691b      	ldr	r3, [r3, #16]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d012      	beq.n	8002582 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	3310      	adds	r3, #16
 8002560:	4618      	mov	r0, r3
 8002562:	f000 fc83 	bl	8002e6c <xTaskRemoveFromEventList>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d001      	beq.n	8002570 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800256c:	f000 fd64 	bl	8003038 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002570:	7bbb      	ldrb	r3, [r7, #14]
 8002572:	3b01      	subs	r3, #1
 8002574:	b2db      	uxtb	r3, r3
 8002576:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002578:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800257c:	2b00      	cmp	r3, #0
 800257e:	dce9      	bgt.n	8002554 <prvUnlockQueue+0x60>
 8002580:	e000      	b.n	8002584 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002582:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	22ff      	movs	r2, #255	@ 0xff
 8002588:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 800258c:	f001 fc28 	bl	8003de0 <vPortExitCritical>
}
 8002590:	bf00      	nop
 8002592:	3710      	adds	r7, #16
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}

08002598 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b084      	sub	sp, #16
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80025a0:	f001 fbec 	bl	8003d7c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d102      	bne.n	80025b2 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80025ac:	2301      	movs	r3, #1
 80025ae:	60fb      	str	r3, [r7, #12]
 80025b0:	e001      	b.n	80025b6 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80025b2:	2300      	movs	r3, #0
 80025b4:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80025b6:	f001 fc13 	bl	8003de0 <vPortExitCritical>

    return xReturn;
 80025ba:	68fb      	ldr	r3, [r7, #12]
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3710      	adds	r7, #16
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}

080025c4 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b084      	sub	sp, #16
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80025cc:	f001 fbd6 	bl	8003d7c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025d8:	429a      	cmp	r2, r3
 80025da:	d102      	bne.n	80025e2 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80025dc:	2301      	movs	r3, #1
 80025de:	60fb      	str	r3, [r7, #12]
 80025e0:	e001      	b.n	80025e6 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80025e2:	2300      	movs	r3, #0
 80025e4:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80025e6:	f001 fbfb 	bl	8003de0 <vPortExitCritical>

    return xReturn;
 80025ea:	68fb      	ldr	r3, [r7, #12]
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3710      	adds	r7, #16
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}

080025f4 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80025fe:	2300      	movs	r3, #0
 8002600:	60fb      	str	r3, [r7, #12]
 8002602:	e01e      	b.n	8002642 <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002604:	4a13      	ldr	r2, [pc, #76]	@ (8002654 <vQueueAddToRegistry+0x60>)
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d115      	bne.n	800263c <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002610:	4910      	ldr	r1, [pc, #64]	@ (8002654 <vQueueAddToRegistry+0x60>)
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	683a      	ldr	r2, [r7, #0]
 8002616:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 800261a:	4a0e      	ldr	r2, [pc, #56]	@ (8002654 <vQueueAddToRegistry+0x60>)
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	00db      	lsls	r3, r3, #3
 8002620:	4413      	add	r3, r2
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4618      	mov	r0, r3
 800262a:	f003 fe37 	bl	800629c <SEGGER_SYSVIEW_ShrinkId>
 800262e:	4601      	mov	r1, r0
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	461a      	mov	r2, r3
 8002634:	2071      	movs	r0, #113	@ 0x71
 8002636:	f003 f84b 	bl	80056d0 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 800263a:	e006      	b.n	800264a <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	3301      	adds	r3, #1
 8002640:	60fb      	str	r3, [r7, #12]
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2b07      	cmp	r3, #7
 8002646:	d9dd      	bls.n	8002604 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002648:	bf00      	nop
 800264a:	bf00      	nop
 800264c:	3710      	adds	r7, #16
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	200000c8 	.word	0x200000c8

08002658 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002658:	b580      	push	{r7, lr}
 800265a:	b086      	sub	sp, #24
 800265c:	af00      	add	r7, sp, #0
 800265e:	60f8      	str	r0, [r7, #12]
 8002660:	60b9      	str	r1, [r7, #8]
 8002662:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002668:	f001 fb88 	bl	8003d7c <vPortEnterCritical>
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002672:	b25b      	sxtb	r3, r3
 8002674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002678:	d103      	bne.n	8002682 <vQueueWaitForMessageRestricted+0x2a>
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	2200      	movs	r2, #0
 800267e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002688:	b25b      	sxtb	r3, r3
 800268a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800268e:	d103      	bne.n	8002698 <vQueueWaitForMessageRestricted+0x40>
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	2200      	movs	r2, #0
 8002694:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002698:	f001 fba2 	bl	8003de0 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d106      	bne.n	80026b2 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	3324      	adds	r3, #36	@ 0x24
 80026a8:	687a      	ldr	r2, [r7, #4]
 80026aa:	68b9      	ldr	r1, [r7, #8]
 80026ac:	4618      	mov	r0, r3
 80026ae:	f000 fbad 	bl	8002e0c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80026b2:	6978      	ldr	r0, [r7, #20]
 80026b4:	f7ff ff1e 	bl	80024f4 <prvUnlockQueue>
    }
 80026b8:	bf00      	nop
 80026ba:	3718      	adds	r7, #24
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}

080026c0 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b08c      	sub	sp, #48	@ 0x30
 80026c4:	af04      	add	r7, sp, #16
 80026c6:	60f8      	str	r0, [r7, #12]
 80026c8:	60b9      	str	r1, [r7, #8]
 80026ca:	603b      	str	r3, [r7, #0]
 80026cc:	4613      	mov	r3, r2
 80026ce:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80026d0:	88fb      	ldrh	r3, [r7, #6]
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	4618      	mov	r0, r3
 80026d6:	f001 fc83 	bl	8003fe0 <pvPortMalloc>
 80026da:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d00e      	beq.n	8002700 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80026e2:	2058      	movs	r0, #88	@ 0x58
 80026e4:	f001 fc7c 	bl	8003fe0 <pvPortMalloc>
 80026e8:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d003      	beq.n	80026f8 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	697a      	ldr	r2, [r7, #20]
 80026f4:	631a      	str	r2, [r3, #48]	@ 0x30
 80026f6:	e005      	b.n	8002704 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 80026f8:	6978      	ldr	r0, [r7, #20]
 80026fa:	f001 fd53 	bl	80041a4 <vPortFree>
 80026fe:	e001      	b.n	8002704 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002700:	2300      	movs	r3, #0
 8002702:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d013      	beq.n	8002732 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800270a:	88fa      	ldrh	r2, [r7, #6]
 800270c:	2300      	movs	r3, #0
 800270e:	9303      	str	r3, [sp, #12]
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	9302      	str	r3, [sp, #8]
 8002714:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002716:	9301      	str	r3, [sp, #4]
 8002718:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800271a:	9300      	str	r3, [sp, #0]
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	68b9      	ldr	r1, [r7, #8]
 8002720:	68f8      	ldr	r0, [r7, #12]
 8002722:	f000 f80e 	bl	8002742 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002726:	69f8      	ldr	r0, [r7, #28]
 8002728:	f000 f8a2 	bl	8002870 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800272c:	2301      	movs	r3, #1
 800272e:	61bb      	str	r3, [r7, #24]
 8002730:	e002      	b.n	8002738 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002732:	f04f 33ff 	mov.w	r3, #4294967295
 8002736:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002738:	69bb      	ldr	r3, [r7, #24]
    }
 800273a:	4618      	mov	r0, r3
 800273c:	3720      	adds	r7, #32
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}

08002742 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002742:	b580      	push	{r7, lr}
 8002744:	b088      	sub	sp, #32
 8002746:	af00      	add	r7, sp, #0
 8002748:	60f8      	str	r0, [r7, #12]
 800274a:	60b9      	str	r1, [r7, #8]
 800274c:	607a      	str	r2, [r7, #4]
 800274e:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002750:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002752:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	461a      	mov	r2, r3
 800275a:	21a5      	movs	r1, #165	@ 0xa5
 800275c:	f003 ff40 	bl	80065e0 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002760:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002762:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800276a:	3b01      	subs	r3, #1
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	4413      	add	r3, r2
 8002770:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002772:	69bb      	ldr	r3, [r7, #24]
 8002774:	f023 0307 	bic.w	r3, r3, #7
 8002778:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800277a:	69bb      	ldr	r3, [r7, #24]
 800277c:	f003 0307 	and.w	r3, r3, #7
 8002780:	2b00      	cmp	r3, #0
 8002782:	d00b      	beq.n	800279c <prvInitialiseNewTask+0x5a>
        __asm volatile
 8002784:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002788:	f383 8811 	msr	BASEPRI, r3
 800278c:	f3bf 8f6f 	isb	sy
 8002790:	f3bf 8f4f 	dsb	sy
 8002794:	617b      	str	r3, [r7, #20]
    }
 8002796:	bf00      	nop
 8002798:	bf00      	nop
 800279a:	e7fd      	b.n	8002798 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d01f      	beq.n	80027e2 <prvInitialiseNewTask+0xa0>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80027a2:	2300      	movs	r3, #0
 80027a4:	61fb      	str	r3, [r7, #28]
 80027a6:	e012      	b.n	80027ce <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80027a8:	68ba      	ldr	r2, [r7, #8]
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	4413      	add	r3, r2
 80027ae:	7819      	ldrb	r1, [r3, #0]
 80027b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	4413      	add	r3, r2
 80027b6:	3334      	adds	r3, #52	@ 0x34
 80027b8:	460a      	mov	r2, r1
 80027ba:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80027bc:	68ba      	ldr	r2, [r7, #8]
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	4413      	add	r3, r2
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d006      	beq.n	80027d6 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	3301      	adds	r3, #1
 80027cc:	61fb      	str	r3, [r7, #28]
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	2b09      	cmp	r3, #9
 80027d2:	d9e9      	bls.n	80027a8 <prvInitialiseNewTask+0x66>
 80027d4:	e000      	b.n	80027d8 <prvInitialiseNewTask+0x96>
            {
                break;
 80027d6:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80027d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027da:	2200      	movs	r2, #0
 80027dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80027e0:	e003      	b.n	80027ea <prvInitialiseNewTask+0xa8>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80027e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027e4:	2200      	movs	r2, #0
 80027e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80027ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027ec:	2b04      	cmp	r3, #4
 80027ee:	d901      	bls.n	80027f4 <prvInitialiseNewTask+0xb2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80027f0:	2304      	movs	r3, #4
 80027f2:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80027f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80027f8:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80027fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80027fe:	649a      	str	r2, [r3, #72]	@ 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002800:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002802:	2200      	movs	r2, #0
 8002804:	64da      	str	r2, [r3, #76]	@ 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002808:	3304      	adds	r3, #4
 800280a:	4618      	mov	r0, r3
 800280c:	f7ff f98a 	bl	8001b24 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002812:	3318      	adds	r3, #24
 8002814:	4618      	mov	r0, r3
 8002816:	f7ff f985 	bl	8001b24 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800281a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800281c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800281e:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002820:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002822:	f1c3 0205 	rsb	r2, r3, #5
 8002826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002828:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800282a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800282c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800282e:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002830:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002832:	3350      	adds	r3, #80	@ 0x50
 8002834:	2204      	movs	r2, #4
 8002836:	2100      	movs	r1, #0
 8002838:	4618      	mov	r0, r3
 800283a:	f003 fed1 	bl	80065e0 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 800283e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002840:	3354      	adds	r3, #84	@ 0x54
 8002842:	2201      	movs	r2, #1
 8002844:	2100      	movs	r1, #0
 8002846:	4618      	mov	r0, r3
 8002848:	f003 feca 	bl	80065e0 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800284c:	683a      	ldr	r2, [r7, #0]
 800284e:	68f9      	ldr	r1, [r7, #12]
 8002850:	69b8      	ldr	r0, [r7, #24]
 8002852:	f001 f8df 	bl	8003a14 <pxPortInitialiseStack>
 8002856:	4602      	mov	r2, r0
 8002858:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800285a:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800285c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800285e:	2b00      	cmp	r3, #0
 8002860:	d002      	beq.n	8002868 <prvInitialiseNewTask+0x126>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002862:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002864:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002866:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002868:	bf00      	nop
 800286a:	3720      	adds	r7, #32
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}

08002870 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002870:	b5b0      	push	{r4, r5, r7, lr}
 8002872:	b084      	sub	sp, #16
 8002874:	af02      	add	r7, sp, #8
 8002876:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002878:	f001 fa80 	bl	8003d7c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800287c:	4b35      	ldr	r3, [pc, #212]	@ (8002954 <prvAddNewTaskToReadyList+0xe4>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	3301      	adds	r3, #1
 8002882:	4a34      	ldr	r2, [pc, #208]	@ (8002954 <prvAddNewTaskToReadyList+0xe4>)
 8002884:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002886:	4b34      	ldr	r3, [pc, #208]	@ (8002958 <prvAddNewTaskToReadyList+0xe8>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d109      	bne.n	80028a2 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800288e:	4a32      	ldr	r2, [pc, #200]	@ (8002958 <prvAddNewTaskToReadyList+0xe8>)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002894:	4b2f      	ldr	r3, [pc, #188]	@ (8002954 <prvAddNewTaskToReadyList+0xe4>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	2b01      	cmp	r3, #1
 800289a:	d110      	bne.n	80028be <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800289c:	f000 fbea 	bl	8003074 <prvInitialiseTaskLists>
 80028a0:	e00d      	b.n	80028be <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80028a2:	4b2e      	ldr	r3, [pc, #184]	@ (800295c <prvAddNewTaskToReadyList+0xec>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d109      	bne.n	80028be <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80028aa:	4b2b      	ldr	r3, [pc, #172]	@ (8002958 <prvAddNewTaskToReadyList+0xe8>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d802      	bhi.n	80028be <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80028b8:	4a27      	ldr	r2, [pc, #156]	@ (8002958 <prvAddNewTaskToReadyList+0xe8>)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80028be:	4b28      	ldr	r3, [pc, #160]	@ (8002960 <prvAddNewTaskToReadyList+0xf0>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	3301      	adds	r3, #1
 80028c4:	4a26      	ldr	r2, [pc, #152]	@ (8002960 <prvAddNewTaskToReadyList+0xf0>)
 80028c6:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80028c8:	4b25      	ldr	r3, [pc, #148]	@ (8002960 <prvAddNewTaskToReadyList+0xf0>)
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	641a      	str	r2, [r3, #64]	@ 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d016      	beq.n	8002904 <prvAddNewTaskToReadyList+0x94>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4618      	mov	r0, r3
 80028da:	f003 fbb9 	bl	8006050 <SEGGER_SYSVIEW_OnTaskCreate>
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ee:	461d      	mov	r5, r3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	461c      	mov	r4, r3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028fa:	1ae3      	subs	r3, r4, r3
 80028fc:	9300      	str	r3, [sp, #0]
 80028fe:	462b      	mov	r3, r5
 8002900:	f001 fe20 	bl	8004544 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	4618      	mov	r0, r3
 8002908:	f003 fc26 	bl	8006158 <SEGGER_SYSVIEW_OnTaskStartReady>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002910:	2201      	movs	r2, #1
 8002912:	409a      	lsls	r2, r3
 8002914:	4b13      	ldr	r3, [pc, #76]	@ (8002964 <prvAddNewTaskToReadyList+0xf4>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4313      	orrs	r3, r2
 800291a:	4a12      	ldr	r2, [pc, #72]	@ (8002964 <prvAddNewTaskToReadyList+0xf4>)
 800291c:	6013      	str	r3, [r2, #0]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002922:	4613      	mov	r3, r2
 8002924:	009b      	lsls	r3, r3, #2
 8002926:	4413      	add	r3, r2
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	4a0f      	ldr	r2, [pc, #60]	@ (8002968 <prvAddNewTaskToReadyList+0xf8>)
 800292c:	441a      	add	r2, r3
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	3304      	adds	r3, #4
 8002932:	4619      	mov	r1, r3
 8002934:	4610      	mov	r0, r2
 8002936:	f7ff f902 	bl	8001b3e <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800293a:	f001 fa51 	bl	8003de0 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800293e:	4b07      	ldr	r3, [pc, #28]	@ (800295c <prvAddNewTaskToReadyList+0xec>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d001      	beq.n	800294a <prvAddNewTaskToReadyList+0xda>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002946:	4b04      	ldr	r3, [pc, #16]	@ (8002958 <prvAddNewTaskToReadyList+0xe8>)
 8002948:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800294a:	bf00      	nop
 800294c:	3708      	adds	r7, #8
 800294e:	46bd      	mov	sp, r7
 8002950:	bdb0      	pop	{r4, r5, r7, pc}
 8002952:	bf00      	nop
 8002954:	200001e0 	.word	0x200001e0
 8002958:	20000108 	.word	0x20000108
 800295c:	200001ec 	.word	0x200001ec
 8002960:	200001fc 	.word	0x200001fc
 8002964:	200001e8 	.word	0x200001e8
 8002968:	2000010c 	.word	0x2000010c

0800296c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b086      	sub	sp, #24
 8002970:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002972:	4b27      	ldr	r3, [pc, #156]	@ (8002a10 <vTaskStartScheduler+0xa4>)
 8002974:	9301      	str	r3, [sp, #4]
 8002976:	2300      	movs	r3, #0
 8002978:	9300      	str	r3, [sp, #0]
 800297a:	2300      	movs	r3, #0
 800297c:	2282      	movs	r2, #130	@ 0x82
 800297e:	4925      	ldr	r1, [pc, #148]	@ (8002a14 <vTaskStartScheduler+0xa8>)
 8002980:	4825      	ldr	r0, [pc, #148]	@ (8002a18 <vTaskStartScheduler+0xac>)
 8002982:	f7ff fe9d 	bl	80026c0 <xTaskCreate>
 8002986:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2b01      	cmp	r3, #1
 800298c:	d102      	bne.n	8002994 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 800298e:	f000 fd23 	bl	80033d8 <xTimerCreateTimerTask>
 8002992:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2b01      	cmp	r3, #1
 8002998:	d124      	bne.n	80029e4 <vTaskStartScheduler+0x78>
        __asm volatile
 800299a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800299e:	f383 8811 	msr	BASEPRI, r3
 80029a2:	f3bf 8f6f 	isb	sy
 80029a6:	f3bf 8f4f 	dsb	sy
 80029aa:	60bb      	str	r3, [r7, #8]
    }
 80029ac:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80029ae:	4b1b      	ldr	r3, [pc, #108]	@ (8002a1c <vTaskStartScheduler+0xb0>)
 80029b0:	f04f 32ff 	mov.w	r2, #4294967295
 80029b4:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80029b6:	4b1a      	ldr	r3, [pc, #104]	@ (8002a20 <vTaskStartScheduler+0xb4>)
 80029b8:	2201      	movs	r2, #1
 80029ba:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80029bc:	4b19      	ldr	r3, [pc, #100]	@ (8002a24 <vTaskStartScheduler+0xb8>)
 80029be:	2200      	movs	r2, #0
 80029c0:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80029c2:	4b19      	ldr	r3, [pc, #100]	@ (8002a28 <vTaskStartScheduler+0xbc>)
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	4b12      	ldr	r3, [pc, #72]	@ (8002a10 <vTaskStartScheduler+0xa4>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d102      	bne.n	80029d4 <vTaskStartScheduler+0x68>
 80029ce:	f003 fb23 	bl	8006018 <SEGGER_SYSVIEW_OnIdle>
 80029d2:	e004      	b.n	80029de <vTaskStartScheduler+0x72>
 80029d4:	4b14      	ldr	r3, [pc, #80]	@ (8002a28 <vTaskStartScheduler+0xbc>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4618      	mov	r0, r3
 80029da:	f003 fb7b 	bl	80060d4 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80029de:	f001 f8a9 	bl	8003b34 <xPortStartScheduler>
 80029e2:	e00f      	b.n	8002a04 <vTaskStartScheduler+0x98>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029ea:	d10b      	bne.n	8002a04 <vTaskStartScheduler+0x98>
        __asm volatile
 80029ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029f0:	f383 8811 	msr	BASEPRI, r3
 80029f4:	f3bf 8f6f 	isb	sy
 80029f8:	f3bf 8f4f 	dsb	sy
 80029fc:	607b      	str	r3, [r7, #4]
    }
 80029fe:	bf00      	nop
 8002a00:	bf00      	nop
 8002a02:	e7fd      	b.n	8002a00 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002a04:	4b09      	ldr	r3, [pc, #36]	@ (8002a2c <vTaskStartScheduler+0xc0>)
 8002a06:	681b      	ldr	r3, [r3, #0]
}
 8002a08:	bf00      	nop
 8002a0a:	3710      	adds	r7, #16
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	20000204 	.word	0x20000204
 8002a14:	08006f48 	.word	0x08006f48
 8002a18:	08003051 	.word	0x08003051
 8002a1c:	20000200 	.word	0x20000200
 8002a20:	200001ec 	.word	0x200001ec
 8002a24:	200001e4 	.word	0x200001e4
 8002a28:	20000108 	.word	0x20000108
 8002a2c:	08007034 	.word	0x08007034

08002a30 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002a30:	b480      	push	{r7}
 8002a32:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002a34:	4b04      	ldr	r3, [pc, #16]	@ (8002a48 <vTaskSuspendAll+0x18>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	3301      	adds	r3, #1
 8002a3a:	4a03      	ldr	r2, [pc, #12]	@ (8002a48 <vTaskSuspendAll+0x18>)
 8002a3c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002a3e:	bf00      	nop
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr
 8002a48:	20000208 	.word	0x20000208

08002a4c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002a52:	2300      	movs	r3, #0
 8002a54:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002a56:	2300      	movs	r3, #0
 8002a58:	607b      	str	r3, [r7, #4]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002a5a:	4b3e      	ldr	r3, [pc, #248]	@ (8002b54 <xTaskResumeAll+0x108>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d10b      	bne.n	8002a7a <xTaskResumeAll+0x2e>
        __asm volatile
 8002a62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a66:	f383 8811 	msr	BASEPRI, r3
 8002a6a:	f3bf 8f6f 	isb	sy
 8002a6e:	f3bf 8f4f 	dsb	sy
 8002a72:	603b      	str	r3, [r7, #0]
    }
 8002a74:	bf00      	nop
 8002a76:	bf00      	nop
 8002a78:	e7fd      	b.n	8002a76 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002a7a:	f001 f97f 	bl	8003d7c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002a7e:	4b35      	ldr	r3, [pc, #212]	@ (8002b54 <xTaskResumeAll+0x108>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	3b01      	subs	r3, #1
 8002a84:	4a33      	ldr	r2, [pc, #204]	@ (8002b54 <xTaskResumeAll+0x108>)
 8002a86:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002a88:	4b32      	ldr	r3, [pc, #200]	@ (8002b54 <xTaskResumeAll+0x108>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d159      	bne.n	8002b44 <xTaskResumeAll+0xf8>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002a90:	4b31      	ldr	r3, [pc, #196]	@ (8002b58 <xTaskResumeAll+0x10c>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d055      	beq.n	8002b44 <xTaskResumeAll+0xf8>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002a98:	e032      	b.n	8002b00 <xTaskResumeAll+0xb4>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002a9a:	4b30      	ldr	r3, [pc, #192]	@ (8002b5c <xTaskResumeAll+0x110>)
 8002a9c:	68db      	ldr	r3, [r3, #12]
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	3318      	adds	r3, #24
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f7ff f8a6 	bl	8001bf8 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	3304      	adds	r3, #4
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f7ff f8a1 	bl	8001bf8 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f003 fb4d 	bl	8006158 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	409a      	lsls	r2, r3
 8002ac6:	4b26      	ldr	r3, [pc, #152]	@ (8002b60 <xTaskResumeAll+0x114>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4313      	orrs	r3, r2
 8002acc:	4a24      	ldr	r2, [pc, #144]	@ (8002b60 <xTaskResumeAll+0x114>)
 8002ace:	6013      	str	r3, [r2, #0]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ad4:	4613      	mov	r3, r2
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	4413      	add	r3, r2
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	4a21      	ldr	r2, [pc, #132]	@ (8002b64 <xTaskResumeAll+0x118>)
 8002ade:	441a      	add	r2, r3
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	3304      	adds	r3, #4
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	4610      	mov	r0, r2
 8002ae8:	f7ff f829 	bl	8001b3e <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002af0:	4b1d      	ldr	r3, [pc, #116]	@ (8002b68 <xTaskResumeAll+0x11c>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d302      	bcc.n	8002b00 <xTaskResumeAll+0xb4>
                    {
                        xYieldPending = pdTRUE;
 8002afa:	4b1c      	ldr	r3, [pc, #112]	@ (8002b6c <xTaskResumeAll+0x120>)
 8002afc:	2201      	movs	r2, #1
 8002afe:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002b00:	4b16      	ldr	r3, [pc, #88]	@ (8002b5c <xTaskResumeAll+0x110>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d1c8      	bne.n	8002a9a <xTaskResumeAll+0x4e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d001      	beq.n	8002b12 <xTaskResumeAll+0xc6>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002b0e:	f000 fb2f 	bl	8003170 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002b12:	4b17      	ldr	r3, [pc, #92]	@ (8002b70 <xTaskResumeAll+0x124>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	60bb      	str	r3, [r7, #8]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d010      	beq.n	8002b40 <xTaskResumeAll+0xf4>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002b1e:	f000 f84b 	bl	8002bb8 <xTaskIncrementTick>
 8002b22:	4603      	mov	r3, r0
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d002      	beq.n	8002b2e <xTaskResumeAll+0xe2>
                            {
                                xYieldPending = pdTRUE;
 8002b28:	4b10      	ldr	r3, [pc, #64]	@ (8002b6c <xTaskResumeAll+0x120>)
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	3b01      	subs	r3, #1
 8002b32:	60bb      	str	r3, [r7, #8]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d1f1      	bne.n	8002b1e <xTaskResumeAll+0xd2>

                        xPendedTicks = 0;
 8002b3a:	4b0d      	ldr	r3, [pc, #52]	@ (8002b70 <xTaskResumeAll+0x124>)
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002b40:	4b0a      	ldr	r3, [pc, #40]	@ (8002b6c <xTaskResumeAll+0x120>)
 8002b42:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002b44:	f001 f94c 	bl	8003de0 <vPortExitCritical>

    return xAlreadyYielded;
 8002b48:	687b      	ldr	r3, [r7, #4]
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3710      	adds	r7, #16
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	20000208 	.word	0x20000208
 8002b58:	200001e0 	.word	0x200001e0
 8002b5c:	200001a0 	.word	0x200001a0
 8002b60:	200001e8 	.word	0x200001e8
 8002b64:	2000010c 	.word	0x2000010c
 8002b68:	20000108 	.word	0x20000108
 8002b6c:	200001f4 	.word	0x200001f4
 8002b70:	200001f0 	.word	0x200001f0

08002b74 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8002b7a:	4b05      	ldr	r3, [pc, #20]	@ (8002b90 <xTaskGetTickCount+0x1c>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8002b80:	687b      	ldr	r3, [r7, #4]
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	370c      	adds	r7, #12
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr
 8002b8e:	bf00      	nop
 8002b90:	200001e4 	.word	0x200001e4

08002b94 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b082      	sub	sp, #8
 8002b98:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002b9a:	f001 f9df 	bl	8003f5c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8002ba2:	4b04      	ldr	r3, [pc, #16]	@ (8002bb4 <xTaskGetTickCountFromISR+0x20>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002ba8:	683b      	ldr	r3, [r7, #0]
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3708      	adds	r7, #8
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	200001e4 	.word	0x200001e4

08002bb8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b086      	sub	sp, #24
 8002bbc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002bc2:	4b41      	ldr	r3, [pc, #260]	@ (8002cc8 <xTaskIncrementTick+0x110>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d174      	bne.n	8002cb4 <xTaskIncrementTick+0xfc>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002bca:	4b40      	ldr	r3, [pc, #256]	@ (8002ccc <xTaskIncrementTick+0x114>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	3301      	adds	r3, #1
 8002bd0:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002bd2:	4a3e      	ldr	r2, [pc, #248]	@ (8002ccc <xTaskIncrementTick+0x114>)
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d121      	bne.n	8002c22 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002bde:	4b3c      	ldr	r3, [pc, #240]	@ (8002cd0 <xTaskIncrementTick+0x118>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d00b      	beq.n	8002c00 <xTaskIncrementTick+0x48>
        __asm volatile
 8002be8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bec:	f383 8811 	msr	BASEPRI, r3
 8002bf0:	f3bf 8f6f 	isb	sy
 8002bf4:	f3bf 8f4f 	dsb	sy
 8002bf8:	603b      	str	r3, [r7, #0]
    }
 8002bfa:	bf00      	nop
 8002bfc:	bf00      	nop
 8002bfe:	e7fd      	b.n	8002bfc <xTaskIncrementTick+0x44>
 8002c00:	4b33      	ldr	r3, [pc, #204]	@ (8002cd0 <xTaskIncrementTick+0x118>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	60fb      	str	r3, [r7, #12]
 8002c06:	4b33      	ldr	r3, [pc, #204]	@ (8002cd4 <xTaskIncrementTick+0x11c>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a31      	ldr	r2, [pc, #196]	@ (8002cd0 <xTaskIncrementTick+0x118>)
 8002c0c:	6013      	str	r3, [r2, #0]
 8002c0e:	4a31      	ldr	r2, [pc, #196]	@ (8002cd4 <xTaskIncrementTick+0x11c>)
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	6013      	str	r3, [r2, #0]
 8002c14:	4b30      	ldr	r3, [pc, #192]	@ (8002cd8 <xTaskIncrementTick+0x120>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	3301      	adds	r3, #1
 8002c1a:	4a2f      	ldr	r2, [pc, #188]	@ (8002cd8 <xTaskIncrementTick+0x120>)
 8002c1c:	6013      	str	r3, [r2, #0]
 8002c1e:	f000 faa7 	bl	8003170 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002c22:	4b2e      	ldr	r3, [pc, #184]	@ (8002cdc <xTaskIncrementTick+0x124>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	693a      	ldr	r2, [r7, #16]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d348      	bcc.n	8002cbe <xTaskIncrementTick+0x106>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002c2c:	4b28      	ldr	r3, [pc, #160]	@ (8002cd0 <xTaskIncrementTick+0x118>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d104      	bne.n	8002c40 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c36:	4b29      	ldr	r3, [pc, #164]	@ (8002cdc <xTaskIncrementTick+0x124>)
 8002c38:	f04f 32ff 	mov.w	r2, #4294967295
 8002c3c:	601a      	str	r2, [r3, #0]
                    break;
 8002c3e:	e03e      	b.n	8002cbe <xTaskIncrementTick+0x106>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002c40:	4b23      	ldr	r3, [pc, #140]	@ (8002cd0 <xTaskIncrementTick+0x118>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	68db      	ldr	r3, [r3, #12]
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8002c50:	693a      	ldr	r2, [r7, #16]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d203      	bcs.n	8002c60 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002c58:	4a20      	ldr	r2, [pc, #128]	@ (8002cdc <xTaskIncrementTick+0x124>)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002c5e:	e02e      	b.n	8002cbe <xTaskIncrementTick+0x106>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	3304      	adds	r3, #4
 8002c64:	4618      	mov	r0, r3
 8002c66:	f7fe ffc7 	bl	8001bf8 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d004      	beq.n	8002c7c <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	3318      	adds	r3, #24
 8002c76:	4618      	mov	r0, r3
 8002c78:	f7fe ffbe 	bl	8001bf8 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f003 fa6a 	bl	8006158 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c88:	2201      	movs	r2, #1
 8002c8a:	409a      	lsls	r2, r3
 8002c8c:	4b14      	ldr	r3, [pc, #80]	@ (8002ce0 <xTaskIncrementTick+0x128>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4313      	orrs	r3, r2
 8002c92:	4a13      	ldr	r2, [pc, #76]	@ (8002ce0 <xTaskIncrementTick+0x128>)
 8002c94:	6013      	str	r3, [r2, #0]
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	4413      	add	r3, r2
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	4a10      	ldr	r2, [pc, #64]	@ (8002ce4 <xTaskIncrementTick+0x12c>)
 8002ca4:	441a      	add	r2, r3
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	3304      	adds	r3, #4
 8002caa:	4619      	mov	r1, r3
 8002cac:	4610      	mov	r0, r2
 8002cae:	f7fe ff46 	bl	8001b3e <vListInsertEnd>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002cb2:	e7bb      	b.n	8002c2c <xTaskIncrementTick+0x74>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002cb4:	4b0c      	ldr	r3, [pc, #48]	@ (8002ce8 <xTaskIncrementTick+0x130>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	3301      	adds	r3, #1
 8002cba:	4a0b      	ldr	r2, [pc, #44]	@ (8002ce8 <xTaskIncrementTick+0x130>)
 8002cbc:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8002cbe:	697b      	ldr	r3, [r7, #20]
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3718      	adds	r7, #24
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	20000208 	.word	0x20000208
 8002ccc:	200001e4 	.word	0x200001e4
 8002cd0:	20000198 	.word	0x20000198
 8002cd4:	2000019c 	.word	0x2000019c
 8002cd8:	200001f8 	.word	0x200001f8
 8002cdc:	20000200 	.word	0x20000200
 8002ce0:	200001e8 	.word	0x200001e8
 8002ce4:	2000010c 	.word	0x2000010c
 8002ce8:	200001f0 	.word	0x200001f0

08002cec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b086      	sub	sp, #24
 8002cf0:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002cf2:	4b2d      	ldr	r3, [pc, #180]	@ (8002da8 <vTaskSwitchContext+0xbc>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d003      	beq.n	8002d02 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002cfa:	4b2c      	ldr	r3, [pc, #176]	@ (8002dac <vTaskSwitchContext+0xc0>)
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8002d00:	e04e      	b.n	8002da0 <vTaskSwitchContext+0xb4>
        xYieldPending = pdFALSE;
 8002d02:	4b2a      	ldr	r3, [pc, #168]	@ (8002dac <vTaskSwitchContext+0xc0>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d08:	4b29      	ldr	r3, [pc, #164]	@ (8002db0 <vTaskSwitchContext+0xc4>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	fab3 f383 	clz	r3, r3
 8002d14:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002d16:	7afb      	ldrb	r3, [r7, #11]
 8002d18:	f1c3 031f 	rsb	r3, r3, #31
 8002d1c:	617b      	str	r3, [r7, #20]
 8002d1e:	4925      	ldr	r1, [pc, #148]	@ (8002db4 <vTaskSwitchContext+0xc8>)
 8002d20:	697a      	ldr	r2, [r7, #20]
 8002d22:	4613      	mov	r3, r2
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	4413      	add	r3, r2
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	440b      	add	r3, r1
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d10b      	bne.n	8002d4a <vTaskSwitchContext+0x5e>
        __asm volatile
 8002d32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d36:	f383 8811 	msr	BASEPRI, r3
 8002d3a:	f3bf 8f6f 	isb	sy
 8002d3e:	f3bf 8f4f 	dsb	sy
 8002d42:	607b      	str	r3, [r7, #4]
    }
 8002d44:	bf00      	nop
 8002d46:	bf00      	nop
 8002d48:	e7fd      	b.n	8002d46 <vTaskSwitchContext+0x5a>
 8002d4a:	697a      	ldr	r2, [r7, #20]
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	4413      	add	r3, r2
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	4a17      	ldr	r2, [pc, #92]	@ (8002db4 <vTaskSwitchContext+0xc8>)
 8002d56:	4413      	add	r3, r2
 8002d58:	613b      	str	r3, [r7, #16]
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	685a      	ldr	r2, [r3, #4]
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	605a      	str	r2, [r3, #4]
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	685a      	ldr	r2, [r3, #4]
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	3308      	adds	r3, #8
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d104      	bne.n	8002d7a <vTaskSwitchContext+0x8e>
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	685a      	ldr	r2, [r3, #4]
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	605a      	str	r2, [r3, #4]
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	4a0d      	ldr	r2, [pc, #52]	@ (8002db8 <vTaskSwitchContext+0xcc>)
 8002d82:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8002d84:	4b0c      	ldr	r3, [pc, #48]	@ (8002db8 <vTaskSwitchContext+0xcc>)
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	4b0c      	ldr	r3, [pc, #48]	@ (8002dbc <vTaskSwitchContext+0xd0>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d102      	bne.n	8002d96 <vTaskSwitchContext+0xaa>
 8002d90:	f003 f942 	bl	8006018 <SEGGER_SYSVIEW_OnIdle>
}
 8002d94:	e004      	b.n	8002da0 <vTaskSwitchContext+0xb4>
        traceTASK_SWITCHED_IN();
 8002d96:	4b08      	ldr	r3, [pc, #32]	@ (8002db8 <vTaskSwitchContext+0xcc>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f003 f99a 	bl	80060d4 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8002da0:	bf00      	nop
 8002da2:	3718      	adds	r7, #24
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	20000208 	.word	0x20000208
 8002dac:	200001f4 	.word	0x200001f4
 8002db0:	200001e8 	.word	0x200001e8
 8002db4:	2000010c 	.word	0x2000010c
 8002db8:	20000108 	.word	0x20000108
 8002dbc:	20000204 	.word	0x20000204

08002dc0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b084      	sub	sp, #16
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d10b      	bne.n	8002de8 <vTaskPlaceOnEventList+0x28>
        __asm volatile
 8002dd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002dd4:	f383 8811 	msr	BASEPRI, r3
 8002dd8:	f3bf 8f6f 	isb	sy
 8002ddc:	f3bf 8f4f 	dsb	sy
 8002de0:	60fb      	str	r3, [r7, #12]
    }
 8002de2:	bf00      	nop
 8002de4:	bf00      	nop
 8002de6:	e7fd      	b.n	8002de4 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002de8:	4b07      	ldr	r3, [pc, #28]	@ (8002e08 <vTaskPlaceOnEventList+0x48>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	3318      	adds	r3, #24
 8002dee:	4619      	mov	r1, r3
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	f7fe fec8 	bl	8001b86 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002df6:	2101      	movs	r1, #1
 8002df8:	6838      	ldr	r0, [r7, #0]
 8002dfa:	f000 fa75 	bl	80032e8 <prvAddCurrentTaskToDelayedList>
}
 8002dfe:	bf00      	nop
 8002e00:	3710      	adds	r7, #16
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	20000108 	.word	0x20000108

08002e0c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b086      	sub	sp, #24
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	60f8      	str	r0, [r7, #12]
 8002e14:	60b9      	str	r1, [r7, #8]
 8002e16:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d10b      	bne.n	8002e36 <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
 8002e1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e22:	f383 8811 	msr	BASEPRI, r3
 8002e26:	f3bf 8f6f 	isb	sy
 8002e2a:	f3bf 8f4f 	dsb	sy
 8002e2e:	617b      	str	r3, [r7, #20]
    }
 8002e30:	bf00      	nop
 8002e32:	bf00      	nop
 8002e34:	e7fd      	b.n	8002e32 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002e36:	4b0c      	ldr	r3, [pc, #48]	@ (8002e68 <vTaskPlaceOnEventListRestricted+0x5c>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	3318      	adds	r3, #24
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	68f8      	ldr	r0, [r7, #12]
 8002e40:	f7fe fe7d 	bl	8001b3e <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d002      	beq.n	8002e50 <vTaskPlaceOnEventListRestricted+0x44>
        {
            xTicksToWait = portMAX_DELAY;
 8002e4a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e4e:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8002e50:	2024      	movs	r0, #36	@ 0x24
 8002e52:	f002 fbe3 	bl	800561c <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002e56:	6879      	ldr	r1, [r7, #4]
 8002e58:	68b8      	ldr	r0, [r7, #8]
 8002e5a:	f000 fa45 	bl	80032e8 <prvAddCurrentTaskToDelayedList>
    }
 8002e5e:	bf00      	nop
 8002e60:	3718      	adds	r7, #24
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	20000108 	.word	0x20000108

08002e6c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b086      	sub	sp, #24
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	68db      	ldr	r3, [r3, #12]
 8002e7a:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d10b      	bne.n	8002e9a <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 8002e82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e86:	f383 8811 	msr	BASEPRI, r3
 8002e8a:	f3bf 8f6f 	isb	sy
 8002e8e:	f3bf 8f4f 	dsb	sy
 8002e92:	60fb      	str	r3, [r7, #12]
    }
 8002e94:	bf00      	nop
 8002e96:	bf00      	nop
 8002e98:	e7fd      	b.n	8002e96 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	3318      	adds	r3, #24
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f7fe feaa 	bl	8001bf8 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002ea4:	4b1f      	ldr	r3, [pc, #124]	@ (8002f24 <xTaskRemoveFromEventList+0xb8>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d120      	bne.n	8002eee <xTaskRemoveFromEventList+0x82>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	3304      	adds	r3, #4
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f7fe fea1 	bl	8001bf8 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f003 f94d 	bl	8006158 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	409a      	lsls	r2, r3
 8002ec6:	4b18      	ldr	r3, [pc, #96]	@ (8002f28 <xTaskRemoveFromEventList+0xbc>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	4a16      	ldr	r2, [pc, #88]	@ (8002f28 <xTaskRemoveFromEventList+0xbc>)
 8002ece:	6013      	str	r3, [r2, #0]
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	4413      	add	r3, r2
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	4a13      	ldr	r2, [pc, #76]	@ (8002f2c <xTaskRemoveFromEventList+0xc0>)
 8002ede:	441a      	add	r2, r3
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	3304      	adds	r3, #4
 8002ee4:	4619      	mov	r1, r3
 8002ee6:	4610      	mov	r0, r2
 8002ee8:	f7fe fe29 	bl	8001b3e <vListInsertEnd>
 8002eec:	e005      	b.n	8002efa <xTaskRemoveFromEventList+0x8e>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	3318      	adds	r3, #24
 8002ef2:	4619      	mov	r1, r3
 8002ef4:	480e      	ldr	r0, [pc, #56]	@ (8002f30 <xTaskRemoveFromEventList+0xc4>)
 8002ef6:	f7fe fe22 	bl	8001b3e <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002efe:	4b0d      	ldr	r3, [pc, #52]	@ (8002f34 <xTaskRemoveFromEventList+0xc8>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d905      	bls.n	8002f14 <xTaskRemoveFromEventList+0xa8>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8002f0c:	4b0a      	ldr	r3, [pc, #40]	@ (8002f38 <xTaskRemoveFromEventList+0xcc>)
 8002f0e:	2201      	movs	r2, #1
 8002f10:	601a      	str	r2, [r3, #0]
 8002f12:	e001      	b.n	8002f18 <xTaskRemoveFromEventList+0xac>
    }
    else
    {
        xReturn = pdFALSE;
 8002f14:	2300      	movs	r3, #0
 8002f16:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8002f18:	697b      	ldr	r3, [r7, #20]
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3718      	adds	r7, #24
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	20000208 	.word	0x20000208
 8002f28:	200001e8 	.word	0x200001e8
 8002f2c:	2000010c 	.word	0x2000010c
 8002f30:	200001a0 	.word	0x200001a0
 8002f34:	20000108 	.word	0x20000108
 8002f38:	200001f4 	.word	0x200001f4

08002f3c <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b083      	sub	sp, #12
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002f44:	4b06      	ldr	r3, [pc, #24]	@ (8002f60 <vTaskInternalSetTimeOutState+0x24>)
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8002f4c:	4b05      	ldr	r3, [pc, #20]	@ (8002f64 <vTaskInternalSetTimeOutState+0x28>)
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	605a      	str	r2, [r3, #4]
}
 8002f54:	bf00      	nop
 8002f56:	370c      	adds	r7, #12
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr
 8002f60:	200001f8 	.word	0x200001f8
 8002f64:	200001e4 	.word	0x200001e4

08002f68 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b088      	sub	sp, #32
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d10b      	bne.n	8002f90 <xTaskCheckForTimeOut+0x28>
        __asm volatile
 8002f78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f7c:	f383 8811 	msr	BASEPRI, r3
 8002f80:	f3bf 8f6f 	isb	sy
 8002f84:	f3bf 8f4f 	dsb	sy
 8002f88:	613b      	str	r3, [r7, #16]
    }
 8002f8a:	bf00      	nop
 8002f8c:	bf00      	nop
 8002f8e:	e7fd      	b.n	8002f8c <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d10b      	bne.n	8002fae <xTaskCheckForTimeOut+0x46>
        __asm volatile
 8002f96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f9a:	f383 8811 	msr	BASEPRI, r3
 8002f9e:	f3bf 8f6f 	isb	sy
 8002fa2:	f3bf 8f4f 	dsb	sy
 8002fa6:	60fb      	str	r3, [r7, #12]
    }
 8002fa8:	bf00      	nop
 8002faa:	bf00      	nop
 8002fac:	e7fd      	b.n	8002faa <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 8002fae:	f000 fee5 	bl	8003d7c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8002fb2:	4b1f      	ldr	r3, [pc, #124]	@ (8003030 <xTaskCheckForTimeOut+0xc8>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	69ba      	ldr	r2, [r7, #24]
 8002fbe:	1ad3      	subs	r3, r2, r3
 8002fc0:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fca:	d102      	bne.n	8002fd2 <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	61fb      	str	r3, [r7, #28]
 8002fd0:	e026      	b.n	8003020 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	4b17      	ldr	r3, [pc, #92]	@ (8003034 <xTaskCheckForTimeOut+0xcc>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d00a      	beq.n	8002ff4 <xTaskCheckForTimeOut+0x8c>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	69ba      	ldr	r2, [r7, #24]
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d305      	bcc.n	8002ff4 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	601a      	str	r2, [r3, #0]
 8002ff2:	e015      	b.n	8003020 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	697a      	ldr	r2, [r7, #20]
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d20b      	bcs.n	8003016 <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	1ad2      	subs	r2, r2, r3
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f7ff ff96 	bl	8002f3c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003010:	2300      	movs	r3, #0
 8003012:	61fb      	str	r3, [r7, #28]
 8003014:	e004      	b.n	8003020 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	2200      	movs	r2, #0
 800301a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800301c:	2301      	movs	r3, #1
 800301e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003020:	f000 fede 	bl	8003de0 <vPortExitCritical>

    return xReturn;
 8003024:	69fb      	ldr	r3, [r7, #28]
}
 8003026:	4618      	mov	r0, r3
 8003028:	3720      	adds	r7, #32
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
 800302e:	bf00      	nop
 8003030:	200001e4 	.word	0x200001e4
 8003034:	200001f8 	.word	0x200001f8

08003038 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003038:	b480      	push	{r7}
 800303a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800303c:	4b03      	ldr	r3, [pc, #12]	@ (800304c <vTaskMissedYield+0x14>)
 800303e:	2201      	movs	r2, #1
 8003040:	601a      	str	r2, [r3, #0]
}
 8003042:	bf00      	nop
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr
 800304c:	200001f4 	.word	0x200001f4

08003050 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b082      	sub	sp, #8
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003058:	f000 f84c 	bl	80030f4 <prvCheckTasksWaitingTermination>
            {
                /* If we are not using preemption we keep forcing a task switch to
                 * see if any other task has become available.  If we are using
                 * preemption we don't need to do this as any task becoming available
                 * will automatically get the processor anyway. */
                taskYIELD();
 800305c:	4b04      	ldr	r3, [pc, #16]	@ (8003070 <prvIdleTask+0x20>)
 800305e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003062:	601a      	str	r2, [r3, #0]
 8003064:	f3bf 8f4f 	dsb	sy
 8003068:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 800306c:	bf00      	nop
 800306e:	e7f3      	b.n	8003058 <prvIdleTask+0x8>
 8003070:	e000ed04 	.word	0xe000ed04

08003074 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b082      	sub	sp, #8
 8003078:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800307a:	2300      	movs	r3, #0
 800307c:	607b      	str	r3, [r7, #4]
 800307e:	e00c      	b.n	800309a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003080:	687a      	ldr	r2, [r7, #4]
 8003082:	4613      	mov	r3, r2
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	4413      	add	r3, r2
 8003088:	009b      	lsls	r3, r3, #2
 800308a:	4a12      	ldr	r2, [pc, #72]	@ (80030d4 <prvInitialiseTaskLists+0x60>)
 800308c:	4413      	add	r3, r2
 800308e:	4618      	mov	r0, r3
 8003090:	f7fe fd28 	bl	8001ae4 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	3301      	adds	r3, #1
 8003098:	607b      	str	r3, [r7, #4]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2b04      	cmp	r3, #4
 800309e:	d9ef      	bls.n	8003080 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80030a0:	480d      	ldr	r0, [pc, #52]	@ (80030d8 <prvInitialiseTaskLists+0x64>)
 80030a2:	f7fe fd1f 	bl	8001ae4 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80030a6:	480d      	ldr	r0, [pc, #52]	@ (80030dc <prvInitialiseTaskLists+0x68>)
 80030a8:	f7fe fd1c 	bl	8001ae4 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80030ac:	480c      	ldr	r0, [pc, #48]	@ (80030e0 <prvInitialiseTaskLists+0x6c>)
 80030ae:	f7fe fd19 	bl	8001ae4 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 80030b2:	480c      	ldr	r0, [pc, #48]	@ (80030e4 <prvInitialiseTaskLists+0x70>)
 80030b4:	f7fe fd16 	bl	8001ae4 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 80030b8:	480b      	ldr	r0, [pc, #44]	@ (80030e8 <prvInitialiseTaskLists+0x74>)
 80030ba:	f7fe fd13 	bl	8001ae4 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80030be:	4b0b      	ldr	r3, [pc, #44]	@ (80030ec <prvInitialiseTaskLists+0x78>)
 80030c0:	4a05      	ldr	r2, [pc, #20]	@ (80030d8 <prvInitialiseTaskLists+0x64>)
 80030c2:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80030c4:	4b0a      	ldr	r3, [pc, #40]	@ (80030f0 <prvInitialiseTaskLists+0x7c>)
 80030c6:	4a05      	ldr	r2, [pc, #20]	@ (80030dc <prvInitialiseTaskLists+0x68>)
 80030c8:	601a      	str	r2, [r3, #0]
}
 80030ca:	bf00      	nop
 80030cc:	3708      	adds	r7, #8
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	bf00      	nop
 80030d4:	2000010c 	.word	0x2000010c
 80030d8:	20000170 	.word	0x20000170
 80030dc:	20000184 	.word	0x20000184
 80030e0:	200001a0 	.word	0x200001a0
 80030e4:	200001b4 	.word	0x200001b4
 80030e8:	200001cc 	.word	0x200001cc
 80030ec:	20000198 	.word	0x20000198
 80030f0:	2000019c 	.word	0x2000019c

080030f4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b082      	sub	sp, #8
 80030f8:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80030fa:	e019      	b.n	8003130 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 80030fc:	f000 fe3e 	bl	8003d7c <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003100:	4b10      	ldr	r3, [pc, #64]	@ (8003144 <prvCheckTasksWaitingTermination+0x50>)
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	68db      	ldr	r3, [r3, #12]
 8003106:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	3304      	adds	r3, #4
 800310c:	4618      	mov	r0, r3
 800310e:	f7fe fd73 	bl	8001bf8 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8003112:	4b0d      	ldr	r3, [pc, #52]	@ (8003148 <prvCheckTasksWaitingTermination+0x54>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	3b01      	subs	r3, #1
 8003118:	4a0b      	ldr	r2, [pc, #44]	@ (8003148 <prvCheckTasksWaitingTermination+0x54>)
 800311a:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 800311c:	4b0b      	ldr	r3, [pc, #44]	@ (800314c <prvCheckTasksWaitingTermination+0x58>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	3b01      	subs	r3, #1
 8003122:	4a0a      	ldr	r2, [pc, #40]	@ (800314c <prvCheckTasksWaitingTermination+0x58>)
 8003124:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8003126:	f000 fe5b 	bl	8003de0 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f000 f810 	bl	8003150 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003130:	4b06      	ldr	r3, [pc, #24]	@ (800314c <prvCheckTasksWaitingTermination+0x58>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d1e1      	bne.n	80030fc <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8003138:	bf00      	nop
 800313a:	bf00      	nop
 800313c:	3708      	adds	r7, #8
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}
 8003142:	bf00      	nop
 8003144:	200001b4 	.word	0x200001b4
 8003148:	200001e0 	.word	0x200001e0
 800314c:	200001c8 	.word	0x200001c8

08003150 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003150:	b580      	push	{r7, lr}
 8003152:	b082      	sub	sp, #8
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800315c:	4618      	mov	r0, r3
 800315e:	f001 f821 	bl	80041a4 <vPortFree>
                vPortFree( pxTCB );
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f001 f81e 	bl	80041a4 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003168:	bf00      	nop
 800316a:	3708      	adds	r7, #8
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}

08003170 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003170:	b480      	push	{r7}
 8003172:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003174:	4b0a      	ldr	r3, [pc, #40]	@ (80031a0 <prvResetNextTaskUnblockTime+0x30>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d104      	bne.n	8003188 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800317e:	4b09      	ldr	r3, [pc, #36]	@ (80031a4 <prvResetNextTaskUnblockTime+0x34>)
 8003180:	f04f 32ff 	mov.w	r2, #4294967295
 8003184:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003186:	e005      	b.n	8003194 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003188:	4b05      	ldr	r3, [pc, #20]	@ (80031a0 <prvResetNextTaskUnblockTime+0x30>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	68db      	ldr	r3, [r3, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a04      	ldr	r2, [pc, #16]	@ (80031a4 <prvResetNextTaskUnblockTime+0x34>)
 8003192:	6013      	str	r3, [r2, #0]
}
 8003194:	bf00      	nop
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr
 800319e:	bf00      	nop
 80031a0:	20000198 	.word	0x20000198
 80031a4:	20000200 	.word	0x20000200

080031a8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80031ae:	4b0b      	ldr	r3, [pc, #44]	@ (80031dc <xTaskGetSchedulerState+0x34>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d102      	bne.n	80031bc <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80031b6:	2301      	movs	r3, #1
 80031b8:	607b      	str	r3, [r7, #4]
 80031ba:	e008      	b.n	80031ce <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80031bc:	4b08      	ldr	r3, [pc, #32]	@ (80031e0 <xTaskGetSchedulerState+0x38>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d102      	bne.n	80031ca <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80031c4:	2302      	movs	r3, #2
 80031c6:	607b      	str	r3, [r7, #4]
 80031c8:	e001      	b.n	80031ce <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80031ca:	2300      	movs	r3, #0
 80031cc:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80031ce:	687b      	ldr	r3, [r7, #4]
    }
 80031d0:	4618      	mov	r0, r3
 80031d2:	370c      	adds	r7, #12
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr
 80031dc:	200001ec 	.word	0x200001ec
 80031e0:	20000208 	.word	0x20000208

080031e4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b086      	sub	sp, #24
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 80031f0:	2300      	movs	r3, #0
 80031f2:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d06a      	beq.n	80032d0 <xTaskPriorityDisinherit+0xec>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 80031fa:	4b38      	ldr	r3, [pc, #224]	@ (80032dc <xTaskPriorityDisinherit+0xf8>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	693a      	ldr	r2, [r7, #16]
 8003200:	429a      	cmp	r2, r3
 8003202:	d00b      	beq.n	800321c <xTaskPriorityDisinherit+0x38>
        __asm volatile
 8003204:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003208:	f383 8811 	msr	BASEPRI, r3
 800320c:	f3bf 8f6f 	isb	sy
 8003210:	f3bf 8f4f 	dsb	sy
 8003214:	60fb      	str	r3, [r7, #12]
    }
 8003216:	bf00      	nop
 8003218:	bf00      	nop
 800321a:	e7fd      	b.n	8003218 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003220:	2b00      	cmp	r3, #0
 8003222:	d10b      	bne.n	800323c <xTaskPriorityDisinherit+0x58>
        __asm volatile
 8003224:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003228:	f383 8811 	msr	BASEPRI, r3
 800322c:	f3bf 8f6f 	isb	sy
 8003230:	f3bf 8f4f 	dsb	sy
 8003234:	60bb      	str	r3, [r7, #8]
    }
 8003236:	bf00      	nop
 8003238:	bf00      	nop
 800323a:	e7fd      	b.n	8003238 <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003240:	1e5a      	subs	r2, r3, #1
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800324e:	429a      	cmp	r2, r3
 8003250:	d03e      	beq.n	80032d0 <xTaskPriorityDisinherit+0xec>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003256:	2b00      	cmp	r3, #0
 8003258:	d13a      	bne.n	80032d0 <xTaskPriorityDisinherit+0xec>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	3304      	adds	r3, #4
 800325e:	4618      	mov	r0, r3
 8003260:	f7fe fcca 	bl	8001bf8 <uxListRemove>
 8003264:	4603      	mov	r3, r0
 8003266:	2b00      	cmp	r3, #0
 8003268:	d10a      	bne.n	8003280 <xTaskPriorityDisinherit+0x9c>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800326e:	2201      	movs	r2, #1
 8003270:	fa02 f303 	lsl.w	r3, r2, r3
 8003274:	43da      	mvns	r2, r3
 8003276:	4b1a      	ldr	r3, [pc, #104]	@ (80032e0 <xTaskPriorityDisinherit+0xfc>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4013      	ands	r3, r2
 800327c:	4a18      	ldr	r2, [pc, #96]	@ (80032e0 <xTaskPriorityDisinherit+0xfc>)
 800327e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	4619      	mov	r1, r3
 8003284:	204a      	movs	r0, #74	@ 0x4a
 8003286:	f002 f9e7 	bl	8005658 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003296:	f1c3 0205 	rsb	r2, r3, #5
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032a2:	2201      	movs	r2, #1
 80032a4:	409a      	lsls	r2, r3
 80032a6:	4b0e      	ldr	r3, [pc, #56]	@ (80032e0 <xTaskPriorityDisinherit+0xfc>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	4a0c      	ldr	r2, [pc, #48]	@ (80032e0 <xTaskPriorityDisinherit+0xfc>)
 80032ae:	6013      	str	r3, [r2, #0]
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032b4:	4613      	mov	r3, r2
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	4413      	add	r3, r2
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	4a09      	ldr	r2, [pc, #36]	@ (80032e4 <xTaskPriorityDisinherit+0x100>)
 80032be:	441a      	add	r2, r3
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	3304      	adds	r3, #4
 80032c4:	4619      	mov	r1, r3
 80032c6:	4610      	mov	r0, r2
 80032c8:	f7fe fc39 	bl	8001b3e <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80032cc:	2301      	movs	r3, #1
 80032ce:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80032d0:	697b      	ldr	r3, [r7, #20]
    }
 80032d2:	4618      	mov	r0, r3
 80032d4:	3718      	adds	r7, #24
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	20000108 	.word	0x20000108
 80032e0:	200001e8 	.word	0x200001e8
 80032e4:	2000010c 	.word	0x2000010c

080032e8 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b084      	sub	sp, #16
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
 80032f0:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80032f2:	4b32      	ldr	r3, [pc, #200]	@ (80033bc <prvAddCurrentTaskToDelayedList+0xd4>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80032f8:	4b31      	ldr	r3, [pc, #196]	@ (80033c0 <prvAddCurrentTaskToDelayedList+0xd8>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	3304      	adds	r3, #4
 80032fe:	4618      	mov	r0, r3
 8003300:	f7fe fc7a 	bl	8001bf8 <uxListRemove>
 8003304:	4603      	mov	r3, r0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d10b      	bne.n	8003322 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800330a:	4b2d      	ldr	r3, [pc, #180]	@ (80033c0 <prvAddCurrentTaskToDelayedList+0xd8>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003310:	2201      	movs	r2, #1
 8003312:	fa02 f303 	lsl.w	r3, r2, r3
 8003316:	43da      	mvns	r2, r3
 8003318:	4b2a      	ldr	r3, [pc, #168]	@ (80033c4 <prvAddCurrentTaskToDelayedList+0xdc>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4013      	ands	r3, r2
 800331e:	4a29      	ldr	r2, [pc, #164]	@ (80033c4 <prvAddCurrentTaskToDelayedList+0xdc>)
 8003320:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003328:	d110      	bne.n	800334c <prvAddCurrentTaskToDelayedList+0x64>
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d00d      	beq.n	800334c <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8003330:	4b23      	ldr	r3, [pc, #140]	@ (80033c0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	211b      	movs	r1, #27
 8003336:	4618      	mov	r0, r3
 8003338:	f002 ff50 	bl	80061dc <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800333c:	4b20      	ldr	r3, [pc, #128]	@ (80033c0 <prvAddCurrentTaskToDelayedList+0xd8>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	3304      	adds	r3, #4
 8003342:	4619      	mov	r1, r3
 8003344:	4820      	ldr	r0, [pc, #128]	@ (80033c8 <prvAddCurrentTaskToDelayedList+0xe0>)
 8003346:	f7fe fbfa 	bl	8001b3e <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800334a:	e032      	b.n	80033b2 <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 800334c:	68fa      	ldr	r2, [r7, #12]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4413      	add	r3, r2
 8003352:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003354:	4b1a      	ldr	r3, [pc, #104]	@ (80033c0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	68ba      	ldr	r2, [r7, #8]
 800335a:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 800335c:	68ba      	ldr	r2, [r7, #8]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	429a      	cmp	r2, r3
 8003362:	d20f      	bcs.n	8003384 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8003364:	4b16      	ldr	r3, [pc, #88]	@ (80033c0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	2104      	movs	r1, #4
 800336a:	4618      	mov	r0, r3
 800336c:	f002 ff36 	bl	80061dc <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003370:	4b16      	ldr	r3, [pc, #88]	@ (80033cc <prvAddCurrentTaskToDelayedList+0xe4>)
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	4b12      	ldr	r3, [pc, #72]	@ (80033c0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	3304      	adds	r3, #4
 800337a:	4619      	mov	r1, r3
 800337c:	4610      	mov	r0, r2
 800337e:	f7fe fc02 	bl	8001b86 <vListInsert>
}
 8003382:	e016      	b.n	80033b2 <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8003384:	4b0e      	ldr	r3, [pc, #56]	@ (80033c0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	2104      	movs	r1, #4
 800338a:	4618      	mov	r0, r3
 800338c:	f002 ff26 	bl	80061dc <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003390:	4b0f      	ldr	r3, [pc, #60]	@ (80033d0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	4b0a      	ldr	r3, [pc, #40]	@ (80033c0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	3304      	adds	r3, #4
 800339a:	4619      	mov	r1, r3
 800339c:	4610      	mov	r0, r2
 800339e:	f7fe fbf2 	bl	8001b86 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 80033a2:	4b0c      	ldr	r3, [pc, #48]	@ (80033d4 <prvAddCurrentTaskToDelayedList+0xec>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	68ba      	ldr	r2, [r7, #8]
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d202      	bcs.n	80033b2 <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 80033ac:	4a09      	ldr	r2, [pc, #36]	@ (80033d4 <prvAddCurrentTaskToDelayedList+0xec>)
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	6013      	str	r3, [r2, #0]
}
 80033b2:	bf00      	nop
 80033b4:	3710      	adds	r7, #16
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	bf00      	nop
 80033bc:	200001e4 	.word	0x200001e4
 80033c0:	20000108 	.word	0x20000108
 80033c4:	200001e8 	.word	0x200001e8
 80033c8:	200001cc 	.word	0x200001cc
 80033cc:	2000019c 	.word	0x2000019c
 80033d0:	20000198 	.word	0x20000198
 80033d4:	20000200 	.word	0x20000200

080033d8 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80033d8:	b580      	push	{r7, lr}
 80033da:	b084      	sub	sp, #16
 80033dc:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80033de:	2300      	movs	r3, #0
 80033e0:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80033e2:	f000 fae1 	bl	80039a8 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80033e6:	4b12      	ldr	r3, [pc, #72]	@ (8003430 <xTimerCreateTimerTask+0x58>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d00b      	beq.n	8003406 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 80033ee:	4b11      	ldr	r3, [pc, #68]	@ (8003434 <xTimerCreateTimerTask+0x5c>)
 80033f0:	9301      	str	r3, [sp, #4]
 80033f2:	2302      	movs	r3, #2
 80033f4:	9300      	str	r3, [sp, #0]
 80033f6:	2300      	movs	r3, #0
 80033f8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80033fc:	490e      	ldr	r1, [pc, #56]	@ (8003438 <xTimerCreateTimerTask+0x60>)
 80033fe:	480f      	ldr	r0, [pc, #60]	@ (800343c <xTimerCreateTimerTask+0x64>)
 8003400:	f7ff f95e 	bl	80026c0 <xTaskCreate>
 8003404:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d10b      	bne.n	8003424 <xTimerCreateTimerTask+0x4c>
        __asm volatile
 800340c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003410:	f383 8811 	msr	BASEPRI, r3
 8003414:	f3bf 8f6f 	isb	sy
 8003418:	f3bf 8f4f 	dsb	sy
 800341c:	603b      	str	r3, [r7, #0]
    }
 800341e:	bf00      	nop
 8003420:	bf00      	nop
 8003422:	e7fd      	b.n	8003420 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003424:	687b      	ldr	r3, [r7, #4]
    }
 8003426:	4618      	mov	r0, r3
 8003428:	3708      	adds	r7, #8
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}
 800342e:	bf00      	nop
 8003430:	2000023c 	.word	0x2000023c
 8003434:	20000240 	.word	0x20000240
 8003438:	08006f50 	.word	0x08006f50
 800343c:	08003579 	.word	0x08003579

08003440 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8003440:	b580      	push	{r7, lr}
 8003442:	b08a      	sub	sp, #40	@ 0x28
 8003444:	af00      	add	r7, sp, #0
 8003446:	60f8      	str	r0, [r7, #12]
 8003448:	60b9      	str	r1, [r7, #8]
 800344a:	607a      	str	r2, [r7, #4]
 800344c:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 800344e:	2300      	movs	r3, #0
 8003450:	627b      	str	r3, [r7, #36]	@ 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d10b      	bne.n	8003470 <xTimerGenericCommand+0x30>
        __asm volatile
 8003458:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800345c:	f383 8811 	msr	BASEPRI, r3
 8003460:	f3bf 8f6f 	isb	sy
 8003464:	f3bf 8f4f 	dsb	sy
 8003468:	623b      	str	r3, [r7, #32]
    }
 800346a:	bf00      	nop
 800346c:	bf00      	nop
 800346e:	e7fd      	b.n	800346c <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8003470:	4b19      	ldr	r3, [pc, #100]	@ (80034d8 <xTimerGenericCommand+0x98>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d02a      	beq.n	80034ce <xTimerGenericCommand+0x8e>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	2b05      	cmp	r3, #5
 8003488:	dc18      	bgt.n	80034bc <xTimerGenericCommand+0x7c>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800348a:	f7ff fe8d 	bl	80031a8 <xTaskGetSchedulerState>
 800348e:	4603      	mov	r3, r0
 8003490:	2b02      	cmp	r3, #2
 8003492:	d109      	bne.n	80034a8 <xTimerGenericCommand+0x68>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003494:	4b10      	ldr	r3, [pc, #64]	@ (80034d8 <xTimerGenericCommand+0x98>)
 8003496:	6818      	ldr	r0, [r3, #0]
 8003498:	f107 0114 	add.w	r1, r7, #20
 800349c:	2300      	movs	r3, #0
 800349e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80034a0:	f7fe fcbc 	bl	8001e1c <xQueueGenericSend>
 80034a4:	6278      	str	r0, [r7, #36]	@ 0x24
 80034a6:	e012      	b.n	80034ce <xTimerGenericCommand+0x8e>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80034a8:	4b0b      	ldr	r3, [pc, #44]	@ (80034d8 <xTimerGenericCommand+0x98>)
 80034aa:	6818      	ldr	r0, [r3, #0]
 80034ac:	f107 0114 	add.w	r1, r7, #20
 80034b0:	2300      	movs	r3, #0
 80034b2:	2200      	movs	r2, #0
 80034b4:	f7fe fcb2 	bl	8001e1c <xQueueGenericSend>
 80034b8:	6278      	str	r0, [r7, #36]	@ 0x24
 80034ba:	e008      	b.n	80034ce <xTimerGenericCommand+0x8e>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80034bc:	4b06      	ldr	r3, [pc, #24]	@ (80034d8 <xTimerGenericCommand+0x98>)
 80034be:	6818      	ldr	r0, [r3, #0]
 80034c0:	f107 0114 	add.w	r1, r7, #20
 80034c4:	2300      	movs	r3, #0
 80034c6:	683a      	ldr	r2, [r7, #0]
 80034c8:	f7fe fdba 	bl	8002040 <xQueueGenericSendFromISR>
 80034cc:	6278      	str	r0, [r7, #36]	@ 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80034ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 80034d0:	4618      	mov	r0, r3
 80034d2:	3728      	adds	r7, #40	@ 0x28
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}
 80034d8:	2000023c 	.word	0x2000023c

080034dc <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80034dc:	b580      	push	{r7, lr}
 80034de:	b088      	sub	sp, #32
 80034e0:	af02      	add	r7, sp, #8
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80034e6:	4b23      	ldr	r3, [pc, #140]	@ (8003574 <prvProcessExpiredTimer+0x98>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	68db      	ldr	r3, [r3, #12]
 80034ee:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	3304      	adds	r3, #4
 80034f4:	4618      	mov	r0, r3
 80034f6:	f7fe fb7f 	bl	8001bf8 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003500:	f003 0304 	and.w	r3, r3, #4
 8003504:	2b00      	cmp	r3, #0
 8003506:	d023      	beq.n	8003550 <prvProcessExpiredTimer+0x74>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	699a      	ldr	r2, [r3, #24]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	18d1      	adds	r1, r2, r3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	683a      	ldr	r2, [r7, #0]
 8003514:	6978      	ldr	r0, [r7, #20]
 8003516:	f000 f8d5 	bl	80036c4 <prvInsertTimerInActiveList>
 800351a:	4603      	mov	r3, r0
 800351c:	2b00      	cmp	r3, #0
 800351e:	d020      	beq.n	8003562 <prvProcessExpiredTimer+0x86>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003520:	2300      	movs	r3, #0
 8003522:	9300      	str	r3, [sp, #0]
 8003524:	2300      	movs	r3, #0
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	2100      	movs	r1, #0
 800352a:	6978      	ldr	r0, [r7, #20]
 800352c:	f7ff ff88 	bl	8003440 <xTimerGenericCommand>
 8003530:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d114      	bne.n	8003562 <prvProcessExpiredTimer+0x86>
        __asm volatile
 8003538:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800353c:	f383 8811 	msr	BASEPRI, r3
 8003540:	f3bf 8f6f 	isb	sy
 8003544:	f3bf 8f4f 	dsb	sy
 8003548:	60fb      	str	r3, [r7, #12]
    }
 800354a:	bf00      	nop
 800354c:	bf00      	nop
 800354e:	e7fd      	b.n	800354c <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003556:	f023 0301 	bic.w	r3, r3, #1
 800355a:	b2da      	uxtb	r2, r3
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	6a1b      	ldr	r3, [r3, #32]
 8003566:	6978      	ldr	r0, [r7, #20]
 8003568:	4798      	blx	r3
    }
 800356a:	bf00      	nop
 800356c:	3718      	adds	r7, #24
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
 8003572:	bf00      	nop
 8003574:	20000234 	.word	0x20000234

08003578 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003578:	b580      	push	{r7, lr}
 800357a:	b084      	sub	sp, #16
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003580:	f107 0308 	add.w	r3, r7, #8
 8003584:	4618      	mov	r0, r3
 8003586:	f000 f859 	bl	800363c <prvGetNextExpireTime>
 800358a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	4619      	mov	r1, r3
 8003590:	68f8      	ldr	r0, [r7, #12]
 8003592:	f000 f805 	bl	80035a0 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003596:	f000 f8d7 	bl	8003748 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800359a:	bf00      	nop
 800359c:	e7f0      	b.n	8003580 <prvTimerTask+0x8>
	...

080035a0 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b084      	sub	sp, #16
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80035aa:	f7ff fa41 	bl	8002a30 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80035ae:	f107 0308 	add.w	r3, r7, #8
 80035b2:	4618      	mov	r0, r3
 80035b4:	f000 f866 	bl	8003684 <prvSampleTimeNow>
 80035b8:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d130      	bne.n	8003622 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d10a      	bne.n	80035dc <prvProcessTimerOrBlockTask+0x3c>
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d806      	bhi.n	80035dc <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80035ce:	f7ff fa3d 	bl	8002a4c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80035d2:	68f9      	ldr	r1, [r7, #12]
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	f7ff ff81 	bl	80034dc <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80035da:	e024      	b.n	8003626 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d008      	beq.n	80035f4 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80035e2:	4b13      	ldr	r3, [pc, #76]	@ (8003630 <prvProcessTimerOrBlockTask+0x90>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d101      	bne.n	80035f0 <prvProcessTimerOrBlockTask+0x50>
 80035ec:	2301      	movs	r3, #1
 80035ee:	e000      	b.n	80035f2 <prvProcessTimerOrBlockTask+0x52>
 80035f0:	2300      	movs	r3, #0
 80035f2:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80035f4:	4b0f      	ldr	r3, [pc, #60]	@ (8003634 <prvProcessTimerOrBlockTask+0x94>)
 80035f6:	6818      	ldr	r0, [r3, #0]
 80035f8:	687a      	ldr	r2, [r7, #4]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	683a      	ldr	r2, [r7, #0]
 8003600:	4619      	mov	r1, r3
 8003602:	f7ff f829 	bl	8002658 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003606:	f7ff fa21 	bl	8002a4c <xTaskResumeAll>
 800360a:	4603      	mov	r3, r0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d10a      	bne.n	8003626 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003610:	4b09      	ldr	r3, [pc, #36]	@ (8003638 <prvProcessTimerOrBlockTask+0x98>)
 8003612:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003616:	601a      	str	r2, [r3, #0]
 8003618:	f3bf 8f4f 	dsb	sy
 800361c:	f3bf 8f6f 	isb	sy
    }
 8003620:	e001      	b.n	8003626 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003622:	f7ff fa13 	bl	8002a4c <xTaskResumeAll>
    }
 8003626:	bf00      	nop
 8003628:	3710      	adds	r7, #16
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	20000238 	.word	0x20000238
 8003634:	2000023c 	.word	0x2000023c
 8003638:	e000ed04 	.word	0xe000ed04

0800363c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800363c:	b480      	push	{r7}
 800363e:	b085      	sub	sp, #20
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003644:	4b0e      	ldr	r3, [pc, #56]	@ (8003680 <prvGetNextExpireTime+0x44>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d101      	bne.n	8003652 <prvGetNextExpireTime+0x16>
 800364e:	2201      	movs	r2, #1
 8003650:	e000      	b.n	8003654 <prvGetNextExpireTime+0x18>
 8003652:	2200      	movs	r2, #0
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d105      	bne.n	800366c <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003660:	4b07      	ldr	r3, [pc, #28]	@ (8003680 <prvGetNextExpireTime+0x44>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	60fb      	str	r3, [r7, #12]
 800366a:	e001      	b.n	8003670 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800366c:	2300      	movs	r3, #0
 800366e:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003670:	68fb      	ldr	r3, [r7, #12]
    }
 8003672:	4618      	mov	r0, r3
 8003674:	3714      	adds	r7, #20
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr
 800367e:	bf00      	nop
 8003680:	20000234 	.word	0x20000234

08003684 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003684:	b580      	push	{r7, lr}
 8003686:	b084      	sub	sp, #16
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 800368c:	f7ff fa72 	bl	8002b74 <xTaskGetTickCount>
 8003690:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003692:	4b0b      	ldr	r3, [pc, #44]	@ (80036c0 <prvSampleTimeNow+0x3c>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	68fa      	ldr	r2, [r7, #12]
 8003698:	429a      	cmp	r2, r3
 800369a:	d205      	bcs.n	80036a8 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800369c:	f000 f91e 	bl	80038dc <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2201      	movs	r2, #1
 80036a4:	601a      	str	r2, [r3, #0]
 80036a6:	e002      	b.n	80036ae <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2200      	movs	r2, #0
 80036ac:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80036ae:	4a04      	ldr	r2, [pc, #16]	@ (80036c0 <prvSampleTimeNow+0x3c>)
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80036b4:	68fb      	ldr	r3, [r7, #12]
    }
 80036b6:	4618      	mov	r0, r3
 80036b8:	3710      	adds	r7, #16
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	bf00      	nop
 80036c0:	20000244 	.word	0x20000244

080036c4 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b086      	sub	sp, #24
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	60f8      	str	r0, [r7, #12]
 80036cc:	60b9      	str	r1, [r7, #8]
 80036ce:	607a      	str	r2, [r7, #4]
 80036d0:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80036d2:	2300      	movs	r3, #0
 80036d4:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	68ba      	ldr	r2, [r7, #8]
 80036da:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	68fa      	ldr	r2, [r7, #12]
 80036e0:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80036e2:	68ba      	ldr	r2, [r7, #8]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	429a      	cmp	r2, r3
 80036e8:	d812      	bhi.n	8003710 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036ea:	687a      	ldr	r2, [r7, #4]
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	1ad2      	subs	r2, r2, r3
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	699b      	ldr	r3, [r3, #24]
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d302      	bcc.n	80036fe <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80036f8:	2301      	movs	r3, #1
 80036fa:	617b      	str	r3, [r7, #20]
 80036fc:	e01b      	b.n	8003736 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80036fe:	4b10      	ldr	r3, [pc, #64]	@ (8003740 <prvInsertTimerInActiveList+0x7c>)
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	3304      	adds	r3, #4
 8003706:	4619      	mov	r1, r3
 8003708:	4610      	mov	r0, r2
 800370a:	f7fe fa3c 	bl	8001b86 <vListInsert>
 800370e:	e012      	b.n	8003736 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003710:	687a      	ldr	r2, [r7, #4]
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	429a      	cmp	r2, r3
 8003716:	d206      	bcs.n	8003726 <prvInsertTimerInActiveList+0x62>
 8003718:	68ba      	ldr	r2, [r7, #8]
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	429a      	cmp	r2, r3
 800371e:	d302      	bcc.n	8003726 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003720:	2301      	movs	r3, #1
 8003722:	617b      	str	r3, [r7, #20]
 8003724:	e007      	b.n	8003736 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003726:	4b07      	ldr	r3, [pc, #28]	@ (8003744 <prvInsertTimerInActiveList+0x80>)
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	3304      	adds	r3, #4
 800372e:	4619      	mov	r1, r3
 8003730:	4610      	mov	r0, r2
 8003732:	f7fe fa28 	bl	8001b86 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003736:	697b      	ldr	r3, [r7, #20]
    }
 8003738:	4618      	mov	r0, r3
 800373a:	3718      	adds	r7, #24
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}
 8003740:	20000238 	.word	0x20000238
 8003744:	20000234 	.word	0x20000234

08003748 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003748:	b580      	push	{r7, lr}
 800374a:	b08c      	sub	sp, #48	@ 0x30
 800374c:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800374e:	e0b2      	b.n	80038b6 <prvProcessReceivedCommands+0x16e>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	2b00      	cmp	r3, #0
 8003754:	f2c0 80af 	blt.w	80038b6 <prvProcessReceivedCommands+0x16e>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	627b      	str	r3, [r7, #36]	@ 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800375c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800375e:	695b      	ldr	r3, [r3, #20]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d004      	beq.n	800376e <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003766:	3304      	adds	r3, #4
 8003768:	4618      	mov	r0, r3
 800376a:	f7fe fa45 	bl	8001bf8 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800376e:	1d3b      	adds	r3, r7, #4
 8003770:	4618      	mov	r0, r3
 8003772:	f7ff ff87 	bl	8003684 <prvSampleTimeNow>
 8003776:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	2b09      	cmp	r3, #9
 800377c:	f200 8098 	bhi.w	80038b0 <prvProcessReceivedCommands+0x168>
 8003780:	a201      	add	r2, pc, #4	@ (adr r2, 8003788 <prvProcessReceivedCommands+0x40>)
 8003782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003786:	bf00      	nop
 8003788:	080037b1 	.word	0x080037b1
 800378c:	080037b1 	.word	0x080037b1
 8003790:	080037b1 	.word	0x080037b1
 8003794:	08003827 	.word	0x08003827
 8003798:	0800383b 	.word	0x0800383b
 800379c:	08003887 	.word	0x08003887
 80037a0:	080037b1 	.word	0x080037b1
 80037a4:	080037b1 	.word	0x080037b1
 80037a8:	08003827 	.word	0x08003827
 80037ac:	0800383b 	.word	0x0800383b
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80037b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037b2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80037b6:	f043 0301 	orr.w	r3, r3, #1
 80037ba:	b2da      	uxtb	r2, r3
 80037bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037be:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80037c2:	68fa      	ldr	r2, [r7, #12]
 80037c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037c6:	699b      	ldr	r3, [r3, #24]
 80037c8:	18d1      	adds	r1, r2, r3
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	6a3a      	ldr	r2, [r7, #32]
 80037ce:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80037d0:	f7ff ff78 	bl	80036c4 <prvInsertTimerInActiveList>
 80037d4:	4603      	mov	r3, r0
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d06c      	beq.n	80038b4 <prvProcessReceivedCommands+0x16c>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80037da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037dc:	6a1b      	ldr	r3, [r3, #32]
 80037de:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80037e0:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80037e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80037e8:	f003 0304 	and.w	r3, r3, #4
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d061      	beq.n	80038b4 <prvProcessReceivedCommands+0x16c>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80037f0:	68fa      	ldr	r2, [r7, #12]
 80037f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037f4:	699b      	ldr	r3, [r3, #24]
 80037f6:	441a      	add	r2, r3
 80037f8:	2300      	movs	r3, #0
 80037fa:	9300      	str	r3, [sp, #0]
 80037fc:	2300      	movs	r3, #0
 80037fe:	2100      	movs	r1, #0
 8003800:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003802:	f7ff fe1d 	bl	8003440 <xTimerGenericCommand>
 8003806:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8003808:	69fb      	ldr	r3, [r7, #28]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d152      	bne.n	80038b4 <prvProcessReceivedCommands+0x16c>
        __asm volatile
 800380e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003812:	f383 8811 	msr	BASEPRI, r3
 8003816:	f3bf 8f6f 	isb	sy
 800381a:	f3bf 8f4f 	dsb	sy
 800381e:	61bb      	str	r3, [r7, #24]
    }
 8003820:	bf00      	nop
 8003822:	bf00      	nop
 8003824:	e7fd      	b.n	8003822 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003828:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800382c:	f023 0301 	bic.w	r3, r3, #1
 8003830:	b2da      	uxtb	r2, r3
 8003832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003834:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8003838:	e03d      	b.n	80038b6 <prvProcessReceivedCommands+0x16e>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800383a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800383c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003840:	f043 0301 	orr.w	r3, r3, #1
 8003844:	b2da      	uxtb	r2, r3
 8003846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003848:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800384c:	68fa      	ldr	r2, [r7, #12]
 800384e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003850:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003854:	699b      	ldr	r3, [r3, #24]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d10b      	bne.n	8003872 <prvProcessReceivedCommands+0x12a>
        __asm volatile
 800385a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800385e:	f383 8811 	msr	BASEPRI, r3
 8003862:	f3bf 8f6f 	isb	sy
 8003866:	f3bf 8f4f 	dsb	sy
 800386a:	617b      	str	r3, [r7, #20]
    }
 800386c:	bf00      	nop
 800386e:	bf00      	nop
 8003870:	e7fd      	b.n	800386e <prvProcessReceivedCommands+0x126>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003874:	699a      	ldr	r2, [r3, #24]
 8003876:	6a3b      	ldr	r3, [r7, #32]
 8003878:	18d1      	adds	r1, r2, r3
 800387a:	6a3b      	ldr	r3, [r7, #32]
 800387c:	6a3a      	ldr	r2, [r7, #32]
 800387e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003880:	f7ff ff20 	bl	80036c4 <prvInsertTimerInActiveList>
                        break;
 8003884:	e017      	b.n	80038b6 <prvProcessReceivedCommands+0x16e>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003888:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800388c:	f003 0302 	and.w	r3, r3, #2
 8003890:	2b00      	cmp	r3, #0
 8003892:	d103      	bne.n	800389c <prvProcessReceivedCommands+0x154>
                                {
                                    vPortFree( pxTimer );
 8003894:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003896:	f000 fc85 	bl	80041a4 <vPortFree>
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800389a:	e00c      	b.n	80038b6 <prvProcessReceivedCommands+0x16e>
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800389c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800389e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80038a2:	f023 0301 	bic.w	r3, r3, #1
 80038a6:	b2da      	uxtb	r2, r3
 80038a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038aa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 80038ae:	e002      	b.n	80038b6 <prvProcessReceivedCommands+0x16e>

                    default:
                        /* Don't expect to get here. */
                        break;
 80038b0:	bf00      	nop
 80038b2:	e000      	b.n	80038b6 <prvProcessReceivedCommands+0x16e>
                        break;
 80038b4:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80038b6:	4b08      	ldr	r3, [pc, #32]	@ (80038d8 <prvProcessReceivedCommands+0x190>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f107 0108 	add.w	r1, r7, #8
 80038be:	2200      	movs	r2, #0
 80038c0:	4618      	mov	r0, r3
 80038c2:	f7fe fc7f 	bl	80021c4 <xQueueReceive>
 80038c6:	4603      	mov	r3, r0
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	f47f af41 	bne.w	8003750 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 80038ce:	bf00      	nop
 80038d0:	bf00      	nop
 80038d2:	3728      	adds	r7, #40	@ 0x28
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}
 80038d8:	2000023c 	.word	0x2000023c

080038dc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80038dc:	b580      	push	{r7, lr}
 80038de:	b088      	sub	sp, #32
 80038e0:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80038e2:	e049      	b.n	8003978 <prvSwitchTimerLists+0x9c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80038e4:	4b2e      	ldr	r3, [pc, #184]	@ (80039a0 <prvSwitchTimerLists+0xc4>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	68db      	ldr	r3, [r3, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80038ee:	4b2c      	ldr	r3, [pc, #176]	@ (80039a0 <prvSwitchTimerLists+0xc4>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	68db      	ldr	r3, [r3, #12]
 80038f6:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	3304      	adds	r3, #4
 80038fc:	4618      	mov	r0, r3
 80038fe:	f7fe f97b 	bl	8001bf8 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	6a1b      	ldr	r3, [r3, #32]
 8003906:	68f8      	ldr	r0, [r7, #12]
 8003908:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003910:	f003 0304 	and.w	r3, r3, #4
 8003914:	2b00      	cmp	r3, #0
 8003916:	d02f      	beq.n	8003978 <prvSwitchTimerLists+0x9c>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	699b      	ldr	r3, [r3, #24]
 800391c:	693a      	ldr	r2, [r7, #16]
 800391e:	4413      	add	r3, r2
 8003920:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8003922:	68ba      	ldr	r2, [r7, #8]
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	429a      	cmp	r2, r3
 8003928:	d90e      	bls.n	8003948 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	68ba      	ldr	r2, [r7, #8]
 800392e:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	68fa      	ldr	r2, [r7, #12]
 8003934:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003936:	4b1a      	ldr	r3, [pc, #104]	@ (80039a0 <prvSwitchTimerLists+0xc4>)
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	3304      	adds	r3, #4
 800393e:	4619      	mov	r1, r3
 8003940:	4610      	mov	r0, r2
 8003942:	f7fe f920 	bl	8001b86 <vListInsert>
 8003946:	e017      	b.n	8003978 <prvSwitchTimerLists+0x9c>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003948:	2300      	movs	r3, #0
 800394a:	9300      	str	r3, [sp, #0]
 800394c:	2300      	movs	r3, #0
 800394e:	693a      	ldr	r2, [r7, #16]
 8003950:	2100      	movs	r1, #0
 8003952:	68f8      	ldr	r0, [r7, #12]
 8003954:	f7ff fd74 	bl	8003440 <xTimerGenericCommand>
 8003958:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d10b      	bne.n	8003978 <prvSwitchTimerLists+0x9c>
        __asm volatile
 8003960:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003964:	f383 8811 	msr	BASEPRI, r3
 8003968:	f3bf 8f6f 	isb	sy
 800396c:	f3bf 8f4f 	dsb	sy
 8003970:	603b      	str	r3, [r7, #0]
    }
 8003972:	bf00      	nop
 8003974:	bf00      	nop
 8003976:	e7fd      	b.n	8003974 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003978:	4b09      	ldr	r3, [pc, #36]	@ (80039a0 <prvSwitchTimerLists+0xc4>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d1b0      	bne.n	80038e4 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8003982:	4b07      	ldr	r3, [pc, #28]	@ (80039a0 <prvSwitchTimerLists+0xc4>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8003988:	4b06      	ldr	r3, [pc, #24]	@ (80039a4 <prvSwitchTimerLists+0xc8>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a04      	ldr	r2, [pc, #16]	@ (80039a0 <prvSwitchTimerLists+0xc4>)
 800398e:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003990:	4a04      	ldr	r2, [pc, #16]	@ (80039a4 <prvSwitchTimerLists+0xc8>)
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	6013      	str	r3, [r2, #0]
    }
 8003996:	bf00      	nop
 8003998:	3718      	adds	r7, #24
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	20000234 	.word	0x20000234
 80039a4:	20000238 	.word	0x20000238

080039a8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80039a8:	b580      	push	{r7, lr}
 80039aa:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80039ac:	f000 f9e6 	bl	8003d7c <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80039b0:	4b12      	ldr	r3, [pc, #72]	@ (80039fc <prvCheckForValidListAndQueue+0x54>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d11d      	bne.n	80039f4 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80039b8:	4811      	ldr	r0, [pc, #68]	@ (8003a00 <prvCheckForValidListAndQueue+0x58>)
 80039ba:	f7fe f893 	bl	8001ae4 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80039be:	4811      	ldr	r0, [pc, #68]	@ (8003a04 <prvCheckForValidListAndQueue+0x5c>)
 80039c0:	f7fe f890 	bl	8001ae4 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80039c4:	4b10      	ldr	r3, [pc, #64]	@ (8003a08 <prvCheckForValidListAndQueue+0x60>)
 80039c6:	4a0e      	ldr	r2, [pc, #56]	@ (8003a00 <prvCheckForValidListAndQueue+0x58>)
 80039c8:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80039ca:	4b10      	ldr	r3, [pc, #64]	@ (8003a0c <prvCheckForValidListAndQueue+0x64>)
 80039cc:	4a0d      	ldr	r2, [pc, #52]	@ (8003a04 <prvCheckForValidListAndQueue+0x5c>)
 80039ce:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80039d0:	2200      	movs	r2, #0
 80039d2:	210c      	movs	r1, #12
 80039d4:	200a      	movs	r0, #10
 80039d6:	f7fe f995 	bl	8001d04 <xQueueGenericCreate>
 80039da:	4603      	mov	r3, r0
 80039dc:	4a07      	ldr	r2, [pc, #28]	@ (80039fc <prvCheckForValidListAndQueue+0x54>)
 80039de:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 80039e0:	4b06      	ldr	r3, [pc, #24]	@ (80039fc <prvCheckForValidListAndQueue+0x54>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d005      	beq.n	80039f4 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80039e8:	4b04      	ldr	r3, [pc, #16]	@ (80039fc <prvCheckForValidListAndQueue+0x54>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4908      	ldr	r1, [pc, #32]	@ (8003a10 <prvCheckForValidListAndQueue+0x68>)
 80039ee:	4618      	mov	r0, r3
 80039f0:	f7fe fe00 	bl	80025f4 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80039f4:	f000 f9f4 	bl	8003de0 <vPortExitCritical>
    }
 80039f8:	bf00      	nop
 80039fa:	bd80      	pop	{r7, pc}
 80039fc:	2000023c 	.word	0x2000023c
 8003a00:	2000020c 	.word	0x2000020c
 8003a04:	20000220 	.word	0x20000220
 8003a08:	20000234 	.word	0x20000234
 8003a0c:	20000238 	.word	0x20000238
 8003a10:	08006f58 	.word	0x08006f58

08003a14 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003a14:	b480      	push	{r7}
 8003a16:	b085      	sub	sp, #20
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	60f8      	str	r0, [r7, #12]
 8003a1c:	60b9      	str	r1, [r7, #8]
 8003a1e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	3b04      	subs	r3, #4
 8003a24:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003a2c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	3b04      	subs	r3, #4
 8003a32:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	f023 0201 	bic.w	r2, r3, #1
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	3b04      	subs	r3, #4
 8003a42:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003a44:	4a0c      	ldr	r2, [pc, #48]	@ (8003a78 <pxPortInitialiseStack+0x64>)
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	3b14      	subs	r3, #20
 8003a4e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	3b04      	subs	r3, #4
 8003a5a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f06f 0202 	mvn.w	r2, #2
 8003a62:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	3b20      	subs	r3, #32
 8003a68:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	3714      	adds	r7, #20
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr
 8003a78:	08003a7d 	.word	0x08003a7d

08003a7c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b085      	sub	sp, #20
 8003a80:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8003a82:	2300      	movs	r3, #0
 8003a84:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003a86:	4b13      	ldr	r3, [pc, #76]	@ (8003ad4 <prvTaskExitError+0x58>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a8e:	d00b      	beq.n	8003aa8 <prvTaskExitError+0x2c>
        __asm volatile
 8003a90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a94:	f383 8811 	msr	BASEPRI, r3
 8003a98:	f3bf 8f6f 	isb	sy
 8003a9c:	f3bf 8f4f 	dsb	sy
 8003aa0:	60fb      	str	r3, [r7, #12]
    }
 8003aa2:	bf00      	nop
 8003aa4:	bf00      	nop
 8003aa6:	e7fd      	b.n	8003aa4 <prvTaskExitError+0x28>
        __asm volatile
 8003aa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003aac:	f383 8811 	msr	BASEPRI, r3
 8003ab0:	f3bf 8f6f 	isb	sy
 8003ab4:	f3bf 8f4f 	dsb	sy
 8003ab8:	60bb      	str	r3, [r7, #8]
    }
 8003aba:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003abc:	bf00      	nop
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d0fc      	beq.n	8003abe <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003ac4:	bf00      	nop
 8003ac6:	bf00      	nop
 8003ac8:	3714      	adds	r7, #20
 8003aca:	46bd      	mov	sp, r7
 8003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad0:	4770      	bx	lr
 8003ad2:	bf00      	nop
 8003ad4:	2000000c 	.word	0x2000000c
	...

08003ae0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003ae0:	4b07      	ldr	r3, [pc, #28]	@ (8003b00 <pxCurrentTCBConst2>)
 8003ae2:	6819      	ldr	r1, [r3, #0]
 8003ae4:	6808      	ldr	r0, [r1, #0]
 8003ae6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003aea:	f380 8809 	msr	PSP, r0
 8003aee:	f3bf 8f6f 	isb	sy
 8003af2:	f04f 0000 	mov.w	r0, #0
 8003af6:	f380 8811 	msr	BASEPRI, r0
 8003afa:	4770      	bx	lr
 8003afc:	f3af 8000 	nop.w

08003b00 <pxCurrentTCBConst2>:
 8003b00:	20000108 	.word	0x20000108
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003b04:	bf00      	nop
 8003b06:	bf00      	nop

08003b08 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003b08:	4808      	ldr	r0, [pc, #32]	@ (8003b2c <prvPortStartFirstTask+0x24>)
 8003b0a:	6800      	ldr	r0, [r0, #0]
 8003b0c:	6800      	ldr	r0, [r0, #0]
 8003b0e:	f380 8808 	msr	MSP, r0
 8003b12:	f04f 0000 	mov.w	r0, #0
 8003b16:	f380 8814 	msr	CONTROL, r0
 8003b1a:	b662      	cpsie	i
 8003b1c:	b661      	cpsie	f
 8003b1e:	f3bf 8f4f 	dsb	sy
 8003b22:	f3bf 8f6f 	isb	sy
 8003b26:	df00      	svc	0
 8003b28:	bf00      	nop
 8003b2a:	0000      	.short	0x0000
 8003b2c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003b30:	bf00      	nop
 8003b32:	bf00      	nop

08003b34 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b086      	sub	sp, #24
 8003b38:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003b3a:	4b47      	ldr	r3, [pc, #284]	@ (8003c58 <xPortStartScheduler+0x124>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a47      	ldr	r2, [pc, #284]	@ (8003c5c <xPortStartScheduler+0x128>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d10b      	bne.n	8003b5c <xPortStartScheduler+0x28>
        __asm volatile
 8003b44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b48:	f383 8811 	msr	BASEPRI, r3
 8003b4c:	f3bf 8f6f 	isb	sy
 8003b50:	f3bf 8f4f 	dsb	sy
 8003b54:	60fb      	str	r3, [r7, #12]
    }
 8003b56:	bf00      	nop
 8003b58:	bf00      	nop
 8003b5a:	e7fd      	b.n	8003b58 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003b5c:	4b3e      	ldr	r3, [pc, #248]	@ (8003c58 <xPortStartScheduler+0x124>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a3f      	ldr	r2, [pc, #252]	@ (8003c60 <xPortStartScheduler+0x12c>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d10b      	bne.n	8003b7e <xPortStartScheduler+0x4a>
        __asm volatile
 8003b66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b6a:	f383 8811 	msr	BASEPRI, r3
 8003b6e:	f3bf 8f6f 	isb	sy
 8003b72:	f3bf 8f4f 	dsb	sy
 8003b76:	613b      	str	r3, [r7, #16]
    }
 8003b78:	bf00      	nop
 8003b7a:	bf00      	nop
 8003b7c:	e7fd      	b.n	8003b7a <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003b7e:	4b39      	ldr	r3, [pc, #228]	@ (8003c64 <xPortStartScheduler+0x130>)
 8003b80:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	781b      	ldrb	r3, [r3, #0]
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	22ff      	movs	r2, #255	@ 0xff
 8003b8e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	781b      	ldrb	r3, [r3, #0]
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003b98:	78fb      	ldrb	r3, [r7, #3]
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003ba0:	b2da      	uxtb	r2, r3
 8003ba2:	4b31      	ldr	r3, [pc, #196]	@ (8003c68 <xPortStartScheduler+0x134>)
 8003ba4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003ba6:	4b31      	ldr	r3, [pc, #196]	@ (8003c6c <xPortStartScheduler+0x138>)
 8003ba8:	2207      	movs	r2, #7
 8003baa:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003bac:	e009      	b.n	8003bc2 <xPortStartScheduler+0x8e>
            {
                ulMaxPRIGROUPValue--;
 8003bae:	4b2f      	ldr	r3, [pc, #188]	@ (8003c6c <xPortStartScheduler+0x138>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	3b01      	subs	r3, #1
 8003bb4:	4a2d      	ldr	r2, [pc, #180]	@ (8003c6c <xPortStartScheduler+0x138>)
 8003bb6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003bb8:	78fb      	ldrb	r3, [r7, #3]
 8003bba:	b2db      	uxtb	r3, r3
 8003bbc:	005b      	lsls	r3, r3, #1
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003bc2:	78fb      	ldrb	r3, [r7, #3]
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bca:	2b80      	cmp	r3, #128	@ 0x80
 8003bcc:	d0ef      	beq.n	8003bae <xPortStartScheduler+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003bce:	4b27      	ldr	r3, [pc, #156]	@ (8003c6c <xPortStartScheduler+0x138>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f1c3 0307 	rsb	r3, r3, #7
 8003bd6:	2b04      	cmp	r3, #4
 8003bd8:	d00b      	beq.n	8003bf2 <xPortStartScheduler+0xbe>
        __asm volatile
 8003bda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bde:	f383 8811 	msr	BASEPRI, r3
 8003be2:	f3bf 8f6f 	isb	sy
 8003be6:	f3bf 8f4f 	dsb	sy
 8003bea:	60bb      	str	r3, [r7, #8]
    }
 8003bec:	bf00      	nop
 8003bee:	bf00      	nop
 8003bf0:	e7fd      	b.n	8003bee <xPortStartScheduler+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003bf2:	4b1e      	ldr	r3, [pc, #120]	@ (8003c6c <xPortStartScheduler+0x138>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	021b      	lsls	r3, r3, #8
 8003bf8:	4a1c      	ldr	r2, [pc, #112]	@ (8003c6c <xPortStartScheduler+0x138>)
 8003bfa:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003bfc:	4b1b      	ldr	r3, [pc, #108]	@ (8003c6c <xPortStartScheduler+0x138>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003c04:	4a19      	ldr	r2, [pc, #100]	@ (8003c6c <xPortStartScheduler+0x138>)
 8003c06:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	b2da      	uxtb	r2, r3
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8003c10:	4b17      	ldr	r3, [pc, #92]	@ (8003c70 <xPortStartScheduler+0x13c>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a16      	ldr	r2, [pc, #88]	@ (8003c70 <xPortStartScheduler+0x13c>)
 8003c16:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003c1a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003c1c:	4b14      	ldr	r3, [pc, #80]	@ (8003c70 <xPortStartScheduler+0x13c>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a13      	ldr	r2, [pc, #76]	@ (8003c70 <xPortStartScheduler+0x13c>)
 8003c22:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8003c26:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003c28:	f000 f968 	bl	8003efc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003c2c:	4b11      	ldr	r3, [pc, #68]	@ (8003c74 <xPortStartScheduler+0x140>)
 8003c2e:	2200      	movs	r2, #0
 8003c30:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8003c32:	f000 f987 	bl	8003f44 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003c36:	4b10      	ldr	r3, [pc, #64]	@ (8003c78 <xPortStartScheduler+0x144>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a0f      	ldr	r2, [pc, #60]	@ (8003c78 <xPortStartScheduler+0x144>)
 8003c3c:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8003c40:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8003c42:	f7ff ff61 	bl	8003b08 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003c46:	f7ff f851 	bl	8002cec <vTaskSwitchContext>
    prvTaskExitError();
 8003c4a:	f7ff ff17 	bl	8003a7c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003c4e:	2300      	movs	r3, #0
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	3718      	adds	r7, #24
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}
 8003c58:	e000ed00 	.word	0xe000ed00
 8003c5c:	410fc271 	.word	0x410fc271
 8003c60:	410fc270 	.word	0x410fc270
 8003c64:	e000e400 	.word	0xe000e400
 8003c68:	20000248 	.word	0x20000248
 8003c6c:	2000024c 	.word	0x2000024c
 8003c70:	e000ed20 	.word	0xe000ed20
 8003c74:	2000000c 	.word	0x2000000c
 8003c78:	e000ef34 	.word	0xe000ef34

08003c7c <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b087      	sub	sp, #28
 8003c80:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003c82:	4b38      	ldr	r3, [pc, #224]	@ (8003d64 <vInitPrioGroupValue+0xe8>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a38      	ldr	r2, [pc, #224]	@ (8003d68 <vInitPrioGroupValue+0xec>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d10b      	bne.n	8003ca4 <vInitPrioGroupValue+0x28>
        __asm volatile
 8003c8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c90:	f383 8811 	msr	BASEPRI, r3
 8003c94:	f3bf 8f6f 	isb	sy
 8003c98:	f3bf 8f4f 	dsb	sy
 8003c9c:	60fb      	str	r3, [r7, #12]
    }
 8003c9e:	bf00      	nop
 8003ca0:	bf00      	nop
 8003ca2:	e7fd      	b.n	8003ca0 <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003ca4:	4b2f      	ldr	r3, [pc, #188]	@ (8003d64 <vInitPrioGroupValue+0xe8>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a30      	ldr	r2, [pc, #192]	@ (8003d6c <vInitPrioGroupValue+0xf0>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d10b      	bne.n	8003cc6 <vInitPrioGroupValue+0x4a>
        __asm volatile
 8003cae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cb2:	f383 8811 	msr	BASEPRI, r3
 8003cb6:	f3bf 8f6f 	isb	sy
 8003cba:	f3bf 8f4f 	dsb	sy
 8003cbe:	613b      	str	r3, [r7, #16]
    }
 8003cc0:	bf00      	nop
 8003cc2:	bf00      	nop
 8003cc4:	e7fd      	b.n	8003cc2 <vInitPrioGroupValue+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003cc6:	4b2a      	ldr	r3, [pc, #168]	@ (8003d70 <vInitPrioGroupValue+0xf4>)
 8003cc8:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	781b      	ldrb	r3, [r3, #0]
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	22ff      	movs	r2, #255	@ 0xff
 8003cd6:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	781b      	ldrb	r3, [r3, #0]
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003ce0:	78fb      	ldrb	r3, [r7, #3]
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003ce8:	b2da      	uxtb	r2, r3
 8003cea:	4b22      	ldr	r3, [pc, #136]	@ (8003d74 <vInitPrioGroupValue+0xf8>)
 8003cec:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003cee:	4b22      	ldr	r3, [pc, #136]	@ (8003d78 <vInitPrioGroupValue+0xfc>)
 8003cf0:	2207      	movs	r2, #7
 8003cf2:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003cf4:	e009      	b.n	8003d0a <vInitPrioGroupValue+0x8e>
            {
                ulMaxPRIGROUPValue--;
 8003cf6:	4b20      	ldr	r3, [pc, #128]	@ (8003d78 <vInitPrioGroupValue+0xfc>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	3b01      	subs	r3, #1
 8003cfc:	4a1e      	ldr	r2, [pc, #120]	@ (8003d78 <vInitPrioGroupValue+0xfc>)
 8003cfe:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003d00:	78fb      	ldrb	r3, [r7, #3]
 8003d02:	b2db      	uxtb	r3, r3
 8003d04:	005b      	lsls	r3, r3, #1
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003d0a:	78fb      	ldrb	r3, [r7, #3]
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d12:	2b80      	cmp	r3, #128	@ 0x80
 8003d14:	d0ef      	beq.n	8003cf6 <vInitPrioGroupValue+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003d16:	4b18      	ldr	r3, [pc, #96]	@ (8003d78 <vInitPrioGroupValue+0xfc>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f1c3 0307 	rsb	r3, r3, #7
 8003d1e:	2b04      	cmp	r3, #4
 8003d20:	d00b      	beq.n	8003d3a <vInitPrioGroupValue+0xbe>
        __asm volatile
 8003d22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d26:	f383 8811 	msr	BASEPRI, r3
 8003d2a:	f3bf 8f6f 	isb	sy
 8003d2e:	f3bf 8f4f 	dsb	sy
 8003d32:	60bb      	str	r3, [r7, #8]
    }
 8003d34:	bf00      	nop
 8003d36:	bf00      	nop
 8003d38:	e7fd      	b.n	8003d36 <vInitPrioGroupValue+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003d3a:	4b0f      	ldr	r3, [pc, #60]	@ (8003d78 <vInitPrioGroupValue+0xfc>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	021b      	lsls	r3, r3, #8
 8003d40:	4a0d      	ldr	r2, [pc, #52]	@ (8003d78 <vInitPrioGroupValue+0xfc>)
 8003d42:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003d44:	4b0c      	ldr	r3, [pc, #48]	@ (8003d78 <vInitPrioGroupValue+0xfc>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003d4c:	4a0a      	ldr	r2, [pc, #40]	@ (8003d78 <vInitPrioGroupValue+0xfc>)
 8003d4e:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	b2da      	uxtb	r2, r3
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8003d58:	bf00      	nop
 8003d5a:	371c      	adds	r7, #28
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr
 8003d64:	e000ed00 	.word	0xe000ed00
 8003d68:	410fc271 	.word	0x410fc271
 8003d6c:	410fc270 	.word	0x410fc270
 8003d70:	e000e400 	.word	0xe000e400
 8003d74:	20000248 	.word	0x20000248
 8003d78:	2000024c 	.word	0x2000024c

08003d7c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b083      	sub	sp, #12
 8003d80:	af00      	add	r7, sp, #0
        __asm volatile
 8003d82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d86:	f383 8811 	msr	BASEPRI, r3
 8003d8a:	f3bf 8f6f 	isb	sy
 8003d8e:	f3bf 8f4f 	dsb	sy
 8003d92:	607b      	str	r3, [r7, #4]
    }
 8003d94:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8003d96:	4b10      	ldr	r3, [pc, #64]	@ (8003dd8 <vPortEnterCritical+0x5c>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	3301      	adds	r3, #1
 8003d9c:	4a0e      	ldr	r2, [pc, #56]	@ (8003dd8 <vPortEnterCritical+0x5c>)
 8003d9e:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003da0:	4b0d      	ldr	r3, [pc, #52]	@ (8003dd8 <vPortEnterCritical+0x5c>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d110      	bne.n	8003dca <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003da8:	4b0c      	ldr	r3, [pc, #48]	@ (8003ddc <vPortEnterCritical+0x60>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d00b      	beq.n	8003dca <vPortEnterCritical+0x4e>
        __asm volatile
 8003db2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003db6:	f383 8811 	msr	BASEPRI, r3
 8003dba:	f3bf 8f6f 	isb	sy
 8003dbe:	f3bf 8f4f 	dsb	sy
 8003dc2:	603b      	str	r3, [r7, #0]
    }
 8003dc4:	bf00      	nop
 8003dc6:	bf00      	nop
 8003dc8:	e7fd      	b.n	8003dc6 <vPortEnterCritical+0x4a>
    }
}
 8003dca:	bf00      	nop
 8003dcc:	370c      	adds	r7, #12
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr
 8003dd6:	bf00      	nop
 8003dd8:	2000000c 	.word	0x2000000c
 8003ddc:	e000ed04 	.word	0xe000ed04

08003de0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003de0:	b480      	push	{r7}
 8003de2:	b083      	sub	sp, #12
 8003de4:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8003de6:	4b12      	ldr	r3, [pc, #72]	@ (8003e30 <vPortExitCritical+0x50>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d10b      	bne.n	8003e06 <vPortExitCritical+0x26>
        __asm volatile
 8003dee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003df2:	f383 8811 	msr	BASEPRI, r3
 8003df6:	f3bf 8f6f 	isb	sy
 8003dfa:	f3bf 8f4f 	dsb	sy
 8003dfe:	607b      	str	r3, [r7, #4]
    }
 8003e00:	bf00      	nop
 8003e02:	bf00      	nop
 8003e04:	e7fd      	b.n	8003e02 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8003e06:	4b0a      	ldr	r3, [pc, #40]	@ (8003e30 <vPortExitCritical+0x50>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	3b01      	subs	r3, #1
 8003e0c:	4a08      	ldr	r2, [pc, #32]	@ (8003e30 <vPortExitCritical+0x50>)
 8003e0e:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003e10:	4b07      	ldr	r3, [pc, #28]	@ (8003e30 <vPortExitCritical+0x50>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d105      	bne.n	8003e24 <vPortExitCritical+0x44>
 8003e18:	2300      	movs	r3, #0
 8003e1a:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	f383 8811 	msr	BASEPRI, r3
    }
 8003e22:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8003e24:	bf00      	nop
 8003e26:	370c      	adds	r7, #12
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr
 8003e30:	2000000c 	.word	0x2000000c
	...

08003e40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003e40:	f3ef 8009 	mrs	r0, PSP
 8003e44:	f3bf 8f6f 	isb	sy
 8003e48:	4b15      	ldr	r3, [pc, #84]	@ (8003ea0 <pxCurrentTCBConst>)
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	f01e 0f10 	tst.w	lr, #16
 8003e50:	bf08      	it	eq
 8003e52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003e56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e5a:	6010      	str	r0, [r2, #0]
 8003e5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003e60:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8003e64:	f380 8811 	msr	BASEPRI, r0
 8003e68:	f3bf 8f4f 	dsb	sy
 8003e6c:	f3bf 8f6f 	isb	sy
 8003e70:	f7fe ff3c 	bl	8002cec <vTaskSwitchContext>
 8003e74:	f04f 0000 	mov.w	r0, #0
 8003e78:	f380 8811 	msr	BASEPRI, r0
 8003e7c:	bc09      	pop	{r0, r3}
 8003e7e:	6819      	ldr	r1, [r3, #0]
 8003e80:	6808      	ldr	r0, [r1, #0]
 8003e82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e86:	f01e 0f10 	tst.w	lr, #16
 8003e8a:	bf08      	it	eq
 8003e8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003e90:	f380 8809 	msr	PSP, r0
 8003e94:	f3bf 8f6f 	isb	sy
 8003e98:	4770      	bx	lr
 8003e9a:	bf00      	nop
 8003e9c:	f3af 8000 	nop.w

08003ea0 <pxCurrentTCBConst>:
 8003ea0:	20000108 	.word	0x20000108
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003ea4:	bf00      	nop
 8003ea6:	bf00      	nop

08003ea8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b082      	sub	sp, #8
 8003eac:	af00      	add	r7, sp, #0
        __asm volatile
 8003eae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003eb2:	f383 8811 	msr	BASEPRI, r3
 8003eb6:	f3bf 8f6f 	isb	sy
 8003eba:	f3bf 8f4f 	dsb	sy
 8003ebe:	607b      	str	r3, [r7, #4]
    }
 8003ec0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8003ec2:	f002 f82f 	bl	8005f24 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003ec6:	f7fe fe77 	bl	8002bb8 <xTaskIncrementTick>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d006      	beq.n	8003ede <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8003ed0:	f002 f886 	bl	8005fe0 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003ed4:	4b08      	ldr	r3, [pc, #32]	@ (8003ef8 <SysTick_Handler+0x50>)
 8003ed6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003eda:	601a      	str	r2, [r3, #0]
 8003edc:	e001      	b.n	8003ee2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 8003ede:	f002 f863 	bl	8005fa8 <SEGGER_SYSVIEW_RecordExitISR>
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	f383 8811 	msr	BASEPRI, r3
    }
 8003eec:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 8003eee:	bf00      	nop
 8003ef0:	3708      	adds	r7, #8
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}
 8003ef6:	bf00      	nop
 8003ef8:	e000ed04 	.word	0xe000ed04

08003efc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8003efc:	b480      	push	{r7}
 8003efe:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003f00:	4b0b      	ldr	r3, [pc, #44]	@ (8003f30 <vPortSetupTimerInterrupt+0x34>)
 8003f02:	2200      	movs	r2, #0
 8003f04:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003f06:	4b0b      	ldr	r3, [pc, #44]	@ (8003f34 <vPortSetupTimerInterrupt+0x38>)
 8003f08:	2200      	movs	r2, #0
 8003f0a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003f0c:	4b0a      	ldr	r3, [pc, #40]	@ (8003f38 <vPortSetupTimerInterrupt+0x3c>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a0a      	ldr	r2, [pc, #40]	@ (8003f3c <vPortSetupTimerInterrupt+0x40>)
 8003f12:	fba2 2303 	umull	r2, r3, r2, r3
 8003f16:	099b      	lsrs	r3, r3, #6
 8003f18:	4a09      	ldr	r2, [pc, #36]	@ (8003f40 <vPortSetupTimerInterrupt+0x44>)
 8003f1a:	3b01      	subs	r3, #1
 8003f1c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003f1e:	4b04      	ldr	r3, [pc, #16]	@ (8003f30 <vPortSetupTimerInterrupt+0x34>)
 8003f20:	2207      	movs	r2, #7
 8003f22:	601a      	str	r2, [r3, #0]
}
 8003f24:	bf00      	nop
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr
 8003f2e:	bf00      	nop
 8003f30:	e000e010 	.word	0xe000e010
 8003f34:	e000e018 	.word	0xe000e018
 8003f38:	20000000 	.word	0x20000000
 8003f3c:	10624dd3 	.word	0x10624dd3
 8003f40:	e000e014 	.word	0xe000e014

08003f44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003f44:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8003f54 <vPortEnableVFP+0x10>
 8003f48:	6801      	ldr	r1, [r0, #0]
 8003f4a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8003f4e:	6001      	str	r1, [r0, #0]
 8003f50:	4770      	bx	lr
 8003f52:	0000      	.short	0x0000
 8003f54:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8003f58:	bf00      	nop
 8003f5a:	bf00      	nop

08003f5c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8003f5c:	b480      	push	{r7}
 8003f5e:	b085      	sub	sp, #20
 8003f60:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8003f62:	f3ef 8305 	mrs	r3, IPSR
 8003f66:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2b0f      	cmp	r3, #15
 8003f6c:	d915      	bls.n	8003f9a <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003f6e:	4a18      	ldr	r2, [pc, #96]	@ (8003fd0 <vPortValidateInterruptPriority+0x74>)
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	4413      	add	r3, r2
 8003f74:	781b      	ldrb	r3, [r3, #0]
 8003f76:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003f78:	4b16      	ldr	r3, [pc, #88]	@ (8003fd4 <vPortValidateInterruptPriority+0x78>)
 8003f7a:	781b      	ldrb	r3, [r3, #0]
 8003f7c:	7afa      	ldrb	r2, [r7, #11]
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d20b      	bcs.n	8003f9a <vPortValidateInterruptPriority+0x3e>
        __asm volatile
 8003f82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f86:	f383 8811 	msr	BASEPRI, r3
 8003f8a:	f3bf 8f6f 	isb	sy
 8003f8e:	f3bf 8f4f 	dsb	sy
 8003f92:	607b      	str	r3, [r7, #4]
    }
 8003f94:	bf00      	nop
 8003f96:	bf00      	nop
 8003f98:	e7fd      	b.n	8003f96 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003f9a:	4b0f      	ldr	r3, [pc, #60]	@ (8003fd8 <vPortValidateInterruptPriority+0x7c>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003fa2:	4b0e      	ldr	r3, [pc, #56]	@ (8003fdc <vPortValidateInterruptPriority+0x80>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	d90b      	bls.n	8003fc2 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 8003faa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fae:	f383 8811 	msr	BASEPRI, r3
 8003fb2:	f3bf 8f6f 	isb	sy
 8003fb6:	f3bf 8f4f 	dsb	sy
 8003fba:	603b      	str	r3, [r7, #0]
    }
 8003fbc:	bf00      	nop
 8003fbe:	bf00      	nop
 8003fc0:	e7fd      	b.n	8003fbe <vPortValidateInterruptPriority+0x62>
    }
 8003fc2:	bf00      	nop
 8003fc4:	3714      	adds	r7, #20
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr
 8003fce:	bf00      	nop
 8003fd0:	e000e3f0 	.word	0xe000e3f0
 8003fd4:	20000248 	.word	0x20000248
 8003fd8:	e000ed0c 	.word	0xe000ed0c
 8003fdc:	2000024c 	.word	0x2000024c

08003fe0 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b08a      	sub	sp, #40	@ 0x28
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8003fec:	f7fe fd20 	bl	8002a30 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8003ff0:	4b66      	ldr	r3, [pc, #408]	@ (800418c <pvPortMalloc+0x1ac>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d101      	bne.n	8003ffc <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8003ff8:	f000 f938 	bl	800426c <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003ffc:	4b64      	ldr	r3, [pc, #400]	@ (8004190 <pvPortMalloc+0x1b0>)
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	4013      	ands	r3, r2
 8004004:	2b00      	cmp	r3, #0
 8004006:	f040 80a9 	bne.w	800415c <pvPortMalloc+0x17c>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d02e      	beq.n	800406e <pvPortMalloc+0x8e>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8004010:	2208      	movs	r2, #8
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8004016:	687a      	ldr	r2, [r7, #4]
 8004018:	429a      	cmp	r2, r3
 800401a:	d228      	bcs.n	800406e <pvPortMalloc+0x8e>
            {
                xWantedSize += xHeapStructSize;
 800401c:	2208      	movs	r2, #8
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	4413      	add	r3, r2
 8004022:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	f003 0307 	and.w	r3, r3, #7
 800402a:	2b00      	cmp	r3, #0
 800402c:	d022      	beq.n	8004074 <pvPortMalloc+0x94>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f023 0307 	bic.w	r3, r3, #7
 8004034:	3308      	adds	r3, #8
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	429a      	cmp	r2, r3
 800403a:	d215      	bcs.n	8004068 <pvPortMalloc+0x88>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	f023 0307 	bic.w	r3, r3, #7
 8004042:	3308      	adds	r3, #8
 8004044:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	f003 0307 	and.w	r3, r3, #7
 800404c:	2b00      	cmp	r3, #0
 800404e:	d011      	beq.n	8004074 <pvPortMalloc+0x94>
        __asm volatile
 8004050:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004054:	f383 8811 	msr	BASEPRI, r3
 8004058:	f3bf 8f6f 	isb	sy
 800405c:	f3bf 8f4f 	dsb	sy
 8004060:	617b      	str	r3, [r7, #20]
    }
 8004062:	bf00      	nop
 8004064:	bf00      	nop
 8004066:	e7fd      	b.n	8004064 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8004068:	2300      	movs	r3, #0
 800406a:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800406c:	e002      	b.n	8004074 <pvPortMalloc+0x94>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 800406e:	2300      	movs	r3, #0
 8004070:	607b      	str	r3, [r7, #4]
 8004072:	e000      	b.n	8004076 <pvPortMalloc+0x96>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004074:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d06f      	beq.n	800415c <pvPortMalloc+0x17c>
 800407c:	4b45      	ldr	r3, [pc, #276]	@ (8004194 <pvPortMalloc+0x1b4>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	687a      	ldr	r2, [r7, #4]
 8004082:	429a      	cmp	r2, r3
 8004084:	d86a      	bhi.n	800415c <pvPortMalloc+0x17c>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004086:	4b44      	ldr	r3, [pc, #272]	@ (8004198 <pvPortMalloc+0x1b8>)
 8004088:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800408a:	4b43      	ldr	r3, [pc, #268]	@ (8004198 <pvPortMalloc+0x1b8>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004090:	e004      	b.n	800409c <pvPortMalloc+0xbc>
                {
                    pxPreviousBlock = pxBlock;
 8004092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004094:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800409c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	687a      	ldr	r2, [r7, #4]
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d903      	bls.n	80040ae <pvPortMalloc+0xce>
 80040a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d1f1      	bne.n	8004092 <pvPortMalloc+0xb2>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80040ae:	4b37      	ldr	r3, [pc, #220]	@ (800418c <pvPortMalloc+0x1ac>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d051      	beq.n	800415c <pvPortMalloc+0x17c>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80040b8:	6a3b      	ldr	r3, [r7, #32]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	2208      	movs	r2, #8
 80040be:	4413      	add	r3, r2
 80040c0:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80040c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	6a3b      	ldr	r3, [r7, #32]
 80040c8:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80040ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040cc:	685a      	ldr	r2, [r3, #4]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	1ad2      	subs	r2, r2, r3
 80040d2:	2308      	movs	r3, #8
 80040d4:	005b      	lsls	r3, r3, #1
 80040d6:	429a      	cmp	r2, r3
 80040d8:	d920      	bls.n	800411c <pvPortMalloc+0x13c>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80040da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	4413      	add	r3, r2
 80040e0:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80040e2:	69bb      	ldr	r3, [r7, #24]
 80040e4:	f003 0307 	and.w	r3, r3, #7
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d00b      	beq.n	8004104 <pvPortMalloc+0x124>
        __asm volatile
 80040ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040f0:	f383 8811 	msr	BASEPRI, r3
 80040f4:	f3bf 8f6f 	isb	sy
 80040f8:	f3bf 8f4f 	dsb	sy
 80040fc:	613b      	str	r3, [r7, #16]
    }
 80040fe:	bf00      	nop
 8004100:	bf00      	nop
 8004102:	e7fd      	b.n	8004100 <pvPortMalloc+0x120>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004106:	685a      	ldr	r2, [r3, #4]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	1ad2      	subs	r2, r2, r3
 800410c:	69bb      	ldr	r3, [r7, #24]
 800410e:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004112:	687a      	ldr	r2, [r7, #4]
 8004114:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004116:	69b8      	ldr	r0, [r7, #24]
 8004118:	f000 f90a 	bl	8004330 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800411c:	4b1d      	ldr	r3, [pc, #116]	@ (8004194 <pvPortMalloc+0x1b4>)
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	1ad3      	subs	r3, r2, r3
 8004126:	4a1b      	ldr	r2, [pc, #108]	@ (8004194 <pvPortMalloc+0x1b4>)
 8004128:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800412a:	4b1a      	ldr	r3, [pc, #104]	@ (8004194 <pvPortMalloc+0x1b4>)
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	4b1b      	ldr	r3, [pc, #108]	@ (800419c <pvPortMalloc+0x1bc>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	429a      	cmp	r2, r3
 8004134:	d203      	bcs.n	800413e <pvPortMalloc+0x15e>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004136:	4b17      	ldr	r3, [pc, #92]	@ (8004194 <pvPortMalloc+0x1b4>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a18      	ldr	r2, [pc, #96]	@ (800419c <pvPortMalloc+0x1bc>)
 800413c:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 800413e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004140:	685a      	ldr	r2, [r3, #4]
 8004142:	4b13      	ldr	r3, [pc, #76]	@ (8004190 <pvPortMalloc+0x1b0>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	431a      	orrs	r2, r3
 8004148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800414a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800414c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800414e:	2200      	movs	r2, #0
 8004150:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004152:	4b13      	ldr	r3, [pc, #76]	@ (80041a0 <pvPortMalloc+0x1c0>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	3301      	adds	r3, #1
 8004158:	4a11      	ldr	r2, [pc, #68]	@ (80041a0 <pvPortMalloc+0x1c0>)
 800415a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800415c:	f7fe fc76 	bl	8002a4c <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004160:	69fb      	ldr	r3, [r7, #28]
 8004162:	f003 0307 	and.w	r3, r3, #7
 8004166:	2b00      	cmp	r3, #0
 8004168:	d00b      	beq.n	8004182 <pvPortMalloc+0x1a2>
        __asm volatile
 800416a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800416e:	f383 8811 	msr	BASEPRI, r3
 8004172:	f3bf 8f6f 	isb	sy
 8004176:	f3bf 8f4f 	dsb	sy
 800417a:	60fb      	str	r3, [r7, #12]
    }
 800417c:	bf00      	nop
 800417e:	bf00      	nop
 8004180:	e7fd      	b.n	800417e <pvPortMalloc+0x19e>
    return pvReturn;
 8004182:	69fb      	ldr	r3, [r7, #28]
}
 8004184:	4618      	mov	r0, r3
 8004186:	3728      	adds	r7, #40	@ 0x28
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}
 800418c:	20012e58 	.word	0x20012e58
 8004190:	20012e6c 	.word	0x20012e6c
 8004194:	20012e5c 	.word	0x20012e5c
 8004198:	20012e50 	.word	0x20012e50
 800419c:	20012e60 	.word	0x20012e60
 80041a0:	20012e64 	.word	0x20012e64

080041a4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b086      	sub	sp, #24
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d04f      	beq.n	8004256 <vPortFree+0xb2>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80041b6:	2308      	movs	r3, #8
 80041b8:	425b      	negs	r3, r3
 80041ba:	697a      	ldr	r2, [r7, #20]
 80041bc:	4413      	add	r3, r2
 80041be:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	685a      	ldr	r2, [r3, #4]
 80041c8:	4b25      	ldr	r3, [pc, #148]	@ (8004260 <vPortFree+0xbc>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4013      	ands	r3, r2
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d10b      	bne.n	80041ea <vPortFree+0x46>
        __asm volatile
 80041d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041d6:	f383 8811 	msr	BASEPRI, r3
 80041da:	f3bf 8f6f 	isb	sy
 80041de:	f3bf 8f4f 	dsb	sy
 80041e2:	60fb      	str	r3, [r7, #12]
    }
 80041e4:	bf00      	nop
 80041e6:	bf00      	nop
 80041e8:	e7fd      	b.n	80041e6 <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d00b      	beq.n	800420a <vPortFree+0x66>
        __asm volatile
 80041f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041f6:	f383 8811 	msr	BASEPRI, r3
 80041fa:	f3bf 8f6f 	isb	sy
 80041fe:	f3bf 8f4f 	dsb	sy
 8004202:	60bb      	str	r3, [r7, #8]
    }
 8004204:	bf00      	nop
 8004206:	bf00      	nop
 8004208:	e7fd      	b.n	8004206 <vPortFree+0x62>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	685a      	ldr	r2, [r3, #4]
 800420e:	4b14      	ldr	r3, [pc, #80]	@ (8004260 <vPortFree+0xbc>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4013      	ands	r3, r2
 8004214:	2b00      	cmp	r3, #0
 8004216:	d01e      	beq.n	8004256 <vPortFree+0xb2>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d11a      	bne.n	8004256 <vPortFree+0xb2>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	685a      	ldr	r2, [r3, #4]
 8004224:	4b0e      	ldr	r3, [pc, #56]	@ (8004260 <vPortFree+0xbc>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	43db      	mvns	r3, r3
 800422a:	401a      	ands	r2, r3
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8004230:	f7fe fbfe 	bl	8002a30 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	685a      	ldr	r2, [r3, #4]
 8004238:	4b0a      	ldr	r3, [pc, #40]	@ (8004264 <vPortFree+0xc0>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4413      	add	r3, r2
 800423e:	4a09      	ldr	r2, [pc, #36]	@ (8004264 <vPortFree+0xc0>)
 8004240:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004242:	6938      	ldr	r0, [r7, #16]
 8004244:	f000 f874 	bl	8004330 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004248:	4b07      	ldr	r3, [pc, #28]	@ (8004268 <vPortFree+0xc4>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	3301      	adds	r3, #1
 800424e:	4a06      	ldr	r2, [pc, #24]	@ (8004268 <vPortFree+0xc4>)
 8004250:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004252:	f7fe fbfb 	bl	8002a4c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004256:	bf00      	nop
 8004258:	3718      	adds	r7, #24
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
 800425e:	bf00      	nop
 8004260:	20012e6c 	.word	0x20012e6c
 8004264:	20012e5c 	.word	0x20012e5c
 8004268:	20012e68 	.word	0x20012e68

0800426c <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 800426c:	b480      	push	{r7}
 800426e:	b085      	sub	sp, #20
 8004270:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004272:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 8004276:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8004278:	4b27      	ldr	r3, [pc, #156]	@ (8004318 <prvHeapInit+0xac>)
 800427a:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	f003 0307 	and.w	r3, r3, #7
 8004282:	2b00      	cmp	r3, #0
 8004284:	d00c      	beq.n	80042a0 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	3307      	adds	r3, #7
 800428a:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	f023 0307 	bic.w	r3, r3, #7
 8004292:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004294:	68ba      	ldr	r2, [r7, #8]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	4a1f      	ldr	r2, [pc, #124]	@ (8004318 <prvHeapInit+0xac>)
 800429c:	4413      	add	r3, r2
 800429e:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80042a4:	4a1d      	ldr	r2, [pc, #116]	@ (800431c <prvHeapInit+0xb0>)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80042aa:	4b1c      	ldr	r3, [pc, #112]	@ (800431c <prvHeapInit+0xb0>)
 80042ac:	2200      	movs	r2, #0
 80042ae:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	68ba      	ldr	r2, [r7, #8]
 80042b4:	4413      	add	r3, r2
 80042b6:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80042b8:	2208      	movs	r2, #8
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	1a9b      	subs	r3, r3, r2
 80042be:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f023 0307 	bic.w	r3, r3, #7
 80042c6:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	4a15      	ldr	r2, [pc, #84]	@ (8004320 <prvHeapInit+0xb4>)
 80042cc:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80042ce:	4b14      	ldr	r3, [pc, #80]	@ (8004320 <prvHeapInit+0xb4>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	2200      	movs	r2, #0
 80042d4:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80042d6:	4b12      	ldr	r3, [pc, #72]	@ (8004320 <prvHeapInit+0xb4>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	2200      	movs	r2, #0
 80042dc:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	68fa      	ldr	r2, [r7, #12]
 80042e6:	1ad2      	subs	r2, r2, r3
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80042ec:	4b0c      	ldr	r3, [pc, #48]	@ (8004320 <prvHeapInit+0xb4>)
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	4a0a      	ldr	r2, [pc, #40]	@ (8004324 <prvHeapInit+0xb8>)
 80042fa:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	4a09      	ldr	r2, [pc, #36]	@ (8004328 <prvHeapInit+0xbc>)
 8004302:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004304:	4b09      	ldr	r3, [pc, #36]	@ (800432c <prvHeapInit+0xc0>)
 8004306:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800430a:	601a      	str	r2, [r3, #0]
}
 800430c:	bf00      	nop
 800430e:	3714      	adds	r7, #20
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr
 8004318:	20000250 	.word	0x20000250
 800431c:	20012e50 	.word	0x20012e50
 8004320:	20012e58 	.word	0x20012e58
 8004324:	20012e60 	.word	0x20012e60
 8004328:	20012e5c 	.word	0x20012e5c
 800432c:	20012e6c 	.word	0x20012e6c

08004330 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004330:	b480      	push	{r7}
 8004332:	b085      	sub	sp, #20
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004338:	4b28      	ldr	r3, [pc, #160]	@ (80043dc <prvInsertBlockIntoFreeList+0xac>)
 800433a:	60fb      	str	r3, [r7, #12]
 800433c:	e002      	b.n	8004344 <prvInsertBlockIntoFreeList+0x14>
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	60fb      	str	r3, [r7, #12]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	687a      	ldr	r2, [r7, #4]
 800434a:	429a      	cmp	r2, r3
 800434c:	d8f7      	bhi.n	800433e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	68ba      	ldr	r2, [r7, #8]
 8004358:	4413      	add	r3, r2
 800435a:	687a      	ldr	r2, [r7, #4]
 800435c:	429a      	cmp	r2, r3
 800435e:	d108      	bne.n	8004372 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	685a      	ldr	r2, [r3, #4]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	441a      	add	r2, r3
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	68ba      	ldr	r2, [r7, #8]
 800437c:	441a      	add	r2, r3
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	429a      	cmp	r2, r3
 8004384:	d118      	bne.n	80043b8 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	4b15      	ldr	r3, [pc, #84]	@ (80043e0 <prvInsertBlockIntoFreeList+0xb0>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	429a      	cmp	r2, r3
 8004390:	d00d      	beq.n	80043ae <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	685a      	ldr	r2, [r3, #4]
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	441a      	add	r2, r3
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	681a      	ldr	r2, [r3, #0]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	601a      	str	r2, [r3, #0]
 80043ac:	e008      	b.n	80043c0 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80043ae:	4b0c      	ldr	r3, [pc, #48]	@ (80043e0 <prvInsertBlockIntoFreeList+0xb0>)
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	601a      	str	r2, [r3, #0]
 80043b6:	e003      	b.n	80043c0 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80043c0:	68fa      	ldr	r2, [r7, #12]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d002      	beq.n	80043ce <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	687a      	ldr	r2, [r7, #4]
 80043cc:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80043ce:	bf00      	nop
 80043d0:	3714      	adds	r7, #20
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr
 80043da:	bf00      	nop
 80043dc:	20012e50 	.word	0x20012e50
 80043e0:	20012e58 	.word	0x20012e58

080043e4 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 80043e4:	b580      	push	{r7, lr}
 80043e6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 80043e8:	4803      	ldr	r0, [pc, #12]	@ (80043f8 <_cbSendSystemDesc+0x14>)
 80043ea:	f001 fd45 	bl	8005e78 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 80043ee:	4803      	ldr	r0, [pc, #12]	@ (80043fc <_cbSendSystemDesc+0x18>)
 80043f0:	f001 fd42 	bl	8005e78 <SEGGER_SYSVIEW_SendSysDesc>
}
 80043f4:	bf00      	nop
 80043f6:	bd80      	pop	{r7, pc}
 80043f8:	08006f60 	.word	0x08006f60
 80043fc:	08006f94 	.word	0x08006f94

08004400 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004400:	b580      	push	{r7, lr}
 8004402:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004404:	4b06      	ldr	r3, [pc, #24]	@ (8004420 <SEGGER_SYSVIEW_Conf+0x20>)
 8004406:	6818      	ldr	r0, [r3, #0]
 8004408:	4b05      	ldr	r3, [pc, #20]	@ (8004420 <SEGGER_SYSVIEW_Conf+0x20>)
 800440a:	6819      	ldr	r1, [r3, #0]
 800440c:	4b05      	ldr	r3, [pc, #20]	@ (8004424 <SEGGER_SYSVIEW_Conf+0x24>)
 800440e:	4a06      	ldr	r2, [pc, #24]	@ (8004428 <SEGGER_SYSVIEW_Conf+0x28>)
 8004410:	f001 f8b0 	bl	8005574 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004414:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8004418:	f001 f8f0 	bl	80055fc <SEGGER_SYSVIEW_SetRAMBase>
}
 800441c:	bf00      	nop
 800441e:	bd80      	pop	{r7, pc}
 8004420:	20000000 	.word	0x20000000
 8004424:	080043e5 	.word	0x080043e5
 8004428:	08007038 	.word	0x08007038

0800442c <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 800442c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800442e:	b085      	sub	sp, #20
 8004430:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004432:	2300      	movs	r3, #0
 8004434:	607b      	str	r3, [r7, #4]
 8004436:	e033      	b.n	80044a0 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004438:	491e      	ldr	r1, [pc, #120]	@ (80044b4 <_cbSendTaskList+0x88>)
 800443a:	687a      	ldr	r2, [r7, #4]
 800443c:	4613      	mov	r3, r2
 800443e:	009b      	lsls	r3, r3, #2
 8004440:	4413      	add	r3, r2
 8004442:	009b      	lsls	r3, r3, #2
 8004444:	440b      	add	r3, r1
 8004446:	6818      	ldr	r0, [r3, #0]
 8004448:	491a      	ldr	r1, [pc, #104]	@ (80044b4 <_cbSendTaskList+0x88>)
 800444a:	687a      	ldr	r2, [r7, #4]
 800444c:	4613      	mov	r3, r2
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	4413      	add	r3, r2
 8004452:	009b      	lsls	r3, r3, #2
 8004454:	440b      	add	r3, r1
 8004456:	3304      	adds	r3, #4
 8004458:	6819      	ldr	r1, [r3, #0]
 800445a:	4c16      	ldr	r4, [pc, #88]	@ (80044b4 <_cbSendTaskList+0x88>)
 800445c:	687a      	ldr	r2, [r7, #4]
 800445e:	4613      	mov	r3, r2
 8004460:	009b      	lsls	r3, r3, #2
 8004462:	4413      	add	r3, r2
 8004464:	009b      	lsls	r3, r3, #2
 8004466:	4423      	add	r3, r4
 8004468:	3308      	adds	r3, #8
 800446a:	681c      	ldr	r4, [r3, #0]
 800446c:	4d11      	ldr	r5, [pc, #68]	@ (80044b4 <_cbSendTaskList+0x88>)
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	4613      	mov	r3, r2
 8004472:	009b      	lsls	r3, r3, #2
 8004474:	4413      	add	r3, r2
 8004476:	009b      	lsls	r3, r3, #2
 8004478:	442b      	add	r3, r5
 800447a:	330c      	adds	r3, #12
 800447c:	681d      	ldr	r5, [r3, #0]
 800447e:	4e0d      	ldr	r6, [pc, #52]	@ (80044b4 <_cbSendTaskList+0x88>)
 8004480:	687a      	ldr	r2, [r7, #4]
 8004482:	4613      	mov	r3, r2
 8004484:	009b      	lsls	r3, r3, #2
 8004486:	4413      	add	r3, r2
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	4433      	add	r3, r6
 800448c:	3310      	adds	r3, #16
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	9300      	str	r3, [sp, #0]
 8004492:	462b      	mov	r3, r5
 8004494:	4622      	mov	r2, r4
 8004496:	f000 f8bd 	bl	8004614 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	3301      	adds	r3, #1
 800449e:	607b      	str	r3, [r7, #4]
 80044a0:	4b05      	ldr	r3, [pc, #20]	@ (80044b8 <_cbSendTaskList+0x8c>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	687a      	ldr	r2, [r7, #4]
 80044a6:	429a      	cmp	r2, r3
 80044a8:	d3c6      	bcc.n	8004438 <_cbSendTaskList+0xc>
  }
}
 80044aa:	bf00      	nop
 80044ac:	bf00      	nop
 80044ae:	370c      	adds	r7, #12
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80044b4:	20012e70 	.word	0x20012e70
 80044b8:	20012f10 	.word	0x20012f10

080044bc <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 80044bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044c0:	b082      	sub	sp, #8
 80044c2:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 80044c4:	f7fe fb66 	bl	8002b94 <xTaskGetTickCountFromISR>
 80044c8:	4603      	mov	r3, r0
 80044ca:	2200      	movs	r2, #0
 80044cc:	469a      	mov	sl, r3
 80044ce:	4693      	mov	fp, r2
 80044d0:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 80044d4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80044d8:	4602      	mov	r2, r0
 80044da:	460b      	mov	r3, r1
 80044dc:	f04f 0a00 	mov.w	sl, #0
 80044e0:	f04f 0b00 	mov.w	fp, #0
 80044e4:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 80044e8:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 80044ec:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 80044f0:	4652      	mov	r2, sl
 80044f2:	465b      	mov	r3, fp
 80044f4:	1a14      	subs	r4, r2, r0
 80044f6:	eb63 0501 	sbc.w	r5, r3, r1
 80044fa:	f04f 0200 	mov.w	r2, #0
 80044fe:	f04f 0300 	mov.w	r3, #0
 8004502:	00ab      	lsls	r3, r5, #2
 8004504:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8004508:	00a2      	lsls	r2, r4, #2
 800450a:	4614      	mov	r4, r2
 800450c:	461d      	mov	r5, r3
 800450e:	eb14 0800 	adds.w	r8, r4, r0
 8004512:	eb45 0901 	adc.w	r9, r5, r1
 8004516:	f04f 0200 	mov.w	r2, #0
 800451a:	f04f 0300 	mov.w	r3, #0
 800451e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004522:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004526:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800452a:	4690      	mov	r8, r2
 800452c:	4699      	mov	r9, r3
 800452e:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8004532:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004536:	4610      	mov	r0, r2
 8004538:	4619      	mov	r1, r3
 800453a:	3708      	adds	r7, #8
 800453c:	46bd      	mov	sp, r7
 800453e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08004544 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004544:	b580      	push	{r7, lr}
 8004546:	b086      	sub	sp, #24
 8004548:	af02      	add	r7, sp, #8
 800454a:	60f8      	str	r0, [r7, #12]
 800454c:	60b9      	str	r1, [r7, #8]
 800454e:	607a      	str	r2, [r7, #4]
 8004550:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004552:	2205      	movs	r2, #5
 8004554:	492b      	ldr	r1, [pc, #172]	@ (8004604 <SYSVIEW_AddTask+0xc0>)
 8004556:	68b8      	ldr	r0, [r7, #8]
 8004558:	f002 f832 	bl	80065c0 <memcmp>
 800455c:	4603      	mov	r3, r0
 800455e:	2b00      	cmp	r3, #0
 8004560:	d04b      	beq.n	80045fa <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004562:	4b29      	ldr	r3, [pc, #164]	@ (8004608 <SYSVIEW_AddTask+0xc4>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	2b07      	cmp	r3, #7
 8004568:	d903      	bls.n	8004572 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800456a:	4828      	ldr	r0, [pc, #160]	@ (800460c <SYSVIEW_AddTask+0xc8>)
 800456c:	f001 ff96 	bl	800649c <SEGGER_SYSVIEW_Warn>
    return;
 8004570:	e044      	b.n	80045fc <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004572:	4b25      	ldr	r3, [pc, #148]	@ (8004608 <SYSVIEW_AddTask+0xc4>)
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	4926      	ldr	r1, [pc, #152]	@ (8004610 <SYSVIEW_AddTask+0xcc>)
 8004578:	4613      	mov	r3, r2
 800457a:	009b      	lsls	r3, r3, #2
 800457c:	4413      	add	r3, r2
 800457e:	009b      	lsls	r3, r3, #2
 8004580:	440b      	add	r3, r1
 8004582:	68fa      	ldr	r2, [r7, #12]
 8004584:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004586:	4b20      	ldr	r3, [pc, #128]	@ (8004608 <SYSVIEW_AddTask+0xc4>)
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	4921      	ldr	r1, [pc, #132]	@ (8004610 <SYSVIEW_AddTask+0xcc>)
 800458c:	4613      	mov	r3, r2
 800458e:	009b      	lsls	r3, r3, #2
 8004590:	4413      	add	r3, r2
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	440b      	add	r3, r1
 8004596:	3304      	adds	r3, #4
 8004598:	68ba      	ldr	r2, [r7, #8]
 800459a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 800459c:	4b1a      	ldr	r3, [pc, #104]	@ (8004608 <SYSVIEW_AddTask+0xc4>)
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	491b      	ldr	r1, [pc, #108]	@ (8004610 <SYSVIEW_AddTask+0xcc>)
 80045a2:	4613      	mov	r3, r2
 80045a4:	009b      	lsls	r3, r3, #2
 80045a6:	4413      	add	r3, r2
 80045a8:	009b      	lsls	r3, r3, #2
 80045aa:	440b      	add	r3, r1
 80045ac:	3308      	adds	r3, #8
 80045ae:	687a      	ldr	r2, [r7, #4]
 80045b0:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80045b2:	4b15      	ldr	r3, [pc, #84]	@ (8004608 <SYSVIEW_AddTask+0xc4>)
 80045b4:	681a      	ldr	r2, [r3, #0]
 80045b6:	4916      	ldr	r1, [pc, #88]	@ (8004610 <SYSVIEW_AddTask+0xcc>)
 80045b8:	4613      	mov	r3, r2
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	4413      	add	r3, r2
 80045be:	009b      	lsls	r3, r3, #2
 80045c0:	440b      	add	r3, r1
 80045c2:	330c      	adds	r3, #12
 80045c4:	683a      	ldr	r2, [r7, #0]
 80045c6:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80045c8:	4b0f      	ldr	r3, [pc, #60]	@ (8004608 <SYSVIEW_AddTask+0xc4>)
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	4910      	ldr	r1, [pc, #64]	@ (8004610 <SYSVIEW_AddTask+0xcc>)
 80045ce:	4613      	mov	r3, r2
 80045d0:	009b      	lsls	r3, r3, #2
 80045d2:	4413      	add	r3, r2
 80045d4:	009b      	lsls	r3, r3, #2
 80045d6:	440b      	add	r3, r1
 80045d8:	3310      	adds	r3, #16
 80045da:	69ba      	ldr	r2, [r7, #24]
 80045dc:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80045de:	4b0a      	ldr	r3, [pc, #40]	@ (8004608 <SYSVIEW_AddTask+0xc4>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	3301      	adds	r3, #1
 80045e4:	4a08      	ldr	r2, [pc, #32]	@ (8004608 <SYSVIEW_AddTask+0xc4>)
 80045e6:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80045e8:	69bb      	ldr	r3, [r7, #24]
 80045ea:	9300      	str	r3, [sp, #0]
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	687a      	ldr	r2, [r7, #4]
 80045f0:	68b9      	ldr	r1, [r7, #8]
 80045f2:	68f8      	ldr	r0, [r7, #12]
 80045f4:	f000 f80e 	bl	8004614 <SYSVIEW_SendTaskInfo>
 80045f8:	e000      	b.n	80045fc <SYSVIEW_AddTask+0xb8>
    return;
 80045fa:	bf00      	nop

}
 80045fc:	3710      	adds	r7, #16
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}
 8004602:	bf00      	nop
 8004604:	08006fa4 	.word	0x08006fa4
 8004608:	20012f10 	.word	0x20012f10
 800460c:	08006fac 	.word	0x08006fac
 8004610:	20012e70 	.word	0x20012e70

08004614 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004614:	b580      	push	{r7, lr}
 8004616:	b08a      	sub	sp, #40	@ 0x28
 8004618:	af00      	add	r7, sp, #0
 800461a:	60f8      	str	r0, [r7, #12]
 800461c:	60b9      	str	r1, [r7, #8]
 800461e:	607a      	str	r2, [r7, #4]
 8004620:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8004622:	f107 0314 	add.w	r3, r7, #20
 8004626:	2214      	movs	r2, #20
 8004628:	2100      	movs	r1, #0
 800462a:	4618      	mov	r0, r3
 800462c:	f001 ffd8 	bl	80065e0 <memset>
  TaskInfo.TaskID     = TaskID;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8004640:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004642:	627b      	str	r3, [r7, #36]	@ 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004644:	f107 0314 	add.w	r3, r7, #20
 8004648:	4618      	mov	r0, r3
 800464a:	f001 fb1d 	bl	8005c88 <SEGGER_SYSVIEW_SendTaskInfo>
}
 800464e:	bf00      	nop
 8004650:	3728      	adds	r7, #40	@ 0x28
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}
	...

08004658 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8004658:	b480      	push	{r7}
 800465a:	b083      	sub	sp, #12
 800465c:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800465e:	4b24      	ldr	r3, [pc, #144]	@ (80046f0 <_DoInit+0x98>)
 8004660:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2203      	movs	r2, #3
 8004666:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2203      	movs	r2, #3
 800466c:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	4a20      	ldr	r2, [pc, #128]	@ (80046f4 <_DoInit+0x9c>)
 8004672:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	4a20      	ldr	r2, [pc, #128]	@ (80046f8 <_DoInit+0xa0>)
 8004678:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004680:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2200      	movs	r2, #0
 8004686:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2200      	movs	r2, #0
 800468c:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2200      	movs	r2, #0
 8004692:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	4a17      	ldr	r2, [pc, #92]	@ (80046f4 <_DoInit+0x9c>)
 8004698:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	4a17      	ldr	r2, [pc, #92]	@ (80046fc <_DoInit+0xa4>)
 800469e:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2210      	movs	r2, #16
 80046a4:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2200      	movs	r2, #0
 80046aa:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2200      	movs	r2, #0
 80046b0:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2200      	movs	r2, #0
 80046b6:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	3307      	adds	r3, #7
 80046bc:	4a10      	ldr	r2, [pc, #64]	@ (8004700 <_DoInit+0xa8>)
 80046be:	6810      	ldr	r0, [r2, #0]
 80046c0:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80046c2:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	4a0e      	ldr	r2, [pc, #56]	@ (8004704 <_DoInit+0xac>)
 80046ca:	6810      	ldr	r0, [r2, #0]
 80046cc:	6018      	str	r0, [r3, #0]
 80046ce:	8891      	ldrh	r1, [r2, #4]
 80046d0:	7992      	ldrb	r2, [r2, #6]
 80046d2:	8099      	strh	r1, [r3, #4]
 80046d4:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80046d6:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2220      	movs	r2, #32
 80046de:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80046e0:	f3bf 8f5f 	dmb	sy
}
 80046e4:	bf00      	nop
 80046e6:	370c      	adds	r7, #12
 80046e8:	46bd      	mov	sp, r7
 80046ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ee:	4770      	bx	lr
 80046f0:	20012f14 	.word	0x20012f14
 80046f4:	08006ffc 	.word	0x08006ffc
 80046f8:	20012fbc 	.word	0x20012fbc
 80046fc:	200133bc 	.word	0x200133bc
 8004700:	08007008 	.word	0x08007008
 8004704:	0800700c 	.word	0x0800700c

08004708 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004708:	b580      	push	{r7, lr}
 800470a:	b08c      	sub	sp, #48	@ 0x30
 800470c:	af00      	add	r7, sp, #0
 800470e:	60f8      	str	r0, [r7, #12]
 8004710:	60b9      	str	r1, [r7, #8]
 8004712:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8004714:	4b3e      	ldr	r3, [pc, #248]	@ (8004810 <SEGGER_RTT_ReadNoLock+0x108>)
 8004716:	623b      	str	r3, [r7, #32]
 8004718:	6a3b      	ldr	r3, [r7, #32]
 800471a:	781b      	ldrb	r3, [r3, #0]
 800471c:	b2db      	uxtb	r3, r3
 800471e:	2b00      	cmp	r3, #0
 8004720:	d101      	bne.n	8004726 <SEGGER_RTT_ReadNoLock+0x1e>
 8004722:	f7ff ff99 	bl	8004658 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004726:	68fa      	ldr	r2, [r7, #12]
 8004728:	4613      	mov	r3, r2
 800472a:	005b      	lsls	r3, r3, #1
 800472c:	4413      	add	r3, r2
 800472e:	00db      	lsls	r3, r3, #3
 8004730:	3360      	adds	r3, #96	@ 0x60
 8004732:	4a37      	ldr	r2, [pc, #220]	@ (8004810 <SEGGER_RTT_ReadNoLock+0x108>)
 8004734:	4413      	add	r3, r2
 8004736:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 800473c:	69fb      	ldr	r3, [r7, #28]
 800473e:	691b      	ldr	r3, [r3, #16]
 8004740:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 8004742:	69fb      	ldr	r3, [r7, #28]
 8004744:	68db      	ldr	r3, [r3, #12]
 8004746:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004748:	2300      	movs	r3, #0
 800474a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800474c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800474e:	69bb      	ldr	r3, [r7, #24]
 8004750:	429a      	cmp	r2, r3
 8004752:	d92b      	bls.n	80047ac <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004754:	69fb      	ldr	r3, [r7, #28]
 8004756:	689a      	ldr	r2, [r3, #8]
 8004758:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800475a:	1ad3      	subs	r3, r2, r3
 800475c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800475e:	697a      	ldr	r2, [r7, #20]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	4293      	cmp	r3, r2
 8004764:	bf28      	it	cs
 8004766:	4613      	movcs	r3, r2
 8004768:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800476a:	69fb      	ldr	r3, [r7, #28]
 800476c:	685a      	ldr	r2, [r3, #4]
 800476e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004770:	4413      	add	r3, r2
 8004772:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004774:	697a      	ldr	r2, [r7, #20]
 8004776:	6939      	ldr	r1, [r7, #16]
 8004778:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800477a:	f001 ff5f 	bl	800663c <memcpy>
    NumBytesRead += NumBytesRem;
 800477e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	4413      	add	r3, r2
 8004784:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8004786:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	4413      	add	r3, r2
 800478c:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 800478e:	687a      	ldr	r2, [r7, #4]
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	1ad3      	subs	r3, r2, r3
 8004794:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004796:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	4413      	add	r3, r2
 800479c:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800479e:	69fb      	ldr	r3, [r7, #28]
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d101      	bne.n	80047ac <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80047a8:	2300      	movs	r3, #0
 80047aa:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80047ac:	69ba      	ldr	r2, [r7, #24]
 80047ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80047b4:	697a      	ldr	r2, [r7, #20]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	4293      	cmp	r3, r2
 80047ba:	bf28      	it	cs
 80047bc:	4613      	movcs	r3, r2
 80047be:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d019      	beq.n	80047fa <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80047c6:	69fb      	ldr	r3, [r7, #28]
 80047c8:	685a      	ldr	r2, [r3, #4]
 80047ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047cc:	4413      	add	r3, r2
 80047ce:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80047d0:	697a      	ldr	r2, [r7, #20]
 80047d2:	6939      	ldr	r1, [r7, #16]
 80047d4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80047d6:	f001 ff31 	bl	800663c <memcpy>
    NumBytesRead += NumBytesRem;
 80047da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	4413      	add	r3, r2
 80047e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 80047e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	4413      	add	r3, r2
 80047e8:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 80047ea:	687a      	ldr	r2, [r7, #4]
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	1ad3      	subs	r3, r2, r3
 80047f0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80047f2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	4413      	add	r3, r2
 80047f8:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 80047fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d002      	beq.n	8004806 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004800:	69fb      	ldr	r3, [r7, #28]
 8004802:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004804:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004806:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8004808:	4618      	mov	r0, r3
 800480a:	3730      	adds	r7, #48	@ 0x30
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}
 8004810:	20012f14 	.word	0x20012f14

08004814 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004814:	b580      	push	{r7, lr}
 8004816:	b088      	sub	sp, #32
 8004818:	af00      	add	r7, sp, #0
 800481a:	60f8      	str	r0, [r7, #12]
 800481c:	60b9      	str	r1, [r7, #8]
 800481e:	607a      	str	r2, [r7, #4]
 8004820:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8004822:	4b3d      	ldr	r3, [pc, #244]	@ (8004918 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004824:	61bb      	str	r3, [r7, #24]
 8004826:	69bb      	ldr	r3, [r7, #24]
 8004828:	781b      	ldrb	r3, [r3, #0]
 800482a:	b2db      	uxtb	r3, r3
 800482c:	2b00      	cmp	r3, #0
 800482e:	d101      	bne.n	8004834 <SEGGER_RTT_AllocUpBuffer+0x20>
 8004830:	f7ff ff12 	bl	8004658 <_DoInit>
  SEGGER_RTT_LOCK();
 8004834:	f3ef 8311 	mrs	r3, BASEPRI
 8004838:	f04f 0120 	mov.w	r1, #32
 800483c:	f381 8811 	msr	BASEPRI, r1
 8004840:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004842:	4b35      	ldr	r3, [pc, #212]	@ (8004918 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004844:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8004846:	2300      	movs	r3, #0
 8004848:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800484a:	6939      	ldr	r1, [r7, #16]
 800484c:	69fb      	ldr	r3, [r7, #28]
 800484e:	1c5a      	adds	r2, r3, #1
 8004850:	4613      	mov	r3, r2
 8004852:	005b      	lsls	r3, r3, #1
 8004854:	4413      	add	r3, r2
 8004856:	00db      	lsls	r3, r3, #3
 8004858:	440b      	add	r3, r1
 800485a:	3304      	adds	r3, #4
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d008      	beq.n	8004874 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8004862:	69fb      	ldr	r3, [r7, #28]
 8004864:	3301      	adds	r3, #1
 8004866:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	691b      	ldr	r3, [r3, #16]
 800486c:	69fa      	ldr	r2, [r7, #28]
 800486e:	429a      	cmp	r2, r3
 8004870:	dbeb      	blt.n	800484a <SEGGER_RTT_AllocUpBuffer+0x36>
 8004872:	e000      	b.n	8004876 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8004874:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	691b      	ldr	r3, [r3, #16]
 800487a:	69fa      	ldr	r2, [r7, #28]
 800487c:	429a      	cmp	r2, r3
 800487e:	da3f      	bge.n	8004900 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8004880:	6939      	ldr	r1, [r7, #16]
 8004882:	69fb      	ldr	r3, [r7, #28]
 8004884:	1c5a      	adds	r2, r3, #1
 8004886:	4613      	mov	r3, r2
 8004888:	005b      	lsls	r3, r3, #1
 800488a:	4413      	add	r3, r2
 800488c:	00db      	lsls	r3, r3, #3
 800488e:	440b      	add	r3, r1
 8004890:	68fa      	ldr	r2, [r7, #12]
 8004892:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8004894:	6939      	ldr	r1, [r7, #16]
 8004896:	69fb      	ldr	r3, [r7, #28]
 8004898:	1c5a      	adds	r2, r3, #1
 800489a:	4613      	mov	r3, r2
 800489c:	005b      	lsls	r3, r3, #1
 800489e:	4413      	add	r3, r2
 80048a0:	00db      	lsls	r3, r3, #3
 80048a2:	440b      	add	r3, r1
 80048a4:	3304      	adds	r3, #4
 80048a6:	68ba      	ldr	r2, [r7, #8]
 80048a8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 80048aa:	6939      	ldr	r1, [r7, #16]
 80048ac:	69fa      	ldr	r2, [r7, #28]
 80048ae:	4613      	mov	r3, r2
 80048b0:	005b      	lsls	r3, r3, #1
 80048b2:	4413      	add	r3, r2
 80048b4:	00db      	lsls	r3, r3, #3
 80048b6:	440b      	add	r3, r1
 80048b8:	3320      	adds	r3, #32
 80048ba:	687a      	ldr	r2, [r7, #4]
 80048bc:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 80048be:	6939      	ldr	r1, [r7, #16]
 80048c0:	69fa      	ldr	r2, [r7, #28]
 80048c2:	4613      	mov	r3, r2
 80048c4:	005b      	lsls	r3, r3, #1
 80048c6:	4413      	add	r3, r2
 80048c8:	00db      	lsls	r3, r3, #3
 80048ca:	440b      	add	r3, r1
 80048cc:	3328      	adds	r3, #40	@ 0x28
 80048ce:	2200      	movs	r2, #0
 80048d0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 80048d2:	6939      	ldr	r1, [r7, #16]
 80048d4:	69fa      	ldr	r2, [r7, #28]
 80048d6:	4613      	mov	r3, r2
 80048d8:	005b      	lsls	r3, r3, #1
 80048da:	4413      	add	r3, r2
 80048dc:	00db      	lsls	r3, r3, #3
 80048de:	440b      	add	r3, r1
 80048e0:	3324      	adds	r3, #36	@ 0x24
 80048e2:	2200      	movs	r2, #0
 80048e4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 80048e6:	6939      	ldr	r1, [r7, #16]
 80048e8:	69fa      	ldr	r2, [r7, #28]
 80048ea:	4613      	mov	r3, r2
 80048ec:	005b      	lsls	r3, r3, #1
 80048ee:	4413      	add	r3, r2
 80048f0:	00db      	lsls	r3, r3, #3
 80048f2:	440b      	add	r3, r1
 80048f4:	332c      	adds	r3, #44	@ 0x2c
 80048f6:	683a      	ldr	r2, [r7, #0]
 80048f8:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80048fa:	f3bf 8f5f 	dmb	sy
 80048fe:	e002      	b.n	8004906 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8004900:	f04f 33ff 	mov.w	r3, #4294967295
 8004904:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 800490c:	69fb      	ldr	r3, [r7, #28]
}
 800490e:	4618      	mov	r0, r3
 8004910:	3720      	adds	r7, #32
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}
 8004916:	bf00      	nop
 8004918:	20012f14 	.word	0x20012f14

0800491c <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800491c:	b580      	push	{r7, lr}
 800491e:	b088      	sub	sp, #32
 8004920:	af00      	add	r7, sp, #0
 8004922:	60f8      	str	r0, [r7, #12]
 8004924:	60b9      	str	r1, [r7, #8]
 8004926:	607a      	str	r2, [r7, #4]
 8004928:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800492a:	4b33      	ldr	r3, [pc, #204]	@ (80049f8 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 800492c:	61bb      	str	r3, [r7, #24]
 800492e:	69bb      	ldr	r3, [r7, #24]
 8004930:	781b      	ldrb	r3, [r3, #0]
 8004932:	b2db      	uxtb	r3, r3
 8004934:	2b00      	cmp	r3, #0
 8004936:	d101      	bne.n	800493c <SEGGER_RTT_ConfigDownBuffer+0x20>
 8004938:	f7ff fe8e 	bl	8004658 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800493c:	4b2e      	ldr	r3, [pc, #184]	@ (80049f8 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 800493e:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	695b      	ldr	r3, [r3, #20]
 8004944:	461a      	mov	r2, r3
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	4293      	cmp	r3, r2
 800494a:	d24d      	bcs.n	80049e8 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 800494c:	f3ef 8311 	mrs	r3, BASEPRI
 8004950:	f04f 0120 	mov.w	r1, #32
 8004954:	f381 8811 	msr	BASEPRI, r1
 8004958:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d031      	beq.n	80049c4 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 8004960:	6979      	ldr	r1, [r7, #20]
 8004962:	68fa      	ldr	r2, [r7, #12]
 8004964:	4613      	mov	r3, r2
 8004966:	005b      	lsls	r3, r3, #1
 8004968:	4413      	add	r3, r2
 800496a:	00db      	lsls	r3, r3, #3
 800496c:	440b      	add	r3, r1
 800496e:	3360      	adds	r3, #96	@ 0x60
 8004970:	68ba      	ldr	r2, [r7, #8]
 8004972:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8004974:	6979      	ldr	r1, [r7, #20]
 8004976:	68fa      	ldr	r2, [r7, #12]
 8004978:	4613      	mov	r3, r2
 800497a:	005b      	lsls	r3, r3, #1
 800497c:	4413      	add	r3, r2
 800497e:	00db      	lsls	r3, r3, #3
 8004980:	440b      	add	r3, r1
 8004982:	3364      	adds	r3, #100	@ 0x64
 8004984:	687a      	ldr	r2, [r7, #4]
 8004986:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8004988:	6979      	ldr	r1, [r7, #20]
 800498a:	68fa      	ldr	r2, [r7, #12]
 800498c:	4613      	mov	r3, r2
 800498e:	005b      	lsls	r3, r3, #1
 8004990:	4413      	add	r3, r2
 8004992:	00db      	lsls	r3, r3, #3
 8004994:	440b      	add	r3, r1
 8004996:	3368      	adds	r3, #104	@ 0x68
 8004998:	683a      	ldr	r2, [r7, #0]
 800499a:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 800499c:	6979      	ldr	r1, [r7, #20]
 800499e:	68fa      	ldr	r2, [r7, #12]
 80049a0:	4613      	mov	r3, r2
 80049a2:	005b      	lsls	r3, r3, #1
 80049a4:	4413      	add	r3, r2
 80049a6:	00db      	lsls	r3, r3, #3
 80049a8:	440b      	add	r3, r1
 80049aa:	3370      	adds	r3, #112	@ 0x70
 80049ac:	2200      	movs	r2, #0
 80049ae:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 80049b0:	6979      	ldr	r1, [r7, #20]
 80049b2:	68fa      	ldr	r2, [r7, #12]
 80049b4:	4613      	mov	r3, r2
 80049b6:	005b      	lsls	r3, r3, #1
 80049b8:	4413      	add	r3, r2
 80049ba:	00db      	lsls	r3, r3, #3
 80049bc:	440b      	add	r3, r1
 80049be:	336c      	adds	r3, #108	@ 0x6c
 80049c0:	2200      	movs	r2, #0
 80049c2:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 80049c4:	6979      	ldr	r1, [r7, #20]
 80049c6:	68fa      	ldr	r2, [r7, #12]
 80049c8:	4613      	mov	r3, r2
 80049ca:	005b      	lsls	r3, r3, #1
 80049cc:	4413      	add	r3, r2
 80049ce:	00db      	lsls	r3, r3, #3
 80049d0:	440b      	add	r3, r1
 80049d2:	3374      	adds	r3, #116	@ 0x74
 80049d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80049d6:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80049d8:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80049e2:	2300      	movs	r3, #0
 80049e4:	61fb      	str	r3, [r7, #28]
 80049e6:	e002      	b.n	80049ee <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 80049e8:	f04f 33ff 	mov.w	r3, #4294967295
 80049ec:	61fb      	str	r3, [r7, #28]
  }
  return r;
 80049ee:	69fb      	ldr	r3, [r7, #28]
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	3720      	adds	r7, #32
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}
 80049f8:	20012f14 	.word	0x20012f14

080049fc <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80049fc:	b480      	push	{r7}
 80049fe:	b087      	sub	sp, #28
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	60f8      	str	r0, [r7, #12]
 8004a04:	60b9      	str	r1, [r7, #8]
 8004a06:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8004a0c:	e002      	b.n	8004a14 <_EncodeStr+0x18>
    Len++;
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	3301      	adds	r3, #1
 8004a12:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8004a14:	68ba      	ldr	r2, [r7, #8]
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	4413      	add	r3, r2
 8004a1a:	781b      	ldrb	r3, [r3, #0]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d1f6      	bne.n	8004a0e <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8004a20:	693a      	ldr	r2, [r7, #16]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d901      	bls.n	8004a2c <_EncodeStr+0x30>
    Len = Limit;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	2bfe      	cmp	r3, #254	@ 0xfe
 8004a30:	d806      	bhi.n	8004a40 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	1c5a      	adds	r2, r3, #1
 8004a36:	60fa      	str	r2, [r7, #12]
 8004a38:	693a      	ldr	r2, [r7, #16]
 8004a3a:	b2d2      	uxtb	r2, r2
 8004a3c:	701a      	strb	r2, [r3, #0]
 8004a3e:	e011      	b.n	8004a64 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	1c5a      	adds	r2, r3, #1
 8004a44:	60fa      	str	r2, [r7, #12]
 8004a46:	22ff      	movs	r2, #255	@ 0xff
 8004a48:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	1c5a      	adds	r2, r3, #1
 8004a4e:	60fa      	str	r2, [r7, #12]
 8004a50:	693a      	ldr	r2, [r7, #16]
 8004a52:	b2d2      	uxtb	r2, r2
 8004a54:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	0a19      	lsrs	r1, r3, #8
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	1c5a      	adds	r2, r3, #1
 8004a5e:	60fa      	str	r2, [r7, #12]
 8004a60:	b2ca      	uxtb	r2, r1
 8004a62:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8004a64:	2300      	movs	r3, #0
 8004a66:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8004a68:	e00a      	b.n	8004a80 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8004a6a:	68ba      	ldr	r2, [r7, #8]
 8004a6c:	1c53      	adds	r3, r2, #1
 8004a6e:	60bb      	str	r3, [r7, #8]
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	1c59      	adds	r1, r3, #1
 8004a74:	60f9      	str	r1, [r7, #12]
 8004a76:	7812      	ldrb	r2, [r2, #0]
 8004a78:	701a      	strb	r2, [r3, #0]
    n++;
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	3301      	adds	r3, #1
 8004a7e:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8004a80:	697a      	ldr	r2, [r7, #20]
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	429a      	cmp	r2, r3
 8004a86:	d3f0      	bcc.n	8004a6a <_EncodeStr+0x6e>
  }
  return pPayload;
 8004a88:	68fb      	ldr	r3, [r7, #12]
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	371c      	adds	r7, #28
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a94:	4770      	bx	lr

08004a96 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8004a96:	b480      	push	{r7}
 8004a98:	b083      	sub	sp, #12
 8004a9a:	af00      	add	r7, sp, #0
 8004a9c:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	3304      	adds	r3, #4
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	370c      	adds	r7, #12
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aac:	4770      	bx	lr
	...

08004ab0 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b082      	sub	sp, #8
 8004ab4:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004ab6:	4b35      	ldr	r3, [pc, #212]	@ (8004b8c <_HandleIncomingPacket+0xdc>)
 8004ab8:	7e1b      	ldrb	r3, [r3, #24]
 8004aba:	4618      	mov	r0, r3
 8004abc:	1cfb      	adds	r3, r7, #3
 8004abe:	2201      	movs	r2, #1
 8004ac0:	4619      	mov	r1, r3
 8004ac2:	f7ff fe21 	bl	8004708 <SEGGER_RTT_ReadNoLock>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	dd59      	ble.n	8004b84 <_HandleIncomingPacket+0xd4>
    switch (Cmd) {
 8004ad0:	78fb      	ldrb	r3, [r7, #3]
 8004ad2:	2b80      	cmp	r3, #128	@ 0x80
 8004ad4:	d032      	beq.n	8004b3c <_HandleIncomingPacket+0x8c>
 8004ad6:	2b80      	cmp	r3, #128	@ 0x80
 8004ad8:	dc42      	bgt.n	8004b60 <_HandleIncomingPacket+0xb0>
 8004ada:	2b07      	cmp	r3, #7
 8004adc:	dc16      	bgt.n	8004b0c <_HandleIncomingPacket+0x5c>
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	dd3e      	ble.n	8004b60 <_HandleIncomingPacket+0xb0>
 8004ae2:	3b01      	subs	r3, #1
 8004ae4:	2b06      	cmp	r3, #6
 8004ae6:	d83b      	bhi.n	8004b60 <_HandleIncomingPacket+0xb0>
 8004ae8:	a201      	add	r2, pc, #4	@ (adr r2, 8004af0 <_HandleIncomingPacket+0x40>)
 8004aea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aee:	bf00      	nop
 8004af0:	08004b13 	.word	0x08004b13
 8004af4:	08004b19 	.word	0x08004b19
 8004af8:	08004b1f 	.word	0x08004b1f
 8004afc:	08004b25 	.word	0x08004b25
 8004b00:	08004b2b 	.word	0x08004b2b
 8004b04:	08004b31 	.word	0x08004b31
 8004b08:	08004b37 	.word	0x08004b37
 8004b0c:	2b7f      	cmp	r3, #127	@ 0x7f
 8004b0e:	d034      	beq.n	8004b7a <_HandleIncomingPacket+0xca>
 8004b10:	e026      	b.n	8004b60 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8004b12:	f000 ff3f 	bl	8005994 <SEGGER_SYSVIEW_Start>
      break;
 8004b16:	e035      	b.n	8004b84 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8004b18:	f000 fff6 	bl	8005b08 <SEGGER_SYSVIEW_Stop>
      break;
 8004b1c:	e032      	b.n	8004b84 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8004b1e:	f001 f9cf 	bl	8005ec0 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8004b22:	e02f      	b.n	8004b84 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8004b24:	f001 f994 	bl	8005e50 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8004b28:	e02c      	b.n	8004b84 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8004b2a:	f001 f813 	bl	8005b54 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8004b2e:	e029      	b.n	8004b84 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8004b30:	f001 fc62 	bl	80063f8 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8004b34:	e026      	b.n	8004b84 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8004b36:	f001 fc41 	bl	80063bc <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8004b3a:	e023      	b.n	8004b84 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004b3c:	4b13      	ldr	r3, [pc, #76]	@ (8004b8c <_HandleIncomingPacket+0xdc>)
 8004b3e:	7e1b      	ldrb	r3, [r3, #24]
 8004b40:	4618      	mov	r0, r3
 8004b42:	1cfb      	adds	r3, r7, #3
 8004b44:	2201      	movs	r2, #1
 8004b46:	4619      	mov	r1, r3
 8004b48:	f7ff fdde 	bl	8004708 <SEGGER_RTT_ReadNoLock>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	dd13      	ble.n	8004b7e <_HandleIncomingPacket+0xce>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8004b56:	78fb      	ldrb	r3, [r7, #3]
 8004b58:	4618      	mov	r0, r3
 8004b5a:	f001 fbaf 	bl	80062bc <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8004b5e:	e00e      	b.n	8004b7e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8004b60:	78fb      	ldrb	r3, [r7, #3]
 8004b62:	b25b      	sxtb	r3, r3
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	da0c      	bge.n	8004b82 <_HandleIncomingPacket+0xd2>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004b68:	4b08      	ldr	r3, [pc, #32]	@ (8004b8c <_HandleIncomingPacket+0xdc>)
 8004b6a:	7e1b      	ldrb	r3, [r3, #24]
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	1cfb      	adds	r3, r7, #3
 8004b70:	2201      	movs	r2, #1
 8004b72:	4619      	mov	r1, r3
 8004b74:	f7ff fdc8 	bl	8004708 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8004b78:	e003      	b.n	8004b82 <_HandleIncomingPacket+0xd2>
      break;
 8004b7a:	bf00      	nop
 8004b7c:	e002      	b.n	8004b84 <_HandleIncomingPacket+0xd4>
      break;
 8004b7e:	bf00      	nop
 8004b80:	e000      	b.n	8004b84 <_HandleIncomingPacket+0xd4>
      break;
 8004b82:	bf00      	nop
    }
  }
}
 8004b84:	bf00      	nop
 8004b86:	3708      	adds	r7, #8
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}
 8004b8c:	200143d4 	.word	0x200143d4

08004b90 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b08c      	sub	sp, #48	@ 0x30
 8004b94:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8004b96:	2301      	movs	r3, #1
 8004b98:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8004b9a:	1d3b      	adds	r3, r7, #4
 8004b9c:	3301      	adds	r3, #1
 8004b9e:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8004ba0:	69fb      	ldr	r3, [r7, #28]
 8004ba2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ba4:	4b31      	ldr	r3, [pc, #196]	@ (8004c6c <_TrySendOverflowPacket+0xdc>)
 8004ba6:	695b      	ldr	r3, [r3, #20]
 8004ba8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004baa:	e00b      	b.n	8004bc4 <_TrySendOverflowPacket+0x34>
 8004bac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bae:	b2da      	uxtb	r2, r3
 8004bb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bb2:	1c59      	adds	r1, r3, #1
 8004bb4:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004bb6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004bba:	b2d2      	uxtb	r2, r2
 8004bbc:	701a      	strb	r2, [r3, #0]
 8004bbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bc0:	09db      	lsrs	r3, r3, #7
 8004bc2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004bc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bc6:	2b7f      	cmp	r3, #127	@ 0x7f
 8004bc8:	d8f0      	bhi.n	8004bac <_TrySendOverflowPacket+0x1c>
 8004bca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bcc:	1c5a      	adds	r2, r3, #1
 8004bce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004bd0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004bd2:	b2d2      	uxtb	r2, r2
 8004bd4:	701a      	strb	r2, [r3, #0]
 8004bd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bd8:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004bda:	4b25      	ldr	r3, [pc, #148]	@ (8004c70 <_TrySendOverflowPacket+0xe0>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004be0:	4b22      	ldr	r3, [pc, #136]	@ (8004c6c <_TrySendOverflowPacket+0xdc>)
 8004be2:	68db      	ldr	r3, [r3, #12]
 8004be4:	69ba      	ldr	r2, [r7, #24]
 8004be6:	1ad3      	subs	r3, r2, r3
 8004be8:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8004bea:	69fb      	ldr	r3, [r7, #28]
 8004bec:	627b      	str	r3, [r7, #36]	@ 0x24
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	623b      	str	r3, [r7, #32]
 8004bf2:	e00b      	b.n	8004c0c <_TrySendOverflowPacket+0x7c>
 8004bf4:	6a3b      	ldr	r3, [r7, #32]
 8004bf6:	b2da      	uxtb	r2, r3
 8004bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bfa:	1c59      	adds	r1, r3, #1
 8004bfc:	6279      	str	r1, [r7, #36]	@ 0x24
 8004bfe:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004c02:	b2d2      	uxtb	r2, r2
 8004c04:	701a      	strb	r2, [r3, #0]
 8004c06:	6a3b      	ldr	r3, [r7, #32]
 8004c08:	09db      	lsrs	r3, r3, #7
 8004c0a:	623b      	str	r3, [r7, #32]
 8004c0c:	6a3b      	ldr	r3, [r7, #32]
 8004c0e:	2b7f      	cmp	r3, #127	@ 0x7f
 8004c10:	d8f0      	bhi.n	8004bf4 <_TrySendOverflowPacket+0x64>
 8004c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c14:	1c5a      	adds	r2, r3, #1
 8004c16:	627a      	str	r2, [r7, #36]	@ 0x24
 8004c18:	6a3a      	ldr	r2, [r7, #32]
 8004c1a:	b2d2      	uxtb	r2, r2
 8004c1c:	701a      	strb	r2, [r3, #0]
 8004c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c20:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8004c22:	4b12      	ldr	r3, [pc, #72]	@ (8004c6c <_TrySendOverflowPacket+0xdc>)
 8004c24:	785b      	ldrb	r3, [r3, #1]
 8004c26:	4618      	mov	r0, r3
 8004c28:	1d3b      	adds	r3, r7, #4
 8004c2a:	69fa      	ldr	r2, [r7, #28]
 8004c2c:	1ad3      	subs	r3, r2, r3
 8004c2e:	461a      	mov	r2, r3
 8004c30:	1d3b      	adds	r3, r7, #4
 8004c32:	4619      	mov	r1, r3
 8004c34:	f7fb facc 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d009      	beq.n	8004c56 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004c42:	4a0a      	ldr	r2, [pc, #40]	@ (8004c6c <_TrySendOverflowPacket+0xdc>)
 8004c44:	69bb      	ldr	r3, [r7, #24]
 8004c46:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8004c48:	4b08      	ldr	r3, [pc, #32]	@ (8004c6c <_TrySendOverflowPacket+0xdc>)
 8004c4a:	781b      	ldrb	r3, [r3, #0]
 8004c4c:	3b01      	subs	r3, #1
 8004c4e:	b2da      	uxtb	r2, r3
 8004c50:	4b06      	ldr	r3, [pc, #24]	@ (8004c6c <_TrySendOverflowPacket+0xdc>)
 8004c52:	701a      	strb	r2, [r3, #0]
 8004c54:	e004      	b.n	8004c60 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8004c56:	4b05      	ldr	r3, [pc, #20]	@ (8004c6c <_TrySendOverflowPacket+0xdc>)
 8004c58:	695b      	ldr	r3, [r3, #20]
 8004c5a:	3301      	adds	r3, #1
 8004c5c:	4a03      	ldr	r2, [pc, #12]	@ (8004c6c <_TrySendOverflowPacket+0xdc>)
 8004c5e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8004c60:	693b      	ldr	r3, [r7, #16]
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3730      	adds	r7, #48	@ 0x30
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}
 8004c6a:	bf00      	nop
 8004c6c:	200143d4 	.word	0x200143d4
 8004c70:	e0001004 	.word	0xe0001004

08004c74 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b08a      	sub	sp, #40	@ 0x28
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	60f8      	str	r0, [r7, #12]
 8004c7c:	60b9      	str	r1, [r7, #8]
 8004c7e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8004c80:	4b6c      	ldr	r3, [pc, #432]	@ (8004e34 <_SendPacket+0x1c0>)
 8004c82:	781b      	ldrb	r3, [r3, #0]
 8004c84:	2b01      	cmp	r3, #1
 8004c86:	d010      	beq.n	8004caa <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8004c88:	4b6a      	ldr	r3, [pc, #424]	@ (8004e34 <_SendPacket+0x1c0>)
 8004c8a:	781b      	ldrb	r3, [r3, #0]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	f000 80a3 	beq.w	8004dd8 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8004c92:	4b68      	ldr	r3, [pc, #416]	@ (8004e34 <_SendPacket+0x1c0>)
 8004c94:	781b      	ldrb	r3, [r3, #0]
 8004c96:	2b02      	cmp	r3, #2
 8004c98:	d109      	bne.n	8004cae <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8004c9a:	f7ff ff79 	bl	8004b90 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8004c9e:	4b65      	ldr	r3, [pc, #404]	@ (8004e34 <_SendPacket+0x1c0>)
 8004ca0:	781b      	ldrb	r3, [r3, #0]
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	f040 809a 	bne.w	8004ddc <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 8004ca8:	e001      	b.n	8004cae <_SendPacket+0x3a>
    goto Send;
 8004caa:	bf00      	nop
 8004cac:	e000      	b.n	8004cb0 <_SendPacket+0x3c>
Send:
 8004cae:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2b1f      	cmp	r3, #31
 8004cb4:	d809      	bhi.n	8004cca <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8004cb6:	4b5f      	ldr	r3, [pc, #380]	@ (8004e34 <_SendPacket+0x1c0>)
 8004cb8:	69da      	ldr	r2, [r3, #28]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	fa22 f303 	lsr.w	r3, r2, r3
 8004cc0:	f003 0301 	and.w	r3, r3, #1
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	f040 808b 	bne.w	8004de0 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2b17      	cmp	r3, #23
 8004cce:	d807      	bhi.n	8004ce0 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	3b01      	subs	r3, #1
 8004cd4:	60fb      	str	r3, [r7, #12]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	b2da      	uxtb	r2, r3
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	701a      	strb	r2, [r3, #0]
 8004cde:	e03d      	b.n	8004d5c <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8004ce0:	68ba      	ldr	r2, [r7, #8]
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	1ad3      	subs	r3, r2, r3
 8004ce6:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8004ce8:	69fb      	ldr	r3, [r7, #28]
 8004cea:	2b7f      	cmp	r3, #127	@ 0x7f
 8004cec:	d912      	bls.n	8004d14 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8004cee:	69fb      	ldr	r3, [r7, #28]
 8004cf0:	09da      	lsrs	r2, r3, #7
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	3b01      	subs	r3, #1
 8004cf6:	60fb      	str	r3, [r7, #12]
 8004cf8:	b2d2      	uxtb	r2, r2
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8004cfe:	69fb      	ldr	r3, [r7, #28]
 8004d00:	b2db      	uxtb	r3, r3
 8004d02:	68fa      	ldr	r2, [r7, #12]
 8004d04:	3a01      	subs	r2, #1
 8004d06:	60fa      	str	r2, [r7, #12]
 8004d08:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004d0c:	b2da      	uxtb	r2, r3
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	701a      	strb	r2, [r3, #0]
 8004d12:	e006      	b.n	8004d22 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	3b01      	subs	r3, #1
 8004d18:	60fb      	str	r3, [r7, #12]
 8004d1a:	69fb      	ldr	r3, [r7, #28]
 8004d1c:	b2da      	uxtb	r2, r3
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2b7f      	cmp	r3, #127	@ 0x7f
 8004d26:	d912      	bls.n	8004d4e <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	09da      	lsrs	r2, r3, #7
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	3b01      	subs	r3, #1
 8004d30:	60fb      	str	r3, [r7, #12]
 8004d32:	b2d2      	uxtb	r2, r2
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	b2db      	uxtb	r3, r3
 8004d3c:	68fa      	ldr	r2, [r7, #12]
 8004d3e:	3a01      	subs	r2, #1
 8004d40:	60fa      	str	r2, [r7, #12]
 8004d42:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004d46:	b2da      	uxtb	r2, r3
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	701a      	strb	r2, [r3, #0]
 8004d4c:	e006      	b.n	8004d5c <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	3b01      	subs	r3, #1
 8004d52:	60fb      	str	r3, [r7, #12]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	b2da      	uxtb	r2, r3
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004d5c:	4b36      	ldr	r3, [pc, #216]	@ (8004e38 <_SendPacket+0x1c4>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004d62:	4b34      	ldr	r3, [pc, #208]	@ (8004e34 <_SendPacket+0x1c0>)
 8004d64:	68db      	ldr	r3, [r3, #12]
 8004d66:	69ba      	ldr	r2, [r7, #24]
 8004d68:	1ad3      	subs	r3, r2, r3
 8004d6a:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	623b      	str	r3, [r7, #32]
 8004d74:	e00b      	b.n	8004d8e <_SendPacket+0x11a>
 8004d76:	6a3b      	ldr	r3, [r7, #32]
 8004d78:	b2da      	uxtb	r2, r3
 8004d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d7c:	1c59      	adds	r1, r3, #1
 8004d7e:	6279      	str	r1, [r7, #36]	@ 0x24
 8004d80:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004d84:	b2d2      	uxtb	r2, r2
 8004d86:	701a      	strb	r2, [r3, #0]
 8004d88:	6a3b      	ldr	r3, [r7, #32]
 8004d8a:	09db      	lsrs	r3, r3, #7
 8004d8c:	623b      	str	r3, [r7, #32]
 8004d8e:	6a3b      	ldr	r3, [r7, #32]
 8004d90:	2b7f      	cmp	r3, #127	@ 0x7f
 8004d92:	d8f0      	bhi.n	8004d76 <_SendPacket+0x102>
 8004d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d96:	1c5a      	adds	r2, r3, #1
 8004d98:	627a      	str	r2, [r7, #36]	@ 0x24
 8004d9a:	6a3a      	ldr	r2, [r7, #32]
 8004d9c:	b2d2      	uxtb	r2, r2
 8004d9e:	701a      	strb	r2, [r3, #0]
 8004da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004da2:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8004da4:	4b23      	ldr	r3, [pc, #140]	@ (8004e34 <_SendPacket+0x1c0>)
 8004da6:	785b      	ldrb	r3, [r3, #1]
 8004da8:	4618      	mov	r0, r3
 8004daa:	68ba      	ldr	r2, [r7, #8]
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	1ad3      	subs	r3, r2, r3
 8004db0:	461a      	mov	r2, r3
 8004db2:	68f9      	ldr	r1, [r7, #12]
 8004db4:	f7fb fa0c 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004db8:	4603      	mov	r3, r0
 8004dba:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d003      	beq.n	8004dca <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004dc2:	4a1c      	ldr	r2, [pc, #112]	@ (8004e34 <_SendPacket+0x1c0>)
 8004dc4:	69bb      	ldr	r3, [r7, #24]
 8004dc6:	60d3      	str	r3, [r2, #12]
 8004dc8:	e00b      	b.n	8004de2 <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8004dca:	4b1a      	ldr	r3, [pc, #104]	@ (8004e34 <_SendPacket+0x1c0>)
 8004dcc:	781b      	ldrb	r3, [r3, #0]
 8004dce:	3301      	adds	r3, #1
 8004dd0:	b2da      	uxtb	r2, r3
 8004dd2:	4b18      	ldr	r3, [pc, #96]	@ (8004e34 <_SendPacket+0x1c0>)
 8004dd4:	701a      	strb	r2, [r3, #0]
 8004dd6:	e004      	b.n	8004de2 <_SendPacket+0x16e>
    goto SendDone;
 8004dd8:	bf00      	nop
 8004dda:	e002      	b.n	8004de2 <_SendPacket+0x16e>
      goto SendDone;
 8004ddc:	bf00      	nop
 8004dde:	e000      	b.n	8004de2 <_SendPacket+0x16e>
      goto SendDone;
 8004de0:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8004de2:	4b14      	ldr	r3, [pc, #80]	@ (8004e34 <_SendPacket+0x1c0>)
 8004de4:	7e1b      	ldrb	r3, [r3, #24]
 8004de6:	4619      	mov	r1, r3
 8004de8:	4a14      	ldr	r2, [pc, #80]	@ (8004e3c <_SendPacket+0x1c8>)
 8004dea:	460b      	mov	r3, r1
 8004dec:	005b      	lsls	r3, r3, #1
 8004dee:	440b      	add	r3, r1
 8004df0:	00db      	lsls	r3, r3, #3
 8004df2:	4413      	add	r3, r2
 8004df4:	336c      	adds	r3, #108	@ 0x6c
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	4b0e      	ldr	r3, [pc, #56]	@ (8004e34 <_SendPacket+0x1c0>)
 8004dfa:	7e1b      	ldrb	r3, [r3, #24]
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	490f      	ldr	r1, [pc, #60]	@ (8004e3c <_SendPacket+0x1c8>)
 8004e00:	4603      	mov	r3, r0
 8004e02:	005b      	lsls	r3, r3, #1
 8004e04:	4403      	add	r3, r0
 8004e06:	00db      	lsls	r3, r3, #3
 8004e08:	440b      	add	r3, r1
 8004e0a:	3370      	adds	r3, #112	@ 0x70
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	429a      	cmp	r2, r3
 8004e10:	d00b      	beq.n	8004e2a <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8004e12:	4b08      	ldr	r3, [pc, #32]	@ (8004e34 <_SendPacket+0x1c0>)
 8004e14:	789b      	ldrb	r3, [r3, #2]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d107      	bne.n	8004e2a <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8004e1a:	4b06      	ldr	r3, [pc, #24]	@ (8004e34 <_SendPacket+0x1c0>)
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8004e20:	f7ff fe46 	bl	8004ab0 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8004e24:	4b03      	ldr	r3, [pc, #12]	@ (8004e34 <_SendPacket+0x1c0>)
 8004e26:	2200      	movs	r2, #0
 8004e28:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8004e2a:	bf00      	nop
 8004e2c:	3728      	adds	r7, #40	@ 0x28
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}
 8004e32:	bf00      	nop
 8004e34:	200143d4 	.word	0x200143d4
 8004e38:	e0001004 	.word	0xe0001004
 8004e3c:	20012f14 	.word	0x20012f14

08004e40 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b08a      	sub	sp, #40	@ 0x28
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
 8004e48:	460b      	mov	r3, r1
 8004e4a:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	691b      	ldr	r3, [r3, #16]
 8004e50:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	3301      	adds	r3, #1
 8004e56:	2b80      	cmp	r3, #128	@ 0x80
 8004e58:	d80a      	bhi.n	8004e70 <_StoreChar+0x30>
    *(p->pPayload++) = c;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	1c59      	adds	r1, r3, #1
 8004e60:	687a      	ldr	r2, [r7, #4]
 8004e62:	6051      	str	r1, [r2, #4]
 8004e64:	78fa      	ldrb	r2, [r7, #3]
 8004e66:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	1c5a      	adds	r2, r3, #1
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	691b      	ldr	r3, [r3, #16]
 8004e74:	2b80      	cmp	r3, #128	@ 0x80
 8004e76:	d15a      	bne.n	8004f2e <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	691a      	ldr	r2, [r3, #16]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	b2d2      	uxtb	r2, r2
 8004e82:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	68db      	ldr	r3, [r3, #12]
 8004e8e:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	623b      	str	r3, [r7, #32]
 8004e98:	e00b      	b.n	8004eb2 <_StoreChar+0x72>
 8004e9a:	6a3b      	ldr	r3, [r7, #32]
 8004e9c:	b2da      	uxtb	r2, r3
 8004e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ea0:	1c59      	adds	r1, r3, #1
 8004ea2:	6279      	str	r1, [r7, #36]	@ 0x24
 8004ea4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004ea8:	b2d2      	uxtb	r2, r2
 8004eaa:	701a      	strb	r2, [r3, #0]
 8004eac:	6a3b      	ldr	r3, [r7, #32]
 8004eae:	09db      	lsrs	r3, r3, #7
 8004eb0:	623b      	str	r3, [r7, #32]
 8004eb2:	6a3b      	ldr	r3, [r7, #32]
 8004eb4:	2b7f      	cmp	r3, #127	@ 0x7f
 8004eb6:	d8f0      	bhi.n	8004e9a <_StoreChar+0x5a>
 8004eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eba:	1c5a      	adds	r2, r3, #1
 8004ebc:	627a      	str	r2, [r7, #36]	@ 0x24
 8004ebe:	6a3a      	ldr	r2, [r7, #32]
 8004ec0:	b2d2      	uxtb	r2, r2
 8004ec2:	701a      	strb	r2, [r3, #0]
 8004ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ec6:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	61fb      	str	r3, [r7, #28]
 8004ecc:	2300      	movs	r3, #0
 8004ece:	61bb      	str	r3, [r7, #24]
 8004ed0:	e00b      	b.n	8004eea <_StoreChar+0xaa>
 8004ed2:	69bb      	ldr	r3, [r7, #24]
 8004ed4:	b2da      	uxtb	r2, r3
 8004ed6:	69fb      	ldr	r3, [r7, #28]
 8004ed8:	1c59      	adds	r1, r3, #1
 8004eda:	61f9      	str	r1, [r7, #28]
 8004edc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004ee0:	b2d2      	uxtb	r2, r2
 8004ee2:	701a      	strb	r2, [r3, #0]
 8004ee4:	69bb      	ldr	r3, [r7, #24]
 8004ee6:	09db      	lsrs	r3, r3, #7
 8004ee8:	61bb      	str	r3, [r7, #24]
 8004eea:	69bb      	ldr	r3, [r7, #24]
 8004eec:	2b7f      	cmp	r3, #127	@ 0x7f
 8004eee:	d8f0      	bhi.n	8004ed2 <_StoreChar+0x92>
 8004ef0:	69fb      	ldr	r3, [r7, #28]
 8004ef2:	1c5a      	adds	r2, r3, #1
 8004ef4:	61fa      	str	r2, [r7, #28]
 8004ef6:	69ba      	ldr	r2, [r7, #24]
 8004ef8:	b2d2      	uxtb	r2, r2
 8004efa:	701a      	strb	r2, [r3, #0]
 8004efc:	69fb      	ldr	r3, [r7, #28]
 8004efe:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	689b      	ldr	r3, [r3, #8]
 8004f04:	221a      	movs	r2, #26
 8004f06:	6939      	ldr	r1, [r7, #16]
 8004f08:	4618      	mov	r0, r3
 8004f0a:	f7ff feb3 	bl	8004c74 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4618      	mov	r0, r3
 8004f14:	f7ff fdbf 	bl	8004a96 <_PreparePacket>
 8004f18:	4602      	mov	r2, r0
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	1c5a      	adds	r2, r3, #1
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	611a      	str	r2, [r3, #16]
  }
}
 8004f2e:	bf00      	nop
 8004f30:	3728      	adds	r7, #40	@ 0x28
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}
	...

08004f38 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b08a      	sub	sp, #40	@ 0x28
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	60f8      	str	r0, [r7, #12]
 8004f40:	60b9      	str	r1, [r7, #8]
 8004f42:	607a      	str	r2, [r7, #4]
 8004f44:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	627b      	str	r3, [r7, #36]	@ 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8004f52:	e007      	b.n	8004f64 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8004f54:	6a3a      	ldr	r2, [r7, #32]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f5c:	623b      	str	r3, [r7, #32]
    Width++;
 8004f5e:	69fb      	ldr	r3, [r7, #28]
 8004f60:	3301      	adds	r3, #1
 8004f62:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8004f64:	6a3a      	ldr	r2, [r7, #32]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	d2f3      	bcs.n	8004f54 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8004f6c:	683a      	ldr	r2, [r7, #0]
 8004f6e:	69fb      	ldr	r3, [r7, #28]
 8004f70:	429a      	cmp	r2, r3
 8004f72:	d901      	bls.n	8004f78 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8004f78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f7a:	f003 0301 	and.w	r3, r3, #1
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d000      	beq.n	8004f84 <_PrintUnsigned+0x4c>
 8004f82:	e01f      	b.n	8004fc4 <_PrintUnsigned+0x8c>
    if (FieldWidth != 0u) {
 8004f84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d01c      	beq.n	8004fc4 <_PrintUnsigned+0x8c>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8004f8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f8c:	f003 0302 	and.w	r3, r3, #2
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d005      	beq.n	8004fa0 <_PrintUnsigned+0x68>
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d102      	bne.n	8004fa0 <_PrintUnsigned+0x68>
        c = '0';
 8004f9a:	2330      	movs	r3, #48	@ 0x30
 8004f9c:	76fb      	strb	r3, [r7, #27]
 8004f9e:	e001      	b.n	8004fa4 <_PrintUnsigned+0x6c>
      } else {
        c = ' ';
 8004fa0:	2320      	movs	r3, #32
 8004fa2:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004fa4:	e007      	b.n	8004fb6 <_PrintUnsigned+0x7e>
        FieldWidth--;
 8004fa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fa8:	3b01      	subs	r3, #1
 8004faa:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, c);
 8004fac:	7efb      	ldrb	r3, [r7, #27]
 8004fae:	4619      	mov	r1, r3
 8004fb0:	68f8      	ldr	r0, [r7, #12]
 8004fb2:	f7ff ff45 	bl	8004e40 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004fb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d003      	beq.n	8004fc4 <_PrintUnsigned+0x8c>
 8004fbc:	69fa      	ldr	r2, [r7, #28]
 8004fbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d3f0      	bcc.n	8004fa6 <_PrintUnsigned+0x6e>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	2b01      	cmp	r3, #1
 8004fc8:	d903      	bls.n	8004fd2 <_PrintUnsigned+0x9a>
      NumDigits--;
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	3b01      	subs	r3, #1
 8004fce:	603b      	str	r3, [r7, #0]
 8004fd0:	e009      	b.n	8004fe6 <_PrintUnsigned+0xae>
    } else {
      Div = v / Digit;
 8004fd2:	68ba      	ldr	r2, [r7, #8]
 8004fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fda:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8004fdc:	697a      	ldr	r2, [r7, #20]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d200      	bcs.n	8004fe6 <_PrintUnsigned+0xae>
        break;
 8004fe4:	e005      	b.n	8004ff2 <_PrintUnsigned+0xba>
      }
    }
    Digit *= Base;
 8004fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fe8:	687a      	ldr	r2, [r7, #4]
 8004fea:	fb02 f303 	mul.w	r3, r2, r3
 8004fee:	627b      	str	r3, [r7, #36]	@ 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8004ff0:	e7e8      	b.n	8004fc4 <_PrintUnsigned+0x8c>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8004ff2:	68ba      	ldr	r2, [r7, #8]
 8004ff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ff6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ffa:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005000:	fb02 f303 	mul.w	r3, r2, r3
 8005004:	68ba      	ldr	r2, [r7, #8]
 8005006:	1ad3      	subs	r3, r2, r3
 8005008:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 800500a:	4a15      	ldr	r2, [pc, #84]	@ (8005060 <_PrintUnsigned+0x128>)
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	4413      	add	r3, r2
 8005010:	781b      	ldrb	r3, [r3, #0]
 8005012:	4619      	mov	r1, r3
 8005014:	68f8      	ldr	r0, [r7, #12]
 8005016:	f7ff ff13 	bl	8004e40 <_StoreChar>
    Digit /= Base;
 800501a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005022:	627b      	str	r3, [r7, #36]	@ 0x24
  } while (Digit);
 8005024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005026:	2b00      	cmp	r3, #0
 8005028:	d1e3      	bne.n	8004ff2 <_PrintUnsigned+0xba>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 800502a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800502c:	f003 0301 	and.w	r3, r3, #1
 8005030:	2b00      	cmp	r3, #0
 8005032:	d011      	beq.n	8005058 <_PrintUnsigned+0x120>
    if (FieldWidth != 0u) {
 8005034:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005036:	2b00      	cmp	r3, #0
 8005038:	d00e      	beq.n	8005058 <_PrintUnsigned+0x120>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800503a:	e006      	b.n	800504a <_PrintUnsigned+0x112>
        FieldWidth--;
 800503c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800503e:	3b01      	subs	r3, #1
 8005040:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, ' ');
 8005042:	2120      	movs	r1, #32
 8005044:	68f8      	ldr	r0, [r7, #12]
 8005046:	f7ff fefb 	bl	8004e40 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800504a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800504c:	2b00      	cmp	r3, #0
 800504e:	d003      	beq.n	8005058 <_PrintUnsigned+0x120>
 8005050:	69fa      	ldr	r2, [r7, #28]
 8005052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005054:	429a      	cmp	r2, r3
 8005056:	d3f1      	bcc.n	800503c <_PrintUnsigned+0x104>
      }
    }
  }
}
 8005058:	bf00      	nop
 800505a:	3728      	adds	r7, #40	@ 0x28
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}
 8005060:	0800704c 	.word	0x0800704c

08005064 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005064:	b580      	push	{r7, lr}
 8005066:	b088      	sub	sp, #32
 8005068:	af02      	add	r7, sp, #8
 800506a:	60f8      	str	r0, [r7, #12]
 800506c:	60b9      	str	r1, [r7, #8]
 800506e:	607a      	str	r2, [r7, #4]
 8005070:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	2b00      	cmp	r3, #0
 8005076:	bfb8      	it	lt
 8005078:	425b      	neglt	r3, r3
 800507a:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 800507c:	2301      	movs	r3, #1
 800507e:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005080:	e007      	b.n	8005092 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	693a      	ldr	r2, [r7, #16]
 8005086:	fb92 f3f3 	sdiv	r3, r2, r3
 800508a:	613b      	str	r3, [r7, #16]
    Width++;
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	3301      	adds	r3, #1
 8005090:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	693a      	ldr	r2, [r7, #16]
 8005096:	429a      	cmp	r2, r3
 8005098:	daf3      	bge.n	8005082 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 800509a:	683a      	ldr	r2, [r7, #0]
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	429a      	cmp	r2, r3
 80050a0:	d901      	bls.n	80050a6 <_PrintInt+0x42>
    Width = NumDigits;
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 80050a6:	6a3b      	ldr	r3, [r7, #32]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d00a      	beq.n	80050c2 <_PrintInt+0x5e>
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	db04      	blt.n	80050bc <_PrintInt+0x58>
 80050b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050b4:	f003 0304 	and.w	r3, r3, #4
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d002      	beq.n	80050c2 <_PrintInt+0x5e>
    FieldWidth--;
 80050bc:	6a3b      	ldr	r3, [r7, #32]
 80050be:	3b01      	subs	r3, #1
 80050c0:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 80050c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050c4:	f003 0302 	and.w	r3, r3, #2
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d002      	beq.n	80050d2 <_PrintInt+0x6e>
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d016      	beq.n	8005100 <_PrintInt+0x9c>
 80050d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050d4:	f003 0301 	and.w	r3, r3, #1
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d111      	bne.n	8005100 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 80050dc:	6a3b      	ldr	r3, [r7, #32]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d00e      	beq.n	8005100 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80050e2:	e006      	b.n	80050f2 <_PrintInt+0x8e>
        FieldWidth--;
 80050e4:	6a3b      	ldr	r3, [r7, #32]
 80050e6:	3b01      	subs	r3, #1
 80050e8:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 80050ea:	2120      	movs	r1, #32
 80050ec:	68f8      	ldr	r0, [r7, #12]
 80050ee:	f7ff fea7 	bl	8004e40 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80050f2:	6a3b      	ldr	r3, [r7, #32]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d003      	beq.n	8005100 <_PrintInt+0x9c>
 80050f8:	697a      	ldr	r2, [r7, #20]
 80050fa:	6a3b      	ldr	r3, [r7, #32]
 80050fc:	429a      	cmp	r2, r3
 80050fe:	d3f1      	bcc.n	80050e4 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	2b00      	cmp	r3, #0
 8005104:	da07      	bge.n	8005116 <_PrintInt+0xb2>
    v = -v;
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	425b      	negs	r3, r3
 800510a:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 800510c:	212d      	movs	r1, #45	@ 0x2d
 800510e:	68f8      	ldr	r0, [r7, #12]
 8005110:	f7ff fe96 	bl	8004e40 <_StoreChar>
 8005114:	e008      	b.n	8005128 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8005116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005118:	f003 0304 	and.w	r3, r3, #4
 800511c:	2b00      	cmp	r3, #0
 800511e:	d003      	beq.n	8005128 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8005120:	212b      	movs	r1, #43	@ 0x2b
 8005122:	68f8      	ldr	r0, [r7, #12]
 8005124:	f7ff fe8c 	bl	8004e40 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8005128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800512a:	f003 0302 	and.w	r3, r3, #2
 800512e:	2b00      	cmp	r3, #0
 8005130:	d019      	beq.n	8005166 <_PrintInt+0x102>
 8005132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005134:	f003 0301 	and.w	r3, r3, #1
 8005138:	2b00      	cmp	r3, #0
 800513a:	d114      	bne.n	8005166 <_PrintInt+0x102>
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d111      	bne.n	8005166 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8005142:	6a3b      	ldr	r3, [r7, #32]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d00e      	beq.n	8005166 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005148:	e006      	b.n	8005158 <_PrintInt+0xf4>
        FieldWidth--;
 800514a:	6a3b      	ldr	r3, [r7, #32]
 800514c:	3b01      	subs	r3, #1
 800514e:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8005150:	2130      	movs	r1, #48	@ 0x30
 8005152:	68f8      	ldr	r0, [r7, #12]
 8005154:	f7ff fe74 	bl	8004e40 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005158:	6a3b      	ldr	r3, [r7, #32]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d003      	beq.n	8005166 <_PrintInt+0x102>
 800515e:	697a      	ldr	r2, [r7, #20]
 8005160:	6a3b      	ldr	r3, [r7, #32]
 8005162:	429a      	cmp	r2, r3
 8005164:	d3f1      	bcc.n	800514a <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8005166:	68b9      	ldr	r1, [r7, #8]
 8005168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800516a:	9301      	str	r3, [sp, #4]
 800516c:	6a3b      	ldr	r3, [r7, #32]
 800516e:	9300      	str	r3, [sp, #0]
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	687a      	ldr	r2, [r7, #4]
 8005174:	68f8      	ldr	r0, [r7, #12]
 8005176:	f7ff fedf 	bl	8004f38 <_PrintUnsigned>
}
 800517a:	bf00      	nop
 800517c:	3718      	adds	r7, #24
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}
	...

08005184 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8005184:	b580      	push	{r7, lr}
 8005186:	b098      	sub	sp, #96	@ 0x60
 8005188:	af02      	add	r7, sp, #8
 800518a:	60f8      	str	r0, [r7, #12]
 800518c:	60b9      	str	r1, [r7, #8]
 800518e:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005190:	f3ef 8311 	mrs	r3, BASEPRI
 8005194:	f04f 0120 	mov.w	r1, #32
 8005198:	f381 8811 	msr	BASEPRI, r1
 800519c:	633b      	str	r3, [r7, #48]	@ 0x30
 800519e:	48b7      	ldr	r0, [pc, #732]	@ (800547c <_VPrintTarget+0x2f8>)
 80051a0:	f7ff fc79 	bl	8004a96 <_PreparePacket>
 80051a4:	62f8      	str	r0, [r7, #44]	@ 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 80051a6:	4bb5      	ldr	r3, [pc, #724]	@ (800547c <_VPrintTarget+0x2f8>)
 80051a8:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 80051aa:	2300      	movs	r3, #0
 80051ac:	627b      	str	r3, [r7, #36]	@ 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 80051ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051b0:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 80051b2:	69fb      	ldr	r3, [r7, #28]
 80051b4:	3301      	adds	r3, #1
 80051b6:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	781b      	ldrb	r3, [r3, #0]
 80051c0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    sFormat++;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	3301      	adds	r3, #1
 80051c8:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 80051ca:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	f000 8183 	beq.w	80054da <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 80051d4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80051d8:	2b25      	cmp	r3, #37	@ 0x25
 80051da:	f040 8170 	bne.w	80054be <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 80051de:	2300      	movs	r3, #0
 80051e0:	64bb      	str	r3, [r7, #72]	@ 0x48
      v = 1;
 80051e2:	2301      	movs	r3, #1
 80051e4:	653b      	str	r3, [r7, #80]	@ 0x50
      do {
        c = *sFormat;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	781b      	ldrb	r3, [r3, #0]
 80051ea:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        switch (c) {
 80051ee:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80051f2:	3b23      	subs	r3, #35	@ 0x23
 80051f4:	2b0d      	cmp	r3, #13
 80051f6:	d83f      	bhi.n	8005278 <_VPrintTarget+0xf4>
 80051f8:	a201      	add	r2, pc, #4	@ (adr r2, 8005200 <_VPrintTarget+0x7c>)
 80051fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051fe:	bf00      	nop
 8005200:	08005269 	.word	0x08005269
 8005204:	08005279 	.word	0x08005279
 8005208:	08005279 	.word	0x08005279
 800520c:	08005279 	.word	0x08005279
 8005210:	08005279 	.word	0x08005279
 8005214:	08005279 	.word	0x08005279
 8005218:	08005279 	.word	0x08005279
 800521c:	08005279 	.word	0x08005279
 8005220:	08005259 	.word	0x08005259
 8005224:	08005279 	.word	0x08005279
 8005228:	08005239 	.word	0x08005239
 800522c:	08005279 	.word	0x08005279
 8005230:	08005279 	.word	0x08005279
 8005234:	08005249 	.word	0x08005249
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8005238:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800523a:	f043 0301 	orr.w	r3, r3, #1
 800523e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	3301      	adds	r3, #1
 8005244:	60fb      	str	r3, [r7, #12]
 8005246:	e01a      	b.n	800527e <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8005248:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800524a:	f043 0302 	orr.w	r3, r3, #2
 800524e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	3301      	adds	r3, #1
 8005254:	60fb      	str	r3, [r7, #12]
 8005256:	e012      	b.n	800527e <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8005258:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800525a:	f043 0304 	orr.w	r3, r3, #4
 800525e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	3301      	adds	r3, #1
 8005264:	60fb      	str	r3, [r7, #12]
 8005266:	e00a      	b.n	800527e <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8005268:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800526a:	f043 0308 	orr.w	r3, r3, #8
 800526e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	3301      	adds	r3, #1
 8005274:	60fb      	str	r3, [r7, #12]
 8005276:	e002      	b.n	800527e <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8005278:	2300      	movs	r3, #0
 800527a:	653b      	str	r3, [r7, #80]	@ 0x50
 800527c:	bf00      	nop
        }
      } while (v);
 800527e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005280:	2b00      	cmp	r3, #0
 8005282:	d1b0      	bne.n	80051e6 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8005284:	2300      	movs	r3, #0
 8005286:	647b      	str	r3, [r7, #68]	@ 0x44
      do {
        c = *sFormat;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	781b      	ldrb	r3, [r3, #0]
 800528c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        if ((c < '0') || (c > '9')) {
 8005290:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005294:	2b2f      	cmp	r3, #47	@ 0x2f
 8005296:	d912      	bls.n	80052be <_VPrintTarget+0x13a>
 8005298:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800529c:	2b39      	cmp	r3, #57	@ 0x39
 800529e:	d80e      	bhi.n	80052be <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	3301      	adds	r3, #1
 80052a4:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 80052a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80052a8:	4613      	mov	r3, r2
 80052aa:	009b      	lsls	r3, r3, #2
 80052ac:	4413      	add	r3, r2
 80052ae:	005b      	lsls	r3, r3, #1
 80052b0:	461a      	mov	r2, r3
 80052b2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80052b6:	4413      	add	r3, r2
 80052b8:	3b30      	subs	r3, #48	@ 0x30
 80052ba:	647b      	str	r3, [r7, #68]	@ 0x44
        c = *sFormat;
 80052bc:	e7e4      	b.n	8005288 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 80052be:	2300      	movs	r3, #0
 80052c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
      c = *sFormat;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	781b      	ldrb	r3, [r3, #0]
 80052c6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      if (c == '.') {
 80052ca:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80052ce:	2b2e      	cmp	r3, #46	@ 0x2e
 80052d0:	d11d      	bne.n	800530e <_VPrintTarget+0x18a>
        sFormat++;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	3301      	adds	r3, #1
 80052d6:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	781b      	ldrb	r3, [r3, #0]
 80052dc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          if ((c < '0') || (c > '9')) {
 80052e0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80052e4:	2b2f      	cmp	r3, #47	@ 0x2f
 80052e6:	d912      	bls.n	800530e <_VPrintTarget+0x18a>
 80052e8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80052ec:	2b39      	cmp	r3, #57	@ 0x39
 80052ee:	d80e      	bhi.n	800530e <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	3301      	adds	r3, #1
 80052f4:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 80052f6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80052f8:	4613      	mov	r3, r2
 80052fa:	009b      	lsls	r3, r3, #2
 80052fc:	4413      	add	r3, r2
 80052fe:	005b      	lsls	r3, r3, #1
 8005300:	461a      	mov	r2, r3
 8005302:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005306:	4413      	add	r3, r2
 8005308:	3b30      	subs	r3, #48	@ 0x30
 800530a:	64fb      	str	r3, [r7, #76]	@ 0x4c
          c = *sFormat;
 800530c:	e7e4      	b.n	80052d8 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	781b      	ldrb	r3, [r3, #0]
 8005312:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8005316:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800531a:	2b6c      	cmp	r3, #108	@ 0x6c
 800531c:	d003      	beq.n	8005326 <_VPrintTarget+0x1a2>
 800531e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005322:	2b68      	cmp	r3, #104	@ 0x68
 8005324:	d107      	bne.n	8005336 <_VPrintTarget+0x1b2>
          c = *sFormat;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	781b      	ldrb	r3, [r3, #0]
 800532a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          sFormat++;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	3301      	adds	r3, #1
 8005332:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8005334:	e7ef      	b.n	8005316 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8005336:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800533a:	2b25      	cmp	r3, #37	@ 0x25
 800533c:	f000 80b3 	beq.w	80054a6 <_VPrintTarget+0x322>
 8005340:	2b25      	cmp	r3, #37	@ 0x25
 8005342:	f2c0 80b7 	blt.w	80054b4 <_VPrintTarget+0x330>
 8005346:	2b78      	cmp	r3, #120	@ 0x78
 8005348:	f300 80b4 	bgt.w	80054b4 <_VPrintTarget+0x330>
 800534c:	2b58      	cmp	r3, #88	@ 0x58
 800534e:	f2c0 80b1 	blt.w	80054b4 <_VPrintTarget+0x330>
 8005352:	3b58      	subs	r3, #88	@ 0x58
 8005354:	2b20      	cmp	r3, #32
 8005356:	f200 80ad 	bhi.w	80054b4 <_VPrintTarget+0x330>
 800535a:	a201      	add	r2, pc, #4	@ (adr r2, 8005360 <_VPrintTarget+0x1dc>)
 800535c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005360:	08005457 	.word	0x08005457
 8005364:	080054b5 	.word	0x080054b5
 8005368:	080054b5 	.word	0x080054b5
 800536c:	080054b5 	.word	0x080054b5
 8005370:	080054b5 	.word	0x080054b5
 8005374:	080054b5 	.word	0x080054b5
 8005378:	080054b5 	.word	0x080054b5
 800537c:	080054b5 	.word	0x080054b5
 8005380:	080054b5 	.word	0x080054b5
 8005384:	080054b5 	.word	0x080054b5
 8005388:	080054b5 	.word	0x080054b5
 800538c:	080053e5 	.word	0x080053e5
 8005390:	0800540b 	.word	0x0800540b
 8005394:	080054b5 	.word	0x080054b5
 8005398:	080054b5 	.word	0x080054b5
 800539c:	080054b5 	.word	0x080054b5
 80053a0:	080054b5 	.word	0x080054b5
 80053a4:	080054b5 	.word	0x080054b5
 80053a8:	080054b5 	.word	0x080054b5
 80053ac:	080054b5 	.word	0x080054b5
 80053b0:	080054b5 	.word	0x080054b5
 80053b4:	080054b5 	.word	0x080054b5
 80053b8:	080054b5 	.word	0x080054b5
 80053bc:	080054b5 	.word	0x080054b5
 80053c0:	08005481 	.word	0x08005481
 80053c4:	080054b5 	.word	0x080054b5
 80053c8:	080054b5 	.word	0x080054b5
 80053cc:	080054b5 	.word	0x080054b5
 80053d0:	080054b5 	.word	0x080054b5
 80053d4:	08005431 	.word	0x08005431
 80053d8:	080054b5 	.word	0x080054b5
 80053dc:	080054b5 	.word	0x080054b5
 80053e0:	08005457 	.word	0x08005457
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	1d19      	adds	r1, r3, #4
 80053ea:	687a      	ldr	r2, [r7, #4]
 80053ec:	6011      	str	r1, [r2, #0]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	653b      	str	r3, [r7, #80]	@ 0x50
        c0 = (char)v;
 80053f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80053f4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        _StoreChar(&BufferDesc, c0);
 80053f8:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 80053fc:	f107 0314 	add.w	r3, r7, #20
 8005400:	4611      	mov	r1, r2
 8005402:	4618      	mov	r0, r3
 8005404:	f7ff fd1c 	bl	8004e40 <_StoreChar>
        break;
 8005408:	e055      	b.n	80054b6 <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	1d19      	adds	r1, r3, #4
 8005410:	687a      	ldr	r2, [r7, #4]
 8005412:	6011      	str	r1, [r2, #0]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005418:	f107 0014 	add.w	r0, r7, #20
 800541c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800541e:	9301      	str	r3, [sp, #4]
 8005420:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005422:	9300      	str	r3, [sp, #0]
 8005424:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005426:	220a      	movs	r2, #10
 8005428:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800542a:	f7ff fe1b 	bl	8005064 <_PrintInt>
        break;
 800542e:	e042      	b.n	80054b6 <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	1d19      	adds	r1, r3, #4
 8005436:	687a      	ldr	r2, [r7, #4]
 8005438:	6011      	str	r1, [r2, #0]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 800543e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005440:	f107 0014 	add.w	r0, r7, #20
 8005444:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005446:	9301      	str	r3, [sp, #4]
 8005448:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800544a:	9300      	str	r3, [sp, #0]
 800544c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800544e:	220a      	movs	r2, #10
 8005450:	f7ff fd72 	bl	8004f38 <_PrintUnsigned>
        break;
 8005454:	e02f      	b.n	80054b6 <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	1d19      	adds	r1, r3, #4
 800545c:	687a      	ldr	r2, [r7, #4]
 800545e:	6011      	str	r1, [r2, #0]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8005464:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005466:	f107 0014 	add.w	r0, r7, #20
 800546a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800546c:	9301      	str	r3, [sp, #4]
 800546e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005470:	9300      	str	r3, [sp, #0]
 8005472:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005474:	2210      	movs	r2, #16
 8005476:	f7ff fd5f 	bl	8004f38 <_PrintUnsigned>
        break;
 800547a:	e01c      	b.n	80054b6 <_VPrintTarget+0x332>
 800547c:	20014404 	.word	0x20014404
      case 'p':
        v = va_arg(*pParamList, int);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	1d19      	adds	r1, r3, #4
 8005486:	687a      	ldr	r2, [r7, #4]
 8005488:	6011      	str	r1, [r2, #0]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 800548e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005490:	f107 0014 	add.w	r0, r7, #20
 8005494:	2300      	movs	r3, #0
 8005496:	9301      	str	r3, [sp, #4]
 8005498:	2308      	movs	r3, #8
 800549a:	9300      	str	r3, [sp, #0]
 800549c:	2308      	movs	r3, #8
 800549e:	2210      	movs	r2, #16
 80054a0:	f7ff fd4a 	bl	8004f38 <_PrintUnsigned>
        break;
 80054a4:	e007      	b.n	80054b6 <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 80054a6:	f107 0314 	add.w	r3, r7, #20
 80054aa:	2125      	movs	r1, #37	@ 0x25
 80054ac:	4618      	mov	r0, r3
 80054ae:	f7ff fcc7 	bl	8004e40 <_StoreChar>
        break;
 80054b2:	e000      	b.n	80054b6 <_VPrintTarget+0x332>
      default:
        break;
 80054b4:	bf00      	nop
      }
      sFormat++;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	3301      	adds	r3, #1
 80054ba:	60fb      	str	r3, [r7, #12]
 80054bc:	e007      	b.n	80054ce <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 80054be:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80054c2:	f107 0314 	add.w	r3, r7, #20
 80054c6:	4611      	mov	r1, r2
 80054c8:	4618      	mov	r0, r3
 80054ca:	f7ff fcb9 	bl	8004e40 <_StoreChar>
    }
  } while (*sFormat);
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	781b      	ldrb	r3, [r3, #0]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	f47f ae72 	bne.w	80051bc <_VPrintTarget+0x38>
 80054d8:	e000      	b.n	80054dc <_VPrintTarget+0x358>
      break;
 80054da:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 80054dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d041      	beq.n	8005566 <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 80054e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054e4:	69fb      	ldr	r3, [r7, #28]
 80054e6:	b2d2      	uxtb	r2, r2
 80054e8:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 80054ea:	69bb      	ldr	r3, [r7, #24]
 80054ec:	643b      	str	r3, [r7, #64]	@ 0x40
 80054ee:	6a3b      	ldr	r3, [r7, #32]
 80054f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80054f2:	e00b      	b.n	800550c <_VPrintTarget+0x388>
 80054f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054f6:	b2da      	uxtb	r2, r3
 80054f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80054fa:	1c59      	adds	r1, r3, #1
 80054fc:	6439      	str	r1, [r7, #64]	@ 0x40
 80054fe:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005502:	b2d2      	uxtb	r2, r2
 8005504:	701a      	strb	r2, [r3, #0]
 8005506:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005508:	09db      	lsrs	r3, r3, #7
 800550a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800550c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800550e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005510:	d8f0      	bhi.n	80054f4 <_VPrintTarget+0x370>
 8005512:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005514:	1c5a      	adds	r2, r3, #1
 8005516:	643a      	str	r2, [r7, #64]	@ 0x40
 8005518:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800551a:	b2d2      	uxtb	r2, r2
 800551c:	701a      	strb	r2, [r3, #0]
 800551e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005520:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8005522:	69bb      	ldr	r3, [r7, #24]
 8005524:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005526:	2300      	movs	r3, #0
 8005528:	637b      	str	r3, [r7, #52]	@ 0x34
 800552a:	e00b      	b.n	8005544 <_VPrintTarget+0x3c0>
 800552c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800552e:	b2da      	uxtb	r2, r3
 8005530:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005532:	1c59      	adds	r1, r3, #1
 8005534:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005536:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800553a:	b2d2      	uxtb	r2, r2
 800553c:	701a      	strb	r2, [r3, #0]
 800553e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005540:	09db      	lsrs	r3, r3, #7
 8005542:	637b      	str	r3, [r7, #52]	@ 0x34
 8005544:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005546:	2b7f      	cmp	r3, #127	@ 0x7f
 8005548:	d8f0      	bhi.n	800552c <_VPrintTarget+0x3a8>
 800554a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800554c:	1c5a      	adds	r2, r3, #1
 800554e:	63ba      	str	r2, [r7, #56]	@ 0x38
 8005550:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005552:	b2d2      	uxtb	r2, r2
 8005554:	701a      	strb	r2, [r3, #0]
 8005556:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005558:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800555a:	69fb      	ldr	r3, [r7, #28]
 800555c:	69b9      	ldr	r1, [r7, #24]
 800555e:	221a      	movs	r2, #26
 8005560:	4618      	mov	r0, r3
 8005562:	f7ff fb87 	bl	8004c74 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8005566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005568:	f383 8811 	msr	BASEPRI, r3
#endif
}
 800556c:	bf00      	nop
 800556e:	3758      	adds	r7, #88	@ 0x58
 8005570:	46bd      	mov	sp, r7
 8005572:	bd80      	pop	{r7, pc}

08005574 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8005574:	b580      	push	{r7, lr}
 8005576:	b086      	sub	sp, #24
 8005578:	af02      	add	r7, sp, #8
 800557a:	60f8      	str	r0, [r7, #12]
 800557c:	60b9      	str	r1, [r7, #8]
 800557e:	607a      	str	r2, [r7, #4]
 8005580:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005582:	2300      	movs	r3, #0
 8005584:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8005588:	4917      	ldr	r1, [pc, #92]	@ (80055e8 <SEGGER_SYSVIEW_Init+0x74>)
 800558a:	4818      	ldr	r0, [pc, #96]	@ (80055ec <SEGGER_SYSVIEW_Init+0x78>)
 800558c:	f7ff f942 	bl	8004814 <SEGGER_RTT_AllocUpBuffer>
 8005590:	4603      	mov	r3, r0
 8005592:	b2da      	uxtb	r2, r3
 8005594:	4b16      	ldr	r3, [pc, #88]	@ (80055f0 <SEGGER_SYSVIEW_Init+0x7c>)
 8005596:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8005598:	4b15      	ldr	r3, [pc, #84]	@ (80055f0 <SEGGER_SYSVIEW_Init+0x7c>)
 800559a:	785a      	ldrb	r2, [r3, #1]
 800559c:	4b14      	ldr	r3, [pc, #80]	@ (80055f0 <SEGGER_SYSVIEW_Init+0x7c>)
 800559e:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80055a0:	4b13      	ldr	r3, [pc, #76]	@ (80055f0 <SEGGER_SYSVIEW_Init+0x7c>)
 80055a2:	7e1b      	ldrb	r3, [r3, #24]
 80055a4:	4618      	mov	r0, r3
 80055a6:	2300      	movs	r3, #0
 80055a8:	9300      	str	r3, [sp, #0]
 80055aa:	2308      	movs	r3, #8
 80055ac:	4a11      	ldr	r2, [pc, #68]	@ (80055f4 <SEGGER_SYSVIEW_Init+0x80>)
 80055ae:	490f      	ldr	r1, [pc, #60]	@ (80055ec <SEGGER_SYSVIEW_Init+0x78>)
 80055b0:	f7ff f9b4 	bl	800491c <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80055b4:	4b0e      	ldr	r3, [pc, #56]	@ (80055f0 <SEGGER_SYSVIEW_Init+0x7c>)
 80055b6:	2200      	movs	r2, #0
 80055b8:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80055ba:	4b0f      	ldr	r3, [pc, #60]	@ (80055f8 <SEGGER_SYSVIEW_Init+0x84>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a0c      	ldr	r2, [pc, #48]	@ (80055f0 <SEGGER_SYSVIEW_Init+0x7c>)
 80055c0:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 80055c2:	4a0b      	ldr	r2, [pc, #44]	@ (80055f0 <SEGGER_SYSVIEW_Init+0x7c>)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 80055c8:	4a09      	ldr	r2, [pc, #36]	@ (80055f0 <SEGGER_SYSVIEW_Init+0x7c>)
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 80055ce:	4a08      	ldr	r2, [pc, #32]	@ (80055f0 <SEGGER_SYSVIEW_Init+0x7c>)
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 80055d4:	4a06      	ldr	r2, [pc, #24]	@ (80055f0 <SEGGER_SYSVIEW_Init+0x7c>)
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 80055da:	4b05      	ldr	r3, [pc, #20]	@ (80055f0 <SEGGER_SYSVIEW_Init+0x7c>)
 80055dc:	2200      	movs	r2, #0
 80055de:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 80055e0:	bf00      	nop
 80055e2:	3710      	adds	r7, #16
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}
 80055e8:	200133cc 	.word	0x200133cc
 80055ec:	08007014 	.word	0x08007014
 80055f0:	200143d4 	.word	0x200143d4
 80055f4:	200143cc 	.word	0x200143cc
 80055f8:	e0001004 	.word	0xe0001004

080055fc <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 80055fc:	b480      	push	{r7}
 80055fe:	b083      	sub	sp, #12
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8005604:	4a04      	ldr	r2, [pc, #16]	@ (8005618 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6113      	str	r3, [r2, #16]
}
 800560a:	bf00      	nop
 800560c:	370c      	adds	r7, #12
 800560e:	46bd      	mov	sp, r7
 8005610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005614:	4770      	bx	lr
 8005616:	bf00      	nop
 8005618:	200143d4 	.word	0x200143d4

0800561c <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 800561c:	b580      	push	{r7, lr}
 800561e:	b084      	sub	sp, #16
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005624:	f3ef 8311 	mrs	r3, BASEPRI
 8005628:	f04f 0120 	mov.w	r1, #32
 800562c:	f381 8811 	msr	BASEPRI, r1
 8005630:	60fb      	str	r3, [r7, #12]
 8005632:	4808      	ldr	r0, [pc, #32]	@ (8005654 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8005634:	f7ff fa2f 	bl	8004a96 <_PreparePacket>
 8005638:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800563a:	687a      	ldr	r2, [r7, #4]
 800563c:	68b9      	ldr	r1, [r7, #8]
 800563e:	68b8      	ldr	r0, [r7, #8]
 8005640:	f7ff fb18 	bl	8004c74 <_SendPacket>
  RECORD_END();
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	f383 8811 	msr	BASEPRI, r3
}
 800564a:	bf00      	nop
 800564c:	3710      	adds	r7, #16
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}
 8005652:	bf00      	nop
 8005654:	20014404 	.word	0x20014404

08005658 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8005658:	b580      	push	{r7, lr}
 800565a:	b088      	sub	sp, #32
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
 8005660:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005662:	f3ef 8311 	mrs	r3, BASEPRI
 8005666:	f04f 0120 	mov.w	r1, #32
 800566a:	f381 8811 	msr	BASEPRI, r1
 800566e:	617b      	str	r3, [r7, #20]
 8005670:	4816      	ldr	r0, [pc, #88]	@ (80056cc <SEGGER_SYSVIEW_RecordU32+0x74>)
 8005672:	f7ff fa10 	bl	8004a96 <_PreparePacket>
 8005676:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	61fb      	str	r3, [r7, #28]
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	61bb      	str	r3, [r7, #24]
 8005684:	e00b      	b.n	800569e <SEGGER_SYSVIEW_RecordU32+0x46>
 8005686:	69bb      	ldr	r3, [r7, #24]
 8005688:	b2da      	uxtb	r2, r3
 800568a:	69fb      	ldr	r3, [r7, #28]
 800568c:	1c59      	adds	r1, r3, #1
 800568e:	61f9      	str	r1, [r7, #28]
 8005690:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005694:	b2d2      	uxtb	r2, r2
 8005696:	701a      	strb	r2, [r3, #0]
 8005698:	69bb      	ldr	r3, [r7, #24]
 800569a:	09db      	lsrs	r3, r3, #7
 800569c:	61bb      	str	r3, [r7, #24]
 800569e:	69bb      	ldr	r3, [r7, #24]
 80056a0:	2b7f      	cmp	r3, #127	@ 0x7f
 80056a2:	d8f0      	bhi.n	8005686 <SEGGER_SYSVIEW_RecordU32+0x2e>
 80056a4:	69fb      	ldr	r3, [r7, #28]
 80056a6:	1c5a      	adds	r2, r3, #1
 80056a8:	61fa      	str	r2, [r7, #28]
 80056aa:	69ba      	ldr	r2, [r7, #24]
 80056ac:	b2d2      	uxtb	r2, r2
 80056ae:	701a      	strb	r2, [r3, #0]
 80056b0:	69fb      	ldr	r3, [r7, #28]
 80056b2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80056b4:	687a      	ldr	r2, [r7, #4]
 80056b6:	68f9      	ldr	r1, [r7, #12]
 80056b8:	6938      	ldr	r0, [r7, #16]
 80056ba:	f7ff fadb 	bl	8004c74 <_SendPacket>
  RECORD_END();
 80056be:	697b      	ldr	r3, [r7, #20]
 80056c0:	f383 8811 	msr	BASEPRI, r3
}
 80056c4:	bf00      	nop
 80056c6:	3720      	adds	r7, #32
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bd80      	pop	{r7, pc}
 80056cc:	20014404 	.word	0x20014404

080056d0 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b08c      	sub	sp, #48	@ 0x30
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	60f8      	str	r0, [r7, #12]
 80056d8:	60b9      	str	r1, [r7, #8]
 80056da:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80056dc:	f3ef 8311 	mrs	r3, BASEPRI
 80056e0:	f04f 0120 	mov.w	r1, #32
 80056e4:	f381 8811 	msr	BASEPRI, r1
 80056e8:	61fb      	str	r3, [r7, #28]
 80056ea:	4825      	ldr	r0, [pc, #148]	@ (8005780 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80056ec:	f7ff f9d3 	bl	8004a96 <_PreparePacket>
 80056f0:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80056f2:	69bb      	ldr	r3, [r7, #24]
 80056f4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80056fe:	e00b      	b.n	8005718 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8005700:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005702:	b2da      	uxtb	r2, r3
 8005704:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005706:	1c59      	adds	r1, r3, #1
 8005708:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800570a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800570e:	b2d2      	uxtb	r2, r2
 8005710:	701a      	strb	r2, [r3, #0]
 8005712:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005714:	09db      	lsrs	r3, r3, #7
 8005716:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005718:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800571a:	2b7f      	cmp	r3, #127	@ 0x7f
 800571c:	d8f0      	bhi.n	8005700 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800571e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005720:	1c5a      	adds	r2, r3, #1
 8005722:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005724:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005726:	b2d2      	uxtb	r2, r2
 8005728:	701a      	strb	r2, [r3, #0]
 800572a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800572c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	627b      	str	r3, [r7, #36]	@ 0x24
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	623b      	str	r3, [r7, #32]
 8005736:	e00b      	b.n	8005750 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8005738:	6a3b      	ldr	r3, [r7, #32]
 800573a:	b2da      	uxtb	r2, r3
 800573c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800573e:	1c59      	adds	r1, r3, #1
 8005740:	6279      	str	r1, [r7, #36]	@ 0x24
 8005742:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005746:	b2d2      	uxtb	r2, r2
 8005748:	701a      	strb	r2, [r3, #0]
 800574a:	6a3b      	ldr	r3, [r7, #32]
 800574c:	09db      	lsrs	r3, r3, #7
 800574e:	623b      	str	r3, [r7, #32]
 8005750:	6a3b      	ldr	r3, [r7, #32]
 8005752:	2b7f      	cmp	r3, #127	@ 0x7f
 8005754:	d8f0      	bhi.n	8005738 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8005756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005758:	1c5a      	adds	r2, r3, #1
 800575a:	627a      	str	r2, [r7, #36]	@ 0x24
 800575c:	6a3a      	ldr	r2, [r7, #32]
 800575e:	b2d2      	uxtb	r2, r2
 8005760:	701a      	strb	r2, [r3, #0]
 8005762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005764:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005766:	68fa      	ldr	r2, [r7, #12]
 8005768:	6979      	ldr	r1, [r7, #20]
 800576a:	69b8      	ldr	r0, [r7, #24]
 800576c:	f7ff fa82 	bl	8004c74 <_SendPacket>
  RECORD_END();
 8005770:	69fb      	ldr	r3, [r7, #28]
 8005772:	f383 8811 	msr	BASEPRI, r3
}
 8005776:	bf00      	nop
 8005778:	3730      	adds	r7, #48	@ 0x30
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}
 800577e:	bf00      	nop
 8005780:	20014404 	.word	0x20014404

08005784 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8005784:	b580      	push	{r7, lr}
 8005786:	b08e      	sub	sp, #56	@ 0x38
 8005788:	af00      	add	r7, sp, #0
 800578a:	60f8      	str	r0, [r7, #12]
 800578c:	60b9      	str	r1, [r7, #8]
 800578e:	607a      	str	r2, [r7, #4]
 8005790:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8005792:	f3ef 8311 	mrs	r3, BASEPRI
 8005796:	f04f 0120 	mov.w	r1, #32
 800579a:	f381 8811 	msr	BASEPRI, r1
 800579e:	61fb      	str	r3, [r7, #28]
 80057a0:	4832      	ldr	r0, [pc, #200]	@ (800586c <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 80057a2:	f7ff f978 	bl	8004a96 <_PreparePacket>
 80057a6:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80057a8:	69bb      	ldr	r3, [r7, #24]
 80057aa:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	633b      	str	r3, [r7, #48]	@ 0x30
 80057b4:	e00b      	b.n	80057ce <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 80057b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057b8:	b2da      	uxtb	r2, r3
 80057ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057bc:	1c59      	adds	r1, r3, #1
 80057be:	6379      	str	r1, [r7, #52]	@ 0x34
 80057c0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80057c4:	b2d2      	uxtb	r2, r2
 80057c6:	701a      	strb	r2, [r3, #0]
 80057c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057ca:	09db      	lsrs	r3, r3, #7
 80057cc:	633b      	str	r3, [r7, #48]	@ 0x30
 80057ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057d0:	2b7f      	cmp	r3, #127	@ 0x7f
 80057d2:	d8f0      	bhi.n	80057b6 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 80057d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057d6:	1c5a      	adds	r2, r3, #1
 80057d8:	637a      	str	r2, [r7, #52]	@ 0x34
 80057da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80057dc:	b2d2      	uxtb	r2, r2
 80057de:	701a      	strb	r2, [r3, #0]
 80057e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057e2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 80057ec:	e00b      	b.n	8005806 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 80057ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057f0:	b2da      	uxtb	r2, r3
 80057f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057f4:	1c59      	adds	r1, r3, #1
 80057f6:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80057f8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80057fc:	b2d2      	uxtb	r2, r2
 80057fe:	701a      	strb	r2, [r3, #0]
 8005800:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005802:	09db      	lsrs	r3, r3, #7
 8005804:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005806:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005808:	2b7f      	cmp	r3, #127	@ 0x7f
 800580a:	d8f0      	bhi.n	80057ee <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 800580c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800580e:	1c5a      	adds	r2, r3, #1
 8005810:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005812:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005814:	b2d2      	uxtb	r2, r2
 8005816:	701a      	strb	r2, [r3, #0]
 8005818:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800581a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	623b      	str	r3, [r7, #32]
 8005824:	e00b      	b.n	800583e <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8005826:	6a3b      	ldr	r3, [r7, #32]
 8005828:	b2da      	uxtb	r2, r3
 800582a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800582c:	1c59      	adds	r1, r3, #1
 800582e:	6279      	str	r1, [r7, #36]	@ 0x24
 8005830:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005834:	b2d2      	uxtb	r2, r2
 8005836:	701a      	strb	r2, [r3, #0]
 8005838:	6a3b      	ldr	r3, [r7, #32]
 800583a:	09db      	lsrs	r3, r3, #7
 800583c:	623b      	str	r3, [r7, #32]
 800583e:	6a3b      	ldr	r3, [r7, #32]
 8005840:	2b7f      	cmp	r3, #127	@ 0x7f
 8005842:	d8f0      	bhi.n	8005826 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8005844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005846:	1c5a      	adds	r2, r3, #1
 8005848:	627a      	str	r2, [r7, #36]	@ 0x24
 800584a:	6a3a      	ldr	r2, [r7, #32]
 800584c:	b2d2      	uxtb	r2, r2
 800584e:	701a      	strb	r2, [r3, #0]
 8005850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005852:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005854:	68fa      	ldr	r2, [r7, #12]
 8005856:	6979      	ldr	r1, [r7, #20]
 8005858:	69b8      	ldr	r0, [r7, #24]
 800585a:	f7ff fa0b 	bl	8004c74 <_SendPacket>
  RECORD_END();
 800585e:	69fb      	ldr	r3, [r7, #28]
 8005860:	f383 8811 	msr	BASEPRI, r3
}
 8005864:	bf00      	nop
 8005866:	3738      	adds	r7, #56	@ 0x38
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}
 800586c:	20014404 	.word	0x20014404

08005870 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8005870:	b580      	push	{r7, lr}
 8005872:	b090      	sub	sp, #64	@ 0x40
 8005874:	af00      	add	r7, sp, #0
 8005876:	60f8      	str	r0, [r7, #12]
 8005878:	60b9      	str	r1, [r7, #8]
 800587a:	607a      	str	r2, [r7, #4]
 800587c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800587e:	f3ef 8311 	mrs	r3, BASEPRI
 8005882:	f04f 0120 	mov.w	r1, #32
 8005886:	f381 8811 	msr	BASEPRI, r1
 800588a:	61fb      	str	r3, [r7, #28]
 800588c:	4840      	ldr	r0, [pc, #256]	@ (8005990 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 800588e:	f7ff f902 	bl	8004a96 <_PreparePacket>
 8005892:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005894:	69bb      	ldr	r3, [r7, #24]
 8005896:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	63bb      	str	r3, [r7, #56]	@ 0x38
 80058a0:	e00b      	b.n	80058ba <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 80058a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058a4:	b2da      	uxtb	r2, r3
 80058a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058a8:	1c59      	adds	r1, r3, #1
 80058aa:	63f9      	str	r1, [r7, #60]	@ 0x3c
 80058ac:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80058b0:	b2d2      	uxtb	r2, r2
 80058b2:	701a      	strb	r2, [r3, #0]
 80058b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058b6:	09db      	lsrs	r3, r3, #7
 80058b8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80058ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058bc:	2b7f      	cmp	r3, #127	@ 0x7f
 80058be:	d8f0      	bhi.n	80058a2 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 80058c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058c2:	1c5a      	adds	r2, r3, #1
 80058c4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80058c6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80058c8:	b2d2      	uxtb	r2, r2
 80058ca:	701a      	strb	r2, [r3, #0]
 80058cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058ce:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	633b      	str	r3, [r7, #48]	@ 0x30
 80058d8:	e00b      	b.n	80058f2 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 80058da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058dc:	b2da      	uxtb	r2, r3
 80058de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058e0:	1c59      	adds	r1, r3, #1
 80058e2:	6379      	str	r1, [r7, #52]	@ 0x34
 80058e4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80058e8:	b2d2      	uxtb	r2, r2
 80058ea:	701a      	strb	r2, [r3, #0]
 80058ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058ee:	09db      	lsrs	r3, r3, #7
 80058f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80058f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058f4:	2b7f      	cmp	r3, #127	@ 0x7f
 80058f6:	d8f0      	bhi.n	80058da <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 80058f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058fa:	1c5a      	adds	r2, r3, #1
 80058fc:	637a      	str	r2, [r7, #52]	@ 0x34
 80058fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005900:	b2d2      	uxtb	r2, r2
 8005902:	701a      	strb	r2, [r3, #0]
 8005904:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005906:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005910:	e00b      	b.n	800592a <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8005912:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005914:	b2da      	uxtb	r2, r3
 8005916:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005918:	1c59      	adds	r1, r3, #1
 800591a:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800591c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005920:	b2d2      	uxtb	r2, r2
 8005922:	701a      	strb	r2, [r3, #0]
 8005924:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005926:	09db      	lsrs	r3, r3, #7
 8005928:	62bb      	str	r3, [r7, #40]	@ 0x28
 800592a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800592c:	2b7f      	cmp	r3, #127	@ 0x7f
 800592e:	d8f0      	bhi.n	8005912 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8005930:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005932:	1c5a      	adds	r2, r3, #1
 8005934:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005936:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005938:	b2d2      	uxtb	r2, r2
 800593a:	701a      	strb	r2, [r3, #0]
 800593c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800593e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	627b      	str	r3, [r7, #36]	@ 0x24
 8005944:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005946:	623b      	str	r3, [r7, #32]
 8005948:	e00b      	b.n	8005962 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 800594a:	6a3b      	ldr	r3, [r7, #32]
 800594c:	b2da      	uxtb	r2, r3
 800594e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005950:	1c59      	adds	r1, r3, #1
 8005952:	6279      	str	r1, [r7, #36]	@ 0x24
 8005954:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005958:	b2d2      	uxtb	r2, r2
 800595a:	701a      	strb	r2, [r3, #0]
 800595c:	6a3b      	ldr	r3, [r7, #32]
 800595e:	09db      	lsrs	r3, r3, #7
 8005960:	623b      	str	r3, [r7, #32]
 8005962:	6a3b      	ldr	r3, [r7, #32]
 8005964:	2b7f      	cmp	r3, #127	@ 0x7f
 8005966:	d8f0      	bhi.n	800594a <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8005968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800596a:	1c5a      	adds	r2, r3, #1
 800596c:	627a      	str	r2, [r7, #36]	@ 0x24
 800596e:	6a3a      	ldr	r2, [r7, #32]
 8005970:	b2d2      	uxtb	r2, r2
 8005972:	701a      	strb	r2, [r3, #0]
 8005974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005976:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005978:	68fa      	ldr	r2, [r7, #12]
 800597a:	6979      	ldr	r1, [r7, #20]
 800597c:	69b8      	ldr	r0, [r7, #24]
 800597e:	f7ff f979 	bl	8004c74 <_SendPacket>
  RECORD_END();
 8005982:	69fb      	ldr	r3, [r7, #28]
 8005984:	f383 8811 	msr	BASEPRI, r3
}
 8005988:	bf00      	nop
 800598a:	3740      	adds	r7, #64	@ 0x40
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}
 8005990:	20014404 	.word	0x20014404

08005994 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8005994:	b580      	push	{r7, lr}
 8005996:	b08c      	sub	sp, #48	@ 0x30
 8005998:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800599a:	4b58      	ldr	r3, [pc, #352]	@ (8005afc <SEGGER_SYSVIEW_Start+0x168>)
 800599c:	2201      	movs	r2, #1
 800599e:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80059a0:	f3ef 8311 	mrs	r3, BASEPRI
 80059a4:	f04f 0120 	mov.w	r1, #32
 80059a8:	f381 8811 	msr	BASEPRI, r1
 80059ac:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80059ae:	4b53      	ldr	r3, [pc, #332]	@ (8005afc <SEGGER_SYSVIEW_Start+0x168>)
 80059b0:	785b      	ldrb	r3, [r3, #1]
 80059b2:	220a      	movs	r2, #10
 80059b4:	4952      	ldr	r1, [pc, #328]	@ (8005b00 <SEGGER_SYSVIEW_Start+0x16c>)
 80059b6:	4618      	mov	r0, r3
 80059b8:	f7fa fc0a 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80059c2:	200a      	movs	r0, #10
 80059c4:	f7ff fe2a 	bl	800561c <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80059c8:	f3ef 8311 	mrs	r3, BASEPRI
 80059cc:	f04f 0120 	mov.w	r1, #32
 80059d0:	f381 8811 	msr	BASEPRI, r1
 80059d4:	60bb      	str	r3, [r7, #8]
 80059d6:	484b      	ldr	r0, [pc, #300]	@ (8005b04 <SEGGER_SYSVIEW_Start+0x170>)
 80059d8:	f7ff f85d 	bl	8004a96 <_PreparePacket>
 80059dc:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80059e6:	4b45      	ldr	r3, [pc, #276]	@ (8005afc <SEGGER_SYSVIEW_Start+0x168>)
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 80059ec:	e00b      	b.n	8005a06 <SEGGER_SYSVIEW_Start+0x72>
 80059ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059f0:	b2da      	uxtb	r2, r3
 80059f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059f4:	1c59      	adds	r1, r3, #1
 80059f6:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80059f8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80059fc:	b2d2      	uxtb	r2, r2
 80059fe:	701a      	strb	r2, [r3, #0]
 8005a00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a02:	09db      	lsrs	r3, r3, #7
 8005a04:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005a06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a08:	2b7f      	cmp	r3, #127	@ 0x7f
 8005a0a:	d8f0      	bhi.n	80059ee <SEGGER_SYSVIEW_Start+0x5a>
 8005a0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a0e:	1c5a      	adds	r2, r3, #1
 8005a10:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005a12:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005a14:	b2d2      	uxtb	r2, r2
 8005a16:	701a      	strb	r2, [r3, #0]
 8005a18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a1a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a20:	4b36      	ldr	r3, [pc, #216]	@ (8005afc <SEGGER_SYSVIEW_Start+0x168>)
 8005a22:	689b      	ldr	r3, [r3, #8]
 8005a24:	623b      	str	r3, [r7, #32]
 8005a26:	e00b      	b.n	8005a40 <SEGGER_SYSVIEW_Start+0xac>
 8005a28:	6a3b      	ldr	r3, [r7, #32]
 8005a2a:	b2da      	uxtb	r2, r3
 8005a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a2e:	1c59      	adds	r1, r3, #1
 8005a30:	6279      	str	r1, [r7, #36]	@ 0x24
 8005a32:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005a36:	b2d2      	uxtb	r2, r2
 8005a38:	701a      	strb	r2, [r3, #0]
 8005a3a:	6a3b      	ldr	r3, [r7, #32]
 8005a3c:	09db      	lsrs	r3, r3, #7
 8005a3e:	623b      	str	r3, [r7, #32]
 8005a40:	6a3b      	ldr	r3, [r7, #32]
 8005a42:	2b7f      	cmp	r3, #127	@ 0x7f
 8005a44:	d8f0      	bhi.n	8005a28 <SEGGER_SYSVIEW_Start+0x94>
 8005a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a48:	1c5a      	adds	r2, r3, #1
 8005a4a:	627a      	str	r2, [r7, #36]	@ 0x24
 8005a4c:	6a3a      	ldr	r2, [r7, #32]
 8005a4e:	b2d2      	uxtb	r2, r2
 8005a50:	701a      	strb	r2, [r3, #0]
 8005a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a54:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	61fb      	str	r3, [r7, #28]
 8005a5a:	4b28      	ldr	r3, [pc, #160]	@ (8005afc <SEGGER_SYSVIEW_Start+0x168>)
 8005a5c:	691b      	ldr	r3, [r3, #16]
 8005a5e:	61bb      	str	r3, [r7, #24]
 8005a60:	e00b      	b.n	8005a7a <SEGGER_SYSVIEW_Start+0xe6>
 8005a62:	69bb      	ldr	r3, [r7, #24]
 8005a64:	b2da      	uxtb	r2, r3
 8005a66:	69fb      	ldr	r3, [r7, #28]
 8005a68:	1c59      	adds	r1, r3, #1
 8005a6a:	61f9      	str	r1, [r7, #28]
 8005a6c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005a70:	b2d2      	uxtb	r2, r2
 8005a72:	701a      	strb	r2, [r3, #0]
 8005a74:	69bb      	ldr	r3, [r7, #24]
 8005a76:	09db      	lsrs	r3, r3, #7
 8005a78:	61bb      	str	r3, [r7, #24]
 8005a7a:	69bb      	ldr	r3, [r7, #24]
 8005a7c:	2b7f      	cmp	r3, #127	@ 0x7f
 8005a7e:	d8f0      	bhi.n	8005a62 <SEGGER_SYSVIEW_Start+0xce>
 8005a80:	69fb      	ldr	r3, [r7, #28]
 8005a82:	1c5a      	adds	r2, r3, #1
 8005a84:	61fa      	str	r2, [r7, #28]
 8005a86:	69ba      	ldr	r2, [r7, #24]
 8005a88:	b2d2      	uxtb	r2, r2
 8005a8a:	701a      	strb	r2, [r3, #0]
 8005a8c:	69fb      	ldr	r3, [r7, #28]
 8005a8e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	617b      	str	r3, [r7, #20]
 8005a94:	2300      	movs	r3, #0
 8005a96:	613b      	str	r3, [r7, #16]
 8005a98:	e00b      	b.n	8005ab2 <SEGGER_SYSVIEW_Start+0x11e>
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	b2da      	uxtb	r2, r3
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	1c59      	adds	r1, r3, #1
 8005aa2:	6179      	str	r1, [r7, #20]
 8005aa4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005aa8:	b2d2      	uxtb	r2, r2
 8005aaa:	701a      	strb	r2, [r3, #0]
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	09db      	lsrs	r3, r3, #7
 8005ab0:	613b      	str	r3, [r7, #16]
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	2b7f      	cmp	r3, #127	@ 0x7f
 8005ab6:	d8f0      	bhi.n	8005a9a <SEGGER_SYSVIEW_Start+0x106>
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	1c5a      	adds	r2, r3, #1
 8005abc:	617a      	str	r2, [r7, #20]
 8005abe:	693a      	ldr	r2, [r7, #16]
 8005ac0:	b2d2      	uxtb	r2, r2
 8005ac2:	701a      	strb	r2, [r3, #0]
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005ac8:	2218      	movs	r2, #24
 8005aca:	6839      	ldr	r1, [r7, #0]
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	f7ff f8d1 	bl	8004c74 <_SendPacket>
      RECORD_END();
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005ad8:	4b08      	ldr	r3, [pc, #32]	@ (8005afc <SEGGER_SYSVIEW_Start+0x168>)
 8005ada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d002      	beq.n	8005ae6 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8005ae0:	4b06      	ldr	r3, [pc, #24]	@ (8005afc <SEGGER_SYSVIEW_Start+0x168>)
 8005ae2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ae4:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8005ae6:	f000 f9eb 	bl	8005ec0 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8005aea:	f000 f9b1 	bl	8005e50 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8005aee:	f000 fc83 	bl	80063f8 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8005af2:	bf00      	nop
 8005af4:	3730      	adds	r7, #48	@ 0x30
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}
 8005afa:	bf00      	nop
 8005afc:	200143d4 	.word	0x200143d4
 8005b00:	08007040 	.word	0x08007040
 8005b04:	20014404 	.word	0x20014404

08005b08 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b082      	sub	sp, #8
 8005b0c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005b0e:	f3ef 8311 	mrs	r3, BASEPRI
 8005b12:	f04f 0120 	mov.w	r1, #32
 8005b16:	f381 8811 	msr	BASEPRI, r1
 8005b1a:	607b      	str	r3, [r7, #4]
 8005b1c:	480b      	ldr	r0, [pc, #44]	@ (8005b4c <SEGGER_SYSVIEW_Stop+0x44>)
 8005b1e:	f7fe ffba 	bl	8004a96 <_PreparePacket>
 8005b22:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8005b24:	4b0a      	ldr	r3, [pc, #40]	@ (8005b50 <SEGGER_SYSVIEW_Stop+0x48>)
 8005b26:	781b      	ldrb	r3, [r3, #0]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d007      	beq.n	8005b3c <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8005b2c:	220b      	movs	r2, #11
 8005b2e:	6839      	ldr	r1, [r7, #0]
 8005b30:	6838      	ldr	r0, [r7, #0]
 8005b32:	f7ff f89f 	bl	8004c74 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8005b36:	4b06      	ldr	r3, [pc, #24]	@ (8005b50 <SEGGER_SYSVIEW_Stop+0x48>)
 8005b38:	2200      	movs	r2, #0
 8005b3a:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	f383 8811 	msr	BASEPRI, r3
}
 8005b42:	bf00      	nop
 8005b44:	3708      	adds	r7, #8
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}
 8005b4a:	bf00      	nop
 8005b4c:	20014404 	.word	0x20014404
 8005b50:	200143d4 	.word	0x200143d4

08005b54 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b08c      	sub	sp, #48	@ 0x30
 8005b58:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005b5a:	f3ef 8311 	mrs	r3, BASEPRI
 8005b5e:	f04f 0120 	mov.w	r1, #32
 8005b62:	f381 8811 	msr	BASEPRI, r1
 8005b66:	60fb      	str	r3, [r7, #12]
 8005b68:	4845      	ldr	r0, [pc, #276]	@ (8005c80 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8005b6a:	f7fe ff94 	bl	8004a96 <_PreparePacket>
 8005b6e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005b78:	4b42      	ldr	r3, [pc, #264]	@ (8005c84 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005b7e:	e00b      	b.n	8005b98 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8005b80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b82:	b2da      	uxtb	r2, r3
 8005b84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b86:	1c59      	adds	r1, r3, #1
 8005b88:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005b8a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005b8e:	b2d2      	uxtb	r2, r2
 8005b90:	701a      	strb	r2, [r3, #0]
 8005b92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b94:	09db      	lsrs	r3, r3, #7
 8005b96:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005b98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b9a:	2b7f      	cmp	r3, #127	@ 0x7f
 8005b9c:	d8f0      	bhi.n	8005b80 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8005b9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ba0:	1c5a      	adds	r2, r3, #1
 8005ba2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005ba4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005ba6:	b2d2      	uxtb	r2, r2
 8005ba8:	701a      	strb	r2, [r3, #0]
 8005baa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bac:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	627b      	str	r3, [r7, #36]	@ 0x24
 8005bb2:	4b34      	ldr	r3, [pc, #208]	@ (8005c84 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	623b      	str	r3, [r7, #32]
 8005bb8:	e00b      	b.n	8005bd2 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8005bba:	6a3b      	ldr	r3, [r7, #32]
 8005bbc:	b2da      	uxtb	r2, r3
 8005bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bc0:	1c59      	adds	r1, r3, #1
 8005bc2:	6279      	str	r1, [r7, #36]	@ 0x24
 8005bc4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005bc8:	b2d2      	uxtb	r2, r2
 8005bca:	701a      	strb	r2, [r3, #0]
 8005bcc:	6a3b      	ldr	r3, [r7, #32]
 8005bce:	09db      	lsrs	r3, r3, #7
 8005bd0:	623b      	str	r3, [r7, #32]
 8005bd2:	6a3b      	ldr	r3, [r7, #32]
 8005bd4:	2b7f      	cmp	r3, #127	@ 0x7f
 8005bd6:	d8f0      	bhi.n	8005bba <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8005bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bda:	1c5a      	adds	r2, r3, #1
 8005bdc:	627a      	str	r2, [r7, #36]	@ 0x24
 8005bde:	6a3a      	ldr	r2, [r7, #32]
 8005be0:	b2d2      	uxtb	r2, r2
 8005be2:	701a      	strb	r2, [r3, #0]
 8005be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005be6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	61fb      	str	r3, [r7, #28]
 8005bec:	4b25      	ldr	r3, [pc, #148]	@ (8005c84 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005bee:	691b      	ldr	r3, [r3, #16]
 8005bf0:	61bb      	str	r3, [r7, #24]
 8005bf2:	e00b      	b.n	8005c0c <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8005bf4:	69bb      	ldr	r3, [r7, #24]
 8005bf6:	b2da      	uxtb	r2, r3
 8005bf8:	69fb      	ldr	r3, [r7, #28]
 8005bfa:	1c59      	adds	r1, r3, #1
 8005bfc:	61f9      	str	r1, [r7, #28]
 8005bfe:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005c02:	b2d2      	uxtb	r2, r2
 8005c04:	701a      	strb	r2, [r3, #0]
 8005c06:	69bb      	ldr	r3, [r7, #24]
 8005c08:	09db      	lsrs	r3, r3, #7
 8005c0a:	61bb      	str	r3, [r7, #24]
 8005c0c:	69bb      	ldr	r3, [r7, #24]
 8005c0e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005c10:	d8f0      	bhi.n	8005bf4 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8005c12:	69fb      	ldr	r3, [r7, #28]
 8005c14:	1c5a      	adds	r2, r3, #1
 8005c16:	61fa      	str	r2, [r7, #28]
 8005c18:	69ba      	ldr	r2, [r7, #24]
 8005c1a:	b2d2      	uxtb	r2, r2
 8005c1c:	701a      	strb	r2, [r3, #0]
 8005c1e:	69fb      	ldr	r3, [r7, #28]
 8005c20:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	617b      	str	r3, [r7, #20]
 8005c26:	2300      	movs	r3, #0
 8005c28:	613b      	str	r3, [r7, #16]
 8005c2a:	e00b      	b.n	8005c44 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	b2da      	uxtb	r2, r3
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	1c59      	adds	r1, r3, #1
 8005c34:	6179      	str	r1, [r7, #20]
 8005c36:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005c3a:	b2d2      	uxtb	r2, r2
 8005c3c:	701a      	strb	r2, [r3, #0]
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	09db      	lsrs	r3, r3, #7
 8005c42:	613b      	str	r3, [r7, #16]
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	2b7f      	cmp	r3, #127	@ 0x7f
 8005c48:	d8f0      	bhi.n	8005c2c <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	1c5a      	adds	r2, r3, #1
 8005c4e:	617a      	str	r2, [r7, #20]
 8005c50:	693a      	ldr	r2, [r7, #16]
 8005c52:	b2d2      	uxtb	r2, r2
 8005c54:	701a      	strb	r2, [r3, #0]
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005c5a:	2218      	movs	r2, #24
 8005c5c:	6879      	ldr	r1, [r7, #4]
 8005c5e:	68b8      	ldr	r0, [r7, #8]
 8005c60:	f7ff f808 	bl	8004c74 <_SendPacket>
  RECORD_END();
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005c6a:	4b06      	ldr	r3, [pc, #24]	@ (8005c84 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005c6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d002      	beq.n	8005c78 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8005c72:	4b04      	ldr	r3, [pc, #16]	@ (8005c84 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005c74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c76:	4798      	blx	r3
  }
}
 8005c78:	bf00      	nop
 8005c7a:	3730      	adds	r7, #48	@ 0x30
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}
 8005c80:	20014404 	.word	0x20014404
 8005c84:	200143d4 	.word	0x200143d4

08005c88 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b092      	sub	sp, #72	@ 0x48
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8005c90:	f3ef 8311 	mrs	r3, BASEPRI
 8005c94:	f04f 0120 	mov.w	r1, #32
 8005c98:	f381 8811 	msr	BASEPRI, r1
 8005c9c:	617b      	str	r3, [r7, #20]
 8005c9e:	486a      	ldr	r0, [pc, #424]	@ (8005e48 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8005ca0:	f7fe fef9 	bl	8004a96 <_PreparePacket>
 8005ca4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	647b      	str	r3, [r7, #68]	@ 0x44
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681a      	ldr	r2, [r3, #0]
 8005cb2:	4b66      	ldr	r3, [pc, #408]	@ (8005e4c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005cb4:	691b      	ldr	r3, [r3, #16]
 8005cb6:	1ad3      	subs	r3, r2, r3
 8005cb8:	643b      	str	r3, [r7, #64]	@ 0x40
 8005cba:	e00b      	b.n	8005cd4 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8005cbc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005cbe:	b2da      	uxtb	r2, r3
 8005cc0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005cc2:	1c59      	adds	r1, r3, #1
 8005cc4:	6479      	str	r1, [r7, #68]	@ 0x44
 8005cc6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005cca:	b2d2      	uxtb	r2, r2
 8005ccc:	701a      	strb	r2, [r3, #0]
 8005cce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005cd0:	09db      	lsrs	r3, r3, #7
 8005cd2:	643b      	str	r3, [r7, #64]	@ 0x40
 8005cd4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005cd6:	2b7f      	cmp	r3, #127	@ 0x7f
 8005cd8:	d8f0      	bhi.n	8005cbc <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8005cda:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005cdc:	1c5a      	adds	r2, r3, #1
 8005cde:	647a      	str	r2, [r7, #68]	@ 0x44
 8005ce0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005ce2:	b2d2      	uxtb	r2, r2
 8005ce4:	701a      	strb	r2, [r3, #0]
 8005ce6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ce8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	689b      	ldr	r3, [r3, #8]
 8005cf2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005cf4:	e00b      	b.n	8005d0e <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8005cf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cf8:	b2da      	uxtb	r2, r3
 8005cfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005cfc:	1c59      	adds	r1, r3, #1
 8005cfe:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8005d00:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005d04:	b2d2      	uxtb	r2, r2
 8005d06:	701a      	strb	r2, [r3, #0]
 8005d08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d0a:	09db      	lsrs	r3, r3, #7
 8005d0c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005d0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d10:	2b7f      	cmp	r3, #127	@ 0x7f
 8005d12:	d8f0      	bhi.n	8005cf6 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8005d14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d16:	1c5a      	adds	r2, r3, #1
 8005d18:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005d1a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005d1c:	b2d2      	uxtb	r2, r2
 8005d1e:	701a      	strb	r2, [r3, #0]
 8005d20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d22:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	2220      	movs	r2, #32
 8005d2a:	4619      	mov	r1, r3
 8005d2c:	68f8      	ldr	r0, [r7, #12]
 8005d2e:	f7fe fe65 	bl	80049fc <_EncodeStr>
 8005d32:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8005d34:	2209      	movs	r2, #9
 8005d36:	68f9      	ldr	r1, [r7, #12]
 8005d38:	6938      	ldr	r0, [r7, #16]
 8005d3a:	f7fe ff9b 	bl	8004c74 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681a      	ldr	r2, [r3, #0]
 8005d4a:	4b40      	ldr	r3, [pc, #256]	@ (8005e4c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005d4c:	691b      	ldr	r3, [r3, #16]
 8005d4e:	1ad3      	subs	r3, r2, r3
 8005d50:	633b      	str	r3, [r7, #48]	@ 0x30
 8005d52:	e00b      	b.n	8005d6c <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8005d54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d56:	b2da      	uxtb	r2, r3
 8005d58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d5a:	1c59      	adds	r1, r3, #1
 8005d5c:	6379      	str	r1, [r7, #52]	@ 0x34
 8005d5e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005d62:	b2d2      	uxtb	r2, r2
 8005d64:	701a      	strb	r2, [r3, #0]
 8005d66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d68:	09db      	lsrs	r3, r3, #7
 8005d6a:	633b      	str	r3, [r7, #48]	@ 0x30
 8005d6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d6e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005d70:	d8f0      	bhi.n	8005d54 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8005d72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d74:	1c5a      	adds	r2, r3, #1
 8005d76:	637a      	str	r2, [r7, #52]	@ 0x34
 8005d78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d7a:	b2d2      	uxtb	r2, r2
 8005d7c:	701a      	strb	r2, [r3, #0]
 8005d7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d80:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	68db      	ldr	r3, [r3, #12]
 8005d8a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005d8c:	e00b      	b.n	8005da6 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8005d8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d90:	b2da      	uxtb	r2, r3
 8005d92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d94:	1c59      	adds	r1, r3, #1
 8005d96:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005d98:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005d9c:	b2d2      	uxtb	r2, r2
 8005d9e:	701a      	strb	r2, [r3, #0]
 8005da0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005da2:	09db      	lsrs	r3, r3, #7
 8005da4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005da6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005da8:	2b7f      	cmp	r3, #127	@ 0x7f
 8005daa:	d8f0      	bhi.n	8005d8e <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8005dac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dae:	1c5a      	adds	r2, r3, #1
 8005db0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005db2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005db4:	b2d2      	uxtb	r2, r2
 8005db6:	701a      	strb	r2, [r3, #0]
 8005db8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dba:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	627b      	str	r3, [r7, #36]	@ 0x24
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	691b      	ldr	r3, [r3, #16]
 8005dc4:	623b      	str	r3, [r7, #32]
 8005dc6:	e00b      	b.n	8005de0 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8005dc8:	6a3b      	ldr	r3, [r7, #32]
 8005dca:	b2da      	uxtb	r2, r3
 8005dcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dce:	1c59      	adds	r1, r3, #1
 8005dd0:	6279      	str	r1, [r7, #36]	@ 0x24
 8005dd2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005dd6:	b2d2      	uxtb	r2, r2
 8005dd8:	701a      	strb	r2, [r3, #0]
 8005dda:	6a3b      	ldr	r3, [r7, #32]
 8005ddc:	09db      	lsrs	r3, r3, #7
 8005dde:	623b      	str	r3, [r7, #32]
 8005de0:	6a3b      	ldr	r3, [r7, #32]
 8005de2:	2b7f      	cmp	r3, #127	@ 0x7f
 8005de4:	d8f0      	bhi.n	8005dc8 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8005de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005de8:	1c5a      	adds	r2, r3, #1
 8005dea:	627a      	str	r2, [r7, #36]	@ 0x24
 8005dec:	6a3a      	ldr	r2, [r7, #32]
 8005dee:	b2d2      	uxtb	r2, r2
 8005df0:	701a      	strb	r2, [r3, #0]
 8005df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005df4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	61fb      	str	r3, [r7, #28]
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	61bb      	str	r3, [r7, #24]
 8005dfe:	e00b      	b.n	8005e18 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8005e00:	69bb      	ldr	r3, [r7, #24]
 8005e02:	b2da      	uxtb	r2, r3
 8005e04:	69fb      	ldr	r3, [r7, #28]
 8005e06:	1c59      	adds	r1, r3, #1
 8005e08:	61f9      	str	r1, [r7, #28]
 8005e0a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005e0e:	b2d2      	uxtb	r2, r2
 8005e10:	701a      	strb	r2, [r3, #0]
 8005e12:	69bb      	ldr	r3, [r7, #24]
 8005e14:	09db      	lsrs	r3, r3, #7
 8005e16:	61bb      	str	r3, [r7, #24]
 8005e18:	69bb      	ldr	r3, [r7, #24]
 8005e1a:	2b7f      	cmp	r3, #127	@ 0x7f
 8005e1c:	d8f0      	bhi.n	8005e00 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8005e1e:	69fb      	ldr	r3, [r7, #28]
 8005e20:	1c5a      	adds	r2, r3, #1
 8005e22:	61fa      	str	r2, [r7, #28]
 8005e24:	69ba      	ldr	r2, [r7, #24]
 8005e26:	b2d2      	uxtb	r2, r2
 8005e28:	701a      	strb	r2, [r3, #0]
 8005e2a:	69fb      	ldr	r3, [r7, #28]
 8005e2c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8005e2e:	2215      	movs	r2, #21
 8005e30:	68f9      	ldr	r1, [r7, #12]
 8005e32:	6938      	ldr	r0, [r7, #16]
 8005e34:	f7fe ff1e 	bl	8004c74 <_SendPacket>
  RECORD_END();
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	f383 8811 	msr	BASEPRI, r3
}
 8005e3e:	bf00      	nop
 8005e40:	3748      	adds	r7, #72	@ 0x48
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}
 8005e46:	bf00      	nop
 8005e48:	20014404 	.word	0x20014404
 8005e4c:	200143d4 	.word	0x200143d4

08005e50 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8005e50:	b580      	push	{r7, lr}
 8005e52:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8005e54:	4b07      	ldr	r3, [pc, #28]	@ (8005e74 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005e56:	6a1b      	ldr	r3, [r3, #32]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d008      	beq.n	8005e6e <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8005e5c:	4b05      	ldr	r3, [pc, #20]	@ (8005e74 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005e5e:	6a1b      	ldr	r3, [r3, #32]
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d003      	beq.n	8005e6e <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8005e66:	4b03      	ldr	r3, [pc, #12]	@ (8005e74 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005e68:	6a1b      	ldr	r3, [r3, #32]
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	4798      	blx	r3
  }
}
 8005e6e:	bf00      	nop
 8005e70:	bd80      	pop	{r7, pc}
 8005e72:	bf00      	nop
 8005e74:	200143d4 	.word	0x200143d4

08005e78 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b086      	sub	sp, #24
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005e80:	f3ef 8311 	mrs	r3, BASEPRI
 8005e84:	f04f 0120 	mov.w	r1, #32
 8005e88:	f381 8811 	msr	BASEPRI, r1
 8005e8c:	617b      	str	r3, [r7, #20]
 8005e8e:	480b      	ldr	r0, [pc, #44]	@ (8005ebc <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8005e90:	f7fe fe01 	bl	8004a96 <_PreparePacket>
 8005e94:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005e96:	2280      	movs	r2, #128	@ 0x80
 8005e98:	6879      	ldr	r1, [r7, #4]
 8005e9a:	6938      	ldr	r0, [r7, #16]
 8005e9c:	f7fe fdae 	bl	80049fc <_EncodeStr>
 8005ea0:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8005ea2:	220e      	movs	r2, #14
 8005ea4:	68f9      	ldr	r1, [r7, #12]
 8005ea6:	6938      	ldr	r0, [r7, #16]
 8005ea8:	f7fe fee4 	bl	8004c74 <_SendPacket>
  RECORD_END();
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	f383 8811 	msr	BASEPRI, r3
}
 8005eb2:	bf00      	nop
 8005eb4:	3718      	adds	r7, #24
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bd80      	pop	{r7, pc}
 8005eba:	bf00      	nop
 8005ebc:	20014404 	.word	0x20014404

08005ec0 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8005ec0:	b590      	push	{r4, r7, lr}
 8005ec2:	b083      	sub	sp, #12
 8005ec4:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8005ec6:	4b15      	ldr	r3, [pc, #84]	@ (8005f1c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005ec8:	6a1b      	ldr	r3, [r3, #32]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d01a      	beq.n	8005f04 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8005ece:	4b13      	ldr	r3, [pc, #76]	@ (8005f1c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005ed0:	6a1b      	ldr	r3, [r3, #32]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d015      	beq.n	8005f04 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8005ed8:	4b10      	ldr	r3, [pc, #64]	@ (8005f1c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005eda:	6a1b      	ldr	r3, [r3, #32]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4798      	blx	r3
 8005ee0:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005ee4:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8005ee6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005eea:	f04f 0200 	mov.w	r2, #0
 8005eee:	f04f 0300 	mov.w	r3, #0
 8005ef2:	000a      	movs	r2, r1
 8005ef4:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005ef6:	4613      	mov	r3, r2
 8005ef8:	461a      	mov	r2, r3
 8005efa:	4621      	mov	r1, r4
 8005efc:	200d      	movs	r0, #13
 8005efe:	f7ff fbe7 	bl	80056d0 <SEGGER_SYSVIEW_RecordU32x2>
 8005f02:	e006      	b.n	8005f12 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8005f04:	4b06      	ldr	r3, [pc, #24]	@ (8005f20 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4619      	mov	r1, r3
 8005f0a:	200c      	movs	r0, #12
 8005f0c:	f7ff fba4 	bl	8005658 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8005f10:	bf00      	nop
 8005f12:	bf00      	nop
 8005f14:	370c      	adds	r7, #12
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd90      	pop	{r4, r7, pc}
 8005f1a:	bf00      	nop
 8005f1c:	200143d4 	.word	0x200143d4
 8005f20:	e0001004 	.word	0xe0001004

08005f24 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b086      	sub	sp, #24
 8005f28:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005f2a:	f3ef 8311 	mrs	r3, BASEPRI
 8005f2e:	f04f 0120 	mov.w	r1, #32
 8005f32:	f381 8811 	msr	BASEPRI, r1
 8005f36:	60fb      	str	r3, [r7, #12]
 8005f38:	4819      	ldr	r0, [pc, #100]	@ (8005fa0 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8005f3a:	f7fe fdac 	bl	8004a96 <_PreparePacket>
 8005f3e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8005f44:	4b17      	ldr	r3, [pc, #92]	@ (8005fa4 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f4c:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	617b      	str	r3, [r7, #20]
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	613b      	str	r3, [r7, #16]
 8005f56:	e00b      	b.n	8005f70 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	b2da      	uxtb	r2, r3
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	1c59      	adds	r1, r3, #1
 8005f60:	6179      	str	r1, [r7, #20]
 8005f62:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005f66:	b2d2      	uxtb	r2, r2
 8005f68:	701a      	strb	r2, [r3, #0]
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	09db      	lsrs	r3, r3, #7
 8005f6e:	613b      	str	r3, [r7, #16]
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	2b7f      	cmp	r3, #127	@ 0x7f
 8005f74:	d8f0      	bhi.n	8005f58 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	1c5a      	adds	r2, r3, #1
 8005f7a:	617a      	str	r2, [r7, #20]
 8005f7c:	693a      	ldr	r2, [r7, #16]
 8005f7e:	b2d2      	uxtb	r2, r2
 8005f80:	701a      	strb	r2, [r3, #0]
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8005f86:	2202      	movs	r2, #2
 8005f88:	6879      	ldr	r1, [r7, #4]
 8005f8a:	68b8      	ldr	r0, [r7, #8]
 8005f8c:	f7fe fe72 	bl	8004c74 <_SendPacket>
  RECORD_END();
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	f383 8811 	msr	BASEPRI, r3
}
 8005f96:	bf00      	nop
 8005f98:	3718      	adds	r7, #24
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}
 8005f9e:	bf00      	nop
 8005fa0:	20014404 	.word	0x20014404
 8005fa4:	e000ed04 	.word	0xe000ed04

08005fa8 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b082      	sub	sp, #8
 8005fac:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005fae:	f3ef 8311 	mrs	r3, BASEPRI
 8005fb2:	f04f 0120 	mov.w	r1, #32
 8005fb6:	f381 8811 	msr	BASEPRI, r1
 8005fba:	607b      	str	r3, [r7, #4]
 8005fbc:	4807      	ldr	r0, [pc, #28]	@ (8005fdc <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8005fbe:	f7fe fd6a 	bl	8004a96 <_PreparePacket>
 8005fc2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8005fc4:	2203      	movs	r2, #3
 8005fc6:	6839      	ldr	r1, [r7, #0]
 8005fc8:	6838      	ldr	r0, [r7, #0]
 8005fca:	f7fe fe53 	bl	8004c74 <_SendPacket>
  RECORD_END();
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	f383 8811 	msr	BASEPRI, r3
}
 8005fd4:	bf00      	nop
 8005fd6:	3708      	adds	r7, #8
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	bd80      	pop	{r7, pc}
 8005fdc:	20014404 	.word	0x20014404

08005fe0 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b082      	sub	sp, #8
 8005fe4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005fe6:	f3ef 8311 	mrs	r3, BASEPRI
 8005fea:	f04f 0120 	mov.w	r1, #32
 8005fee:	f381 8811 	msr	BASEPRI, r1
 8005ff2:	607b      	str	r3, [r7, #4]
 8005ff4:	4807      	ldr	r0, [pc, #28]	@ (8006014 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8005ff6:	f7fe fd4e 	bl	8004a96 <_PreparePacket>
 8005ffa:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8005ffc:	2212      	movs	r2, #18
 8005ffe:	6839      	ldr	r1, [r7, #0]
 8006000:	6838      	ldr	r0, [r7, #0]
 8006002:	f7fe fe37 	bl	8004c74 <_SendPacket>
  RECORD_END();
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	f383 8811 	msr	BASEPRI, r3
}
 800600c:	bf00      	nop
 800600e:	3708      	adds	r7, #8
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}
 8006014:	20014404 	.word	0x20014404

08006018 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8006018:	b580      	push	{r7, lr}
 800601a:	b082      	sub	sp, #8
 800601c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800601e:	f3ef 8311 	mrs	r3, BASEPRI
 8006022:	f04f 0120 	mov.w	r1, #32
 8006026:	f381 8811 	msr	BASEPRI, r1
 800602a:	607b      	str	r3, [r7, #4]
 800602c:	4807      	ldr	r0, [pc, #28]	@ (800604c <SEGGER_SYSVIEW_OnIdle+0x34>)
 800602e:	f7fe fd32 	bl	8004a96 <_PreparePacket>
 8006032:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8006034:	2211      	movs	r2, #17
 8006036:	6839      	ldr	r1, [r7, #0]
 8006038:	6838      	ldr	r0, [r7, #0]
 800603a:	f7fe fe1b 	bl	8004c74 <_SendPacket>
  RECORD_END();
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	f383 8811 	msr	BASEPRI, r3
}
 8006044:	bf00      	nop
 8006046:	3708      	adds	r7, #8
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}
 800604c:	20014404 	.word	0x20014404

08006050 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8006050:	b580      	push	{r7, lr}
 8006052:	b088      	sub	sp, #32
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006058:	f3ef 8311 	mrs	r3, BASEPRI
 800605c:	f04f 0120 	mov.w	r1, #32
 8006060:	f381 8811 	msr	BASEPRI, r1
 8006064:	617b      	str	r3, [r7, #20]
 8006066:	4819      	ldr	r0, [pc, #100]	@ (80060cc <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8006068:	f7fe fd15 	bl	8004a96 <_PreparePacket>
 800606c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006072:	4b17      	ldr	r3, [pc, #92]	@ (80060d0 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8006074:	691b      	ldr	r3, [r3, #16]
 8006076:	687a      	ldr	r2, [r7, #4]
 8006078:	1ad3      	subs	r3, r2, r3
 800607a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	61fb      	str	r3, [r7, #28]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	61bb      	str	r3, [r7, #24]
 8006084:	e00b      	b.n	800609e <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8006086:	69bb      	ldr	r3, [r7, #24]
 8006088:	b2da      	uxtb	r2, r3
 800608a:	69fb      	ldr	r3, [r7, #28]
 800608c:	1c59      	adds	r1, r3, #1
 800608e:	61f9      	str	r1, [r7, #28]
 8006090:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006094:	b2d2      	uxtb	r2, r2
 8006096:	701a      	strb	r2, [r3, #0]
 8006098:	69bb      	ldr	r3, [r7, #24]
 800609a:	09db      	lsrs	r3, r3, #7
 800609c:	61bb      	str	r3, [r7, #24]
 800609e:	69bb      	ldr	r3, [r7, #24]
 80060a0:	2b7f      	cmp	r3, #127	@ 0x7f
 80060a2:	d8f0      	bhi.n	8006086 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 80060a4:	69fb      	ldr	r3, [r7, #28]
 80060a6:	1c5a      	adds	r2, r3, #1
 80060a8:	61fa      	str	r2, [r7, #28]
 80060aa:	69ba      	ldr	r2, [r7, #24]
 80060ac:	b2d2      	uxtb	r2, r2
 80060ae:	701a      	strb	r2, [r3, #0]
 80060b0:	69fb      	ldr	r3, [r7, #28]
 80060b2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80060b4:	2208      	movs	r2, #8
 80060b6:	68f9      	ldr	r1, [r7, #12]
 80060b8:	6938      	ldr	r0, [r7, #16]
 80060ba:	f7fe fddb 	bl	8004c74 <_SendPacket>
  RECORD_END();
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	f383 8811 	msr	BASEPRI, r3
}
 80060c4:	bf00      	nop
 80060c6:	3720      	adds	r7, #32
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}
 80060cc:	20014404 	.word	0x20014404
 80060d0:	200143d4 	.word	0x200143d4

080060d4 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b088      	sub	sp, #32
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80060dc:	f3ef 8311 	mrs	r3, BASEPRI
 80060e0:	f04f 0120 	mov.w	r1, #32
 80060e4:	f381 8811 	msr	BASEPRI, r1
 80060e8:	617b      	str	r3, [r7, #20]
 80060ea:	4819      	ldr	r0, [pc, #100]	@ (8006150 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80060ec:	f7fe fcd3 	bl	8004a96 <_PreparePacket>
 80060f0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80060f6:	4b17      	ldr	r3, [pc, #92]	@ (8006154 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80060f8:	691b      	ldr	r3, [r3, #16]
 80060fa:	687a      	ldr	r2, [r7, #4]
 80060fc:	1ad3      	subs	r3, r2, r3
 80060fe:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	61fb      	str	r3, [r7, #28]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	61bb      	str	r3, [r7, #24]
 8006108:	e00b      	b.n	8006122 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800610a:	69bb      	ldr	r3, [r7, #24]
 800610c:	b2da      	uxtb	r2, r3
 800610e:	69fb      	ldr	r3, [r7, #28]
 8006110:	1c59      	adds	r1, r3, #1
 8006112:	61f9      	str	r1, [r7, #28]
 8006114:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006118:	b2d2      	uxtb	r2, r2
 800611a:	701a      	strb	r2, [r3, #0]
 800611c:	69bb      	ldr	r3, [r7, #24]
 800611e:	09db      	lsrs	r3, r3, #7
 8006120:	61bb      	str	r3, [r7, #24]
 8006122:	69bb      	ldr	r3, [r7, #24]
 8006124:	2b7f      	cmp	r3, #127	@ 0x7f
 8006126:	d8f0      	bhi.n	800610a <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006128:	69fb      	ldr	r3, [r7, #28]
 800612a:	1c5a      	adds	r2, r3, #1
 800612c:	61fa      	str	r2, [r7, #28]
 800612e:	69ba      	ldr	r2, [r7, #24]
 8006130:	b2d2      	uxtb	r2, r2
 8006132:	701a      	strb	r2, [r3, #0]
 8006134:	69fb      	ldr	r3, [r7, #28]
 8006136:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006138:	2204      	movs	r2, #4
 800613a:	68f9      	ldr	r1, [r7, #12]
 800613c:	6938      	ldr	r0, [r7, #16]
 800613e:	f7fe fd99 	bl	8004c74 <_SendPacket>
  RECORD_END();
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	f383 8811 	msr	BASEPRI, r3
}
 8006148:	bf00      	nop
 800614a:	3720      	adds	r7, #32
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}
 8006150:	20014404 	.word	0x20014404
 8006154:	200143d4 	.word	0x200143d4

08006158 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006158:	b580      	push	{r7, lr}
 800615a:	b088      	sub	sp, #32
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006160:	f3ef 8311 	mrs	r3, BASEPRI
 8006164:	f04f 0120 	mov.w	r1, #32
 8006168:	f381 8811 	msr	BASEPRI, r1
 800616c:	617b      	str	r3, [r7, #20]
 800616e:	4819      	ldr	r0, [pc, #100]	@ (80061d4 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006170:	f7fe fc91 	bl	8004a96 <_PreparePacket>
 8006174:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800617a:	4b17      	ldr	r3, [pc, #92]	@ (80061d8 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 800617c:	691b      	ldr	r3, [r3, #16]
 800617e:	687a      	ldr	r2, [r7, #4]
 8006180:	1ad3      	subs	r3, r2, r3
 8006182:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	61fb      	str	r3, [r7, #28]
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	61bb      	str	r3, [r7, #24]
 800618c:	e00b      	b.n	80061a6 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800618e:	69bb      	ldr	r3, [r7, #24]
 8006190:	b2da      	uxtb	r2, r3
 8006192:	69fb      	ldr	r3, [r7, #28]
 8006194:	1c59      	adds	r1, r3, #1
 8006196:	61f9      	str	r1, [r7, #28]
 8006198:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800619c:	b2d2      	uxtb	r2, r2
 800619e:	701a      	strb	r2, [r3, #0]
 80061a0:	69bb      	ldr	r3, [r7, #24]
 80061a2:	09db      	lsrs	r3, r3, #7
 80061a4:	61bb      	str	r3, [r7, #24]
 80061a6:	69bb      	ldr	r3, [r7, #24]
 80061a8:	2b7f      	cmp	r3, #127	@ 0x7f
 80061aa:	d8f0      	bhi.n	800618e <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 80061ac:	69fb      	ldr	r3, [r7, #28]
 80061ae:	1c5a      	adds	r2, r3, #1
 80061b0:	61fa      	str	r2, [r7, #28]
 80061b2:	69ba      	ldr	r2, [r7, #24]
 80061b4:	b2d2      	uxtb	r2, r2
 80061b6:	701a      	strb	r2, [r3, #0]
 80061b8:	69fb      	ldr	r3, [r7, #28]
 80061ba:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80061bc:	2206      	movs	r2, #6
 80061be:	68f9      	ldr	r1, [r7, #12]
 80061c0:	6938      	ldr	r0, [r7, #16]
 80061c2:	f7fe fd57 	bl	8004c74 <_SendPacket>
  RECORD_END();
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	f383 8811 	msr	BASEPRI, r3
}
 80061cc:	bf00      	nop
 80061ce:	3720      	adds	r7, #32
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bd80      	pop	{r7, pc}
 80061d4:	20014404 	.word	0x20014404
 80061d8:	200143d4 	.word	0x200143d4

080061dc <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 80061dc:	b580      	push	{r7, lr}
 80061de:	b08a      	sub	sp, #40	@ 0x28
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
 80061e4:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80061e6:	f3ef 8311 	mrs	r3, BASEPRI
 80061ea:	f04f 0120 	mov.w	r1, #32
 80061ee:	f381 8811 	msr	BASEPRI, r1
 80061f2:	617b      	str	r3, [r7, #20]
 80061f4:	4827      	ldr	r0, [pc, #156]	@ (8006294 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 80061f6:	f7fe fc4e 	bl	8004a96 <_PreparePacket>
 80061fa:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80061fc:	693b      	ldr	r3, [r7, #16]
 80061fe:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006200:	4b25      	ldr	r3, [pc, #148]	@ (8006298 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8006202:	691b      	ldr	r3, [r3, #16]
 8006204:	687a      	ldr	r2, [r7, #4]
 8006206:	1ad3      	subs	r3, r2, r3
 8006208:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	627b      	str	r3, [r7, #36]	@ 0x24
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	623b      	str	r3, [r7, #32]
 8006212:	e00b      	b.n	800622c <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8006214:	6a3b      	ldr	r3, [r7, #32]
 8006216:	b2da      	uxtb	r2, r3
 8006218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800621a:	1c59      	adds	r1, r3, #1
 800621c:	6279      	str	r1, [r7, #36]	@ 0x24
 800621e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006222:	b2d2      	uxtb	r2, r2
 8006224:	701a      	strb	r2, [r3, #0]
 8006226:	6a3b      	ldr	r3, [r7, #32]
 8006228:	09db      	lsrs	r3, r3, #7
 800622a:	623b      	str	r3, [r7, #32]
 800622c:	6a3b      	ldr	r3, [r7, #32]
 800622e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006230:	d8f0      	bhi.n	8006214 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8006232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006234:	1c5a      	adds	r2, r3, #1
 8006236:	627a      	str	r2, [r7, #36]	@ 0x24
 8006238:	6a3a      	ldr	r2, [r7, #32]
 800623a:	b2d2      	uxtb	r2, r2
 800623c:	701a      	strb	r2, [r3, #0]
 800623e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006240:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	61fb      	str	r3, [r7, #28]
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	61bb      	str	r3, [r7, #24]
 800624a:	e00b      	b.n	8006264 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 800624c:	69bb      	ldr	r3, [r7, #24]
 800624e:	b2da      	uxtb	r2, r3
 8006250:	69fb      	ldr	r3, [r7, #28]
 8006252:	1c59      	adds	r1, r3, #1
 8006254:	61f9      	str	r1, [r7, #28]
 8006256:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800625a:	b2d2      	uxtb	r2, r2
 800625c:	701a      	strb	r2, [r3, #0]
 800625e:	69bb      	ldr	r3, [r7, #24]
 8006260:	09db      	lsrs	r3, r3, #7
 8006262:	61bb      	str	r3, [r7, #24]
 8006264:	69bb      	ldr	r3, [r7, #24]
 8006266:	2b7f      	cmp	r3, #127	@ 0x7f
 8006268:	d8f0      	bhi.n	800624c <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 800626a:	69fb      	ldr	r3, [r7, #28]
 800626c:	1c5a      	adds	r2, r3, #1
 800626e:	61fa      	str	r2, [r7, #28]
 8006270:	69ba      	ldr	r2, [r7, #24]
 8006272:	b2d2      	uxtb	r2, r2
 8006274:	701a      	strb	r2, [r3, #0]
 8006276:	69fb      	ldr	r3, [r7, #28]
 8006278:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 800627a:	2207      	movs	r2, #7
 800627c:	68f9      	ldr	r1, [r7, #12]
 800627e:	6938      	ldr	r0, [r7, #16]
 8006280:	f7fe fcf8 	bl	8004c74 <_SendPacket>
  RECORD_END();
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	f383 8811 	msr	BASEPRI, r3
}
 800628a:	bf00      	nop
 800628c:	3728      	adds	r7, #40	@ 0x28
 800628e:	46bd      	mov	sp, r7
 8006290:	bd80      	pop	{r7, pc}
 8006292:	bf00      	nop
 8006294:	20014404 	.word	0x20014404
 8006298:	200143d4 	.word	0x200143d4

0800629c <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 800629c:	b480      	push	{r7}
 800629e:	b083      	sub	sp, #12
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 80062a4:	4b04      	ldr	r3, [pc, #16]	@ (80062b8 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 80062a6:	691b      	ldr	r3, [r3, #16]
 80062a8:	687a      	ldr	r2, [r7, #4]
 80062aa:	1ad3      	subs	r3, r2, r3
}
 80062ac:	4618      	mov	r0, r3
 80062ae:	370c      	adds	r7, #12
 80062b0:	46bd      	mov	sp, r7
 80062b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b6:	4770      	bx	lr
 80062b8:	200143d4 	.word	0x200143d4

080062bc <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80062bc:	b580      	push	{r7, lr}
 80062be:	b08c      	sub	sp, #48	@ 0x30
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	4603      	mov	r3, r0
 80062c4:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80062c6:	4b3b      	ldr	r3, [pc, #236]	@ (80063b4 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d06d      	beq.n	80063aa <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 80062ce:	4b39      	ldr	r3, [pc, #228]	@ (80063b4 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 80062d4:	2300      	movs	r3, #0
 80062d6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80062d8:	e008      	b.n	80062ec <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80062da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062dc:	691b      	ldr	r3, [r3, #16]
 80062de:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 80062e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d007      	beq.n	80062f6 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80062e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062e8:	3301      	adds	r3, #1
 80062ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 80062ec:	79fb      	ldrb	r3, [r7, #7]
 80062ee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80062f0:	429a      	cmp	r2, r3
 80062f2:	d3f2      	bcc.n	80062da <SEGGER_SYSVIEW_SendModule+0x1e>
 80062f4:	e000      	b.n	80062f8 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80062f6:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80062f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d055      	beq.n	80063aa <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80062fe:	f3ef 8311 	mrs	r3, BASEPRI
 8006302:	f04f 0120 	mov.w	r1, #32
 8006306:	f381 8811 	msr	BASEPRI, r1
 800630a:	617b      	str	r3, [r7, #20]
 800630c:	482a      	ldr	r0, [pc, #168]	@ (80063b8 <SEGGER_SYSVIEW_SendModule+0xfc>)
 800630e:	f7fe fbc2 	bl	8004a96 <_PreparePacket>
 8006312:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006314:	693b      	ldr	r3, [r7, #16]
 8006316:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	627b      	str	r3, [r7, #36]	@ 0x24
 800631c:	79fb      	ldrb	r3, [r7, #7]
 800631e:	623b      	str	r3, [r7, #32]
 8006320:	e00b      	b.n	800633a <SEGGER_SYSVIEW_SendModule+0x7e>
 8006322:	6a3b      	ldr	r3, [r7, #32]
 8006324:	b2da      	uxtb	r2, r3
 8006326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006328:	1c59      	adds	r1, r3, #1
 800632a:	6279      	str	r1, [r7, #36]	@ 0x24
 800632c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006330:	b2d2      	uxtb	r2, r2
 8006332:	701a      	strb	r2, [r3, #0]
 8006334:	6a3b      	ldr	r3, [r7, #32]
 8006336:	09db      	lsrs	r3, r3, #7
 8006338:	623b      	str	r3, [r7, #32]
 800633a:	6a3b      	ldr	r3, [r7, #32]
 800633c:	2b7f      	cmp	r3, #127	@ 0x7f
 800633e:	d8f0      	bhi.n	8006322 <SEGGER_SYSVIEW_SendModule+0x66>
 8006340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006342:	1c5a      	adds	r2, r3, #1
 8006344:	627a      	str	r2, [r7, #36]	@ 0x24
 8006346:	6a3a      	ldr	r2, [r7, #32]
 8006348:	b2d2      	uxtb	r2, r2
 800634a:	701a      	strb	r2, [r3, #0]
 800634c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800634e:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	61fb      	str	r3, [r7, #28]
 8006354:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006356:	689b      	ldr	r3, [r3, #8]
 8006358:	61bb      	str	r3, [r7, #24]
 800635a:	e00b      	b.n	8006374 <SEGGER_SYSVIEW_SendModule+0xb8>
 800635c:	69bb      	ldr	r3, [r7, #24]
 800635e:	b2da      	uxtb	r2, r3
 8006360:	69fb      	ldr	r3, [r7, #28]
 8006362:	1c59      	adds	r1, r3, #1
 8006364:	61f9      	str	r1, [r7, #28]
 8006366:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800636a:	b2d2      	uxtb	r2, r2
 800636c:	701a      	strb	r2, [r3, #0]
 800636e:	69bb      	ldr	r3, [r7, #24]
 8006370:	09db      	lsrs	r3, r3, #7
 8006372:	61bb      	str	r3, [r7, #24]
 8006374:	69bb      	ldr	r3, [r7, #24]
 8006376:	2b7f      	cmp	r3, #127	@ 0x7f
 8006378:	d8f0      	bhi.n	800635c <SEGGER_SYSVIEW_SendModule+0xa0>
 800637a:	69fb      	ldr	r3, [r7, #28]
 800637c:	1c5a      	adds	r2, r3, #1
 800637e:	61fa      	str	r2, [r7, #28]
 8006380:	69ba      	ldr	r2, [r7, #24]
 8006382:	b2d2      	uxtb	r2, r2
 8006384:	701a      	strb	r2, [r3, #0]
 8006386:	69fb      	ldr	r3, [r7, #28]
 8006388:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800638a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	2280      	movs	r2, #128	@ 0x80
 8006390:	4619      	mov	r1, r3
 8006392:	68f8      	ldr	r0, [r7, #12]
 8006394:	f7fe fb32 	bl	80049fc <_EncodeStr>
 8006398:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800639a:	2216      	movs	r2, #22
 800639c:	68f9      	ldr	r1, [r7, #12]
 800639e:	6938      	ldr	r0, [r7, #16]
 80063a0:	f7fe fc68 	bl	8004c74 <_SendPacket>
      RECORD_END();
 80063a4:	697b      	ldr	r3, [r7, #20]
 80063a6:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 80063aa:	bf00      	nop
 80063ac:	3730      	adds	r7, #48	@ 0x30
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd80      	pop	{r7, pc}
 80063b2:	bf00      	nop
 80063b4:	200143fc 	.word	0x200143fc
 80063b8:	20014404 	.word	0x20014404

080063bc <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80063bc:	b580      	push	{r7, lr}
 80063be:	b082      	sub	sp, #8
 80063c0:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80063c2:	4b0c      	ldr	r3, [pc, #48]	@ (80063f4 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d00f      	beq.n	80063ea <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80063ca:	4b0a      	ldr	r3, [pc, #40]	@ (80063f4 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	68db      	ldr	r3, [r3, #12]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d002      	beq.n	80063de <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	68db      	ldr	r3, [r3, #12]
 80063dc:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	691b      	ldr	r3, [r3, #16]
 80063e2:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d1f2      	bne.n	80063d0 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80063ea:	bf00      	nop
 80063ec:	3708      	adds	r7, #8
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bd80      	pop	{r7, pc}
 80063f2:	bf00      	nop
 80063f4:	200143fc 	.word	0x200143fc

080063f8 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b086      	sub	sp, #24
 80063fc:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80063fe:	f3ef 8311 	mrs	r3, BASEPRI
 8006402:	f04f 0120 	mov.w	r1, #32
 8006406:	f381 8811 	msr	BASEPRI, r1
 800640a:	60fb      	str	r3, [r7, #12]
 800640c:	4817      	ldr	r0, [pc, #92]	@ (800646c <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800640e:	f7fe fb42 	bl	8004a96 <_PreparePacket>
 8006412:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	617b      	str	r3, [r7, #20]
 800641c:	4b14      	ldr	r3, [pc, #80]	@ (8006470 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800641e:	781b      	ldrb	r3, [r3, #0]
 8006420:	613b      	str	r3, [r7, #16]
 8006422:	e00b      	b.n	800643c <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	b2da      	uxtb	r2, r3
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	1c59      	adds	r1, r3, #1
 800642c:	6179      	str	r1, [r7, #20]
 800642e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006432:	b2d2      	uxtb	r2, r2
 8006434:	701a      	strb	r2, [r3, #0]
 8006436:	693b      	ldr	r3, [r7, #16]
 8006438:	09db      	lsrs	r3, r3, #7
 800643a:	613b      	str	r3, [r7, #16]
 800643c:	693b      	ldr	r3, [r7, #16]
 800643e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006440:	d8f0      	bhi.n	8006424 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	1c5a      	adds	r2, r3, #1
 8006446:	617a      	str	r2, [r7, #20]
 8006448:	693a      	ldr	r2, [r7, #16]
 800644a:	b2d2      	uxtb	r2, r2
 800644c:	701a      	strb	r2, [r3, #0]
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8006452:	221b      	movs	r2, #27
 8006454:	6879      	ldr	r1, [r7, #4]
 8006456:	68b8      	ldr	r0, [r7, #8]
 8006458:	f7fe fc0c 	bl	8004c74 <_SendPacket>
  RECORD_END();
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	f383 8811 	msr	BASEPRI, r3
}
 8006462:	bf00      	nop
 8006464:	3718      	adds	r7, #24
 8006466:	46bd      	mov	sp, r7
 8006468:	bd80      	pop	{r7, pc}
 800646a:	bf00      	nop
 800646c:	20014404 	.word	0x20014404
 8006470:	20014400 	.word	0x20014400

08006474 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8006474:	b40f      	push	{r0, r1, r2, r3}
 8006476:	b580      	push	{r7, lr}
 8006478:	b082      	sub	sp, #8
 800647a:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 800647c:	f107 0314 	add.w	r3, r7, #20
 8006480:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8006482:	1d3b      	adds	r3, r7, #4
 8006484:	461a      	mov	r2, r3
 8006486:	2100      	movs	r1, #0
 8006488:	6938      	ldr	r0, [r7, #16]
 800648a:	f7fe fe7b 	bl	8005184 <_VPrintTarget>
  va_end(ParamList);
}
 800648e:	bf00      	nop
 8006490:	3708      	adds	r7, #8
 8006492:	46bd      	mov	sp, r7
 8006494:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006498:	b004      	add	sp, #16
 800649a:	4770      	bx	lr

0800649c <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 800649c:	b580      	push	{r7, lr}
 800649e:	b08a      	sub	sp, #40	@ 0x28
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80064a4:	f3ef 8311 	mrs	r3, BASEPRI
 80064a8:	f04f 0120 	mov.w	r1, #32
 80064ac:	f381 8811 	msr	BASEPRI, r1
 80064b0:	617b      	str	r3, [r7, #20]
 80064b2:	4827      	ldr	r0, [pc, #156]	@ (8006550 <SEGGER_SYSVIEW_Warn+0xb4>)
 80064b4:	f7fe faef 	bl	8004a96 <_PreparePacket>
 80064b8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80064ba:	2280      	movs	r2, #128	@ 0x80
 80064bc:	6879      	ldr	r1, [r7, #4]
 80064be:	6938      	ldr	r0, [r7, #16]
 80064c0:	f7fe fa9c 	bl	80049fc <_EncodeStr>
 80064c4:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80064ca:	2301      	movs	r3, #1
 80064cc:	623b      	str	r3, [r7, #32]
 80064ce:	e00b      	b.n	80064e8 <SEGGER_SYSVIEW_Warn+0x4c>
 80064d0:	6a3b      	ldr	r3, [r7, #32]
 80064d2:	b2da      	uxtb	r2, r3
 80064d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064d6:	1c59      	adds	r1, r3, #1
 80064d8:	6279      	str	r1, [r7, #36]	@ 0x24
 80064da:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80064de:	b2d2      	uxtb	r2, r2
 80064e0:	701a      	strb	r2, [r3, #0]
 80064e2:	6a3b      	ldr	r3, [r7, #32]
 80064e4:	09db      	lsrs	r3, r3, #7
 80064e6:	623b      	str	r3, [r7, #32]
 80064e8:	6a3b      	ldr	r3, [r7, #32]
 80064ea:	2b7f      	cmp	r3, #127	@ 0x7f
 80064ec:	d8f0      	bhi.n	80064d0 <SEGGER_SYSVIEW_Warn+0x34>
 80064ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064f0:	1c5a      	adds	r2, r3, #1
 80064f2:	627a      	str	r2, [r7, #36]	@ 0x24
 80064f4:	6a3a      	ldr	r2, [r7, #32]
 80064f6:	b2d2      	uxtb	r2, r2
 80064f8:	701a      	strb	r2, [r3, #0]
 80064fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064fc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	61fb      	str	r3, [r7, #28]
 8006502:	2300      	movs	r3, #0
 8006504:	61bb      	str	r3, [r7, #24]
 8006506:	e00b      	b.n	8006520 <SEGGER_SYSVIEW_Warn+0x84>
 8006508:	69bb      	ldr	r3, [r7, #24]
 800650a:	b2da      	uxtb	r2, r3
 800650c:	69fb      	ldr	r3, [r7, #28]
 800650e:	1c59      	adds	r1, r3, #1
 8006510:	61f9      	str	r1, [r7, #28]
 8006512:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006516:	b2d2      	uxtb	r2, r2
 8006518:	701a      	strb	r2, [r3, #0]
 800651a:	69bb      	ldr	r3, [r7, #24]
 800651c:	09db      	lsrs	r3, r3, #7
 800651e:	61bb      	str	r3, [r7, #24]
 8006520:	69bb      	ldr	r3, [r7, #24]
 8006522:	2b7f      	cmp	r3, #127	@ 0x7f
 8006524:	d8f0      	bhi.n	8006508 <SEGGER_SYSVIEW_Warn+0x6c>
 8006526:	69fb      	ldr	r3, [r7, #28]
 8006528:	1c5a      	adds	r2, r3, #1
 800652a:	61fa      	str	r2, [r7, #28]
 800652c:	69ba      	ldr	r2, [r7, #24]
 800652e:	b2d2      	uxtb	r2, r2
 8006530:	701a      	strb	r2, [r3, #0]
 8006532:	69fb      	ldr	r3, [r7, #28]
 8006534:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006536:	221a      	movs	r2, #26
 8006538:	68f9      	ldr	r1, [r7, #12]
 800653a:	6938      	ldr	r0, [r7, #16]
 800653c:	f7fe fb9a 	bl	8004c74 <_SendPacket>
  RECORD_END();
 8006540:	697b      	ldr	r3, [r7, #20]
 8006542:	f383 8811 	msr	BASEPRI, r3
}
 8006546:	bf00      	nop
 8006548:	3728      	adds	r7, #40	@ 0x28
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}
 800654e:	bf00      	nop
 8006550:	20014404 	.word	0x20014404

08006554 <sniprintf>:
 8006554:	b40c      	push	{r2, r3}
 8006556:	b530      	push	{r4, r5, lr}
 8006558:	4b18      	ldr	r3, [pc, #96]	@ (80065bc <sniprintf+0x68>)
 800655a:	1e0c      	subs	r4, r1, #0
 800655c:	681d      	ldr	r5, [r3, #0]
 800655e:	b09d      	sub	sp, #116	@ 0x74
 8006560:	da08      	bge.n	8006574 <sniprintf+0x20>
 8006562:	238b      	movs	r3, #139	@ 0x8b
 8006564:	602b      	str	r3, [r5, #0]
 8006566:	f04f 30ff 	mov.w	r0, #4294967295
 800656a:	b01d      	add	sp, #116	@ 0x74
 800656c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006570:	b002      	add	sp, #8
 8006572:	4770      	bx	lr
 8006574:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006578:	f8ad 3014 	strh.w	r3, [sp, #20]
 800657c:	f04f 0300 	mov.w	r3, #0
 8006580:	931b      	str	r3, [sp, #108]	@ 0x6c
 8006582:	bf14      	ite	ne
 8006584:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006588:	4623      	moveq	r3, r4
 800658a:	9304      	str	r3, [sp, #16]
 800658c:	9307      	str	r3, [sp, #28]
 800658e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006592:	9002      	str	r0, [sp, #8]
 8006594:	9006      	str	r0, [sp, #24]
 8006596:	f8ad 3016 	strh.w	r3, [sp, #22]
 800659a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800659c:	ab21      	add	r3, sp, #132	@ 0x84
 800659e:	a902      	add	r1, sp, #8
 80065a0:	4628      	mov	r0, r5
 80065a2:	9301      	str	r3, [sp, #4]
 80065a4:	f000 f9ac 	bl	8006900 <_svfiprintf_r>
 80065a8:	1c43      	adds	r3, r0, #1
 80065aa:	bfbc      	itt	lt
 80065ac:	238b      	movlt	r3, #139	@ 0x8b
 80065ae:	602b      	strlt	r3, [r5, #0]
 80065b0:	2c00      	cmp	r4, #0
 80065b2:	d0da      	beq.n	800656a <sniprintf+0x16>
 80065b4:	9b02      	ldr	r3, [sp, #8]
 80065b6:	2200      	movs	r2, #0
 80065b8:	701a      	strb	r2, [r3, #0]
 80065ba:	e7d6      	b.n	800656a <sniprintf+0x16>
 80065bc:	20000010 	.word	0x20000010

080065c0 <memcmp>:
 80065c0:	b510      	push	{r4, lr}
 80065c2:	3901      	subs	r1, #1
 80065c4:	4402      	add	r2, r0
 80065c6:	4290      	cmp	r0, r2
 80065c8:	d101      	bne.n	80065ce <memcmp+0xe>
 80065ca:	2000      	movs	r0, #0
 80065cc:	e005      	b.n	80065da <memcmp+0x1a>
 80065ce:	7803      	ldrb	r3, [r0, #0]
 80065d0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80065d4:	42a3      	cmp	r3, r4
 80065d6:	d001      	beq.n	80065dc <memcmp+0x1c>
 80065d8:	1b18      	subs	r0, r3, r4
 80065da:	bd10      	pop	{r4, pc}
 80065dc:	3001      	adds	r0, #1
 80065de:	e7f2      	b.n	80065c6 <memcmp+0x6>

080065e0 <memset>:
 80065e0:	4402      	add	r2, r0
 80065e2:	4603      	mov	r3, r0
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d100      	bne.n	80065ea <memset+0xa>
 80065e8:	4770      	bx	lr
 80065ea:	f803 1b01 	strb.w	r1, [r3], #1
 80065ee:	e7f9      	b.n	80065e4 <memset+0x4>

080065f0 <__libc_init_array>:
 80065f0:	b570      	push	{r4, r5, r6, lr}
 80065f2:	4d0d      	ldr	r5, [pc, #52]	@ (8006628 <__libc_init_array+0x38>)
 80065f4:	4c0d      	ldr	r4, [pc, #52]	@ (800662c <__libc_init_array+0x3c>)
 80065f6:	1b64      	subs	r4, r4, r5
 80065f8:	10a4      	asrs	r4, r4, #2
 80065fa:	2600      	movs	r6, #0
 80065fc:	42a6      	cmp	r6, r4
 80065fe:	d109      	bne.n	8006614 <__libc_init_array+0x24>
 8006600:	4d0b      	ldr	r5, [pc, #44]	@ (8006630 <__libc_init_array+0x40>)
 8006602:	4c0c      	ldr	r4, [pc, #48]	@ (8006634 <__libc_init_array+0x44>)
 8006604:	f000 fc72 	bl	8006eec <_init>
 8006608:	1b64      	subs	r4, r4, r5
 800660a:	10a4      	asrs	r4, r4, #2
 800660c:	2600      	movs	r6, #0
 800660e:	42a6      	cmp	r6, r4
 8006610:	d105      	bne.n	800661e <__libc_init_array+0x2e>
 8006612:	bd70      	pop	{r4, r5, r6, pc}
 8006614:	f855 3b04 	ldr.w	r3, [r5], #4
 8006618:	4798      	blx	r3
 800661a:	3601      	adds	r6, #1
 800661c:	e7ee      	b.n	80065fc <__libc_init_array+0xc>
 800661e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006622:	4798      	blx	r3
 8006624:	3601      	adds	r6, #1
 8006626:	e7f2      	b.n	800660e <__libc_init_array+0x1e>
 8006628:	08007098 	.word	0x08007098
 800662c:	08007098 	.word	0x08007098
 8006630:	08007098 	.word	0x08007098
 8006634:	0800709c 	.word	0x0800709c

08006638 <__retarget_lock_acquire_recursive>:
 8006638:	4770      	bx	lr

0800663a <__retarget_lock_release_recursive>:
 800663a:	4770      	bx	lr

0800663c <memcpy>:
 800663c:	440a      	add	r2, r1
 800663e:	4291      	cmp	r1, r2
 8006640:	f100 33ff 	add.w	r3, r0, #4294967295
 8006644:	d100      	bne.n	8006648 <memcpy+0xc>
 8006646:	4770      	bx	lr
 8006648:	b510      	push	{r4, lr}
 800664a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800664e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006652:	4291      	cmp	r1, r2
 8006654:	d1f9      	bne.n	800664a <memcpy+0xe>
 8006656:	bd10      	pop	{r4, pc}

08006658 <_free_r>:
 8006658:	b538      	push	{r3, r4, r5, lr}
 800665a:	4605      	mov	r5, r0
 800665c:	2900      	cmp	r1, #0
 800665e:	d041      	beq.n	80066e4 <_free_r+0x8c>
 8006660:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006664:	1f0c      	subs	r4, r1, #4
 8006666:	2b00      	cmp	r3, #0
 8006668:	bfb8      	it	lt
 800666a:	18e4      	addlt	r4, r4, r3
 800666c:	f000 f8e0 	bl	8006830 <__malloc_lock>
 8006670:	4a1d      	ldr	r2, [pc, #116]	@ (80066e8 <_free_r+0x90>)
 8006672:	6813      	ldr	r3, [r2, #0]
 8006674:	b933      	cbnz	r3, 8006684 <_free_r+0x2c>
 8006676:	6063      	str	r3, [r4, #4]
 8006678:	6014      	str	r4, [r2, #0]
 800667a:	4628      	mov	r0, r5
 800667c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006680:	f000 b8dc 	b.w	800683c <__malloc_unlock>
 8006684:	42a3      	cmp	r3, r4
 8006686:	d908      	bls.n	800669a <_free_r+0x42>
 8006688:	6820      	ldr	r0, [r4, #0]
 800668a:	1821      	adds	r1, r4, r0
 800668c:	428b      	cmp	r3, r1
 800668e:	bf01      	itttt	eq
 8006690:	6819      	ldreq	r1, [r3, #0]
 8006692:	685b      	ldreq	r3, [r3, #4]
 8006694:	1809      	addeq	r1, r1, r0
 8006696:	6021      	streq	r1, [r4, #0]
 8006698:	e7ed      	b.n	8006676 <_free_r+0x1e>
 800669a:	461a      	mov	r2, r3
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	b10b      	cbz	r3, 80066a4 <_free_r+0x4c>
 80066a0:	42a3      	cmp	r3, r4
 80066a2:	d9fa      	bls.n	800669a <_free_r+0x42>
 80066a4:	6811      	ldr	r1, [r2, #0]
 80066a6:	1850      	adds	r0, r2, r1
 80066a8:	42a0      	cmp	r0, r4
 80066aa:	d10b      	bne.n	80066c4 <_free_r+0x6c>
 80066ac:	6820      	ldr	r0, [r4, #0]
 80066ae:	4401      	add	r1, r0
 80066b0:	1850      	adds	r0, r2, r1
 80066b2:	4283      	cmp	r3, r0
 80066b4:	6011      	str	r1, [r2, #0]
 80066b6:	d1e0      	bne.n	800667a <_free_r+0x22>
 80066b8:	6818      	ldr	r0, [r3, #0]
 80066ba:	685b      	ldr	r3, [r3, #4]
 80066bc:	6053      	str	r3, [r2, #4]
 80066be:	4408      	add	r0, r1
 80066c0:	6010      	str	r0, [r2, #0]
 80066c2:	e7da      	b.n	800667a <_free_r+0x22>
 80066c4:	d902      	bls.n	80066cc <_free_r+0x74>
 80066c6:	230c      	movs	r3, #12
 80066c8:	602b      	str	r3, [r5, #0]
 80066ca:	e7d6      	b.n	800667a <_free_r+0x22>
 80066cc:	6820      	ldr	r0, [r4, #0]
 80066ce:	1821      	adds	r1, r4, r0
 80066d0:	428b      	cmp	r3, r1
 80066d2:	bf04      	itt	eq
 80066d4:	6819      	ldreq	r1, [r3, #0]
 80066d6:	685b      	ldreq	r3, [r3, #4]
 80066d8:	6063      	str	r3, [r4, #4]
 80066da:	bf04      	itt	eq
 80066dc:	1809      	addeq	r1, r1, r0
 80066de:	6021      	streq	r1, [r4, #0]
 80066e0:	6054      	str	r4, [r2, #4]
 80066e2:	e7ca      	b.n	800667a <_free_r+0x22>
 80066e4:	bd38      	pop	{r3, r4, r5, pc}
 80066e6:	bf00      	nop
 80066e8:	2001462c 	.word	0x2001462c

080066ec <sbrk_aligned>:
 80066ec:	b570      	push	{r4, r5, r6, lr}
 80066ee:	4e0f      	ldr	r6, [pc, #60]	@ (800672c <sbrk_aligned+0x40>)
 80066f0:	460c      	mov	r4, r1
 80066f2:	6831      	ldr	r1, [r6, #0]
 80066f4:	4605      	mov	r5, r0
 80066f6:	b911      	cbnz	r1, 80066fe <sbrk_aligned+0x12>
 80066f8:	f000 fba4 	bl	8006e44 <_sbrk_r>
 80066fc:	6030      	str	r0, [r6, #0]
 80066fe:	4621      	mov	r1, r4
 8006700:	4628      	mov	r0, r5
 8006702:	f000 fb9f 	bl	8006e44 <_sbrk_r>
 8006706:	1c43      	adds	r3, r0, #1
 8006708:	d103      	bne.n	8006712 <sbrk_aligned+0x26>
 800670a:	f04f 34ff 	mov.w	r4, #4294967295
 800670e:	4620      	mov	r0, r4
 8006710:	bd70      	pop	{r4, r5, r6, pc}
 8006712:	1cc4      	adds	r4, r0, #3
 8006714:	f024 0403 	bic.w	r4, r4, #3
 8006718:	42a0      	cmp	r0, r4
 800671a:	d0f8      	beq.n	800670e <sbrk_aligned+0x22>
 800671c:	1a21      	subs	r1, r4, r0
 800671e:	4628      	mov	r0, r5
 8006720:	f000 fb90 	bl	8006e44 <_sbrk_r>
 8006724:	3001      	adds	r0, #1
 8006726:	d1f2      	bne.n	800670e <sbrk_aligned+0x22>
 8006728:	e7ef      	b.n	800670a <sbrk_aligned+0x1e>
 800672a:	bf00      	nop
 800672c:	20014628 	.word	0x20014628

08006730 <_malloc_r>:
 8006730:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006734:	1ccd      	adds	r5, r1, #3
 8006736:	f025 0503 	bic.w	r5, r5, #3
 800673a:	3508      	adds	r5, #8
 800673c:	2d0c      	cmp	r5, #12
 800673e:	bf38      	it	cc
 8006740:	250c      	movcc	r5, #12
 8006742:	2d00      	cmp	r5, #0
 8006744:	4606      	mov	r6, r0
 8006746:	db01      	blt.n	800674c <_malloc_r+0x1c>
 8006748:	42a9      	cmp	r1, r5
 800674a:	d904      	bls.n	8006756 <_malloc_r+0x26>
 800674c:	230c      	movs	r3, #12
 800674e:	6033      	str	r3, [r6, #0]
 8006750:	2000      	movs	r0, #0
 8006752:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006756:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800682c <_malloc_r+0xfc>
 800675a:	f000 f869 	bl	8006830 <__malloc_lock>
 800675e:	f8d8 3000 	ldr.w	r3, [r8]
 8006762:	461c      	mov	r4, r3
 8006764:	bb44      	cbnz	r4, 80067b8 <_malloc_r+0x88>
 8006766:	4629      	mov	r1, r5
 8006768:	4630      	mov	r0, r6
 800676a:	f7ff ffbf 	bl	80066ec <sbrk_aligned>
 800676e:	1c43      	adds	r3, r0, #1
 8006770:	4604      	mov	r4, r0
 8006772:	d158      	bne.n	8006826 <_malloc_r+0xf6>
 8006774:	f8d8 4000 	ldr.w	r4, [r8]
 8006778:	4627      	mov	r7, r4
 800677a:	2f00      	cmp	r7, #0
 800677c:	d143      	bne.n	8006806 <_malloc_r+0xd6>
 800677e:	2c00      	cmp	r4, #0
 8006780:	d04b      	beq.n	800681a <_malloc_r+0xea>
 8006782:	6823      	ldr	r3, [r4, #0]
 8006784:	4639      	mov	r1, r7
 8006786:	4630      	mov	r0, r6
 8006788:	eb04 0903 	add.w	r9, r4, r3
 800678c:	f000 fb5a 	bl	8006e44 <_sbrk_r>
 8006790:	4581      	cmp	r9, r0
 8006792:	d142      	bne.n	800681a <_malloc_r+0xea>
 8006794:	6821      	ldr	r1, [r4, #0]
 8006796:	1a6d      	subs	r5, r5, r1
 8006798:	4629      	mov	r1, r5
 800679a:	4630      	mov	r0, r6
 800679c:	f7ff ffa6 	bl	80066ec <sbrk_aligned>
 80067a0:	3001      	adds	r0, #1
 80067a2:	d03a      	beq.n	800681a <_malloc_r+0xea>
 80067a4:	6823      	ldr	r3, [r4, #0]
 80067a6:	442b      	add	r3, r5
 80067a8:	6023      	str	r3, [r4, #0]
 80067aa:	f8d8 3000 	ldr.w	r3, [r8]
 80067ae:	685a      	ldr	r2, [r3, #4]
 80067b0:	bb62      	cbnz	r2, 800680c <_malloc_r+0xdc>
 80067b2:	f8c8 7000 	str.w	r7, [r8]
 80067b6:	e00f      	b.n	80067d8 <_malloc_r+0xa8>
 80067b8:	6822      	ldr	r2, [r4, #0]
 80067ba:	1b52      	subs	r2, r2, r5
 80067bc:	d420      	bmi.n	8006800 <_malloc_r+0xd0>
 80067be:	2a0b      	cmp	r2, #11
 80067c0:	d917      	bls.n	80067f2 <_malloc_r+0xc2>
 80067c2:	1961      	adds	r1, r4, r5
 80067c4:	42a3      	cmp	r3, r4
 80067c6:	6025      	str	r5, [r4, #0]
 80067c8:	bf18      	it	ne
 80067ca:	6059      	strne	r1, [r3, #4]
 80067cc:	6863      	ldr	r3, [r4, #4]
 80067ce:	bf08      	it	eq
 80067d0:	f8c8 1000 	streq.w	r1, [r8]
 80067d4:	5162      	str	r2, [r4, r5]
 80067d6:	604b      	str	r3, [r1, #4]
 80067d8:	4630      	mov	r0, r6
 80067da:	f000 f82f 	bl	800683c <__malloc_unlock>
 80067de:	f104 000b 	add.w	r0, r4, #11
 80067e2:	1d23      	adds	r3, r4, #4
 80067e4:	f020 0007 	bic.w	r0, r0, #7
 80067e8:	1ac2      	subs	r2, r0, r3
 80067ea:	bf1c      	itt	ne
 80067ec:	1a1b      	subne	r3, r3, r0
 80067ee:	50a3      	strne	r3, [r4, r2]
 80067f0:	e7af      	b.n	8006752 <_malloc_r+0x22>
 80067f2:	6862      	ldr	r2, [r4, #4]
 80067f4:	42a3      	cmp	r3, r4
 80067f6:	bf0c      	ite	eq
 80067f8:	f8c8 2000 	streq.w	r2, [r8]
 80067fc:	605a      	strne	r2, [r3, #4]
 80067fe:	e7eb      	b.n	80067d8 <_malloc_r+0xa8>
 8006800:	4623      	mov	r3, r4
 8006802:	6864      	ldr	r4, [r4, #4]
 8006804:	e7ae      	b.n	8006764 <_malloc_r+0x34>
 8006806:	463c      	mov	r4, r7
 8006808:	687f      	ldr	r7, [r7, #4]
 800680a:	e7b6      	b.n	800677a <_malloc_r+0x4a>
 800680c:	461a      	mov	r2, r3
 800680e:	685b      	ldr	r3, [r3, #4]
 8006810:	42a3      	cmp	r3, r4
 8006812:	d1fb      	bne.n	800680c <_malloc_r+0xdc>
 8006814:	2300      	movs	r3, #0
 8006816:	6053      	str	r3, [r2, #4]
 8006818:	e7de      	b.n	80067d8 <_malloc_r+0xa8>
 800681a:	230c      	movs	r3, #12
 800681c:	6033      	str	r3, [r6, #0]
 800681e:	4630      	mov	r0, r6
 8006820:	f000 f80c 	bl	800683c <__malloc_unlock>
 8006824:	e794      	b.n	8006750 <_malloc_r+0x20>
 8006826:	6005      	str	r5, [r0, #0]
 8006828:	e7d6      	b.n	80067d8 <_malloc_r+0xa8>
 800682a:	bf00      	nop
 800682c:	2001462c 	.word	0x2001462c

08006830 <__malloc_lock>:
 8006830:	4801      	ldr	r0, [pc, #4]	@ (8006838 <__malloc_lock+0x8>)
 8006832:	f7ff bf01 	b.w	8006638 <__retarget_lock_acquire_recursive>
 8006836:	bf00      	nop
 8006838:	20014624 	.word	0x20014624

0800683c <__malloc_unlock>:
 800683c:	4801      	ldr	r0, [pc, #4]	@ (8006844 <__malloc_unlock+0x8>)
 800683e:	f7ff befc 	b.w	800663a <__retarget_lock_release_recursive>
 8006842:	bf00      	nop
 8006844:	20014624 	.word	0x20014624

08006848 <__ssputs_r>:
 8006848:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800684c:	688e      	ldr	r6, [r1, #8]
 800684e:	461f      	mov	r7, r3
 8006850:	42be      	cmp	r6, r7
 8006852:	680b      	ldr	r3, [r1, #0]
 8006854:	4682      	mov	sl, r0
 8006856:	460c      	mov	r4, r1
 8006858:	4690      	mov	r8, r2
 800685a:	d82d      	bhi.n	80068b8 <__ssputs_r+0x70>
 800685c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006860:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006864:	d026      	beq.n	80068b4 <__ssputs_r+0x6c>
 8006866:	6965      	ldr	r5, [r4, #20]
 8006868:	6909      	ldr	r1, [r1, #16]
 800686a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800686e:	eba3 0901 	sub.w	r9, r3, r1
 8006872:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006876:	1c7b      	adds	r3, r7, #1
 8006878:	444b      	add	r3, r9
 800687a:	106d      	asrs	r5, r5, #1
 800687c:	429d      	cmp	r5, r3
 800687e:	bf38      	it	cc
 8006880:	461d      	movcc	r5, r3
 8006882:	0553      	lsls	r3, r2, #21
 8006884:	d527      	bpl.n	80068d6 <__ssputs_r+0x8e>
 8006886:	4629      	mov	r1, r5
 8006888:	f7ff ff52 	bl	8006730 <_malloc_r>
 800688c:	4606      	mov	r6, r0
 800688e:	b360      	cbz	r0, 80068ea <__ssputs_r+0xa2>
 8006890:	6921      	ldr	r1, [r4, #16]
 8006892:	464a      	mov	r2, r9
 8006894:	f7ff fed2 	bl	800663c <memcpy>
 8006898:	89a3      	ldrh	r3, [r4, #12]
 800689a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800689e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068a2:	81a3      	strh	r3, [r4, #12]
 80068a4:	6126      	str	r6, [r4, #16]
 80068a6:	6165      	str	r5, [r4, #20]
 80068a8:	444e      	add	r6, r9
 80068aa:	eba5 0509 	sub.w	r5, r5, r9
 80068ae:	6026      	str	r6, [r4, #0]
 80068b0:	60a5      	str	r5, [r4, #8]
 80068b2:	463e      	mov	r6, r7
 80068b4:	42be      	cmp	r6, r7
 80068b6:	d900      	bls.n	80068ba <__ssputs_r+0x72>
 80068b8:	463e      	mov	r6, r7
 80068ba:	6820      	ldr	r0, [r4, #0]
 80068bc:	4632      	mov	r2, r6
 80068be:	4641      	mov	r1, r8
 80068c0:	f000 faa6 	bl	8006e10 <memmove>
 80068c4:	68a3      	ldr	r3, [r4, #8]
 80068c6:	1b9b      	subs	r3, r3, r6
 80068c8:	60a3      	str	r3, [r4, #8]
 80068ca:	6823      	ldr	r3, [r4, #0]
 80068cc:	4433      	add	r3, r6
 80068ce:	6023      	str	r3, [r4, #0]
 80068d0:	2000      	movs	r0, #0
 80068d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068d6:	462a      	mov	r2, r5
 80068d8:	f000 fac4 	bl	8006e64 <_realloc_r>
 80068dc:	4606      	mov	r6, r0
 80068de:	2800      	cmp	r0, #0
 80068e0:	d1e0      	bne.n	80068a4 <__ssputs_r+0x5c>
 80068e2:	6921      	ldr	r1, [r4, #16]
 80068e4:	4650      	mov	r0, sl
 80068e6:	f7ff feb7 	bl	8006658 <_free_r>
 80068ea:	230c      	movs	r3, #12
 80068ec:	f8ca 3000 	str.w	r3, [sl]
 80068f0:	89a3      	ldrh	r3, [r4, #12]
 80068f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80068f6:	81a3      	strh	r3, [r4, #12]
 80068f8:	f04f 30ff 	mov.w	r0, #4294967295
 80068fc:	e7e9      	b.n	80068d2 <__ssputs_r+0x8a>
	...

08006900 <_svfiprintf_r>:
 8006900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006904:	4698      	mov	r8, r3
 8006906:	898b      	ldrh	r3, [r1, #12]
 8006908:	061b      	lsls	r3, r3, #24
 800690a:	b09d      	sub	sp, #116	@ 0x74
 800690c:	4607      	mov	r7, r0
 800690e:	460d      	mov	r5, r1
 8006910:	4614      	mov	r4, r2
 8006912:	d510      	bpl.n	8006936 <_svfiprintf_r+0x36>
 8006914:	690b      	ldr	r3, [r1, #16]
 8006916:	b973      	cbnz	r3, 8006936 <_svfiprintf_r+0x36>
 8006918:	2140      	movs	r1, #64	@ 0x40
 800691a:	f7ff ff09 	bl	8006730 <_malloc_r>
 800691e:	6028      	str	r0, [r5, #0]
 8006920:	6128      	str	r0, [r5, #16]
 8006922:	b930      	cbnz	r0, 8006932 <_svfiprintf_r+0x32>
 8006924:	230c      	movs	r3, #12
 8006926:	603b      	str	r3, [r7, #0]
 8006928:	f04f 30ff 	mov.w	r0, #4294967295
 800692c:	b01d      	add	sp, #116	@ 0x74
 800692e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006932:	2340      	movs	r3, #64	@ 0x40
 8006934:	616b      	str	r3, [r5, #20]
 8006936:	2300      	movs	r3, #0
 8006938:	9309      	str	r3, [sp, #36]	@ 0x24
 800693a:	2320      	movs	r3, #32
 800693c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006940:	f8cd 800c 	str.w	r8, [sp, #12]
 8006944:	2330      	movs	r3, #48	@ 0x30
 8006946:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006ae4 <_svfiprintf_r+0x1e4>
 800694a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800694e:	f04f 0901 	mov.w	r9, #1
 8006952:	4623      	mov	r3, r4
 8006954:	469a      	mov	sl, r3
 8006956:	f813 2b01 	ldrb.w	r2, [r3], #1
 800695a:	b10a      	cbz	r2, 8006960 <_svfiprintf_r+0x60>
 800695c:	2a25      	cmp	r2, #37	@ 0x25
 800695e:	d1f9      	bne.n	8006954 <_svfiprintf_r+0x54>
 8006960:	ebba 0b04 	subs.w	fp, sl, r4
 8006964:	d00b      	beq.n	800697e <_svfiprintf_r+0x7e>
 8006966:	465b      	mov	r3, fp
 8006968:	4622      	mov	r2, r4
 800696a:	4629      	mov	r1, r5
 800696c:	4638      	mov	r0, r7
 800696e:	f7ff ff6b 	bl	8006848 <__ssputs_r>
 8006972:	3001      	adds	r0, #1
 8006974:	f000 80a7 	beq.w	8006ac6 <_svfiprintf_r+0x1c6>
 8006978:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800697a:	445a      	add	r2, fp
 800697c:	9209      	str	r2, [sp, #36]	@ 0x24
 800697e:	f89a 3000 	ldrb.w	r3, [sl]
 8006982:	2b00      	cmp	r3, #0
 8006984:	f000 809f 	beq.w	8006ac6 <_svfiprintf_r+0x1c6>
 8006988:	2300      	movs	r3, #0
 800698a:	f04f 32ff 	mov.w	r2, #4294967295
 800698e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006992:	f10a 0a01 	add.w	sl, sl, #1
 8006996:	9304      	str	r3, [sp, #16]
 8006998:	9307      	str	r3, [sp, #28]
 800699a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800699e:	931a      	str	r3, [sp, #104]	@ 0x68
 80069a0:	4654      	mov	r4, sl
 80069a2:	2205      	movs	r2, #5
 80069a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069a8:	484e      	ldr	r0, [pc, #312]	@ (8006ae4 <_svfiprintf_r+0x1e4>)
 80069aa:	f7f9 fc61 	bl	8000270 <memchr>
 80069ae:	9a04      	ldr	r2, [sp, #16]
 80069b0:	b9d8      	cbnz	r0, 80069ea <_svfiprintf_r+0xea>
 80069b2:	06d0      	lsls	r0, r2, #27
 80069b4:	bf44      	itt	mi
 80069b6:	2320      	movmi	r3, #32
 80069b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80069bc:	0711      	lsls	r1, r2, #28
 80069be:	bf44      	itt	mi
 80069c0:	232b      	movmi	r3, #43	@ 0x2b
 80069c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80069c6:	f89a 3000 	ldrb.w	r3, [sl]
 80069ca:	2b2a      	cmp	r3, #42	@ 0x2a
 80069cc:	d015      	beq.n	80069fa <_svfiprintf_r+0xfa>
 80069ce:	9a07      	ldr	r2, [sp, #28]
 80069d0:	4654      	mov	r4, sl
 80069d2:	2000      	movs	r0, #0
 80069d4:	f04f 0c0a 	mov.w	ip, #10
 80069d8:	4621      	mov	r1, r4
 80069da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80069de:	3b30      	subs	r3, #48	@ 0x30
 80069e0:	2b09      	cmp	r3, #9
 80069e2:	d94b      	bls.n	8006a7c <_svfiprintf_r+0x17c>
 80069e4:	b1b0      	cbz	r0, 8006a14 <_svfiprintf_r+0x114>
 80069e6:	9207      	str	r2, [sp, #28]
 80069e8:	e014      	b.n	8006a14 <_svfiprintf_r+0x114>
 80069ea:	eba0 0308 	sub.w	r3, r0, r8
 80069ee:	fa09 f303 	lsl.w	r3, r9, r3
 80069f2:	4313      	orrs	r3, r2
 80069f4:	9304      	str	r3, [sp, #16]
 80069f6:	46a2      	mov	sl, r4
 80069f8:	e7d2      	b.n	80069a0 <_svfiprintf_r+0xa0>
 80069fa:	9b03      	ldr	r3, [sp, #12]
 80069fc:	1d19      	adds	r1, r3, #4
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	9103      	str	r1, [sp, #12]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	bfbb      	ittet	lt
 8006a06:	425b      	neglt	r3, r3
 8006a08:	f042 0202 	orrlt.w	r2, r2, #2
 8006a0c:	9307      	strge	r3, [sp, #28]
 8006a0e:	9307      	strlt	r3, [sp, #28]
 8006a10:	bfb8      	it	lt
 8006a12:	9204      	strlt	r2, [sp, #16]
 8006a14:	7823      	ldrb	r3, [r4, #0]
 8006a16:	2b2e      	cmp	r3, #46	@ 0x2e
 8006a18:	d10a      	bne.n	8006a30 <_svfiprintf_r+0x130>
 8006a1a:	7863      	ldrb	r3, [r4, #1]
 8006a1c:	2b2a      	cmp	r3, #42	@ 0x2a
 8006a1e:	d132      	bne.n	8006a86 <_svfiprintf_r+0x186>
 8006a20:	9b03      	ldr	r3, [sp, #12]
 8006a22:	1d1a      	adds	r2, r3, #4
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	9203      	str	r2, [sp, #12]
 8006a28:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006a2c:	3402      	adds	r4, #2
 8006a2e:	9305      	str	r3, [sp, #20]
 8006a30:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006af4 <_svfiprintf_r+0x1f4>
 8006a34:	7821      	ldrb	r1, [r4, #0]
 8006a36:	2203      	movs	r2, #3
 8006a38:	4650      	mov	r0, sl
 8006a3a:	f7f9 fc19 	bl	8000270 <memchr>
 8006a3e:	b138      	cbz	r0, 8006a50 <_svfiprintf_r+0x150>
 8006a40:	9b04      	ldr	r3, [sp, #16]
 8006a42:	eba0 000a 	sub.w	r0, r0, sl
 8006a46:	2240      	movs	r2, #64	@ 0x40
 8006a48:	4082      	lsls	r2, r0
 8006a4a:	4313      	orrs	r3, r2
 8006a4c:	3401      	adds	r4, #1
 8006a4e:	9304      	str	r3, [sp, #16]
 8006a50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a54:	4824      	ldr	r0, [pc, #144]	@ (8006ae8 <_svfiprintf_r+0x1e8>)
 8006a56:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006a5a:	2206      	movs	r2, #6
 8006a5c:	f7f9 fc08 	bl	8000270 <memchr>
 8006a60:	2800      	cmp	r0, #0
 8006a62:	d036      	beq.n	8006ad2 <_svfiprintf_r+0x1d2>
 8006a64:	4b21      	ldr	r3, [pc, #132]	@ (8006aec <_svfiprintf_r+0x1ec>)
 8006a66:	bb1b      	cbnz	r3, 8006ab0 <_svfiprintf_r+0x1b0>
 8006a68:	9b03      	ldr	r3, [sp, #12]
 8006a6a:	3307      	adds	r3, #7
 8006a6c:	f023 0307 	bic.w	r3, r3, #7
 8006a70:	3308      	adds	r3, #8
 8006a72:	9303      	str	r3, [sp, #12]
 8006a74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a76:	4433      	add	r3, r6
 8006a78:	9309      	str	r3, [sp, #36]	@ 0x24
 8006a7a:	e76a      	b.n	8006952 <_svfiprintf_r+0x52>
 8006a7c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006a80:	460c      	mov	r4, r1
 8006a82:	2001      	movs	r0, #1
 8006a84:	e7a8      	b.n	80069d8 <_svfiprintf_r+0xd8>
 8006a86:	2300      	movs	r3, #0
 8006a88:	3401      	adds	r4, #1
 8006a8a:	9305      	str	r3, [sp, #20]
 8006a8c:	4619      	mov	r1, r3
 8006a8e:	f04f 0c0a 	mov.w	ip, #10
 8006a92:	4620      	mov	r0, r4
 8006a94:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006a98:	3a30      	subs	r2, #48	@ 0x30
 8006a9a:	2a09      	cmp	r2, #9
 8006a9c:	d903      	bls.n	8006aa6 <_svfiprintf_r+0x1a6>
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d0c6      	beq.n	8006a30 <_svfiprintf_r+0x130>
 8006aa2:	9105      	str	r1, [sp, #20]
 8006aa4:	e7c4      	b.n	8006a30 <_svfiprintf_r+0x130>
 8006aa6:	fb0c 2101 	mla	r1, ip, r1, r2
 8006aaa:	4604      	mov	r4, r0
 8006aac:	2301      	movs	r3, #1
 8006aae:	e7f0      	b.n	8006a92 <_svfiprintf_r+0x192>
 8006ab0:	ab03      	add	r3, sp, #12
 8006ab2:	9300      	str	r3, [sp, #0]
 8006ab4:	462a      	mov	r2, r5
 8006ab6:	4b0e      	ldr	r3, [pc, #56]	@ (8006af0 <_svfiprintf_r+0x1f0>)
 8006ab8:	a904      	add	r1, sp, #16
 8006aba:	4638      	mov	r0, r7
 8006abc:	f3af 8000 	nop.w
 8006ac0:	1c42      	adds	r2, r0, #1
 8006ac2:	4606      	mov	r6, r0
 8006ac4:	d1d6      	bne.n	8006a74 <_svfiprintf_r+0x174>
 8006ac6:	89ab      	ldrh	r3, [r5, #12]
 8006ac8:	065b      	lsls	r3, r3, #25
 8006aca:	f53f af2d 	bmi.w	8006928 <_svfiprintf_r+0x28>
 8006ace:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006ad0:	e72c      	b.n	800692c <_svfiprintf_r+0x2c>
 8006ad2:	ab03      	add	r3, sp, #12
 8006ad4:	9300      	str	r3, [sp, #0]
 8006ad6:	462a      	mov	r2, r5
 8006ad8:	4b05      	ldr	r3, [pc, #20]	@ (8006af0 <_svfiprintf_r+0x1f0>)
 8006ada:	a904      	add	r1, sp, #16
 8006adc:	4638      	mov	r0, r7
 8006ade:	f000 f879 	bl	8006bd4 <_printf_i>
 8006ae2:	e7ed      	b.n	8006ac0 <_svfiprintf_r+0x1c0>
 8006ae4:	0800705c 	.word	0x0800705c
 8006ae8:	08007066 	.word	0x08007066
 8006aec:	00000000 	.word	0x00000000
 8006af0:	08006849 	.word	0x08006849
 8006af4:	08007062 	.word	0x08007062

08006af8 <_printf_common>:
 8006af8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006afc:	4616      	mov	r6, r2
 8006afe:	4698      	mov	r8, r3
 8006b00:	688a      	ldr	r2, [r1, #8]
 8006b02:	690b      	ldr	r3, [r1, #16]
 8006b04:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	bfb8      	it	lt
 8006b0c:	4613      	movlt	r3, r2
 8006b0e:	6033      	str	r3, [r6, #0]
 8006b10:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006b14:	4607      	mov	r7, r0
 8006b16:	460c      	mov	r4, r1
 8006b18:	b10a      	cbz	r2, 8006b1e <_printf_common+0x26>
 8006b1a:	3301      	adds	r3, #1
 8006b1c:	6033      	str	r3, [r6, #0]
 8006b1e:	6823      	ldr	r3, [r4, #0]
 8006b20:	0699      	lsls	r1, r3, #26
 8006b22:	bf42      	ittt	mi
 8006b24:	6833      	ldrmi	r3, [r6, #0]
 8006b26:	3302      	addmi	r3, #2
 8006b28:	6033      	strmi	r3, [r6, #0]
 8006b2a:	6825      	ldr	r5, [r4, #0]
 8006b2c:	f015 0506 	ands.w	r5, r5, #6
 8006b30:	d106      	bne.n	8006b40 <_printf_common+0x48>
 8006b32:	f104 0a19 	add.w	sl, r4, #25
 8006b36:	68e3      	ldr	r3, [r4, #12]
 8006b38:	6832      	ldr	r2, [r6, #0]
 8006b3a:	1a9b      	subs	r3, r3, r2
 8006b3c:	42ab      	cmp	r3, r5
 8006b3e:	dc26      	bgt.n	8006b8e <_printf_common+0x96>
 8006b40:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006b44:	6822      	ldr	r2, [r4, #0]
 8006b46:	3b00      	subs	r3, #0
 8006b48:	bf18      	it	ne
 8006b4a:	2301      	movne	r3, #1
 8006b4c:	0692      	lsls	r2, r2, #26
 8006b4e:	d42b      	bmi.n	8006ba8 <_printf_common+0xb0>
 8006b50:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006b54:	4641      	mov	r1, r8
 8006b56:	4638      	mov	r0, r7
 8006b58:	47c8      	blx	r9
 8006b5a:	3001      	adds	r0, #1
 8006b5c:	d01e      	beq.n	8006b9c <_printf_common+0xa4>
 8006b5e:	6823      	ldr	r3, [r4, #0]
 8006b60:	6922      	ldr	r2, [r4, #16]
 8006b62:	f003 0306 	and.w	r3, r3, #6
 8006b66:	2b04      	cmp	r3, #4
 8006b68:	bf02      	ittt	eq
 8006b6a:	68e5      	ldreq	r5, [r4, #12]
 8006b6c:	6833      	ldreq	r3, [r6, #0]
 8006b6e:	1aed      	subeq	r5, r5, r3
 8006b70:	68a3      	ldr	r3, [r4, #8]
 8006b72:	bf0c      	ite	eq
 8006b74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006b78:	2500      	movne	r5, #0
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	bfc4      	itt	gt
 8006b7e:	1a9b      	subgt	r3, r3, r2
 8006b80:	18ed      	addgt	r5, r5, r3
 8006b82:	2600      	movs	r6, #0
 8006b84:	341a      	adds	r4, #26
 8006b86:	42b5      	cmp	r5, r6
 8006b88:	d11a      	bne.n	8006bc0 <_printf_common+0xc8>
 8006b8a:	2000      	movs	r0, #0
 8006b8c:	e008      	b.n	8006ba0 <_printf_common+0xa8>
 8006b8e:	2301      	movs	r3, #1
 8006b90:	4652      	mov	r2, sl
 8006b92:	4641      	mov	r1, r8
 8006b94:	4638      	mov	r0, r7
 8006b96:	47c8      	blx	r9
 8006b98:	3001      	adds	r0, #1
 8006b9a:	d103      	bne.n	8006ba4 <_printf_common+0xac>
 8006b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8006ba0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ba4:	3501      	adds	r5, #1
 8006ba6:	e7c6      	b.n	8006b36 <_printf_common+0x3e>
 8006ba8:	18e1      	adds	r1, r4, r3
 8006baa:	1c5a      	adds	r2, r3, #1
 8006bac:	2030      	movs	r0, #48	@ 0x30
 8006bae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006bb2:	4422      	add	r2, r4
 8006bb4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006bb8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006bbc:	3302      	adds	r3, #2
 8006bbe:	e7c7      	b.n	8006b50 <_printf_common+0x58>
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	4622      	mov	r2, r4
 8006bc4:	4641      	mov	r1, r8
 8006bc6:	4638      	mov	r0, r7
 8006bc8:	47c8      	blx	r9
 8006bca:	3001      	adds	r0, #1
 8006bcc:	d0e6      	beq.n	8006b9c <_printf_common+0xa4>
 8006bce:	3601      	adds	r6, #1
 8006bd0:	e7d9      	b.n	8006b86 <_printf_common+0x8e>
	...

08006bd4 <_printf_i>:
 8006bd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006bd8:	7e0f      	ldrb	r7, [r1, #24]
 8006bda:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006bdc:	2f78      	cmp	r7, #120	@ 0x78
 8006bde:	4691      	mov	r9, r2
 8006be0:	4680      	mov	r8, r0
 8006be2:	460c      	mov	r4, r1
 8006be4:	469a      	mov	sl, r3
 8006be6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006bea:	d807      	bhi.n	8006bfc <_printf_i+0x28>
 8006bec:	2f62      	cmp	r7, #98	@ 0x62
 8006bee:	d80a      	bhi.n	8006c06 <_printf_i+0x32>
 8006bf0:	2f00      	cmp	r7, #0
 8006bf2:	f000 80d1 	beq.w	8006d98 <_printf_i+0x1c4>
 8006bf6:	2f58      	cmp	r7, #88	@ 0x58
 8006bf8:	f000 80b8 	beq.w	8006d6c <_printf_i+0x198>
 8006bfc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006c00:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006c04:	e03a      	b.n	8006c7c <_printf_i+0xa8>
 8006c06:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006c0a:	2b15      	cmp	r3, #21
 8006c0c:	d8f6      	bhi.n	8006bfc <_printf_i+0x28>
 8006c0e:	a101      	add	r1, pc, #4	@ (adr r1, 8006c14 <_printf_i+0x40>)
 8006c10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006c14:	08006c6d 	.word	0x08006c6d
 8006c18:	08006c81 	.word	0x08006c81
 8006c1c:	08006bfd 	.word	0x08006bfd
 8006c20:	08006bfd 	.word	0x08006bfd
 8006c24:	08006bfd 	.word	0x08006bfd
 8006c28:	08006bfd 	.word	0x08006bfd
 8006c2c:	08006c81 	.word	0x08006c81
 8006c30:	08006bfd 	.word	0x08006bfd
 8006c34:	08006bfd 	.word	0x08006bfd
 8006c38:	08006bfd 	.word	0x08006bfd
 8006c3c:	08006bfd 	.word	0x08006bfd
 8006c40:	08006d7f 	.word	0x08006d7f
 8006c44:	08006cab 	.word	0x08006cab
 8006c48:	08006d39 	.word	0x08006d39
 8006c4c:	08006bfd 	.word	0x08006bfd
 8006c50:	08006bfd 	.word	0x08006bfd
 8006c54:	08006da1 	.word	0x08006da1
 8006c58:	08006bfd 	.word	0x08006bfd
 8006c5c:	08006cab 	.word	0x08006cab
 8006c60:	08006bfd 	.word	0x08006bfd
 8006c64:	08006bfd 	.word	0x08006bfd
 8006c68:	08006d41 	.word	0x08006d41
 8006c6c:	6833      	ldr	r3, [r6, #0]
 8006c6e:	1d1a      	adds	r2, r3, #4
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	6032      	str	r2, [r6, #0]
 8006c74:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006c78:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	e09c      	b.n	8006dba <_printf_i+0x1e6>
 8006c80:	6833      	ldr	r3, [r6, #0]
 8006c82:	6820      	ldr	r0, [r4, #0]
 8006c84:	1d19      	adds	r1, r3, #4
 8006c86:	6031      	str	r1, [r6, #0]
 8006c88:	0606      	lsls	r6, r0, #24
 8006c8a:	d501      	bpl.n	8006c90 <_printf_i+0xbc>
 8006c8c:	681d      	ldr	r5, [r3, #0]
 8006c8e:	e003      	b.n	8006c98 <_printf_i+0xc4>
 8006c90:	0645      	lsls	r5, r0, #25
 8006c92:	d5fb      	bpl.n	8006c8c <_printf_i+0xb8>
 8006c94:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006c98:	2d00      	cmp	r5, #0
 8006c9a:	da03      	bge.n	8006ca4 <_printf_i+0xd0>
 8006c9c:	232d      	movs	r3, #45	@ 0x2d
 8006c9e:	426d      	negs	r5, r5
 8006ca0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006ca4:	4858      	ldr	r0, [pc, #352]	@ (8006e08 <_printf_i+0x234>)
 8006ca6:	230a      	movs	r3, #10
 8006ca8:	e011      	b.n	8006cce <_printf_i+0xfa>
 8006caa:	6821      	ldr	r1, [r4, #0]
 8006cac:	6833      	ldr	r3, [r6, #0]
 8006cae:	0608      	lsls	r0, r1, #24
 8006cb0:	f853 5b04 	ldr.w	r5, [r3], #4
 8006cb4:	d402      	bmi.n	8006cbc <_printf_i+0xe8>
 8006cb6:	0649      	lsls	r1, r1, #25
 8006cb8:	bf48      	it	mi
 8006cba:	b2ad      	uxthmi	r5, r5
 8006cbc:	2f6f      	cmp	r7, #111	@ 0x6f
 8006cbe:	4852      	ldr	r0, [pc, #328]	@ (8006e08 <_printf_i+0x234>)
 8006cc0:	6033      	str	r3, [r6, #0]
 8006cc2:	bf14      	ite	ne
 8006cc4:	230a      	movne	r3, #10
 8006cc6:	2308      	moveq	r3, #8
 8006cc8:	2100      	movs	r1, #0
 8006cca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006cce:	6866      	ldr	r6, [r4, #4]
 8006cd0:	60a6      	str	r6, [r4, #8]
 8006cd2:	2e00      	cmp	r6, #0
 8006cd4:	db05      	blt.n	8006ce2 <_printf_i+0x10e>
 8006cd6:	6821      	ldr	r1, [r4, #0]
 8006cd8:	432e      	orrs	r6, r5
 8006cda:	f021 0104 	bic.w	r1, r1, #4
 8006cde:	6021      	str	r1, [r4, #0]
 8006ce0:	d04b      	beq.n	8006d7a <_printf_i+0x1a6>
 8006ce2:	4616      	mov	r6, r2
 8006ce4:	fbb5 f1f3 	udiv	r1, r5, r3
 8006ce8:	fb03 5711 	mls	r7, r3, r1, r5
 8006cec:	5dc7      	ldrb	r7, [r0, r7]
 8006cee:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006cf2:	462f      	mov	r7, r5
 8006cf4:	42bb      	cmp	r3, r7
 8006cf6:	460d      	mov	r5, r1
 8006cf8:	d9f4      	bls.n	8006ce4 <_printf_i+0x110>
 8006cfa:	2b08      	cmp	r3, #8
 8006cfc:	d10b      	bne.n	8006d16 <_printf_i+0x142>
 8006cfe:	6823      	ldr	r3, [r4, #0]
 8006d00:	07df      	lsls	r7, r3, #31
 8006d02:	d508      	bpl.n	8006d16 <_printf_i+0x142>
 8006d04:	6923      	ldr	r3, [r4, #16]
 8006d06:	6861      	ldr	r1, [r4, #4]
 8006d08:	4299      	cmp	r1, r3
 8006d0a:	bfde      	ittt	le
 8006d0c:	2330      	movle	r3, #48	@ 0x30
 8006d0e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006d12:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006d16:	1b92      	subs	r2, r2, r6
 8006d18:	6122      	str	r2, [r4, #16]
 8006d1a:	f8cd a000 	str.w	sl, [sp]
 8006d1e:	464b      	mov	r3, r9
 8006d20:	aa03      	add	r2, sp, #12
 8006d22:	4621      	mov	r1, r4
 8006d24:	4640      	mov	r0, r8
 8006d26:	f7ff fee7 	bl	8006af8 <_printf_common>
 8006d2a:	3001      	adds	r0, #1
 8006d2c:	d14a      	bne.n	8006dc4 <_printf_i+0x1f0>
 8006d2e:	f04f 30ff 	mov.w	r0, #4294967295
 8006d32:	b004      	add	sp, #16
 8006d34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d38:	6823      	ldr	r3, [r4, #0]
 8006d3a:	f043 0320 	orr.w	r3, r3, #32
 8006d3e:	6023      	str	r3, [r4, #0]
 8006d40:	4832      	ldr	r0, [pc, #200]	@ (8006e0c <_printf_i+0x238>)
 8006d42:	2778      	movs	r7, #120	@ 0x78
 8006d44:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006d48:	6823      	ldr	r3, [r4, #0]
 8006d4a:	6831      	ldr	r1, [r6, #0]
 8006d4c:	061f      	lsls	r7, r3, #24
 8006d4e:	f851 5b04 	ldr.w	r5, [r1], #4
 8006d52:	d402      	bmi.n	8006d5a <_printf_i+0x186>
 8006d54:	065f      	lsls	r7, r3, #25
 8006d56:	bf48      	it	mi
 8006d58:	b2ad      	uxthmi	r5, r5
 8006d5a:	6031      	str	r1, [r6, #0]
 8006d5c:	07d9      	lsls	r1, r3, #31
 8006d5e:	bf44      	itt	mi
 8006d60:	f043 0320 	orrmi.w	r3, r3, #32
 8006d64:	6023      	strmi	r3, [r4, #0]
 8006d66:	b11d      	cbz	r5, 8006d70 <_printf_i+0x19c>
 8006d68:	2310      	movs	r3, #16
 8006d6a:	e7ad      	b.n	8006cc8 <_printf_i+0xf4>
 8006d6c:	4826      	ldr	r0, [pc, #152]	@ (8006e08 <_printf_i+0x234>)
 8006d6e:	e7e9      	b.n	8006d44 <_printf_i+0x170>
 8006d70:	6823      	ldr	r3, [r4, #0]
 8006d72:	f023 0320 	bic.w	r3, r3, #32
 8006d76:	6023      	str	r3, [r4, #0]
 8006d78:	e7f6      	b.n	8006d68 <_printf_i+0x194>
 8006d7a:	4616      	mov	r6, r2
 8006d7c:	e7bd      	b.n	8006cfa <_printf_i+0x126>
 8006d7e:	6833      	ldr	r3, [r6, #0]
 8006d80:	6825      	ldr	r5, [r4, #0]
 8006d82:	6961      	ldr	r1, [r4, #20]
 8006d84:	1d18      	adds	r0, r3, #4
 8006d86:	6030      	str	r0, [r6, #0]
 8006d88:	062e      	lsls	r6, r5, #24
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	d501      	bpl.n	8006d92 <_printf_i+0x1be>
 8006d8e:	6019      	str	r1, [r3, #0]
 8006d90:	e002      	b.n	8006d98 <_printf_i+0x1c4>
 8006d92:	0668      	lsls	r0, r5, #25
 8006d94:	d5fb      	bpl.n	8006d8e <_printf_i+0x1ba>
 8006d96:	8019      	strh	r1, [r3, #0]
 8006d98:	2300      	movs	r3, #0
 8006d9a:	6123      	str	r3, [r4, #16]
 8006d9c:	4616      	mov	r6, r2
 8006d9e:	e7bc      	b.n	8006d1a <_printf_i+0x146>
 8006da0:	6833      	ldr	r3, [r6, #0]
 8006da2:	1d1a      	adds	r2, r3, #4
 8006da4:	6032      	str	r2, [r6, #0]
 8006da6:	681e      	ldr	r6, [r3, #0]
 8006da8:	6862      	ldr	r2, [r4, #4]
 8006daa:	2100      	movs	r1, #0
 8006dac:	4630      	mov	r0, r6
 8006dae:	f7f9 fa5f 	bl	8000270 <memchr>
 8006db2:	b108      	cbz	r0, 8006db8 <_printf_i+0x1e4>
 8006db4:	1b80      	subs	r0, r0, r6
 8006db6:	6060      	str	r0, [r4, #4]
 8006db8:	6863      	ldr	r3, [r4, #4]
 8006dba:	6123      	str	r3, [r4, #16]
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006dc2:	e7aa      	b.n	8006d1a <_printf_i+0x146>
 8006dc4:	6923      	ldr	r3, [r4, #16]
 8006dc6:	4632      	mov	r2, r6
 8006dc8:	4649      	mov	r1, r9
 8006dca:	4640      	mov	r0, r8
 8006dcc:	47d0      	blx	sl
 8006dce:	3001      	adds	r0, #1
 8006dd0:	d0ad      	beq.n	8006d2e <_printf_i+0x15a>
 8006dd2:	6823      	ldr	r3, [r4, #0]
 8006dd4:	079b      	lsls	r3, r3, #30
 8006dd6:	d413      	bmi.n	8006e00 <_printf_i+0x22c>
 8006dd8:	68e0      	ldr	r0, [r4, #12]
 8006dda:	9b03      	ldr	r3, [sp, #12]
 8006ddc:	4298      	cmp	r0, r3
 8006dde:	bfb8      	it	lt
 8006de0:	4618      	movlt	r0, r3
 8006de2:	e7a6      	b.n	8006d32 <_printf_i+0x15e>
 8006de4:	2301      	movs	r3, #1
 8006de6:	4632      	mov	r2, r6
 8006de8:	4649      	mov	r1, r9
 8006dea:	4640      	mov	r0, r8
 8006dec:	47d0      	blx	sl
 8006dee:	3001      	adds	r0, #1
 8006df0:	d09d      	beq.n	8006d2e <_printf_i+0x15a>
 8006df2:	3501      	adds	r5, #1
 8006df4:	68e3      	ldr	r3, [r4, #12]
 8006df6:	9903      	ldr	r1, [sp, #12]
 8006df8:	1a5b      	subs	r3, r3, r1
 8006dfa:	42ab      	cmp	r3, r5
 8006dfc:	dcf2      	bgt.n	8006de4 <_printf_i+0x210>
 8006dfe:	e7eb      	b.n	8006dd8 <_printf_i+0x204>
 8006e00:	2500      	movs	r5, #0
 8006e02:	f104 0619 	add.w	r6, r4, #25
 8006e06:	e7f5      	b.n	8006df4 <_printf_i+0x220>
 8006e08:	0800706d 	.word	0x0800706d
 8006e0c:	0800707e 	.word	0x0800707e

08006e10 <memmove>:
 8006e10:	4288      	cmp	r0, r1
 8006e12:	b510      	push	{r4, lr}
 8006e14:	eb01 0402 	add.w	r4, r1, r2
 8006e18:	d902      	bls.n	8006e20 <memmove+0x10>
 8006e1a:	4284      	cmp	r4, r0
 8006e1c:	4623      	mov	r3, r4
 8006e1e:	d807      	bhi.n	8006e30 <memmove+0x20>
 8006e20:	1e43      	subs	r3, r0, #1
 8006e22:	42a1      	cmp	r1, r4
 8006e24:	d008      	beq.n	8006e38 <memmove+0x28>
 8006e26:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006e2a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006e2e:	e7f8      	b.n	8006e22 <memmove+0x12>
 8006e30:	4402      	add	r2, r0
 8006e32:	4601      	mov	r1, r0
 8006e34:	428a      	cmp	r2, r1
 8006e36:	d100      	bne.n	8006e3a <memmove+0x2a>
 8006e38:	bd10      	pop	{r4, pc}
 8006e3a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006e3e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006e42:	e7f7      	b.n	8006e34 <memmove+0x24>

08006e44 <_sbrk_r>:
 8006e44:	b538      	push	{r3, r4, r5, lr}
 8006e46:	4d06      	ldr	r5, [pc, #24]	@ (8006e60 <_sbrk_r+0x1c>)
 8006e48:	2300      	movs	r3, #0
 8006e4a:	4604      	mov	r4, r0
 8006e4c:	4608      	mov	r0, r1
 8006e4e:	602b      	str	r3, [r5, #0]
 8006e50:	f000 f83e 	bl	8006ed0 <_sbrk>
 8006e54:	1c43      	adds	r3, r0, #1
 8006e56:	d102      	bne.n	8006e5e <_sbrk_r+0x1a>
 8006e58:	682b      	ldr	r3, [r5, #0]
 8006e5a:	b103      	cbz	r3, 8006e5e <_sbrk_r+0x1a>
 8006e5c:	6023      	str	r3, [r4, #0]
 8006e5e:	bd38      	pop	{r3, r4, r5, pc}
 8006e60:	20014620 	.word	0x20014620

08006e64 <_realloc_r>:
 8006e64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e68:	4607      	mov	r7, r0
 8006e6a:	4614      	mov	r4, r2
 8006e6c:	460d      	mov	r5, r1
 8006e6e:	b921      	cbnz	r1, 8006e7a <_realloc_r+0x16>
 8006e70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e74:	4611      	mov	r1, r2
 8006e76:	f7ff bc5b 	b.w	8006730 <_malloc_r>
 8006e7a:	b92a      	cbnz	r2, 8006e88 <_realloc_r+0x24>
 8006e7c:	f7ff fbec 	bl	8006658 <_free_r>
 8006e80:	4625      	mov	r5, r4
 8006e82:	4628      	mov	r0, r5
 8006e84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e88:	f000 f81a 	bl	8006ec0 <_malloc_usable_size_r>
 8006e8c:	4284      	cmp	r4, r0
 8006e8e:	4606      	mov	r6, r0
 8006e90:	d802      	bhi.n	8006e98 <_realloc_r+0x34>
 8006e92:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006e96:	d8f4      	bhi.n	8006e82 <_realloc_r+0x1e>
 8006e98:	4621      	mov	r1, r4
 8006e9a:	4638      	mov	r0, r7
 8006e9c:	f7ff fc48 	bl	8006730 <_malloc_r>
 8006ea0:	4680      	mov	r8, r0
 8006ea2:	b908      	cbnz	r0, 8006ea8 <_realloc_r+0x44>
 8006ea4:	4645      	mov	r5, r8
 8006ea6:	e7ec      	b.n	8006e82 <_realloc_r+0x1e>
 8006ea8:	42b4      	cmp	r4, r6
 8006eaa:	4622      	mov	r2, r4
 8006eac:	4629      	mov	r1, r5
 8006eae:	bf28      	it	cs
 8006eb0:	4632      	movcs	r2, r6
 8006eb2:	f7ff fbc3 	bl	800663c <memcpy>
 8006eb6:	4629      	mov	r1, r5
 8006eb8:	4638      	mov	r0, r7
 8006eba:	f7ff fbcd 	bl	8006658 <_free_r>
 8006ebe:	e7f1      	b.n	8006ea4 <_realloc_r+0x40>

08006ec0 <_malloc_usable_size_r>:
 8006ec0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ec4:	1f18      	subs	r0, r3, #4
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	bfbc      	itt	lt
 8006eca:	580b      	ldrlt	r3, [r1, r0]
 8006ecc:	18c0      	addlt	r0, r0, r3
 8006ece:	4770      	bx	lr

08006ed0 <_sbrk>:
 8006ed0:	4a04      	ldr	r2, [pc, #16]	@ (8006ee4 <_sbrk+0x14>)
 8006ed2:	6811      	ldr	r1, [r2, #0]
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	b909      	cbnz	r1, 8006edc <_sbrk+0xc>
 8006ed8:	4903      	ldr	r1, [pc, #12]	@ (8006ee8 <_sbrk+0x18>)
 8006eda:	6011      	str	r1, [r2, #0]
 8006edc:	6810      	ldr	r0, [r2, #0]
 8006ede:	4403      	add	r3, r0
 8006ee0:	6013      	str	r3, [r2, #0]
 8006ee2:	4770      	bx	lr
 8006ee4:	20014630 	.word	0x20014630
 8006ee8:	20014638 	.word	0x20014638

08006eec <_init>:
 8006eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006eee:	bf00      	nop
 8006ef0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ef2:	bc08      	pop	{r3}
 8006ef4:	469e      	mov	lr, r3
 8006ef6:	4770      	bx	lr

08006ef8 <_fini>:
 8006ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006efa:	bf00      	nop
 8006efc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006efe:	bc08      	pop	{r3}
 8006f00:	469e      	mov	lr, r3
 8006f02:	4770      	bx	lr
