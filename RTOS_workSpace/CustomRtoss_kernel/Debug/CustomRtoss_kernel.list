
CustomRtoss_kernel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006930  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000144  08006ac0  08006ac0  00007ac0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c04  08006c04  0000806c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006c04  08006c04  00007c04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006c0c  08006c0c  0000806c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c0c  08006c0c  00007c0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006c10  08006c10  00007c10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08006c14  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000806c  2**0
                  CONTENTS
 10 .bss          000145d8  2000006c  2000006c  0000806c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20014644  20014644  0000806c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000806c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000137e6  00000000  00000000  0000809c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002fda  00000000  00000000  0001b882  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001368  00000000  00000000  0001e860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ee0  00000000  00000000  0001fbc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024219  00000000  00000000  00020aa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000164c6  00000000  00000000  00044cc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d939b  00000000  00000000  0005b187  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00134522  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005728  00000000  00000000  00134568  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000098  00000000  00000000  00139c90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006aa8 	.word	0x08006aa8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	08006aa8 	.word	0x08006aa8

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20012f20 	.word	0x20012f20

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295
 8000274:	f04f 30ff 	movne.w	r0, #4294967295
 8000278:	f000 b988 	b.w	800058c <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000298:	9d08      	ldr	r5, [sp, #32]
 800029a:	468e      	mov	lr, r1
 800029c:	4604      	mov	r4, r0
 800029e:	4688      	mov	r8, r1
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d14a      	bne.n	800033a <__udivmoddi4+0xa6>
 80002a4:	428a      	cmp	r2, r1
 80002a6:	4617      	mov	r7, r2
 80002a8:	d962      	bls.n	8000370 <__udivmoddi4+0xdc>
 80002aa:	fab2 f682 	clz	r6, r2
 80002ae:	b14e      	cbz	r6, 80002c4 <__udivmoddi4+0x30>
 80002b0:	f1c6 0320 	rsb	r3, r6, #32
 80002b4:	fa01 f806 	lsl.w	r8, r1, r6
 80002b8:	fa20 f303 	lsr.w	r3, r0, r3
 80002bc:	40b7      	lsls	r7, r6
 80002be:	ea43 0808 	orr.w	r8, r3, r8
 80002c2:	40b4      	lsls	r4, r6
 80002c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c8:	fa1f fc87 	uxth.w	ip, r7
 80002cc:	fbb8 f1fe 	udiv	r1, r8, lr
 80002d0:	0c23      	lsrs	r3, r4, #16
 80002d2:	fb0e 8811 	mls	r8, lr, r1, r8
 80002d6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002da:	fb01 f20c 	mul.w	r2, r1, ip
 80002de:	429a      	cmp	r2, r3
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0x62>
 80002e2:	18fb      	adds	r3, r7, r3
 80002e4:	f101 30ff 	add.w	r0, r1, #4294967295
 80002e8:	f080 80ea 	bcs.w	80004c0 <__udivmoddi4+0x22c>
 80002ec:	429a      	cmp	r2, r3
 80002ee:	f240 80e7 	bls.w	80004c0 <__udivmoddi4+0x22c>
 80002f2:	3902      	subs	r1, #2
 80002f4:	443b      	add	r3, r7
 80002f6:	1a9a      	subs	r2, r3, r2
 80002f8:	b2a3      	uxth	r3, r4
 80002fa:	fbb2 f0fe 	udiv	r0, r2, lr
 80002fe:	fb0e 2210 	mls	r2, lr, r0, r2
 8000302:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000306:	fb00 fc0c 	mul.w	ip, r0, ip
 800030a:	459c      	cmp	ip, r3
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0x8e>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f100 32ff 	add.w	r2, r0, #4294967295
 8000314:	f080 80d6 	bcs.w	80004c4 <__udivmoddi4+0x230>
 8000318:	459c      	cmp	ip, r3
 800031a:	f240 80d3 	bls.w	80004c4 <__udivmoddi4+0x230>
 800031e:	443b      	add	r3, r7
 8000320:	3802      	subs	r0, #2
 8000322:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000326:	eba3 030c 	sub.w	r3, r3, ip
 800032a:	2100      	movs	r1, #0
 800032c:	b11d      	cbz	r5, 8000336 <__udivmoddi4+0xa2>
 800032e:	40f3      	lsrs	r3, r6
 8000330:	2200      	movs	r2, #0
 8000332:	e9c5 3200 	strd	r3, r2, [r5]
 8000336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033a:	428b      	cmp	r3, r1
 800033c:	d905      	bls.n	800034a <__udivmoddi4+0xb6>
 800033e:	b10d      	cbz	r5, 8000344 <__udivmoddi4+0xb0>
 8000340:	e9c5 0100 	strd	r0, r1, [r5]
 8000344:	2100      	movs	r1, #0
 8000346:	4608      	mov	r0, r1
 8000348:	e7f5      	b.n	8000336 <__udivmoddi4+0xa2>
 800034a:	fab3 f183 	clz	r1, r3
 800034e:	2900      	cmp	r1, #0
 8000350:	d146      	bne.n	80003e0 <__udivmoddi4+0x14c>
 8000352:	4573      	cmp	r3, lr
 8000354:	d302      	bcc.n	800035c <__udivmoddi4+0xc8>
 8000356:	4282      	cmp	r2, r0
 8000358:	f200 8105 	bhi.w	8000566 <__udivmoddi4+0x2d2>
 800035c:	1a84      	subs	r4, r0, r2
 800035e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000362:	2001      	movs	r0, #1
 8000364:	4690      	mov	r8, r2
 8000366:	2d00      	cmp	r5, #0
 8000368:	d0e5      	beq.n	8000336 <__udivmoddi4+0xa2>
 800036a:	e9c5 4800 	strd	r4, r8, [r5]
 800036e:	e7e2      	b.n	8000336 <__udivmoddi4+0xa2>
 8000370:	2a00      	cmp	r2, #0
 8000372:	f000 8090 	beq.w	8000496 <__udivmoddi4+0x202>
 8000376:	fab2 f682 	clz	r6, r2
 800037a:	2e00      	cmp	r6, #0
 800037c:	f040 80a4 	bne.w	80004c8 <__udivmoddi4+0x234>
 8000380:	1a8a      	subs	r2, r1, r2
 8000382:	0c03      	lsrs	r3, r0, #16
 8000384:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000388:	b280      	uxth	r0, r0
 800038a:	b2bc      	uxth	r4, r7
 800038c:	2101      	movs	r1, #1
 800038e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000392:	fb0e 221c 	mls	r2, lr, ip, r2
 8000396:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800039a:	fb04 f20c 	mul.w	r2, r4, ip
 800039e:	429a      	cmp	r2, r3
 80003a0:	d907      	bls.n	80003b2 <__udivmoddi4+0x11e>
 80003a2:	18fb      	adds	r3, r7, r3
 80003a4:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003a8:	d202      	bcs.n	80003b0 <__udivmoddi4+0x11c>
 80003aa:	429a      	cmp	r2, r3
 80003ac:	f200 80e0 	bhi.w	8000570 <__udivmoddi4+0x2dc>
 80003b0:	46c4      	mov	ip, r8
 80003b2:	1a9b      	subs	r3, r3, r2
 80003b4:	fbb3 f2fe 	udiv	r2, r3, lr
 80003b8:	fb0e 3312 	mls	r3, lr, r2, r3
 80003bc:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003c0:	fb02 f404 	mul.w	r4, r2, r4
 80003c4:	429c      	cmp	r4, r3
 80003c6:	d907      	bls.n	80003d8 <__udivmoddi4+0x144>
 80003c8:	18fb      	adds	r3, r7, r3
 80003ca:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ce:	d202      	bcs.n	80003d6 <__udivmoddi4+0x142>
 80003d0:	429c      	cmp	r4, r3
 80003d2:	f200 80ca 	bhi.w	800056a <__udivmoddi4+0x2d6>
 80003d6:	4602      	mov	r2, r0
 80003d8:	1b1b      	subs	r3, r3, r4
 80003da:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003de:	e7a5      	b.n	800032c <__udivmoddi4+0x98>
 80003e0:	f1c1 0620 	rsb	r6, r1, #32
 80003e4:	408b      	lsls	r3, r1
 80003e6:	fa22 f706 	lsr.w	r7, r2, r6
 80003ea:	431f      	orrs	r7, r3
 80003ec:	fa0e f401 	lsl.w	r4, lr, r1
 80003f0:	fa20 f306 	lsr.w	r3, r0, r6
 80003f4:	fa2e fe06 	lsr.w	lr, lr, r6
 80003f8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003fc:	4323      	orrs	r3, r4
 80003fe:	fa00 f801 	lsl.w	r8, r0, r1
 8000402:	fa1f fc87 	uxth.w	ip, r7
 8000406:	fbbe f0f9 	udiv	r0, lr, r9
 800040a:	0c1c      	lsrs	r4, r3, #16
 800040c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000410:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000414:	fb00 fe0c 	mul.w	lr, r0, ip
 8000418:	45a6      	cmp	lr, r4
 800041a:	fa02 f201 	lsl.w	r2, r2, r1
 800041e:	d909      	bls.n	8000434 <__udivmoddi4+0x1a0>
 8000420:	193c      	adds	r4, r7, r4
 8000422:	f100 3aff 	add.w	sl, r0, #4294967295
 8000426:	f080 809c 	bcs.w	8000562 <__udivmoddi4+0x2ce>
 800042a:	45a6      	cmp	lr, r4
 800042c:	f240 8099 	bls.w	8000562 <__udivmoddi4+0x2ce>
 8000430:	3802      	subs	r0, #2
 8000432:	443c      	add	r4, r7
 8000434:	eba4 040e 	sub.w	r4, r4, lr
 8000438:	fa1f fe83 	uxth.w	lr, r3
 800043c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000440:	fb09 4413 	mls	r4, r9, r3, r4
 8000444:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000448:	fb03 fc0c 	mul.w	ip, r3, ip
 800044c:	45a4      	cmp	ip, r4
 800044e:	d908      	bls.n	8000462 <__udivmoddi4+0x1ce>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f103 3eff 	add.w	lr, r3, #4294967295
 8000456:	f080 8082 	bcs.w	800055e <__udivmoddi4+0x2ca>
 800045a:	45a4      	cmp	ip, r4
 800045c:	d97f      	bls.n	800055e <__udivmoddi4+0x2ca>
 800045e:	3b02      	subs	r3, #2
 8000460:	443c      	add	r4, r7
 8000462:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000466:	eba4 040c 	sub.w	r4, r4, ip
 800046a:	fba0 ec02 	umull	lr, ip, r0, r2
 800046e:	4564      	cmp	r4, ip
 8000470:	4673      	mov	r3, lr
 8000472:	46e1      	mov	r9, ip
 8000474:	d362      	bcc.n	800053c <__udivmoddi4+0x2a8>
 8000476:	d05f      	beq.n	8000538 <__udivmoddi4+0x2a4>
 8000478:	b15d      	cbz	r5, 8000492 <__udivmoddi4+0x1fe>
 800047a:	ebb8 0203 	subs.w	r2, r8, r3
 800047e:	eb64 0409 	sbc.w	r4, r4, r9
 8000482:	fa04 f606 	lsl.w	r6, r4, r6
 8000486:	fa22 f301 	lsr.w	r3, r2, r1
 800048a:	431e      	orrs	r6, r3
 800048c:	40cc      	lsrs	r4, r1
 800048e:	e9c5 6400 	strd	r6, r4, [r5]
 8000492:	2100      	movs	r1, #0
 8000494:	e74f      	b.n	8000336 <__udivmoddi4+0xa2>
 8000496:	fbb1 fcf2 	udiv	ip, r1, r2
 800049a:	0c01      	lsrs	r1, r0, #16
 800049c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004a0:	b280      	uxth	r0, r0
 80004a2:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004a6:	463b      	mov	r3, r7
 80004a8:	4638      	mov	r0, r7
 80004aa:	463c      	mov	r4, r7
 80004ac:	46b8      	mov	r8, r7
 80004ae:	46be      	mov	lr, r7
 80004b0:	2620      	movs	r6, #32
 80004b2:	fbb1 f1f7 	udiv	r1, r1, r7
 80004b6:	eba2 0208 	sub.w	r2, r2, r8
 80004ba:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004be:	e766      	b.n	800038e <__udivmoddi4+0xfa>
 80004c0:	4601      	mov	r1, r0
 80004c2:	e718      	b.n	80002f6 <__udivmoddi4+0x62>
 80004c4:	4610      	mov	r0, r2
 80004c6:	e72c      	b.n	8000322 <__udivmoddi4+0x8e>
 80004c8:	f1c6 0220 	rsb	r2, r6, #32
 80004cc:	fa2e f302 	lsr.w	r3, lr, r2
 80004d0:	40b7      	lsls	r7, r6
 80004d2:	40b1      	lsls	r1, r6
 80004d4:	fa20 f202 	lsr.w	r2, r0, r2
 80004d8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004dc:	430a      	orrs	r2, r1
 80004de:	fbb3 f8fe 	udiv	r8, r3, lr
 80004e2:	b2bc      	uxth	r4, r7
 80004e4:	fb0e 3318 	mls	r3, lr, r8, r3
 80004e8:	0c11      	lsrs	r1, r2, #16
 80004ea:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ee:	fb08 f904 	mul.w	r9, r8, r4
 80004f2:	40b0      	lsls	r0, r6
 80004f4:	4589      	cmp	r9, r1
 80004f6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004fa:	b280      	uxth	r0, r0
 80004fc:	d93e      	bls.n	800057c <__udivmoddi4+0x2e8>
 80004fe:	1879      	adds	r1, r7, r1
 8000500:	f108 3cff 	add.w	ip, r8, #4294967295
 8000504:	d201      	bcs.n	800050a <__udivmoddi4+0x276>
 8000506:	4589      	cmp	r9, r1
 8000508:	d81f      	bhi.n	800054a <__udivmoddi4+0x2b6>
 800050a:	eba1 0109 	sub.w	r1, r1, r9
 800050e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000512:	fb09 f804 	mul.w	r8, r9, r4
 8000516:	fb0e 1119 	mls	r1, lr, r9, r1
 800051a:	b292      	uxth	r2, r2
 800051c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000520:	4542      	cmp	r2, r8
 8000522:	d229      	bcs.n	8000578 <__udivmoddi4+0x2e4>
 8000524:	18ba      	adds	r2, r7, r2
 8000526:	f109 31ff 	add.w	r1, r9, #4294967295
 800052a:	d2c4      	bcs.n	80004b6 <__udivmoddi4+0x222>
 800052c:	4542      	cmp	r2, r8
 800052e:	d2c2      	bcs.n	80004b6 <__udivmoddi4+0x222>
 8000530:	f1a9 0102 	sub.w	r1, r9, #2
 8000534:	443a      	add	r2, r7
 8000536:	e7be      	b.n	80004b6 <__udivmoddi4+0x222>
 8000538:	45f0      	cmp	r8, lr
 800053a:	d29d      	bcs.n	8000478 <__udivmoddi4+0x1e4>
 800053c:	ebbe 0302 	subs.w	r3, lr, r2
 8000540:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000544:	3801      	subs	r0, #1
 8000546:	46e1      	mov	r9, ip
 8000548:	e796      	b.n	8000478 <__udivmoddi4+0x1e4>
 800054a:	eba7 0909 	sub.w	r9, r7, r9
 800054e:	4449      	add	r1, r9
 8000550:	f1a8 0c02 	sub.w	ip, r8, #2
 8000554:	fbb1 f9fe 	udiv	r9, r1, lr
 8000558:	fb09 f804 	mul.w	r8, r9, r4
 800055c:	e7db      	b.n	8000516 <__udivmoddi4+0x282>
 800055e:	4673      	mov	r3, lr
 8000560:	e77f      	b.n	8000462 <__udivmoddi4+0x1ce>
 8000562:	4650      	mov	r0, sl
 8000564:	e766      	b.n	8000434 <__udivmoddi4+0x1a0>
 8000566:	4608      	mov	r0, r1
 8000568:	e6fd      	b.n	8000366 <__udivmoddi4+0xd2>
 800056a:	443b      	add	r3, r7
 800056c:	3a02      	subs	r2, #2
 800056e:	e733      	b.n	80003d8 <__udivmoddi4+0x144>
 8000570:	f1ac 0c02 	sub.w	ip, ip, #2
 8000574:	443b      	add	r3, r7
 8000576:	e71c      	b.n	80003b2 <__udivmoddi4+0x11e>
 8000578:	4649      	mov	r1, r9
 800057a:	e79c      	b.n	80004b6 <__udivmoddi4+0x222>
 800057c:	eba1 0109 	sub.w	r1, r1, r9
 8000580:	46c4      	mov	ip, r8
 8000582:	fbb1 f9fe 	udiv	r9, r1, lr
 8000586:	fb09 f804 	mul.w	r8, r9, r4
 800058a:	e7c4      	b.n	8000516 <__udivmoddi4+0x282>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b088      	sub	sp, #32
 8000594:	af02      	add	r7, sp, #8

	/* USER CODE BEGIN 1 */

	TaskHandle_t task_1_handel=NULL;
 8000596:	2300      	movs	r3, #0
 8000598:	60bb      	str	r3, [r7, #8]
	TaskHandle_t task_2_handel=NULL;
 800059a:	2300      	movs	r3, #0
 800059c:	607b      	str	r3, [r7, #4]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800059e:	f000 fa3b 	bl	8000a18 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80005a2:	f000 f851 	bl	8000648 <SystemClock_Config>

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	/* USER CODE BEGIN 2 */
	DWT_CTRL |=(1<<0);
 80005a6:	4b21      	ldr	r3, [pc, #132]	@ (800062c <main+0x9c>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	4a20      	ldr	r2, [pc, #128]	@ (800062c <main+0x9c>)
 80005ac:	f043 0301 	orr.w	r3, r3, #1
 80005b0:	6013      	str	r3, [r2, #0]
	SEGGER_SYSVIEW_Conf();
 80005b2:	f003 ff6d 	bl	8004490 <SEGGER_SYSVIEW_Conf>
	SEGGER_SYSVIEW_Start();
 80005b6:	f004 ffd9 	bl	800556c <SEGGER_SYSVIEW_Start>


	status=xTaskCreate(task_1_Handler, "Task_1", 200, "Hello world from task 1", 2, &task_1_handel);
 80005ba:	f107 0308 	add.w	r3, r7, #8
 80005be:	9301      	str	r3, [sp, #4]
 80005c0:	2302      	movs	r3, #2
 80005c2:	9300      	str	r3, [sp, #0]
 80005c4:	4b1a      	ldr	r3, [pc, #104]	@ (8000630 <main+0xa0>)
 80005c6:	22c8      	movs	r2, #200	@ 0xc8
 80005c8:	491a      	ldr	r1, [pc, #104]	@ (8000634 <main+0xa4>)
 80005ca:	481b      	ldr	r0, [pc, #108]	@ (8000638 <main+0xa8>)
 80005cc:	f002 f87a 	bl	80026c4 <xTaskCreate>
 80005d0:	6178      	str	r0, [r7, #20]
	configASSERT(status==pdPASS);//if task creat fail then code will hang here
 80005d2:	697b      	ldr	r3, [r7, #20]
 80005d4:	2b01      	cmp	r3, #1
 80005d6:	d00b      	beq.n	80005f0 <main+0x60>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80005dc:	f383 8811 	msr	BASEPRI, r3
 80005e0:	f3bf 8f6f 	isb	sy
 80005e4:	f3bf 8f4f 	dsb	sy
 80005e8:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005ea:	bf00      	nop
 80005ec:	bf00      	nop
 80005ee:	e7fd      	b.n	80005ec <main+0x5c>

	status=xTaskCreate(task_2_Handler, "Task_2", 200, "Hello world from task 2", 2, &task_2_handel);
 80005f0:	1d3b      	adds	r3, r7, #4
 80005f2:	9301      	str	r3, [sp, #4]
 80005f4:	2302      	movs	r3, #2
 80005f6:	9300      	str	r3, [sp, #0]
 80005f8:	4b10      	ldr	r3, [pc, #64]	@ (800063c <main+0xac>)
 80005fa:	22c8      	movs	r2, #200	@ 0xc8
 80005fc:	4910      	ldr	r1, [pc, #64]	@ (8000640 <main+0xb0>)
 80005fe:	4811      	ldr	r0, [pc, #68]	@ (8000644 <main+0xb4>)
 8000600:	f002 f860 	bl	80026c4 <xTaskCreate>
 8000604:	6178      	str	r0, [r7, #20]

	configASSERT(status==pdPASS);//if task creation fails, then the code will hang here
 8000606:	697b      	ldr	r3, [r7, #20]
 8000608:	2b01      	cmp	r3, #1
 800060a:	d00b      	beq.n	8000624 <main+0x94>
        __asm volatile
 800060c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000610:	f383 8811 	msr	BASEPRI, r3
 8000614:	f3bf 8f6f 	isb	sy
 8000618:	f3bf 8f4f 	dsb	sy
 800061c:	60fb      	str	r3, [r7, #12]
    }
 800061e:	bf00      	nop
 8000620:	bf00      	nop
 8000622:	e7fd      	b.n	8000620 <main+0x90>

	vTaskStartScheduler();//start the freeRTOS scheduler
 8000624:	f002 f9b2 	bl	800298c <vTaskStartScheduler>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8000628:	bf00      	nop
 800062a:	e7fd      	b.n	8000628 <main+0x98>
 800062c:	e0001000 	.word	0xe0001000
 8000630:	08006ac0 	.word	0x08006ac0
 8000634:	08006ad8 	.word	0x08006ad8
 8000638:	08000719 	.word	0x08000719
 800063c:	08006ae0 	.word	0x08006ae0
 8000640:	08006af8 	.word	0x08006af8
 8000644:	08000729 	.word	0x08000729

08000648 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b094      	sub	sp, #80	@ 0x50
 800064c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064e:	f107 0320 	add.w	r3, r7, #32
 8000652:	2230      	movs	r2, #48	@ 0x30
 8000654:	2100      	movs	r1, #0
 8000656:	4618      	mov	r0, r3
 8000658:	f005 ff6e 	bl	8006538 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800065c:	f107 030c 	add.w	r3, r7, #12
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	60da      	str	r2, [r3, #12]
 800066a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800066c:	2300      	movs	r3, #0
 800066e:	60bb      	str	r3, [r7, #8]
 8000670:	4b27      	ldr	r3, [pc, #156]	@ (8000710 <SystemClock_Config+0xc8>)
 8000672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000674:	4a26      	ldr	r2, [pc, #152]	@ (8000710 <SystemClock_Config+0xc8>)
 8000676:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800067a:	6413      	str	r3, [r2, #64]	@ 0x40
 800067c:	4b24      	ldr	r3, [pc, #144]	@ (8000710 <SystemClock_Config+0xc8>)
 800067e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000680:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000684:	60bb      	str	r3, [r7, #8]
 8000686:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000688:	2300      	movs	r3, #0
 800068a:	607b      	str	r3, [r7, #4]
 800068c:	4b21      	ldr	r3, [pc, #132]	@ (8000714 <SystemClock_Config+0xcc>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a20      	ldr	r2, [pc, #128]	@ (8000714 <SystemClock_Config+0xcc>)
 8000692:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000696:	6013      	str	r3, [r2, #0]
 8000698:	4b1e      	ldr	r3, [pc, #120]	@ (8000714 <SystemClock_Config+0xcc>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80006a0:	607b      	str	r3, [r7, #4]
 80006a2:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006a4:	2302      	movs	r3, #2
 80006a6:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a8:	2301      	movs	r3, #1
 80006aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ac:	2310      	movs	r3, #16
 80006ae:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b0:	2302      	movs	r3, #2
 80006b2:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006b4:	2300      	movs	r3, #0
 80006b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 80006b8:	2308      	movs	r3, #8
 80006ba:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 50;
 80006bc:	2332      	movs	r3, #50	@ 0x32
 80006be:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006c0:	2304      	movs	r3, #4
 80006c2:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80006c4:	2304      	movs	r3, #4
 80006c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c8:	f107 0320 	add.w	r3, r7, #32
 80006cc:	4618      	mov	r0, r3
 80006ce:	f000 fac7 	bl	8000c60 <HAL_RCC_OscConfig>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <SystemClock_Config+0x94>
	{
		Error_Handler();
 80006d8:	f000 f840 	bl	800075c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006dc:	230f      	movs	r3, #15
 80006de:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e0:	2302      	movs	r3, #2
 80006e2:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e4:	2300      	movs	r3, #0
 80006e6:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006e8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006ec:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ee:	2300      	movs	r3, #0
 80006f0:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006f2:	f107 030c 	add.w	r3, r7, #12
 80006f6:	2100      	movs	r1, #0
 80006f8:	4618      	mov	r0, r3
 80006fa:	f000 fd29 	bl	8001150 <HAL_RCC_ClockConfig>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <SystemClock_Config+0xc0>
	{
		Error_Handler();
 8000704:	f000 f82a 	bl	800075c <Error_Handler>
	}
}
 8000708:	bf00      	nop
 800070a:	3750      	adds	r7, #80	@ 0x50
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	40023800 	.word	0x40023800
 8000714:	40007000 	.word	0x40007000

08000718 <task_1_Handler>:

/* USER CODE BEGIN 4 */

static void task_1_Handler (void* arg){
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]

	//	char msg[100];

	while(1){

		printf("%s\n",(char*)arg);
 8000720:	6878      	ldr	r0, [r7, #4]
 8000722:	f005 fe19 	bl	8006358 <puts>
 8000726:	e7fb      	b.n	8000720 <task_1_Handler+0x8>

08000728 <task_2_Handler>:


	}
}

static void task_2_Handler (void* arg){
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]

	//	char msg[100];

	while(1){

		printf("%s\n",(char*)arg);
 8000730:	6878      	ldr	r0, [r7, #4]
 8000732:	f005 fe11 	bl	8006358 <puts>
 8000736:	e7fb      	b.n	8000730 <task_2_Handler+0x8>

08000738 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6)
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4a04      	ldr	r2, [pc, #16]	@ (8000758 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000746:	4293      	cmp	r3, r2
 8000748:	d101      	bne.n	800074e <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		HAL_IncTick();
 800074a:	f000 f987 	bl	8000a5c <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 800074e:	bf00      	nop
 8000750:	3708      	adds	r7, #8
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	40001000 	.word	0x40001000

0800075c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000760:	b672      	cpsid	i
}
 8000762:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000764:	bf00      	nop
 8000766:	e7fd      	b.n	8000764 <Error_Handler+0x8>

08000768 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	607b      	str	r3, [r7, #4]
 8000772:	4b10      	ldr	r3, [pc, #64]	@ (80007b4 <HAL_MspInit+0x4c>)
 8000774:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000776:	4a0f      	ldr	r2, [pc, #60]	@ (80007b4 <HAL_MspInit+0x4c>)
 8000778:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800077c:	6453      	str	r3, [r2, #68]	@ 0x44
 800077e:	4b0d      	ldr	r3, [pc, #52]	@ (80007b4 <HAL_MspInit+0x4c>)
 8000780:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000782:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000786:	607b      	str	r3, [r7, #4]
 8000788:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	603b      	str	r3, [r7, #0]
 800078e:	4b09      	ldr	r3, [pc, #36]	@ (80007b4 <HAL_MspInit+0x4c>)
 8000790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000792:	4a08      	ldr	r2, [pc, #32]	@ (80007b4 <HAL_MspInit+0x4c>)
 8000794:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000798:	6413      	str	r3, [r2, #64]	@ 0x40
 800079a:	4b06      	ldr	r3, [pc, #24]	@ (80007b4 <HAL_MspInit+0x4c>)
 800079c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800079e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007a2:	603b      	str	r3, [r7, #0]
 80007a4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

    vInitPrioGroupValue();
 80007a6:	f003 fab1 	bl	8003d0c <vInitPrioGroupValue>

  /* USER CODE END MspInit 1 */
}
 80007aa:	bf00      	nop
 80007ac:	3708      	adds	r7, #8
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	40023800 	.word	0x40023800

080007b8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b08e      	sub	sp, #56	@ 0x38
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80007c0:	2300      	movs	r3, #0
 80007c2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80007c4:	2300      	movs	r3, #0
 80007c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80007c8:	2300      	movs	r3, #0
 80007ca:	60fb      	str	r3, [r7, #12]
 80007cc:	4b33      	ldr	r3, [pc, #204]	@ (800089c <HAL_InitTick+0xe4>)
 80007ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007d0:	4a32      	ldr	r2, [pc, #200]	@ (800089c <HAL_InitTick+0xe4>)
 80007d2:	f043 0310 	orr.w	r3, r3, #16
 80007d6:	6413      	str	r3, [r2, #64]	@ 0x40
 80007d8:	4b30      	ldr	r3, [pc, #192]	@ (800089c <HAL_InitTick+0xe4>)
 80007da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007dc:	f003 0310 	and.w	r3, r3, #16
 80007e0:	60fb      	str	r3, [r7, #12]
 80007e2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80007e4:	f107 0210 	add.w	r2, r7, #16
 80007e8:	f107 0314 	add.w	r3, r7, #20
 80007ec:	4611      	mov	r1, r2
 80007ee:	4618      	mov	r0, r3
 80007f0:	f000 fe7a 	bl	80014e8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80007f4:	6a3b      	ldr	r3, [r7, #32]
 80007f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80007f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d103      	bne.n	8000806 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80007fe:	f000 fe5f 	bl	80014c0 <HAL_RCC_GetPCLK1Freq>
 8000802:	6378      	str	r0, [r7, #52]	@ 0x34
 8000804:	e004      	b.n	8000810 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000806:	f000 fe5b 	bl	80014c0 <HAL_RCC_GetPCLK1Freq>
 800080a:	4603      	mov	r3, r0
 800080c:	005b      	lsls	r3, r3, #1
 800080e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000810:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000812:	4a23      	ldr	r2, [pc, #140]	@ (80008a0 <HAL_InitTick+0xe8>)
 8000814:	fba2 2303 	umull	r2, r3, r2, r3
 8000818:	0c9b      	lsrs	r3, r3, #18
 800081a:	3b01      	subs	r3, #1
 800081c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800081e:	4b21      	ldr	r3, [pc, #132]	@ (80008a4 <HAL_InitTick+0xec>)
 8000820:	4a21      	ldr	r2, [pc, #132]	@ (80008a8 <HAL_InitTick+0xf0>)
 8000822:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000824:	4b1f      	ldr	r3, [pc, #124]	@ (80008a4 <HAL_InitTick+0xec>)
 8000826:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800082a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800082c:	4a1d      	ldr	r2, [pc, #116]	@ (80008a4 <HAL_InitTick+0xec>)
 800082e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000830:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000832:	4b1c      	ldr	r3, [pc, #112]	@ (80008a4 <HAL_InitTick+0xec>)
 8000834:	2200      	movs	r2, #0
 8000836:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000838:	4b1a      	ldr	r3, [pc, #104]	@ (80008a4 <HAL_InitTick+0xec>)
 800083a:	2200      	movs	r2, #0
 800083c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800083e:	4b19      	ldr	r3, [pc, #100]	@ (80008a4 <HAL_InitTick+0xec>)
 8000840:	2200      	movs	r2, #0
 8000842:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000844:	4817      	ldr	r0, [pc, #92]	@ (80008a4 <HAL_InitTick+0xec>)
 8000846:	f000 fe81 	bl	800154c <HAL_TIM_Base_Init>
 800084a:	4603      	mov	r3, r0
 800084c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000850:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000854:	2b00      	cmp	r3, #0
 8000856:	d11b      	bne.n	8000890 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000858:	4812      	ldr	r0, [pc, #72]	@ (80008a4 <HAL_InitTick+0xec>)
 800085a:	f000 fed1 	bl	8001600 <HAL_TIM_Base_Start_IT>
 800085e:	4603      	mov	r3, r0
 8000860:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000864:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000868:	2b00      	cmp	r3, #0
 800086a:	d111      	bne.n	8000890 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800086c:	2036      	movs	r0, #54	@ 0x36
 800086e:	f000 f9e9 	bl	8000c44 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	2b0f      	cmp	r3, #15
 8000876:	d808      	bhi.n	800088a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000878:	2200      	movs	r2, #0
 800087a:	6879      	ldr	r1, [r7, #4]
 800087c:	2036      	movs	r0, #54	@ 0x36
 800087e:	f000 f9c5 	bl	8000c0c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000882:	4a0a      	ldr	r2, [pc, #40]	@ (80008ac <HAL_InitTick+0xf4>)
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	6013      	str	r3, [r2, #0]
 8000888:	e002      	b.n	8000890 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800088a:	2301      	movs	r3, #1
 800088c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000890:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000894:	4618      	mov	r0, r3
 8000896:	3738      	adds	r7, #56	@ 0x38
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	40023800 	.word	0x40023800
 80008a0:	431bde83 	.word	0x431bde83
 80008a4:	20000088 	.word	0x20000088
 80008a8:	40001000 	.word	0x40001000
 80008ac:	20000004 	.word	0x20000004

080008b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008b4:	bf00      	nop
 80008b6:	e7fd      	b.n	80008b4 <NMI_Handler+0x4>

080008b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008bc:	bf00      	nop
 80008be:	e7fd      	b.n	80008bc <HardFault_Handler+0x4>

080008c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008c4:	bf00      	nop
 80008c6:	e7fd      	b.n	80008c4 <MemManage_Handler+0x4>

080008c8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008cc:	bf00      	nop
 80008ce:	e7fd      	b.n	80008cc <BusFault_Handler+0x4>

080008d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008d4:	bf00      	nop
 80008d6:	e7fd      	b.n	80008d4 <UsageFault_Handler+0x4>

080008d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008dc:	bf00      	nop
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr
	...

080008e8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80008ec:	4802      	ldr	r0, [pc, #8]	@ (80008f8 <TIM6_DAC_IRQHandler+0x10>)
 80008ee:	f000 fef7 	bl	80016e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80008f2:	bf00      	nop
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	20000088 	.word	0x20000088

080008fc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b086      	sub	sp, #24
 8000900:	af00      	add	r7, sp, #0
 8000902:	60f8      	str	r0, [r7, #12]
 8000904:	60b9      	str	r1, [r7, #8]
 8000906:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000908:	2300      	movs	r3, #0
 800090a:	617b      	str	r3, [r7, #20]
 800090c:	e00a      	b.n	8000924 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800090e:	f3af 8000 	nop.w
 8000912:	4601      	mov	r1, r0
 8000914:	68bb      	ldr	r3, [r7, #8]
 8000916:	1c5a      	adds	r2, r3, #1
 8000918:	60ba      	str	r2, [r7, #8]
 800091a:	b2ca      	uxtb	r2, r1
 800091c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800091e:	697b      	ldr	r3, [r7, #20]
 8000920:	3301      	adds	r3, #1
 8000922:	617b      	str	r3, [r7, #20]
 8000924:	697a      	ldr	r2, [r7, #20]
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	429a      	cmp	r2, r3
 800092a:	dbf0      	blt.n	800090e <_read+0x12>
  }

  return len;
 800092c:	687b      	ldr	r3, [r7, #4]
}
 800092e:	4618      	mov	r0, r3
 8000930:	3718      	adds	r7, #24
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}

08000936 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000936:	b480      	push	{r7}
 8000938:	b083      	sub	sp, #12
 800093a:	af00      	add	r7, sp, #0
 800093c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800093e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000942:	4618      	mov	r0, r3
 8000944:	370c      	adds	r7, #12
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr

0800094e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800094e:	b480      	push	{r7}
 8000950:	b083      	sub	sp, #12
 8000952:	af00      	add	r7, sp, #0
 8000954:	6078      	str	r0, [r7, #4]
 8000956:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800095e:	605a      	str	r2, [r3, #4]
  return 0;
 8000960:	2300      	movs	r3, #0
}
 8000962:	4618      	mov	r0, r3
 8000964:	370c      	adds	r7, #12
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr

0800096e <_isatty>:

int _isatty(int file)
{
 800096e:	b480      	push	{r7}
 8000970:	b083      	sub	sp, #12
 8000972:	af00      	add	r7, sp, #0
 8000974:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000976:	2301      	movs	r3, #1
}
 8000978:	4618      	mov	r0, r3
 800097a:	370c      	adds	r7, #12
 800097c:	46bd      	mov	sp, r7
 800097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000982:	4770      	bx	lr

08000984 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000984:	b480      	push	{r7}
 8000986:	b085      	sub	sp, #20
 8000988:	af00      	add	r7, sp, #0
 800098a:	60f8      	str	r0, [r7, #12]
 800098c:	60b9      	str	r1, [r7, #8]
 800098e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000990:	2300      	movs	r3, #0
}
 8000992:	4618      	mov	r0, r3
 8000994:	3714      	adds	r7, #20
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr
	...

080009a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009a4:	4b06      	ldr	r3, [pc, #24]	@ (80009c0 <SystemInit+0x20>)
 80009a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009aa:	4a05      	ldr	r2, [pc, #20]	@ (80009c0 <SystemInit+0x20>)
 80009ac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009b4:	bf00      	nop
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	e000ed00 	.word	0xe000ed00

080009c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80009c4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80009fc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80009c8:	f7ff ffea 	bl	80009a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009cc:	480c      	ldr	r0, [pc, #48]	@ (8000a00 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80009ce:	490d      	ldr	r1, [pc, #52]	@ (8000a04 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80009d0:	4a0d      	ldr	r2, [pc, #52]	@ (8000a08 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80009d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009d4:	e002      	b.n	80009dc <LoopCopyDataInit>

080009d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009da:	3304      	adds	r3, #4

080009dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009e0:	d3f9      	bcc.n	80009d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009e2:	4a0a      	ldr	r2, [pc, #40]	@ (8000a0c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80009e4:	4c0a      	ldr	r4, [pc, #40]	@ (8000a10 <LoopFillZerobss+0x22>)
  movs r3, #0
 80009e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009e8:	e001      	b.n	80009ee <LoopFillZerobss>

080009ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009ec:	3204      	adds	r2, #4

080009ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009f0:	d3fb      	bcc.n	80009ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009f2:	f005 fddd 	bl	80065b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009f6:	f7ff fdcb 	bl	8000590 <main>
  bx  lr    
 80009fa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80009fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a04:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000a08:	08006c14 	.word	0x08006c14
  ldr r2, =_sbss
 8000a0c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000a10:	20014644 	.word	0x20014644

08000a14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a14:	e7fe      	b.n	8000a14 <ADC_IRQHandler>
	...

08000a18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a1c:	4b0e      	ldr	r3, [pc, #56]	@ (8000a58 <HAL_Init+0x40>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a0d      	ldr	r2, [pc, #52]	@ (8000a58 <HAL_Init+0x40>)
 8000a22:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a28:	4b0b      	ldr	r3, [pc, #44]	@ (8000a58 <HAL_Init+0x40>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a0a      	ldr	r2, [pc, #40]	@ (8000a58 <HAL_Init+0x40>)
 8000a2e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000a32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a34:	4b08      	ldr	r3, [pc, #32]	@ (8000a58 <HAL_Init+0x40>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a07      	ldr	r2, [pc, #28]	@ (8000a58 <HAL_Init+0x40>)
 8000a3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a40:	2003      	movs	r0, #3
 8000a42:	f000 f8d8 	bl	8000bf6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a46:	200f      	movs	r0, #15
 8000a48:	f7ff feb6 	bl	80007b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a4c:	f7ff fe8c 	bl	8000768 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a50:	2300      	movs	r3, #0
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	40023c00 	.word	0x40023c00

08000a5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a60:	4b06      	ldr	r3, [pc, #24]	@ (8000a7c <HAL_IncTick+0x20>)
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	461a      	mov	r2, r3
 8000a66:	4b06      	ldr	r3, [pc, #24]	@ (8000a80 <HAL_IncTick+0x24>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	4413      	add	r3, r2
 8000a6c:	4a04      	ldr	r2, [pc, #16]	@ (8000a80 <HAL_IncTick+0x24>)
 8000a6e:	6013      	str	r3, [r2, #0]
}
 8000a70:	bf00      	nop
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	20000008 	.word	0x20000008
 8000a80:	200000d0 	.word	0x200000d0

08000a84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  return uwTick;
 8000a88:	4b03      	ldr	r3, [pc, #12]	@ (8000a98 <HAL_GetTick+0x14>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	200000d0 	.word	0x200000d0

08000a9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b085      	sub	sp, #20
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	f003 0307 	and.w	r3, r3, #7
 8000aaa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000aac:	4b0c      	ldr	r3, [pc, #48]	@ (8000ae0 <__NVIC_SetPriorityGrouping+0x44>)
 8000aae:	68db      	ldr	r3, [r3, #12]
 8000ab0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ab2:	68ba      	ldr	r2, [r7, #8]
 8000ab4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ab8:	4013      	ands	r3, r2
 8000aba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ac0:	68bb      	ldr	r3, [r7, #8]
 8000ac2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ac4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ac8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000acc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ace:	4a04      	ldr	r2, [pc, #16]	@ (8000ae0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ad0:	68bb      	ldr	r3, [r7, #8]
 8000ad2:	60d3      	str	r3, [r2, #12]
}
 8000ad4:	bf00      	nop
 8000ad6:	3714      	adds	r7, #20
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr
 8000ae0:	e000ed00 	.word	0xe000ed00

08000ae4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ae8:	4b04      	ldr	r3, [pc, #16]	@ (8000afc <__NVIC_GetPriorityGrouping+0x18>)
 8000aea:	68db      	ldr	r3, [r3, #12]
 8000aec:	0a1b      	lsrs	r3, r3, #8
 8000aee:	f003 0307 	and.w	r3, r3, #7
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr
 8000afc:	e000ed00 	.word	0xe000ed00

08000b00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b083      	sub	sp, #12
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	4603      	mov	r3, r0
 8000b08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	db0b      	blt.n	8000b2a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b12:	79fb      	ldrb	r3, [r7, #7]
 8000b14:	f003 021f 	and.w	r2, r3, #31
 8000b18:	4907      	ldr	r1, [pc, #28]	@ (8000b38 <__NVIC_EnableIRQ+0x38>)
 8000b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b1e:	095b      	lsrs	r3, r3, #5
 8000b20:	2001      	movs	r0, #1
 8000b22:	fa00 f202 	lsl.w	r2, r0, r2
 8000b26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b2a:	bf00      	nop
 8000b2c:	370c      	adds	r7, #12
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	e000e100 	.word	0xe000e100

08000b3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b083      	sub	sp, #12
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	4603      	mov	r3, r0
 8000b44:	6039      	str	r1, [r7, #0]
 8000b46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	db0a      	blt.n	8000b66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	b2da      	uxtb	r2, r3
 8000b54:	490c      	ldr	r1, [pc, #48]	@ (8000b88 <__NVIC_SetPriority+0x4c>)
 8000b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b5a:	0112      	lsls	r2, r2, #4
 8000b5c:	b2d2      	uxtb	r2, r2
 8000b5e:	440b      	add	r3, r1
 8000b60:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b64:	e00a      	b.n	8000b7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	b2da      	uxtb	r2, r3
 8000b6a:	4908      	ldr	r1, [pc, #32]	@ (8000b8c <__NVIC_SetPriority+0x50>)
 8000b6c:	79fb      	ldrb	r3, [r7, #7]
 8000b6e:	f003 030f 	and.w	r3, r3, #15
 8000b72:	3b04      	subs	r3, #4
 8000b74:	0112      	lsls	r2, r2, #4
 8000b76:	b2d2      	uxtb	r2, r2
 8000b78:	440b      	add	r3, r1
 8000b7a:	761a      	strb	r2, [r3, #24]
}
 8000b7c:	bf00      	nop
 8000b7e:	370c      	adds	r7, #12
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr
 8000b88:	e000e100 	.word	0xe000e100
 8000b8c:	e000ed00 	.word	0xe000ed00

08000b90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b089      	sub	sp, #36	@ 0x24
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	60f8      	str	r0, [r7, #12]
 8000b98:	60b9      	str	r1, [r7, #8]
 8000b9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	f003 0307 	and.w	r3, r3, #7
 8000ba2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ba4:	69fb      	ldr	r3, [r7, #28]
 8000ba6:	f1c3 0307 	rsb	r3, r3, #7
 8000baa:	2b04      	cmp	r3, #4
 8000bac:	bf28      	it	cs
 8000bae:	2304      	movcs	r3, #4
 8000bb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bb2:	69fb      	ldr	r3, [r7, #28]
 8000bb4:	3304      	adds	r3, #4
 8000bb6:	2b06      	cmp	r3, #6
 8000bb8:	d902      	bls.n	8000bc0 <NVIC_EncodePriority+0x30>
 8000bba:	69fb      	ldr	r3, [r7, #28]
 8000bbc:	3b03      	subs	r3, #3
 8000bbe:	e000      	b.n	8000bc2 <NVIC_EncodePriority+0x32>
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bc4:	f04f 32ff 	mov.w	r2, #4294967295
 8000bc8:	69bb      	ldr	r3, [r7, #24]
 8000bca:	fa02 f303 	lsl.w	r3, r2, r3
 8000bce:	43da      	mvns	r2, r3
 8000bd0:	68bb      	ldr	r3, [r7, #8]
 8000bd2:	401a      	ands	r2, r3
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bd8:	f04f 31ff 	mov.w	r1, #4294967295
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	fa01 f303 	lsl.w	r3, r1, r3
 8000be2:	43d9      	mvns	r1, r3
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000be8:	4313      	orrs	r3, r2
         );
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	3724      	adds	r7, #36	@ 0x24
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr

08000bf6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bf6:	b580      	push	{r7, lr}
 8000bf8:	b082      	sub	sp, #8
 8000bfa:	af00      	add	r7, sp, #0
 8000bfc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bfe:	6878      	ldr	r0, [r7, #4]
 8000c00:	f7ff ff4c 	bl	8000a9c <__NVIC_SetPriorityGrouping>
}
 8000c04:	bf00      	nop
 8000c06:	3708      	adds	r7, #8
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}

08000c0c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b086      	sub	sp, #24
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	4603      	mov	r3, r0
 8000c14:	60b9      	str	r1, [r7, #8]
 8000c16:	607a      	str	r2, [r7, #4]
 8000c18:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c1e:	f7ff ff61 	bl	8000ae4 <__NVIC_GetPriorityGrouping>
 8000c22:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c24:	687a      	ldr	r2, [r7, #4]
 8000c26:	68b9      	ldr	r1, [r7, #8]
 8000c28:	6978      	ldr	r0, [r7, #20]
 8000c2a:	f7ff ffb1 	bl	8000b90 <NVIC_EncodePriority>
 8000c2e:	4602      	mov	r2, r0
 8000c30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c34:	4611      	mov	r1, r2
 8000c36:	4618      	mov	r0, r3
 8000c38:	f7ff ff80 	bl	8000b3c <__NVIC_SetPriority>
}
 8000c3c:	bf00      	nop
 8000c3e:	3718      	adds	r7, #24
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}

08000c44 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c52:	4618      	mov	r0, r3
 8000c54:	f7ff ff54 	bl	8000b00 <__NVIC_EnableIRQ>
}
 8000c58:	bf00      	nop
 8000c5a:	3708      	adds	r7, #8
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}

08000c60 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b086      	sub	sp, #24
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d101      	bne.n	8000c72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	e267      	b.n	8001142 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	f003 0301 	and.w	r3, r3, #1
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d075      	beq.n	8000d6a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000c7e:	4b88      	ldr	r3, [pc, #544]	@ (8000ea0 <HAL_RCC_OscConfig+0x240>)
 8000c80:	689b      	ldr	r3, [r3, #8]
 8000c82:	f003 030c 	and.w	r3, r3, #12
 8000c86:	2b04      	cmp	r3, #4
 8000c88:	d00c      	beq.n	8000ca4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000c8a:	4b85      	ldr	r3, [pc, #532]	@ (8000ea0 <HAL_RCC_OscConfig+0x240>)
 8000c8c:	689b      	ldr	r3, [r3, #8]
 8000c8e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000c92:	2b08      	cmp	r3, #8
 8000c94:	d112      	bne.n	8000cbc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000c96:	4b82      	ldr	r3, [pc, #520]	@ (8000ea0 <HAL_RCC_OscConfig+0x240>)
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000c9e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8000ca2:	d10b      	bne.n	8000cbc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ca4:	4b7e      	ldr	r3, [pc, #504]	@ (8000ea0 <HAL_RCC_OscConfig+0x240>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d05b      	beq.n	8000d68 <HAL_RCC_OscConfig+0x108>
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d157      	bne.n	8000d68 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	e242      	b.n	8001142 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000cc4:	d106      	bne.n	8000cd4 <HAL_RCC_OscConfig+0x74>
 8000cc6:	4b76      	ldr	r3, [pc, #472]	@ (8000ea0 <HAL_RCC_OscConfig+0x240>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	4a75      	ldr	r2, [pc, #468]	@ (8000ea0 <HAL_RCC_OscConfig+0x240>)
 8000ccc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000cd0:	6013      	str	r3, [r2, #0]
 8000cd2:	e01d      	b.n	8000d10 <HAL_RCC_OscConfig+0xb0>
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000cdc:	d10c      	bne.n	8000cf8 <HAL_RCC_OscConfig+0x98>
 8000cde:	4b70      	ldr	r3, [pc, #448]	@ (8000ea0 <HAL_RCC_OscConfig+0x240>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4a6f      	ldr	r2, [pc, #444]	@ (8000ea0 <HAL_RCC_OscConfig+0x240>)
 8000ce4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ce8:	6013      	str	r3, [r2, #0]
 8000cea:	4b6d      	ldr	r3, [pc, #436]	@ (8000ea0 <HAL_RCC_OscConfig+0x240>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	4a6c      	ldr	r2, [pc, #432]	@ (8000ea0 <HAL_RCC_OscConfig+0x240>)
 8000cf0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000cf4:	6013      	str	r3, [r2, #0]
 8000cf6:	e00b      	b.n	8000d10 <HAL_RCC_OscConfig+0xb0>
 8000cf8:	4b69      	ldr	r3, [pc, #420]	@ (8000ea0 <HAL_RCC_OscConfig+0x240>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a68      	ldr	r2, [pc, #416]	@ (8000ea0 <HAL_RCC_OscConfig+0x240>)
 8000cfe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000d02:	6013      	str	r3, [r2, #0]
 8000d04:	4b66      	ldr	r3, [pc, #408]	@ (8000ea0 <HAL_RCC_OscConfig+0x240>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a65      	ldr	r2, [pc, #404]	@ (8000ea0 <HAL_RCC_OscConfig+0x240>)
 8000d0a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000d0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d013      	beq.n	8000d40 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d18:	f7ff feb4 	bl	8000a84 <HAL_GetTick>
 8000d1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d1e:	e008      	b.n	8000d32 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d20:	f7ff feb0 	bl	8000a84 <HAL_GetTick>
 8000d24:	4602      	mov	r2, r0
 8000d26:	693b      	ldr	r3, [r7, #16]
 8000d28:	1ad3      	subs	r3, r2, r3
 8000d2a:	2b64      	cmp	r3, #100	@ 0x64
 8000d2c:	d901      	bls.n	8000d32 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000d2e:	2303      	movs	r3, #3
 8000d30:	e207      	b.n	8001142 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d32:	4b5b      	ldr	r3, [pc, #364]	@ (8000ea0 <HAL_RCC_OscConfig+0x240>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d0f0      	beq.n	8000d20 <HAL_RCC_OscConfig+0xc0>
 8000d3e:	e014      	b.n	8000d6a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d40:	f7ff fea0 	bl	8000a84 <HAL_GetTick>
 8000d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d46:	e008      	b.n	8000d5a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d48:	f7ff fe9c 	bl	8000a84 <HAL_GetTick>
 8000d4c:	4602      	mov	r2, r0
 8000d4e:	693b      	ldr	r3, [r7, #16]
 8000d50:	1ad3      	subs	r3, r2, r3
 8000d52:	2b64      	cmp	r3, #100	@ 0x64
 8000d54:	d901      	bls.n	8000d5a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000d56:	2303      	movs	r3, #3
 8000d58:	e1f3      	b.n	8001142 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d5a:	4b51      	ldr	r3, [pc, #324]	@ (8000ea0 <HAL_RCC_OscConfig+0x240>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d1f0      	bne.n	8000d48 <HAL_RCC_OscConfig+0xe8>
 8000d66:	e000      	b.n	8000d6a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f003 0302 	and.w	r3, r3, #2
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d063      	beq.n	8000e3e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8000d76:	4b4a      	ldr	r3, [pc, #296]	@ (8000ea0 <HAL_RCC_OscConfig+0x240>)
 8000d78:	689b      	ldr	r3, [r3, #8]
 8000d7a:	f003 030c 	and.w	r3, r3, #12
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d00b      	beq.n	8000d9a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000d82:	4b47      	ldr	r3, [pc, #284]	@ (8000ea0 <HAL_RCC_OscConfig+0x240>)
 8000d84:	689b      	ldr	r3, [r3, #8]
 8000d86:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8000d8a:	2b08      	cmp	r3, #8
 8000d8c:	d11c      	bne.n	8000dc8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000d8e:	4b44      	ldr	r3, [pc, #272]	@ (8000ea0 <HAL_RCC_OscConfig+0x240>)
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d116      	bne.n	8000dc8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d9a:	4b41      	ldr	r3, [pc, #260]	@ (8000ea0 <HAL_RCC_OscConfig+0x240>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	f003 0302 	and.w	r3, r3, #2
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d005      	beq.n	8000db2 <HAL_RCC_OscConfig+0x152>
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	68db      	ldr	r3, [r3, #12]
 8000daa:	2b01      	cmp	r3, #1
 8000dac:	d001      	beq.n	8000db2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000dae:	2301      	movs	r3, #1
 8000db0:	e1c7      	b.n	8001142 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000db2:	4b3b      	ldr	r3, [pc, #236]	@ (8000ea0 <HAL_RCC_OscConfig+0x240>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	691b      	ldr	r3, [r3, #16]
 8000dbe:	00db      	lsls	r3, r3, #3
 8000dc0:	4937      	ldr	r1, [pc, #220]	@ (8000ea0 <HAL_RCC_OscConfig+0x240>)
 8000dc2:	4313      	orrs	r3, r2
 8000dc4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dc6:	e03a      	b.n	8000e3e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	68db      	ldr	r3, [r3, #12]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d020      	beq.n	8000e12 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000dd0:	4b34      	ldr	r3, [pc, #208]	@ (8000ea4 <HAL_RCC_OscConfig+0x244>)
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000dd6:	f7ff fe55 	bl	8000a84 <HAL_GetTick>
 8000dda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ddc:	e008      	b.n	8000df0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000dde:	f7ff fe51 	bl	8000a84 <HAL_GetTick>
 8000de2:	4602      	mov	r2, r0
 8000de4:	693b      	ldr	r3, [r7, #16]
 8000de6:	1ad3      	subs	r3, r2, r3
 8000de8:	2b02      	cmp	r3, #2
 8000dea:	d901      	bls.n	8000df0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000dec:	2303      	movs	r3, #3
 8000dee:	e1a8      	b.n	8001142 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000df0:	4b2b      	ldr	r3, [pc, #172]	@ (8000ea0 <HAL_RCC_OscConfig+0x240>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f003 0302 	and.w	r3, r3, #2
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d0f0      	beq.n	8000dde <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dfc:	4b28      	ldr	r3, [pc, #160]	@ (8000ea0 <HAL_RCC_OscConfig+0x240>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	691b      	ldr	r3, [r3, #16]
 8000e08:	00db      	lsls	r3, r3, #3
 8000e0a:	4925      	ldr	r1, [pc, #148]	@ (8000ea0 <HAL_RCC_OscConfig+0x240>)
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	600b      	str	r3, [r1, #0]
 8000e10:	e015      	b.n	8000e3e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e12:	4b24      	ldr	r3, [pc, #144]	@ (8000ea4 <HAL_RCC_OscConfig+0x244>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e18:	f7ff fe34 	bl	8000a84 <HAL_GetTick>
 8000e1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e1e:	e008      	b.n	8000e32 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e20:	f7ff fe30 	bl	8000a84 <HAL_GetTick>
 8000e24:	4602      	mov	r2, r0
 8000e26:	693b      	ldr	r3, [r7, #16]
 8000e28:	1ad3      	subs	r3, r2, r3
 8000e2a:	2b02      	cmp	r3, #2
 8000e2c:	d901      	bls.n	8000e32 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000e2e:	2303      	movs	r3, #3
 8000e30:	e187      	b.n	8001142 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e32:	4b1b      	ldr	r3, [pc, #108]	@ (8000ea0 <HAL_RCC_OscConfig+0x240>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f003 0302 	and.w	r3, r3, #2
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d1f0      	bne.n	8000e20 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f003 0308 	and.w	r3, r3, #8
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d036      	beq.n	8000eb8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	695b      	ldr	r3, [r3, #20]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d016      	beq.n	8000e80 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e52:	4b15      	ldr	r3, [pc, #84]	@ (8000ea8 <HAL_RCC_OscConfig+0x248>)
 8000e54:	2201      	movs	r2, #1
 8000e56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e58:	f7ff fe14 	bl	8000a84 <HAL_GetTick>
 8000e5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e5e:	e008      	b.n	8000e72 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e60:	f7ff fe10 	bl	8000a84 <HAL_GetTick>
 8000e64:	4602      	mov	r2, r0
 8000e66:	693b      	ldr	r3, [r7, #16]
 8000e68:	1ad3      	subs	r3, r2, r3
 8000e6a:	2b02      	cmp	r3, #2
 8000e6c:	d901      	bls.n	8000e72 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000e6e:	2303      	movs	r3, #3
 8000e70:	e167      	b.n	8001142 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e72:	4b0b      	ldr	r3, [pc, #44]	@ (8000ea0 <HAL_RCC_OscConfig+0x240>)
 8000e74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000e76:	f003 0302 	and.w	r3, r3, #2
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d0f0      	beq.n	8000e60 <HAL_RCC_OscConfig+0x200>
 8000e7e:	e01b      	b.n	8000eb8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e80:	4b09      	ldr	r3, [pc, #36]	@ (8000ea8 <HAL_RCC_OscConfig+0x248>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e86:	f7ff fdfd 	bl	8000a84 <HAL_GetTick>
 8000e8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e8c:	e00e      	b.n	8000eac <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e8e:	f7ff fdf9 	bl	8000a84 <HAL_GetTick>
 8000e92:	4602      	mov	r2, r0
 8000e94:	693b      	ldr	r3, [r7, #16]
 8000e96:	1ad3      	subs	r3, r2, r3
 8000e98:	2b02      	cmp	r3, #2
 8000e9a:	d907      	bls.n	8000eac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8000e9c:	2303      	movs	r3, #3
 8000e9e:	e150      	b.n	8001142 <HAL_RCC_OscConfig+0x4e2>
 8000ea0:	40023800 	.word	0x40023800
 8000ea4:	42470000 	.word	0x42470000
 8000ea8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000eac:	4b88      	ldr	r3, [pc, #544]	@ (80010d0 <HAL_RCC_OscConfig+0x470>)
 8000eae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000eb0:	f003 0302 	and.w	r3, r3, #2
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d1ea      	bne.n	8000e8e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f003 0304 	and.w	r3, r3, #4
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	f000 8097 	beq.w	8000ff4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000eca:	4b81      	ldr	r3, [pc, #516]	@ (80010d0 <HAL_RCC_OscConfig+0x470>)
 8000ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ece:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d10f      	bne.n	8000ef6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	60bb      	str	r3, [r7, #8]
 8000eda:	4b7d      	ldr	r3, [pc, #500]	@ (80010d0 <HAL_RCC_OscConfig+0x470>)
 8000edc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ede:	4a7c      	ldr	r2, [pc, #496]	@ (80010d0 <HAL_RCC_OscConfig+0x470>)
 8000ee0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ee4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ee6:	4b7a      	ldr	r3, [pc, #488]	@ (80010d0 <HAL_RCC_OscConfig+0x470>)
 8000ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000eee:	60bb      	str	r3, [r7, #8]
 8000ef0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ef6:	4b77      	ldr	r3, [pc, #476]	@ (80010d4 <HAL_RCC_OscConfig+0x474>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d118      	bne.n	8000f34 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f02:	4b74      	ldr	r3, [pc, #464]	@ (80010d4 <HAL_RCC_OscConfig+0x474>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4a73      	ldr	r2, [pc, #460]	@ (80010d4 <HAL_RCC_OscConfig+0x474>)
 8000f08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f0e:	f7ff fdb9 	bl	8000a84 <HAL_GetTick>
 8000f12:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f14:	e008      	b.n	8000f28 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f16:	f7ff fdb5 	bl	8000a84 <HAL_GetTick>
 8000f1a:	4602      	mov	r2, r0
 8000f1c:	693b      	ldr	r3, [r7, #16]
 8000f1e:	1ad3      	subs	r3, r2, r3
 8000f20:	2b02      	cmp	r3, #2
 8000f22:	d901      	bls.n	8000f28 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8000f24:	2303      	movs	r3, #3
 8000f26:	e10c      	b.n	8001142 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f28:	4b6a      	ldr	r3, [pc, #424]	@ (80010d4 <HAL_RCC_OscConfig+0x474>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d0f0      	beq.n	8000f16 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	689b      	ldr	r3, [r3, #8]
 8000f38:	2b01      	cmp	r3, #1
 8000f3a:	d106      	bne.n	8000f4a <HAL_RCC_OscConfig+0x2ea>
 8000f3c:	4b64      	ldr	r3, [pc, #400]	@ (80010d0 <HAL_RCC_OscConfig+0x470>)
 8000f3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000f40:	4a63      	ldr	r2, [pc, #396]	@ (80010d0 <HAL_RCC_OscConfig+0x470>)
 8000f42:	f043 0301 	orr.w	r3, r3, #1
 8000f46:	6713      	str	r3, [r2, #112]	@ 0x70
 8000f48:	e01c      	b.n	8000f84 <HAL_RCC_OscConfig+0x324>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	689b      	ldr	r3, [r3, #8]
 8000f4e:	2b05      	cmp	r3, #5
 8000f50:	d10c      	bne.n	8000f6c <HAL_RCC_OscConfig+0x30c>
 8000f52:	4b5f      	ldr	r3, [pc, #380]	@ (80010d0 <HAL_RCC_OscConfig+0x470>)
 8000f54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000f56:	4a5e      	ldr	r2, [pc, #376]	@ (80010d0 <HAL_RCC_OscConfig+0x470>)
 8000f58:	f043 0304 	orr.w	r3, r3, #4
 8000f5c:	6713      	str	r3, [r2, #112]	@ 0x70
 8000f5e:	4b5c      	ldr	r3, [pc, #368]	@ (80010d0 <HAL_RCC_OscConfig+0x470>)
 8000f60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000f62:	4a5b      	ldr	r2, [pc, #364]	@ (80010d0 <HAL_RCC_OscConfig+0x470>)
 8000f64:	f043 0301 	orr.w	r3, r3, #1
 8000f68:	6713      	str	r3, [r2, #112]	@ 0x70
 8000f6a:	e00b      	b.n	8000f84 <HAL_RCC_OscConfig+0x324>
 8000f6c:	4b58      	ldr	r3, [pc, #352]	@ (80010d0 <HAL_RCC_OscConfig+0x470>)
 8000f6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000f70:	4a57      	ldr	r2, [pc, #348]	@ (80010d0 <HAL_RCC_OscConfig+0x470>)
 8000f72:	f023 0301 	bic.w	r3, r3, #1
 8000f76:	6713      	str	r3, [r2, #112]	@ 0x70
 8000f78:	4b55      	ldr	r3, [pc, #340]	@ (80010d0 <HAL_RCC_OscConfig+0x470>)
 8000f7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000f7c:	4a54      	ldr	r2, [pc, #336]	@ (80010d0 <HAL_RCC_OscConfig+0x470>)
 8000f7e:	f023 0304 	bic.w	r3, r3, #4
 8000f82:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	689b      	ldr	r3, [r3, #8]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d015      	beq.n	8000fb8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f8c:	f7ff fd7a 	bl	8000a84 <HAL_GetTick>
 8000f90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f92:	e00a      	b.n	8000faa <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f94:	f7ff fd76 	bl	8000a84 <HAL_GetTick>
 8000f98:	4602      	mov	r2, r0
 8000f9a:	693b      	ldr	r3, [r7, #16]
 8000f9c:	1ad3      	subs	r3, r2, r3
 8000f9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d901      	bls.n	8000faa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8000fa6:	2303      	movs	r3, #3
 8000fa8:	e0cb      	b.n	8001142 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000faa:	4b49      	ldr	r3, [pc, #292]	@ (80010d0 <HAL_RCC_OscConfig+0x470>)
 8000fac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000fae:	f003 0302 	and.w	r3, r3, #2
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d0ee      	beq.n	8000f94 <HAL_RCC_OscConfig+0x334>
 8000fb6:	e014      	b.n	8000fe2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fb8:	f7ff fd64 	bl	8000a84 <HAL_GetTick>
 8000fbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fbe:	e00a      	b.n	8000fd6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000fc0:	f7ff fd60 	bl	8000a84 <HAL_GetTick>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	693b      	ldr	r3, [r7, #16]
 8000fc8:	1ad3      	subs	r3, r2, r3
 8000fca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d901      	bls.n	8000fd6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8000fd2:	2303      	movs	r3, #3
 8000fd4:	e0b5      	b.n	8001142 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fd6:	4b3e      	ldr	r3, [pc, #248]	@ (80010d0 <HAL_RCC_OscConfig+0x470>)
 8000fd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000fda:	f003 0302 	and.w	r3, r3, #2
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d1ee      	bne.n	8000fc0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8000fe2:	7dfb      	ldrb	r3, [r7, #23]
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	d105      	bne.n	8000ff4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000fe8:	4b39      	ldr	r3, [pc, #228]	@ (80010d0 <HAL_RCC_OscConfig+0x470>)
 8000fea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fec:	4a38      	ldr	r2, [pc, #224]	@ (80010d0 <HAL_RCC_OscConfig+0x470>)
 8000fee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8000ff2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	699b      	ldr	r3, [r3, #24]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	f000 80a1 	beq.w	8001140 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000ffe:	4b34      	ldr	r3, [pc, #208]	@ (80010d0 <HAL_RCC_OscConfig+0x470>)
 8001000:	689b      	ldr	r3, [r3, #8]
 8001002:	f003 030c 	and.w	r3, r3, #12
 8001006:	2b08      	cmp	r3, #8
 8001008:	d05c      	beq.n	80010c4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	699b      	ldr	r3, [r3, #24]
 800100e:	2b02      	cmp	r3, #2
 8001010:	d141      	bne.n	8001096 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001012:	4b31      	ldr	r3, [pc, #196]	@ (80010d8 <HAL_RCC_OscConfig+0x478>)
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001018:	f7ff fd34 	bl	8000a84 <HAL_GetTick>
 800101c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800101e:	e008      	b.n	8001032 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001020:	f7ff fd30 	bl	8000a84 <HAL_GetTick>
 8001024:	4602      	mov	r2, r0
 8001026:	693b      	ldr	r3, [r7, #16]
 8001028:	1ad3      	subs	r3, r2, r3
 800102a:	2b02      	cmp	r3, #2
 800102c:	d901      	bls.n	8001032 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800102e:	2303      	movs	r3, #3
 8001030:	e087      	b.n	8001142 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001032:	4b27      	ldr	r3, [pc, #156]	@ (80010d0 <HAL_RCC_OscConfig+0x470>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800103a:	2b00      	cmp	r3, #0
 800103c:	d1f0      	bne.n	8001020 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	69da      	ldr	r2, [r3, #28]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6a1b      	ldr	r3, [r3, #32]
 8001046:	431a      	orrs	r2, r3
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800104c:	019b      	lsls	r3, r3, #6
 800104e:	431a      	orrs	r2, r3
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001054:	085b      	lsrs	r3, r3, #1
 8001056:	3b01      	subs	r3, #1
 8001058:	041b      	lsls	r3, r3, #16
 800105a:	431a      	orrs	r2, r3
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001060:	061b      	lsls	r3, r3, #24
 8001062:	491b      	ldr	r1, [pc, #108]	@ (80010d0 <HAL_RCC_OscConfig+0x470>)
 8001064:	4313      	orrs	r3, r2
 8001066:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001068:	4b1b      	ldr	r3, [pc, #108]	@ (80010d8 <HAL_RCC_OscConfig+0x478>)
 800106a:	2201      	movs	r2, #1
 800106c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800106e:	f7ff fd09 	bl	8000a84 <HAL_GetTick>
 8001072:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001074:	e008      	b.n	8001088 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001076:	f7ff fd05 	bl	8000a84 <HAL_GetTick>
 800107a:	4602      	mov	r2, r0
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	1ad3      	subs	r3, r2, r3
 8001080:	2b02      	cmp	r3, #2
 8001082:	d901      	bls.n	8001088 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001084:	2303      	movs	r3, #3
 8001086:	e05c      	b.n	8001142 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001088:	4b11      	ldr	r3, [pc, #68]	@ (80010d0 <HAL_RCC_OscConfig+0x470>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001090:	2b00      	cmp	r3, #0
 8001092:	d0f0      	beq.n	8001076 <HAL_RCC_OscConfig+0x416>
 8001094:	e054      	b.n	8001140 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001096:	4b10      	ldr	r3, [pc, #64]	@ (80010d8 <HAL_RCC_OscConfig+0x478>)
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800109c:	f7ff fcf2 	bl	8000a84 <HAL_GetTick>
 80010a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80010a2:	e008      	b.n	80010b6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010a4:	f7ff fcee 	bl	8000a84 <HAL_GetTick>
 80010a8:	4602      	mov	r2, r0
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	2b02      	cmp	r3, #2
 80010b0:	d901      	bls.n	80010b6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80010b2:	2303      	movs	r3, #3
 80010b4:	e045      	b.n	8001142 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80010b6:	4b06      	ldr	r3, [pc, #24]	@ (80010d0 <HAL_RCC_OscConfig+0x470>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d1f0      	bne.n	80010a4 <HAL_RCC_OscConfig+0x444>
 80010c2:	e03d      	b.n	8001140 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	699b      	ldr	r3, [r3, #24]
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	d107      	bne.n	80010dc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80010cc:	2301      	movs	r3, #1
 80010ce:	e038      	b.n	8001142 <HAL_RCC_OscConfig+0x4e2>
 80010d0:	40023800 	.word	0x40023800
 80010d4:	40007000 	.word	0x40007000
 80010d8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80010dc:	4b1b      	ldr	r3, [pc, #108]	@ (800114c <HAL_RCC_OscConfig+0x4ec>)
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	699b      	ldr	r3, [r3, #24]
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d028      	beq.n	800113c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80010f4:	429a      	cmp	r2, r3
 80010f6:	d121      	bne.n	800113c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001102:	429a      	cmp	r2, r3
 8001104:	d11a      	bne.n	800113c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001106:	68fa      	ldr	r2, [r7, #12]
 8001108:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800110c:	4013      	ands	r3, r2
 800110e:	687a      	ldr	r2, [r7, #4]
 8001110:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001112:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001114:	4293      	cmp	r3, r2
 8001116:	d111      	bne.n	800113c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001122:	085b      	lsrs	r3, r3, #1
 8001124:	3b01      	subs	r3, #1
 8001126:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001128:	429a      	cmp	r2, r3
 800112a:	d107      	bne.n	800113c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001136:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001138:	429a      	cmp	r2, r3
 800113a:	d001      	beq.n	8001140 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800113c:	2301      	movs	r3, #1
 800113e:	e000      	b.n	8001142 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001140:	2300      	movs	r3, #0
}
 8001142:	4618      	mov	r0, r3
 8001144:	3718      	adds	r7, #24
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	40023800 	.word	0x40023800

08001150 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d101      	bne.n	8001164 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001160:	2301      	movs	r3, #1
 8001162:	e0cc      	b.n	80012fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001164:	4b68      	ldr	r3, [pc, #416]	@ (8001308 <HAL_RCC_ClockConfig+0x1b8>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f003 0307 	and.w	r3, r3, #7
 800116c:	683a      	ldr	r2, [r7, #0]
 800116e:	429a      	cmp	r2, r3
 8001170:	d90c      	bls.n	800118c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001172:	4b65      	ldr	r3, [pc, #404]	@ (8001308 <HAL_RCC_ClockConfig+0x1b8>)
 8001174:	683a      	ldr	r2, [r7, #0]
 8001176:	b2d2      	uxtb	r2, r2
 8001178:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800117a:	4b63      	ldr	r3, [pc, #396]	@ (8001308 <HAL_RCC_ClockConfig+0x1b8>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f003 0307 	and.w	r3, r3, #7
 8001182:	683a      	ldr	r2, [r7, #0]
 8001184:	429a      	cmp	r2, r3
 8001186:	d001      	beq.n	800118c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001188:	2301      	movs	r3, #1
 800118a:	e0b8      	b.n	80012fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f003 0302 	and.w	r3, r3, #2
 8001194:	2b00      	cmp	r3, #0
 8001196:	d020      	beq.n	80011da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f003 0304 	and.w	r3, r3, #4
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d005      	beq.n	80011b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80011a4:	4b59      	ldr	r3, [pc, #356]	@ (800130c <HAL_RCC_ClockConfig+0x1bc>)
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	4a58      	ldr	r2, [pc, #352]	@ (800130c <HAL_RCC_ClockConfig+0x1bc>)
 80011aa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80011ae:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f003 0308 	and.w	r3, r3, #8
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d005      	beq.n	80011c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80011bc:	4b53      	ldr	r3, [pc, #332]	@ (800130c <HAL_RCC_ClockConfig+0x1bc>)
 80011be:	689b      	ldr	r3, [r3, #8]
 80011c0:	4a52      	ldr	r2, [pc, #328]	@ (800130c <HAL_RCC_ClockConfig+0x1bc>)
 80011c2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80011c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011c8:	4b50      	ldr	r3, [pc, #320]	@ (800130c <HAL_RCC_ClockConfig+0x1bc>)
 80011ca:	689b      	ldr	r3, [r3, #8]
 80011cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	689b      	ldr	r3, [r3, #8]
 80011d4:	494d      	ldr	r1, [pc, #308]	@ (800130c <HAL_RCC_ClockConfig+0x1bc>)
 80011d6:	4313      	orrs	r3, r2
 80011d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f003 0301 	and.w	r3, r3, #1
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d044      	beq.n	8001270 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	2b01      	cmp	r3, #1
 80011ec:	d107      	bne.n	80011fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011ee:	4b47      	ldr	r3, [pc, #284]	@ (800130c <HAL_RCC_ClockConfig+0x1bc>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d119      	bne.n	800122e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
 80011fc:	e07f      	b.n	80012fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	2b02      	cmp	r3, #2
 8001204:	d003      	beq.n	800120e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800120a:	2b03      	cmp	r3, #3
 800120c:	d107      	bne.n	800121e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800120e:	4b3f      	ldr	r3, [pc, #252]	@ (800130c <HAL_RCC_ClockConfig+0x1bc>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001216:	2b00      	cmp	r3, #0
 8001218:	d109      	bne.n	800122e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800121a:	2301      	movs	r3, #1
 800121c:	e06f      	b.n	80012fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800121e:	4b3b      	ldr	r3, [pc, #236]	@ (800130c <HAL_RCC_ClockConfig+0x1bc>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f003 0302 	and.w	r3, r3, #2
 8001226:	2b00      	cmp	r3, #0
 8001228:	d101      	bne.n	800122e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800122a:	2301      	movs	r3, #1
 800122c:	e067      	b.n	80012fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800122e:	4b37      	ldr	r3, [pc, #220]	@ (800130c <HAL_RCC_ClockConfig+0x1bc>)
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	f023 0203 	bic.w	r2, r3, #3
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	4934      	ldr	r1, [pc, #208]	@ (800130c <HAL_RCC_ClockConfig+0x1bc>)
 800123c:	4313      	orrs	r3, r2
 800123e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001240:	f7ff fc20 	bl	8000a84 <HAL_GetTick>
 8001244:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001246:	e00a      	b.n	800125e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001248:	f7ff fc1c 	bl	8000a84 <HAL_GetTick>
 800124c:	4602      	mov	r2, r0
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	1ad3      	subs	r3, r2, r3
 8001252:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001256:	4293      	cmp	r3, r2
 8001258:	d901      	bls.n	800125e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800125a:	2303      	movs	r3, #3
 800125c:	e04f      	b.n	80012fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800125e:	4b2b      	ldr	r3, [pc, #172]	@ (800130c <HAL_RCC_ClockConfig+0x1bc>)
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	f003 020c 	and.w	r2, r3, #12
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	429a      	cmp	r2, r3
 800126e:	d1eb      	bne.n	8001248 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001270:	4b25      	ldr	r3, [pc, #148]	@ (8001308 <HAL_RCC_ClockConfig+0x1b8>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f003 0307 	and.w	r3, r3, #7
 8001278:	683a      	ldr	r2, [r7, #0]
 800127a:	429a      	cmp	r2, r3
 800127c:	d20c      	bcs.n	8001298 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800127e:	4b22      	ldr	r3, [pc, #136]	@ (8001308 <HAL_RCC_ClockConfig+0x1b8>)
 8001280:	683a      	ldr	r2, [r7, #0]
 8001282:	b2d2      	uxtb	r2, r2
 8001284:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001286:	4b20      	ldr	r3, [pc, #128]	@ (8001308 <HAL_RCC_ClockConfig+0x1b8>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f003 0307 	and.w	r3, r3, #7
 800128e:	683a      	ldr	r2, [r7, #0]
 8001290:	429a      	cmp	r2, r3
 8001292:	d001      	beq.n	8001298 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001294:	2301      	movs	r3, #1
 8001296:	e032      	b.n	80012fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f003 0304 	and.w	r3, r3, #4
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d008      	beq.n	80012b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80012a4:	4b19      	ldr	r3, [pc, #100]	@ (800130c <HAL_RCC_ClockConfig+0x1bc>)
 80012a6:	689b      	ldr	r3, [r3, #8]
 80012a8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	4916      	ldr	r1, [pc, #88]	@ (800130c <HAL_RCC_ClockConfig+0x1bc>)
 80012b2:	4313      	orrs	r3, r2
 80012b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f003 0308 	and.w	r3, r3, #8
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d009      	beq.n	80012d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80012c2:	4b12      	ldr	r3, [pc, #72]	@ (800130c <HAL_RCC_ClockConfig+0x1bc>)
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	691b      	ldr	r3, [r3, #16]
 80012ce:	00db      	lsls	r3, r3, #3
 80012d0:	490e      	ldr	r1, [pc, #56]	@ (800130c <HAL_RCC_ClockConfig+0x1bc>)
 80012d2:	4313      	orrs	r3, r2
 80012d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80012d6:	f000 f821 	bl	800131c <HAL_RCC_GetSysClockFreq>
 80012da:	4602      	mov	r2, r0
 80012dc:	4b0b      	ldr	r3, [pc, #44]	@ (800130c <HAL_RCC_ClockConfig+0x1bc>)
 80012de:	689b      	ldr	r3, [r3, #8]
 80012e0:	091b      	lsrs	r3, r3, #4
 80012e2:	f003 030f 	and.w	r3, r3, #15
 80012e6:	490a      	ldr	r1, [pc, #40]	@ (8001310 <HAL_RCC_ClockConfig+0x1c0>)
 80012e8:	5ccb      	ldrb	r3, [r1, r3]
 80012ea:	fa22 f303 	lsr.w	r3, r2, r3
 80012ee:	4a09      	ldr	r2, [pc, #36]	@ (8001314 <HAL_RCC_ClockConfig+0x1c4>)
 80012f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80012f2:	4b09      	ldr	r3, [pc, #36]	@ (8001318 <HAL_RCC_ClockConfig+0x1c8>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4618      	mov	r0, r3
 80012f8:	f7ff fa5e 	bl	80007b8 <HAL_InitTick>

  return HAL_OK;
 80012fc:	2300      	movs	r3, #0
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3710      	adds	r7, #16
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	40023c00 	.word	0x40023c00
 800130c:	40023800 	.word	0x40023800
 8001310:	08006bd4 	.word	0x08006bd4
 8001314:	20000000 	.word	0x20000000
 8001318:	20000004 	.word	0x20000004

0800131c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800131c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001320:	b090      	sub	sp, #64	@ 0x40
 8001322:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001324:	2300      	movs	r3, #0
 8001326:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8001328:	2300      	movs	r3, #0
 800132a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800132c:	2300      	movs	r3, #0
 800132e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001330:	2300      	movs	r3, #0
 8001332:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001334:	4b59      	ldr	r3, [pc, #356]	@ (800149c <HAL_RCC_GetSysClockFreq+0x180>)
 8001336:	689b      	ldr	r3, [r3, #8]
 8001338:	f003 030c 	and.w	r3, r3, #12
 800133c:	2b08      	cmp	r3, #8
 800133e:	d00d      	beq.n	800135c <HAL_RCC_GetSysClockFreq+0x40>
 8001340:	2b08      	cmp	r3, #8
 8001342:	f200 80a1 	bhi.w	8001488 <HAL_RCC_GetSysClockFreq+0x16c>
 8001346:	2b00      	cmp	r3, #0
 8001348:	d002      	beq.n	8001350 <HAL_RCC_GetSysClockFreq+0x34>
 800134a:	2b04      	cmp	r3, #4
 800134c:	d003      	beq.n	8001356 <HAL_RCC_GetSysClockFreq+0x3a>
 800134e:	e09b      	b.n	8001488 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001350:	4b53      	ldr	r3, [pc, #332]	@ (80014a0 <HAL_RCC_GetSysClockFreq+0x184>)
 8001352:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001354:	e09b      	b.n	800148e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001356:	4b53      	ldr	r3, [pc, #332]	@ (80014a4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001358:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800135a:	e098      	b.n	800148e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800135c:	4b4f      	ldr	r3, [pc, #316]	@ (800149c <HAL_RCC_GetSysClockFreq+0x180>)
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001364:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001366:	4b4d      	ldr	r3, [pc, #308]	@ (800149c <HAL_RCC_GetSysClockFreq+0x180>)
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800136e:	2b00      	cmp	r3, #0
 8001370:	d028      	beq.n	80013c4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001372:	4b4a      	ldr	r3, [pc, #296]	@ (800149c <HAL_RCC_GetSysClockFreq+0x180>)
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	099b      	lsrs	r3, r3, #6
 8001378:	2200      	movs	r2, #0
 800137a:	623b      	str	r3, [r7, #32]
 800137c:	627a      	str	r2, [r7, #36]	@ 0x24
 800137e:	6a3b      	ldr	r3, [r7, #32]
 8001380:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001384:	2100      	movs	r1, #0
 8001386:	4b47      	ldr	r3, [pc, #284]	@ (80014a4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001388:	fb03 f201 	mul.w	r2, r3, r1
 800138c:	2300      	movs	r3, #0
 800138e:	fb00 f303 	mul.w	r3, r0, r3
 8001392:	4413      	add	r3, r2
 8001394:	4a43      	ldr	r2, [pc, #268]	@ (80014a4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001396:	fba0 1202 	umull	r1, r2, r0, r2
 800139a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800139c:	460a      	mov	r2, r1
 800139e:	62ba      	str	r2, [r7, #40]	@ 0x28
 80013a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80013a2:	4413      	add	r3, r2
 80013a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80013a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80013a8:	2200      	movs	r2, #0
 80013aa:	61bb      	str	r3, [r7, #24]
 80013ac:	61fa      	str	r2, [r7, #28]
 80013ae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80013b2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80013b6:	f7fe ff55 	bl	8000264 <__aeabi_uldivmod>
 80013ba:	4602      	mov	r2, r0
 80013bc:	460b      	mov	r3, r1
 80013be:	4613      	mov	r3, r2
 80013c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80013c2:	e053      	b.n	800146c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013c4:	4b35      	ldr	r3, [pc, #212]	@ (800149c <HAL_RCC_GetSysClockFreq+0x180>)
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	099b      	lsrs	r3, r3, #6
 80013ca:	2200      	movs	r2, #0
 80013cc:	613b      	str	r3, [r7, #16]
 80013ce:	617a      	str	r2, [r7, #20]
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80013d6:	f04f 0b00 	mov.w	fp, #0
 80013da:	4652      	mov	r2, sl
 80013dc:	465b      	mov	r3, fp
 80013de:	f04f 0000 	mov.w	r0, #0
 80013e2:	f04f 0100 	mov.w	r1, #0
 80013e6:	0159      	lsls	r1, r3, #5
 80013e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80013ec:	0150      	lsls	r0, r2, #5
 80013ee:	4602      	mov	r2, r0
 80013f0:	460b      	mov	r3, r1
 80013f2:	ebb2 080a 	subs.w	r8, r2, sl
 80013f6:	eb63 090b 	sbc.w	r9, r3, fp
 80013fa:	f04f 0200 	mov.w	r2, #0
 80013fe:	f04f 0300 	mov.w	r3, #0
 8001402:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001406:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800140a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800140e:	ebb2 0408 	subs.w	r4, r2, r8
 8001412:	eb63 0509 	sbc.w	r5, r3, r9
 8001416:	f04f 0200 	mov.w	r2, #0
 800141a:	f04f 0300 	mov.w	r3, #0
 800141e:	00eb      	lsls	r3, r5, #3
 8001420:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001424:	00e2      	lsls	r2, r4, #3
 8001426:	4614      	mov	r4, r2
 8001428:	461d      	mov	r5, r3
 800142a:	eb14 030a 	adds.w	r3, r4, sl
 800142e:	603b      	str	r3, [r7, #0]
 8001430:	eb45 030b 	adc.w	r3, r5, fp
 8001434:	607b      	str	r3, [r7, #4]
 8001436:	f04f 0200 	mov.w	r2, #0
 800143a:	f04f 0300 	mov.w	r3, #0
 800143e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001442:	4629      	mov	r1, r5
 8001444:	028b      	lsls	r3, r1, #10
 8001446:	4621      	mov	r1, r4
 8001448:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800144c:	4621      	mov	r1, r4
 800144e:	028a      	lsls	r2, r1, #10
 8001450:	4610      	mov	r0, r2
 8001452:	4619      	mov	r1, r3
 8001454:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001456:	2200      	movs	r2, #0
 8001458:	60bb      	str	r3, [r7, #8]
 800145a:	60fa      	str	r2, [r7, #12]
 800145c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001460:	f7fe ff00 	bl	8000264 <__aeabi_uldivmod>
 8001464:	4602      	mov	r2, r0
 8001466:	460b      	mov	r3, r1
 8001468:	4613      	mov	r3, r2
 800146a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800146c:	4b0b      	ldr	r3, [pc, #44]	@ (800149c <HAL_RCC_GetSysClockFreq+0x180>)
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	0c1b      	lsrs	r3, r3, #16
 8001472:	f003 0303 	and.w	r3, r3, #3
 8001476:	3301      	adds	r3, #1
 8001478:	005b      	lsls	r3, r3, #1
 800147a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800147c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800147e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001480:	fbb2 f3f3 	udiv	r3, r2, r3
 8001484:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001486:	e002      	b.n	800148e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001488:	4b05      	ldr	r3, [pc, #20]	@ (80014a0 <HAL_RCC_GetSysClockFreq+0x184>)
 800148a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800148c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800148e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001490:	4618      	mov	r0, r3
 8001492:	3740      	adds	r7, #64	@ 0x40
 8001494:	46bd      	mov	sp, r7
 8001496:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800149a:	bf00      	nop
 800149c:	40023800 	.word	0x40023800
 80014a0:	00f42400 	.word	0x00f42400
 80014a4:	017d7840 	.word	0x017d7840

080014a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80014ac:	4b03      	ldr	r3, [pc, #12]	@ (80014bc <HAL_RCC_GetHCLKFreq+0x14>)
 80014ae:	681b      	ldr	r3, [r3, #0]
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	20000000 	.word	0x20000000

080014c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80014c4:	f7ff fff0 	bl	80014a8 <HAL_RCC_GetHCLKFreq>
 80014c8:	4602      	mov	r2, r0
 80014ca:	4b05      	ldr	r3, [pc, #20]	@ (80014e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80014cc:	689b      	ldr	r3, [r3, #8]
 80014ce:	0a9b      	lsrs	r3, r3, #10
 80014d0:	f003 0307 	and.w	r3, r3, #7
 80014d4:	4903      	ldr	r1, [pc, #12]	@ (80014e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80014d6:	5ccb      	ldrb	r3, [r1, r3]
 80014d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80014dc:	4618      	mov	r0, r3
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	40023800 	.word	0x40023800
 80014e4:	08006be4 	.word	0x08006be4

080014e8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	220f      	movs	r2, #15
 80014f6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80014f8:	4b12      	ldr	r3, [pc, #72]	@ (8001544 <HAL_RCC_GetClockConfig+0x5c>)
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	f003 0203 	and.w	r2, r3, #3
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001504:	4b0f      	ldr	r3, [pc, #60]	@ (8001544 <HAL_RCC_GetClockConfig+0x5c>)
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001510:	4b0c      	ldr	r3, [pc, #48]	@ (8001544 <HAL_RCC_GetClockConfig+0x5c>)
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800151c:	4b09      	ldr	r3, [pc, #36]	@ (8001544 <HAL_RCC_GetClockConfig+0x5c>)
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	08db      	lsrs	r3, r3, #3
 8001522:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800152a:	4b07      	ldr	r3, [pc, #28]	@ (8001548 <HAL_RCC_GetClockConfig+0x60>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 0207 	and.w	r2, r3, #7
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	601a      	str	r2, [r3, #0]
}
 8001536:	bf00      	nop
 8001538:	370c      	adds	r7, #12
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	40023800 	.word	0x40023800
 8001548:	40023c00 	.word	0x40023c00

0800154c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d101      	bne.n	800155e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	e041      	b.n	80015e2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001564:	b2db      	uxtb	r3, r3
 8001566:	2b00      	cmp	r3, #0
 8001568:	d106      	bne.n	8001578 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2200      	movs	r2, #0
 800156e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001572:	6878      	ldr	r0, [r7, #4]
 8001574:	f000 f839 	bl	80015ea <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2202      	movs	r2, #2
 800157c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	3304      	adds	r3, #4
 8001588:	4619      	mov	r1, r3
 800158a:	4610      	mov	r0, r2
 800158c:	f000 f9c0 	bl	8001910 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2201      	movs	r2, #1
 8001594:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2201      	movs	r2, #1
 800159c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2201      	movs	r2, #1
 80015a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2201      	movs	r2, #1
 80015ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2201      	movs	r2, #1
 80015b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2201      	movs	r2, #1
 80015bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2201      	movs	r2, #1
 80015c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2201      	movs	r2, #1
 80015cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2201      	movs	r2, #1
 80015d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2201      	movs	r2, #1
 80015dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80015e0:	2300      	movs	r3, #0
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}

080015ea <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80015ea:	b480      	push	{r7}
 80015ec:	b083      	sub	sp, #12
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80015f2:	bf00      	nop
 80015f4:	370c      	adds	r7, #12
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
	...

08001600 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001600:	b480      	push	{r7}
 8001602:	b085      	sub	sp, #20
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800160e:	b2db      	uxtb	r3, r3
 8001610:	2b01      	cmp	r3, #1
 8001612:	d001      	beq.n	8001618 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001614:	2301      	movs	r3, #1
 8001616:	e04e      	b.n	80016b6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2202      	movs	r2, #2
 800161c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	68da      	ldr	r2, [r3, #12]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f042 0201 	orr.w	r2, r2, #1
 800162e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a23      	ldr	r2, [pc, #140]	@ (80016c4 <HAL_TIM_Base_Start_IT+0xc4>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d022      	beq.n	8001680 <HAL_TIM_Base_Start_IT+0x80>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001642:	d01d      	beq.n	8001680 <HAL_TIM_Base_Start_IT+0x80>
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a1f      	ldr	r2, [pc, #124]	@ (80016c8 <HAL_TIM_Base_Start_IT+0xc8>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d018      	beq.n	8001680 <HAL_TIM_Base_Start_IT+0x80>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a1e      	ldr	r2, [pc, #120]	@ (80016cc <HAL_TIM_Base_Start_IT+0xcc>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d013      	beq.n	8001680 <HAL_TIM_Base_Start_IT+0x80>
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a1c      	ldr	r2, [pc, #112]	@ (80016d0 <HAL_TIM_Base_Start_IT+0xd0>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d00e      	beq.n	8001680 <HAL_TIM_Base_Start_IT+0x80>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a1b      	ldr	r2, [pc, #108]	@ (80016d4 <HAL_TIM_Base_Start_IT+0xd4>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d009      	beq.n	8001680 <HAL_TIM_Base_Start_IT+0x80>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a19      	ldr	r2, [pc, #100]	@ (80016d8 <HAL_TIM_Base_Start_IT+0xd8>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d004      	beq.n	8001680 <HAL_TIM_Base_Start_IT+0x80>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a18      	ldr	r2, [pc, #96]	@ (80016dc <HAL_TIM_Base_Start_IT+0xdc>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d111      	bne.n	80016a4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	689b      	ldr	r3, [r3, #8]
 8001686:	f003 0307 	and.w	r3, r3, #7
 800168a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	2b06      	cmp	r3, #6
 8001690:	d010      	beq.n	80016b4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f042 0201 	orr.w	r2, r2, #1
 80016a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80016a2:	e007      	b.n	80016b4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f042 0201 	orr.w	r2, r2, #1
 80016b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80016b4:	2300      	movs	r3, #0
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3714      	adds	r7, #20
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	40010000 	.word	0x40010000
 80016c8:	40000400 	.word	0x40000400
 80016cc:	40000800 	.word	0x40000800
 80016d0:	40000c00 	.word	0x40000c00
 80016d4:	40010400 	.word	0x40010400
 80016d8:	40014000 	.word	0x40014000
 80016dc:	40001800 	.word	0x40001800

080016e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	68db      	ldr	r3, [r3, #12]
 80016ee:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	691b      	ldr	r3, [r3, #16]
 80016f6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	f003 0302 	and.w	r3, r3, #2
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d020      	beq.n	8001744 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	f003 0302 	and.w	r3, r3, #2
 8001708:	2b00      	cmp	r3, #0
 800170a:	d01b      	beq.n	8001744 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f06f 0202 	mvn.w	r2, #2
 8001714:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2201      	movs	r2, #1
 800171a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	699b      	ldr	r3, [r3, #24]
 8001722:	f003 0303 	and.w	r3, r3, #3
 8001726:	2b00      	cmp	r3, #0
 8001728:	d003      	beq.n	8001732 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f000 f8d2 	bl	80018d4 <HAL_TIM_IC_CaptureCallback>
 8001730:	e005      	b.n	800173e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f000 f8c4 	bl	80018c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	f000 f8d5 	bl	80018e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2200      	movs	r2, #0
 8001742:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	f003 0304 	and.w	r3, r3, #4
 800174a:	2b00      	cmp	r3, #0
 800174c:	d020      	beq.n	8001790 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	f003 0304 	and.w	r3, r3, #4
 8001754:	2b00      	cmp	r3, #0
 8001756:	d01b      	beq.n	8001790 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f06f 0204 	mvn.w	r2, #4
 8001760:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2202      	movs	r2, #2
 8001766:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	699b      	ldr	r3, [r3, #24]
 800176e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001772:	2b00      	cmp	r3, #0
 8001774:	d003      	beq.n	800177e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f000 f8ac 	bl	80018d4 <HAL_TIM_IC_CaptureCallback>
 800177c:	e005      	b.n	800178a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f000 f89e 	bl	80018c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001784:	6878      	ldr	r0, [r7, #4]
 8001786:	f000 f8af 	bl	80018e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2200      	movs	r2, #0
 800178e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	f003 0308 	and.w	r3, r3, #8
 8001796:	2b00      	cmp	r3, #0
 8001798:	d020      	beq.n	80017dc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	f003 0308 	and.w	r3, r3, #8
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d01b      	beq.n	80017dc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f06f 0208 	mvn.w	r2, #8
 80017ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2204      	movs	r2, #4
 80017b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	69db      	ldr	r3, [r3, #28]
 80017ba:	f003 0303 	and.w	r3, r3, #3
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d003      	beq.n	80017ca <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f000 f886 	bl	80018d4 <HAL_TIM_IC_CaptureCallback>
 80017c8:	e005      	b.n	80017d6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	f000 f878 	bl	80018c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f000 f889 	bl	80018e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2200      	movs	r2, #0
 80017da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	f003 0310 	and.w	r3, r3, #16
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d020      	beq.n	8001828 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	f003 0310 	and.w	r3, r3, #16
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d01b      	beq.n	8001828 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f06f 0210 	mvn.w	r2, #16
 80017f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2208      	movs	r2, #8
 80017fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	69db      	ldr	r3, [r3, #28]
 8001806:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800180a:	2b00      	cmp	r3, #0
 800180c:	d003      	beq.n	8001816 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f000 f860 	bl	80018d4 <HAL_TIM_IC_CaptureCallback>
 8001814:	e005      	b.n	8001822 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f000 f852 	bl	80018c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f000 f863 	bl	80018e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2200      	movs	r2, #0
 8001826:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	f003 0301 	and.w	r3, r3, #1
 800182e:	2b00      	cmp	r3, #0
 8001830:	d00c      	beq.n	800184c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	f003 0301 	and.w	r3, r3, #1
 8001838:	2b00      	cmp	r3, #0
 800183a:	d007      	beq.n	800184c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f06f 0201 	mvn.w	r2, #1
 8001844:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	f7fe ff76 	bl	8000738 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001852:	2b00      	cmp	r3, #0
 8001854:	d00c      	beq.n	8001870 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800185c:	2b00      	cmp	r3, #0
 800185e:	d007      	beq.n	8001870 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001868:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f000 f900 	bl	8001a70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001876:	2b00      	cmp	r3, #0
 8001878:	d00c      	beq.n	8001894 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001880:	2b00      	cmp	r3, #0
 8001882:	d007      	beq.n	8001894 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800188c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	f000 f834 	bl	80018fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	f003 0320 	and.w	r3, r3, #32
 800189a:	2b00      	cmp	r3, #0
 800189c:	d00c      	beq.n	80018b8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	f003 0320 	and.w	r3, r3, #32
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d007      	beq.n	80018b8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f06f 0220 	mvn.w	r2, #32
 80018b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	f000 f8d2 	bl	8001a5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80018b8:	bf00      	nop
 80018ba:	3710      	adds	r7, #16
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}

080018c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80018c8:	bf00      	nop
 80018ca:	370c      	adds	r7, #12
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr

080018d4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80018dc:	bf00      	nop
 80018de:	370c      	adds	r7, #12
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr

080018e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80018f0:	bf00      	nop
 80018f2:	370c      	adds	r7, #12
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr

080018fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001904:	bf00      	nop
 8001906:	370c      	adds	r7, #12
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr

08001910 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001910:	b480      	push	{r7}
 8001912:	b085      	sub	sp, #20
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	4a43      	ldr	r2, [pc, #268]	@ (8001a30 <TIM_Base_SetConfig+0x120>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d013      	beq.n	8001950 <TIM_Base_SetConfig+0x40>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800192e:	d00f      	beq.n	8001950 <TIM_Base_SetConfig+0x40>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	4a40      	ldr	r2, [pc, #256]	@ (8001a34 <TIM_Base_SetConfig+0x124>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d00b      	beq.n	8001950 <TIM_Base_SetConfig+0x40>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	4a3f      	ldr	r2, [pc, #252]	@ (8001a38 <TIM_Base_SetConfig+0x128>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d007      	beq.n	8001950 <TIM_Base_SetConfig+0x40>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	4a3e      	ldr	r2, [pc, #248]	@ (8001a3c <TIM_Base_SetConfig+0x12c>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d003      	beq.n	8001950 <TIM_Base_SetConfig+0x40>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	4a3d      	ldr	r2, [pc, #244]	@ (8001a40 <TIM_Base_SetConfig+0x130>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d108      	bne.n	8001962 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001956:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	68fa      	ldr	r2, [r7, #12]
 800195e:	4313      	orrs	r3, r2
 8001960:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4a32      	ldr	r2, [pc, #200]	@ (8001a30 <TIM_Base_SetConfig+0x120>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d02b      	beq.n	80019c2 <TIM_Base_SetConfig+0xb2>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001970:	d027      	beq.n	80019c2 <TIM_Base_SetConfig+0xb2>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	4a2f      	ldr	r2, [pc, #188]	@ (8001a34 <TIM_Base_SetConfig+0x124>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d023      	beq.n	80019c2 <TIM_Base_SetConfig+0xb2>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	4a2e      	ldr	r2, [pc, #184]	@ (8001a38 <TIM_Base_SetConfig+0x128>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d01f      	beq.n	80019c2 <TIM_Base_SetConfig+0xb2>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	4a2d      	ldr	r2, [pc, #180]	@ (8001a3c <TIM_Base_SetConfig+0x12c>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d01b      	beq.n	80019c2 <TIM_Base_SetConfig+0xb2>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4a2c      	ldr	r2, [pc, #176]	@ (8001a40 <TIM_Base_SetConfig+0x130>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d017      	beq.n	80019c2 <TIM_Base_SetConfig+0xb2>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4a2b      	ldr	r2, [pc, #172]	@ (8001a44 <TIM_Base_SetConfig+0x134>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d013      	beq.n	80019c2 <TIM_Base_SetConfig+0xb2>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4a2a      	ldr	r2, [pc, #168]	@ (8001a48 <TIM_Base_SetConfig+0x138>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d00f      	beq.n	80019c2 <TIM_Base_SetConfig+0xb2>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4a29      	ldr	r2, [pc, #164]	@ (8001a4c <TIM_Base_SetConfig+0x13c>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d00b      	beq.n	80019c2 <TIM_Base_SetConfig+0xb2>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4a28      	ldr	r2, [pc, #160]	@ (8001a50 <TIM_Base_SetConfig+0x140>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d007      	beq.n	80019c2 <TIM_Base_SetConfig+0xb2>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4a27      	ldr	r2, [pc, #156]	@ (8001a54 <TIM_Base_SetConfig+0x144>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d003      	beq.n	80019c2 <TIM_Base_SetConfig+0xb2>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4a26      	ldr	r2, [pc, #152]	@ (8001a58 <TIM_Base_SetConfig+0x148>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d108      	bne.n	80019d4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80019c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	68db      	ldr	r3, [r3, #12]
 80019ce:	68fa      	ldr	r2, [r7, #12]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	695b      	ldr	r3, [r3, #20]
 80019de:	4313      	orrs	r3, r2
 80019e0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	689a      	ldr	r2, [r3, #8]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4a0e      	ldr	r2, [pc, #56]	@ (8001a30 <TIM_Base_SetConfig+0x120>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d003      	beq.n	8001a02 <TIM_Base_SetConfig+0xf2>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4a10      	ldr	r2, [pc, #64]	@ (8001a40 <TIM_Base_SetConfig+0x130>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d103      	bne.n	8001a0a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	691a      	ldr	r2, [r3, #16]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f043 0204 	orr.w	r2, r3, #4
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2201      	movs	r2, #1
 8001a1a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	68fa      	ldr	r2, [r7, #12]
 8001a20:	601a      	str	r2, [r3, #0]
}
 8001a22:	bf00      	nop
 8001a24:	3714      	adds	r7, #20
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	40010000 	.word	0x40010000
 8001a34:	40000400 	.word	0x40000400
 8001a38:	40000800 	.word	0x40000800
 8001a3c:	40000c00 	.word	0x40000c00
 8001a40:	40010400 	.word	0x40010400
 8001a44:	40014000 	.word	0x40014000
 8001a48:	40014400 	.word	0x40014400
 8001a4c:	40014800 	.word	0x40014800
 8001a50:	40001800 	.word	0x40001800
 8001a54:	40001c00 	.word	0x40001c00
 8001a58:	40002000 	.word	0x40002000

08001a5c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001a64:	bf00      	nop
 8001a66:	370c      	adds	r7, #12
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr

08001a70 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001a78:	bf00      	nop
 8001a7a:	370c      	adds	r7, #12
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr

08001a84 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	f103 0208 	add.w	r2, r3, #8
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	f04f 32ff 	mov.w	r2, #4294967295
 8001a9c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	f103 0208 	add.w	r2, r3, #8
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	f103 0208 	add.w	r2, r3, #8
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001ab8:	bf00      	nop
 8001aba:	370c      	adds	r7, #12
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr

08001ac4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001ad2:	bf00      	nop
 8001ad4:	370c      	adds	r7, #12
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr

08001ade <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8001ade:	b480      	push	{r7}
 8001ae0:	b085      	sub	sp, #20
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	6078      	str	r0, [r7, #4]
 8001ae6:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	68fa      	ldr	r2, [r7, #12]
 8001af2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	689a      	ldr	r2, [r3, #8]
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	683a      	ldr	r2, [r7, #0]
 8001b02:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	683a      	ldr	r2, [r7, #0]
 8001b08:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	687a      	ldr	r2, [r7, #4]
 8001b0e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	1c5a      	adds	r2, r3, #1
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	601a      	str	r2, [r3, #0]
}
 8001b1a:	bf00      	nop
 8001b1c:	3714      	adds	r7, #20
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr

08001b26 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8001b26:	b480      	push	{r7}
 8001b28:	b085      	sub	sp, #20
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]
 8001b2e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b3c:	d103      	bne.n	8001b46 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	691b      	ldr	r3, [r3, #16]
 8001b42:	60fb      	str	r3, [r7, #12]
 8001b44:	e00c      	b.n	8001b60 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	3308      	adds	r3, #8
 8001b4a:	60fb      	str	r3, [r7, #12]
 8001b4c:	e002      	b.n	8001b54 <vListInsert+0x2e>
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	60fb      	str	r3, [r7, #12]
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	68ba      	ldr	r2, [r7, #8]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d2f6      	bcs.n	8001b4e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	685a      	ldr	r2, [r3, #4]
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	683a      	ldr	r2, [r7, #0]
 8001b6e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	68fa      	ldr	r2, [r7, #12]
 8001b74:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	683a      	ldr	r2, [r7, #0]
 8001b7a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	1c5a      	adds	r2, r3, #1
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	601a      	str	r2, [r3, #0]
}
 8001b8c:	bf00      	nop
 8001b8e:	3714      	adds	r7, #20
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr

08001b98 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b085      	sub	sp, #20
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	691b      	ldr	r3, [r3, #16]
 8001ba4:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	687a      	ldr	r2, [r7, #4]
 8001bac:	6892      	ldr	r2, [r2, #8]
 8001bae:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	687a      	ldr	r2, [r7, #4]
 8001bb6:	6852      	ldr	r2, [r2, #4]
 8001bb8:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	687a      	ldr	r2, [r7, #4]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d103      	bne.n	8001bcc <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	689a      	ldr	r2, [r3, #8]
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	1e5a      	subs	r2, r3, #1
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3714      	adds	r7, #20
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr

08001bec <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d10b      	bne.n	8001c18 <xQueueGenericReset+0x2c>
        __asm volatile
 8001c00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001c04:	f383 8811 	msr	BASEPRI, r3
 8001c08:	f3bf 8f6f 	isb	sy
 8001c0c:	f3bf 8f4f 	dsb	sy
 8001c10:	60bb      	str	r3, [r7, #8]
    }
 8001c12:	bf00      	nop
 8001c14:	bf00      	nop
 8001c16:	e7fd      	b.n	8001c14 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8001c18:	f002 f8f8 	bl	8003e0c <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c24:	68f9      	ldr	r1, [r7, #12]
 8001c26:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8001c28:	fb01 f303 	mul.w	r3, r1, r3
 8001c2c:	441a      	add	r2, r3
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	2200      	movs	r2, #0
 8001c36:	639a      	str	r2, [r3, #56]	@ 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c48:	3b01      	subs	r3, #1
 8001c4a:	68f9      	ldr	r1, [r7, #12]
 8001c4c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8001c4e:	fb01 f303 	mul.w	r3, r1, r3
 8001c52:	441a      	add	r2, r3
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	22ff      	movs	r2, #255	@ 0xff
 8001c5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	22ff      	movs	r2, #255	@ 0xff
 8001c64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

        if( xNewQueue == pdFALSE )
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d114      	bne.n	8001c98 <xQueueGenericReset+0xac>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	691b      	ldr	r3, [r3, #16]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d01a      	beq.n	8001cac <xQueueGenericReset+0xc0>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	3310      	adds	r3, #16
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f001 f938 	bl	8002ef0 <xTaskRemoveFromEventList>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d012      	beq.n	8001cac <xQueueGenericReset+0xc0>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8001c86:	4b0d      	ldr	r3, [pc, #52]	@ (8001cbc <xQueueGenericReset+0xd0>)
 8001c88:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001c8c:	601a      	str	r2, [r3, #0]
 8001c8e:	f3bf 8f4f 	dsb	sy
 8001c92:	f3bf 8f6f 	isb	sy
 8001c96:	e009      	b.n	8001cac <xQueueGenericReset+0xc0>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	3310      	adds	r3, #16
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f7ff fef1 	bl	8001a84 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	3324      	adds	r3, #36	@ 0x24
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f7ff feec 	bl	8001a84 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8001cac:	f002 f8e0 	bl	8003e70 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8001cb0:	2301      	movs	r3, #1
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3710      	adds	r7, #16
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	e000ed04 	.word	0xe000ed04

08001cc0 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b08c      	sub	sp, #48	@ 0x30
 8001cc4:	af02      	add	r7, sp, #8
 8001cc6:	60f8      	str	r0, [r7, #12]
 8001cc8:	60b9      	str	r1, [r7, #8]
 8001cca:	4613      	mov	r3, r2
 8001ccc:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d10b      	bne.n	8001cec <xQueueGenericCreate+0x2c>
        __asm volatile
 8001cd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001cd8:	f383 8811 	msr	BASEPRI, r3
 8001cdc:	f3bf 8f6f 	isb	sy
 8001ce0:	f3bf 8f4f 	dsb	sy
 8001ce4:	61bb      	str	r3, [r7, #24]
    }
 8001ce6:	bf00      	nop
 8001ce8:	bf00      	nop
 8001cea:	e7fd      	b.n	8001ce8 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	68ba      	ldr	r2, [r7, #8]
 8001cf0:	fb02 f303 	mul.w	r3, r2, r3
 8001cf4:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d006      	beq.n	8001d0a <xQueueGenericCreate+0x4a>
 8001cfc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d04:	68fa      	ldr	r2, [r7, #12]
 8001d06:	429a      	cmp	r2, r3
 8001d08:	d101      	bne.n	8001d0e <xQueueGenericCreate+0x4e>
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e000      	b.n	8001d10 <xQueueGenericCreate+0x50>
 8001d0e:	2300      	movs	r3, #0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d10b      	bne.n	8001d2c <xQueueGenericCreate+0x6c>
        __asm volatile
 8001d14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d18:	f383 8811 	msr	BASEPRI, r3
 8001d1c:	f3bf 8f6f 	isb	sy
 8001d20:	f3bf 8f4f 	dsb	sy
 8001d24:	617b      	str	r3, [r7, #20]
    }
 8001d26:	bf00      	nop
 8001d28:	bf00      	nop
 8001d2a:	e7fd      	b.n	8001d28 <xQueueGenericCreate+0x68>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8001d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d2e:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 8001d32:	d90b      	bls.n	8001d4c <xQueueGenericCreate+0x8c>
        __asm volatile
 8001d34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d38:	f383 8811 	msr	BASEPRI, r3
 8001d3c:	f3bf 8f6f 	isb	sy
 8001d40:	f3bf 8f4f 	dsb	sy
 8001d44:	613b      	str	r3, [r7, #16]
    }
 8001d46:	bf00      	nop
 8001d48:	bf00      	nop
 8001d4a:	e7fd      	b.n	8001d48 <xQueueGenericCreate+0x88>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8001d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d4e:	3350      	adds	r3, #80	@ 0x50
 8001d50:	4618      	mov	r0, r3
 8001d52:	f002 f98d 	bl	8004070 <pvPortMalloc>
 8001d56:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8001d58:	6a3b      	ldr	r3, [r7, #32]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d00d      	beq.n	8001d7a <xQueueGenericCreate+0xba>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8001d5e:	6a3b      	ldr	r3, [r7, #32]
 8001d60:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	3350      	adds	r3, #80	@ 0x50
 8001d66:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001d68:	79fa      	ldrb	r2, [r7, #7]
 8001d6a:	6a3b      	ldr	r3, [r7, #32]
 8001d6c:	9300      	str	r3, [sp, #0]
 8001d6e:	4613      	mov	r3, r2
 8001d70:	69fa      	ldr	r2, [r7, #28]
 8001d72:	68b9      	ldr	r1, [r7, #8]
 8001d74:	68f8      	ldr	r0, [r7, #12]
 8001d76:	f000 f805 	bl	8001d84 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8001d7a:	6a3b      	ldr	r3, [r7, #32]
    }
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3728      	adds	r7, #40	@ 0x28
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}

08001d84 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b084      	sub	sp, #16
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	60f8      	str	r0, [r7, #12]
 8001d8c:	60b9      	str	r1, [r7, #8]
 8001d8e:	607a      	str	r2, [r7, #4]
 8001d90:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d103      	bne.n	8001da0 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001d98:	69bb      	ldr	r3, [r7, #24]
 8001d9a:	69ba      	ldr	r2, [r7, #24]
 8001d9c:	601a      	str	r2, [r3, #0]
 8001d9e:	e002      	b.n	8001da6 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001da0:	69bb      	ldr	r3, [r7, #24]
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8001da6:	69bb      	ldr	r3, [r7, #24]
 8001da8:	68fa      	ldr	r2, [r7, #12]
 8001daa:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8001dac:	69bb      	ldr	r3, [r7, #24]
 8001dae:	68ba      	ldr	r2, [r7, #8]
 8001db0:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001db2:	2101      	movs	r1, #1
 8001db4:	69b8      	ldr	r0, [r7, #24]
 8001db6:	f7ff ff19 	bl	8001bec <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8001dba:	69bb      	ldr	r3, [r7, #24]
 8001dbc:	78fa      	ldrb	r2, [r7, #3]
 8001dbe:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8001dc2:	78fb      	ldrb	r3, [r7, #3]
 8001dc4:	68ba      	ldr	r2, [r7, #8]
 8001dc6:	68f9      	ldr	r1, [r7, #12]
 8001dc8:	2073      	movs	r0, #115	@ 0x73
 8001dca:	f003 fac7 	bl	800535c <SEGGER_SYSVIEW_RecordU32x3>
}
 8001dce:	bf00      	nop
 8001dd0:	3710      	adds	r7, #16
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
	...

08001dd8 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b090      	sub	sp, #64	@ 0x40
 8001ddc:	af02      	add	r7, sp, #8
 8001dde:	60f8      	str	r0, [r7, #12]
 8001de0:	60b9      	str	r1, [r7, #8]
 8001de2:	607a      	str	r2, [r7, #4]
 8001de4:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001de6:	2300      	movs	r3, #0
 8001de8:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	633b      	str	r3, [r7, #48]	@ 0x30

    configASSERT( pxQueue );
 8001dee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d10b      	bne.n	8001e0c <xQueueGenericSend+0x34>
        __asm volatile
 8001df4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001df8:	f383 8811 	msr	BASEPRI, r3
 8001dfc:	f3bf 8f6f 	isb	sy
 8001e00:	f3bf 8f4f 	dsb	sy
 8001e04:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8001e06:	bf00      	nop
 8001e08:	bf00      	nop
 8001e0a:	e7fd      	b.n	8001e08 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d103      	bne.n	8001e1a <xQueueGenericSend+0x42>
 8001e12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d101      	bne.n	8001e1e <xQueueGenericSend+0x46>
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e000      	b.n	8001e20 <xQueueGenericSend+0x48>
 8001e1e:	2300      	movs	r3, #0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d10b      	bne.n	8001e3c <xQueueGenericSend+0x64>
        __asm volatile
 8001e24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e28:	f383 8811 	msr	BASEPRI, r3
 8001e2c:	f3bf 8f6f 	isb	sy
 8001e30:	f3bf 8f4f 	dsb	sy
 8001e34:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8001e36:	bf00      	nop
 8001e38:	bf00      	nop
 8001e3a:	e7fd      	b.n	8001e38 <xQueueGenericSend+0x60>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	2b02      	cmp	r3, #2
 8001e40:	d103      	bne.n	8001e4a <xQueueGenericSend+0x72>
 8001e42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d101      	bne.n	8001e4e <xQueueGenericSend+0x76>
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e000      	b.n	8001e50 <xQueueGenericSend+0x78>
 8001e4e:	2300      	movs	r3, #0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d10b      	bne.n	8001e6c <xQueueGenericSend+0x94>
        __asm volatile
 8001e54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e58:	f383 8811 	msr	BASEPRI, r3
 8001e5c:	f3bf 8f6f 	isb	sy
 8001e60:	f3bf 8f4f 	dsb	sy
 8001e64:	623b      	str	r3, [r7, #32]
    }
 8001e66:	bf00      	nop
 8001e68:	bf00      	nop
 8001e6a:	e7fd      	b.n	8001e68 <xQueueGenericSend+0x90>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001e6c:	f001 f9e4 	bl	8003238 <xTaskGetSchedulerState>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d102      	bne.n	8001e7c <xQueueGenericSend+0xa4>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d101      	bne.n	8001e80 <xQueueGenericSend+0xa8>
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e000      	b.n	8001e82 <xQueueGenericSend+0xaa>
 8001e80:	2300      	movs	r3, #0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d10b      	bne.n	8001e9e <xQueueGenericSend+0xc6>
        __asm volatile
 8001e86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e8a:	f383 8811 	msr	BASEPRI, r3
 8001e8e:	f3bf 8f6f 	isb	sy
 8001e92:	f3bf 8f4f 	dsb	sy
 8001e96:	61fb      	str	r3, [r7, #28]
    }
 8001e98:	bf00      	nop
 8001e9a:	bf00      	nop
 8001e9c:	e7fd      	b.n	8001e9a <xQueueGenericSend+0xc2>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8001e9e:	f001 ffb5 	bl	8003e0c <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001ea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ea4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001ea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ea8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d302      	bcc.n	8001eb4 <xQueueGenericSend+0xdc>
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d136      	bne.n	8001f22 <xQueueGenericSend+0x14a>
            {
                traceQUEUE_SEND( pxQueue );
 8001eb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f003 ffdc 	bl	8005e74 <SEGGER_SYSVIEW_ShrinkId>
 8001ebc:	68ba      	ldr	r2, [r7, #8]
 8001ebe:	6879      	ldr	r1, [r7, #4]
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	9300      	str	r3, [sp, #0]
 8001ec4:	460b      	mov	r3, r1
 8001ec6:	4601      	mov	r1, r0
 8001ec8:	205a      	movs	r0, #90	@ 0x5a
 8001eca:	f003 fabd 	bl	8005448 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001ece:	683a      	ldr	r2, [r7, #0]
 8001ed0:	68b9      	ldr	r1, [r7, #8]
 8001ed2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001ed4:	f000 fa80 	bl	80023d8 <prvCopyDataToQueue>
 8001ed8:	62f8      	str	r0, [r7, #44]	@ 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001eda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001edc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d010      	beq.n	8001f04 <xQueueGenericSend+0x12c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001ee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ee4:	3324      	adds	r3, #36	@ 0x24
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f001 f802 	bl	8002ef0 <xTaskRemoveFromEventList>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d013      	beq.n	8001f1a <xQueueGenericSend+0x142>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8001ef2:	4b4d      	ldr	r3, [pc, #308]	@ (8002028 <xQueueGenericSend+0x250>)
 8001ef4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001ef8:	601a      	str	r2, [r3, #0]
 8001efa:	f3bf 8f4f 	dsb	sy
 8001efe:	f3bf 8f6f 	isb	sy
 8001f02:	e00a      	b.n	8001f1a <xQueueGenericSend+0x142>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8001f04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d007      	beq.n	8001f1a <xQueueGenericSend+0x142>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8001f0a:	4b47      	ldr	r3, [pc, #284]	@ (8002028 <xQueueGenericSend+0x250>)
 8001f0c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001f10:	601a      	str	r2, [r3, #0]
 8001f12:	f3bf 8f4f 	dsb	sy
 8001f16:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8001f1a:	f001 ffa9 	bl	8003e70 <vPortExitCritical>
                return pdPASS;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e07d      	b.n	800201e <xQueueGenericSend+0x246>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d110      	bne.n	8001f4a <xQueueGenericSend+0x172>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8001f28:	f001 ffa2 	bl	8003e70 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 8001f2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f003 ffa0 	bl	8005e74 <SEGGER_SYSVIEW_ShrinkId>
 8001f34:	68ba      	ldr	r2, [r7, #8]
 8001f36:	6879      	ldr	r1, [r7, #4]
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	9300      	str	r3, [sp, #0]
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	4601      	mov	r1, r0
 8001f40:	205a      	movs	r0, #90	@ 0x5a
 8001f42:	f003 fa81 	bl	8005448 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 8001f46:	2300      	movs	r3, #0
 8001f48:	e069      	b.n	800201e <xQueueGenericSend+0x246>
                }
                else if( xEntryTimeSet == pdFALSE )
 8001f4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d106      	bne.n	8001f5e <xQueueGenericSend+0x186>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8001f50:	f107 0314 	add.w	r3, r7, #20
 8001f54:	4618      	mov	r0, r3
 8001f56:	f001 f833 	bl	8002fc0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8001f5e:	f001 ff87 	bl	8003e70 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8001f62:	f000 fd75 	bl	8002a50 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8001f66:	f001 ff51 	bl	8003e0c <vPortEnterCritical>
 8001f6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f6c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001f70:	b25b      	sxtb	r3, r3
 8001f72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f76:	d103      	bne.n	8001f80 <xQueueGenericSend+0x1a8>
 8001f78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001f80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f82:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001f86:	b25b      	sxtb	r3, r3
 8001f88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f8c:	d103      	bne.n	8001f96 <xQueueGenericSend+0x1be>
 8001f8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f90:	2200      	movs	r2, #0
 8001f92:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001f96:	f001 ff6b 	bl	8003e70 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001f9a:	1d3a      	adds	r2, r7, #4
 8001f9c:	f107 0314 	add.w	r3, r7, #20
 8001fa0:	4611      	mov	r1, r2
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f001 f822 	bl	8002fec <xTaskCheckForTimeOut>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d124      	bne.n	8001ff8 <xQueueGenericSend+0x220>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001fae:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001fb0:	f000 fb0a 	bl	80025c8 <prvIsQueueFull>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d018      	beq.n	8001fec <xQueueGenericSend+0x214>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001fba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fbc:	3310      	adds	r3, #16
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	4611      	mov	r1, r2
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f000 ff3e 	bl	8002e44 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8001fc8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001fca:	f000 fa95 	bl	80024f8 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8001fce:	f000 fd4d 	bl	8002a6c <xTaskResumeAll>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	f47f af62 	bne.w	8001e9e <xQueueGenericSend+0xc6>
                {
                    portYIELD_WITHIN_API();
 8001fda:	4b13      	ldr	r3, [pc, #76]	@ (8002028 <xQueueGenericSend+0x250>)
 8001fdc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001fe0:	601a      	str	r2, [r3, #0]
 8001fe2:	f3bf 8f4f 	dsb	sy
 8001fe6:	f3bf 8f6f 	isb	sy
 8001fea:	e758      	b.n	8001e9e <xQueueGenericSend+0xc6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8001fec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001fee:	f000 fa83 	bl	80024f8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8001ff2:	f000 fd3b 	bl	8002a6c <xTaskResumeAll>
 8001ff6:	e752      	b.n	8001e9e <xQueueGenericSend+0xc6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8001ff8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001ffa:	f000 fa7d 	bl	80024f8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8001ffe:	f000 fd35 	bl	8002a6c <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 8002002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002004:	4618      	mov	r0, r3
 8002006:	f003 ff35 	bl	8005e74 <SEGGER_SYSVIEW_ShrinkId>
 800200a:	68ba      	ldr	r2, [r7, #8]
 800200c:	6879      	ldr	r1, [r7, #4]
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	9300      	str	r3, [sp, #0]
 8002012:	460b      	mov	r3, r1
 8002014:	4601      	mov	r1, r0
 8002016:	205a      	movs	r0, #90	@ 0x5a
 8002018:	f003 fa16 	bl	8005448 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 800201c:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 800201e:	4618      	mov	r0, r3
 8002020:	3738      	adds	r7, #56	@ 0x38
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	e000ed04 	.word	0xe000ed04

0800202c <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b090      	sub	sp, #64	@ 0x40
 8002030:	af00      	add	r7, sp, #0
 8002032:	60f8      	str	r0, [r7, #12]
 8002034:	60b9      	str	r1, [r7, #8]
 8002036:	607a      	str	r2, [r7, #4]
 8002038:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	63bb      	str	r3, [r7, #56]	@ 0x38

    configASSERT( pxQueue );
 800203e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002040:	2b00      	cmp	r3, #0
 8002042:	d10b      	bne.n	800205c <xQueueGenericSendFromISR+0x30>
        __asm volatile
 8002044:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002048:	f383 8811 	msr	BASEPRI, r3
 800204c:	f3bf 8f6f 	isb	sy
 8002050:	f3bf 8f4f 	dsb	sy
 8002054:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8002056:	bf00      	nop
 8002058:	bf00      	nop
 800205a:	e7fd      	b.n	8002058 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d103      	bne.n	800206a <xQueueGenericSendFromISR+0x3e>
 8002062:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002066:	2b00      	cmp	r3, #0
 8002068:	d101      	bne.n	800206e <xQueueGenericSendFromISR+0x42>
 800206a:	2301      	movs	r3, #1
 800206c:	e000      	b.n	8002070 <xQueueGenericSendFromISR+0x44>
 800206e:	2300      	movs	r3, #0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d10b      	bne.n	800208c <xQueueGenericSendFromISR+0x60>
        __asm volatile
 8002074:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002078:	f383 8811 	msr	BASEPRI, r3
 800207c:	f3bf 8f6f 	isb	sy
 8002080:	f3bf 8f4f 	dsb	sy
 8002084:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8002086:	bf00      	nop
 8002088:	bf00      	nop
 800208a:	e7fd      	b.n	8002088 <xQueueGenericSendFromISR+0x5c>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	2b02      	cmp	r3, #2
 8002090:	d103      	bne.n	800209a <xQueueGenericSendFromISR+0x6e>
 8002092:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002094:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002096:	2b01      	cmp	r3, #1
 8002098:	d101      	bne.n	800209e <xQueueGenericSendFromISR+0x72>
 800209a:	2301      	movs	r3, #1
 800209c:	e000      	b.n	80020a0 <xQueueGenericSendFromISR+0x74>
 800209e:	2300      	movs	r3, #0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d10b      	bne.n	80020bc <xQueueGenericSendFromISR+0x90>
        __asm volatile
 80020a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80020a8:	f383 8811 	msr	BASEPRI, r3
 80020ac:	f3bf 8f6f 	isb	sy
 80020b0:	f3bf 8f4f 	dsb	sy
 80020b4:	623b      	str	r3, [r7, #32]
    }
 80020b6:	bf00      	nop
 80020b8:	bf00      	nop
 80020ba:	e7fd      	b.n	80020b8 <xQueueGenericSendFromISR+0x8c>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80020bc:	f001 ff96 	bl	8003fec <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 80020c0:	f3ef 8211 	mrs	r2, BASEPRI
 80020c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80020c8:	f383 8811 	msr	BASEPRI, r3
 80020cc:	f3bf 8f6f 	isb	sy
 80020d0:	f3bf 8f4f 	dsb	sy
 80020d4:	61fa      	str	r2, [r7, #28]
 80020d6:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 80020d8:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80020da:	637b      	str	r3, [r7, #52]	@ 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80020dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80020e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d302      	bcc.n	80020ee <xQueueGenericSendFromISR+0xc2>
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	2b02      	cmp	r3, #2
 80020ec:	d149      	bne.n	8002182 <xQueueGenericSendFromISR+0x156>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 80020ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020f0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80020f4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80020f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020fc:	62fb      	str	r3, [r7, #44]	@ 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 80020fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002100:	4618      	mov	r0, r3
 8002102:	f003 feb7 	bl	8005e74 <SEGGER_SYSVIEW_ShrinkId>
 8002106:	4601      	mov	r1, r0
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	461a      	mov	r2, r3
 800210c:	2060      	movs	r0, #96	@ 0x60
 800210e:	f003 f8cb 	bl	80052a8 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002112:	683a      	ldr	r2, [r7, #0]
 8002114:	68b9      	ldr	r1, [r7, #8]
 8002116:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002118:	f000 f95e 	bl	80023d8 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 800211c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8002120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002124:	d112      	bne.n	800214c <xQueueGenericSendFromISR+0x120>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002126:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002128:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800212a:	2b00      	cmp	r3, #0
 800212c:	d026      	beq.n	800217c <xQueueGenericSendFromISR+0x150>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800212e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002130:	3324      	adds	r3, #36	@ 0x24
 8002132:	4618      	mov	r0, r3
 8002134:	f000 fedc 	bl	8002ef0 <xTaskRemoveFromEventList>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d01e      	beq.n	800217c <xQueueGenericSendFromISR+0x150>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d01b      	beq.n	800217c <xQueueGenericSendFromISR+0x150>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2201      	movs	r2, #1
 8002148:	601a      	str	r2, [r3, #0]
 800214a:	e017      	b.n	800217c <xQueueGenericSendFromISR+0x150>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 800214c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8002150:	2b7f      	cmp	r3, #127	@ 0x7f
 8002152:	d10b      	bne.n	800216c <xQueueGenericSendFromISR+0x140>
        __asm volatile
 8002154:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002158:	f383 8811 	msr	BASEPRI, r3
 800215c:	f3bf 8f6f 	isb	sy
 8002160:	f3bf 8f4f 	dsb	sy
 8002164:	617b      	str	r3, [r7, #20]
    }
 8002166:	bf00      	nop
 8002168:	bf00      	nop
 800216a:	e7fd      	b.n	8002168 <xQueueGenericSendFromISR+0x13c>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800216c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002170:	3301      	adds	r3, #1
 8002172:	b2db      	uxtb	r3, r3
 8002174:	b25a      	sxtb	r2, r3
 8002176:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002178:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 800217c:	2301      	movs	r3, #1
 800217e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        {
 8002180:	e00b      	b.n	800219a <xQueueGenericSendFromISR+0x16e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8002182:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002184:	4618      	mov	r0, r3
 8002186:	f003 fe75 	bl	8005e74 <SEGGER_SYSVIEW_ShrinkId>
 800218a:	4601      	mov	r1, r0
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	461a      	mov	r2, r3
 8002190:	2060      	movs	r0, #96	@ 0x60
 8002192:	f003 f889 	bl	80052a8 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 8002196:	2300      	movs	r3, #0
 8002198:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800219a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800219c:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80021a4:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80021a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3740      	adds	r7, #64	@ 0x40
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}

080021b0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80021b0:	b590      	push	{r4, r7, lr}
 80021b2:	b08f      	sub	sp, #60	@ 0x3c
 80021b4:	af02      	add	r7, sp, #8
 80021b6:	60f8      	str	r0, [r7, #12]
 80021b8:	60b9      	str	r1, [r7, #8]
 80021ba:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80021bc:	2300      	movs	r3, #0
 80021be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80021c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d10b      	bne.n	80021e2 <xQueueReceive+0x32>
        __asm volatile
 80021ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021ce:	f383 8811 	msr	BASEPRI, r3
 80021d2:	f3bf 8f6f 	isb	sy
 80021d6:	f3bf 8f4f 	dsb	sy
 80021da:	623b      	str	r3, [r7, #32]
    }
 80021dc:	bf00      	nop
 80021de:	bf00      	nop
 80021e0:	e7fd      	b.n	80021de <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d103      	bne.n	80021f0 <xQueueReceive+0x40>
 80021e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d101      	bne.n	80021f4 <xQueueReceive+0x44>
 80021f0:	2301      	movs	r3, #1
 80021f2:	e000      	b.n	80021f6 <xQueueReceive+0x46>
 80021f4:	2300      	movs	r3, #0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d10b      	bne.n	8002212 <xQueueReceive+0x62>
        __asm volatile
 80021fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021fe:	f383 8811 	msr	BASEPRI, r3
 8002202:	f3bf 8f6f 	isb	sy
 8002206:	f3bf 8f4f 	dsb	sy
 800220a:	61fb      	str	r3, [r7, #28]
    }
 800220c:	bf00      	nop
 800220e:	bf00      	nop
 8002210:	e7fd      	b.n	800220e <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002212:	f001 f811 	bl	8003238 <xTaskGetSchedulerState>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d102      	bne.n	8002222 <xQueueReceive+0x72>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d101      	bne.n	8002226 <xQueueReceive+0x76>
 8002222:	2301      	movs	r3, #1
 8002224:	e000      	b.n	8002228 <xQueueReceive+0x78>
 8002226:	2300      	movs	r3, #0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d10b      	bne.n	8002244 <xQueueReceive+0x94>
        __asm volatile
 800222c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002230:	f383 8811 	msr	BASEPRI, r3
 8002234:	f3bf 8f6f 	isb	sy
 8002238:	f3bf 8f4f 	dsb	sy
 800223c:	61bb      	str	r3, [r7, #24]
    }
 800223e:	bf00      	nop
 8002240:	bf00      	nop
 8002242:	e7fd      	b.n	8002240 <xQueueReceive+0x90>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002244:	f001 fde2 	bl	8003e0c <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002248:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800224a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800224c:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800224e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002250:	2b00      	cmp	r3, #0
 8002252:	d02f      	beq.n	80022b4 <xQueueReceive+0x104>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002254:	68b9      	ldr	r1, [r7, #8]
 8002256:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002258:	f000 f928 	bl	80024ac <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 800225c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800225e:	4618      	mov	r0, r3
 8002260:	f003 fe08 	bl	8005e74 <SEGGER_SYSVIEW_ShrinkId>
 8002264:	4604      	mov	r4, r0
 8002266:	2000      	movs	r0, #0
 8002268:	f003 fe04 	bl	8005e74 <SEGGER_SYSVIEW_ShrinkId>
 800226c:	4602      	mov	r2, r0
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2101      	movs	r1, #1
 8002272:	9100      	str	r1, [sp, #0]
 8002274:	4621      	mov	r1, r4
 8002276:	205c      	movs	r0, #92	@ 0x5c
 8002278:	f003 f8e6 	bl	8005448 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800227c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800227e:	1e5a      	subs	r2, r3, #1
 8002280:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002282:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002284:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002286:	691b      	ldr	r3, [r3, #16]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d00f      	beq.n	80022ac <xQueueReceive+0xfc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800228c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800228e:	3310      	adds	r3, #16
 8002290:	4618      	mov	r0, r3
 8002292:	f000 fe2d 	bl	8002ef0 <xTaskRemoveFromEventList>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d007      	beq.n	80022ac <xQueueReceive+0xfc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800229c:	4b4d      	ldr	r3, [pc, #308]	@ (80023d4 <xQueueReceive+0x224>)
 800229e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80022a2:	601a      	str	r2, [r3, #0]
 80022a4:	f3bf 8f4f 	dsb	sy
 80022a8:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80022ac:	f001 fde0 	bl	8003e70 <vPortExitCritical>
                return pdPASS;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e08a      	b.n	80023ca <xQueueReceive+0x21a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d113      	bne.n	80022e2 <xQueueReceive+0x132>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80022ba:	f001 fdd9 	bl	8003e70 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 80022be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022c0:	4618      	mov	r0, r3
 80022c2:	f003 fdd7 	bl	8005e74 <SEGGER_SYSVIEW_ShrinkId>
 80022c6:	4604      	mov	r4, r0
 80022c8:	2000      	movs	r0, #0
 80022ca:	f003 fdd3 	bl	8005e74 <SEGGER_SYSVIEW_ShrinkId>
 80022ce:	4602      	mov	r2, r0
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2101      	movs	r1, #1
 80022d4:	9100      	str	r1, [sp, #0]
 80022d6:	4621      	mov	r1, r4
 80022d8:	205c      	movs	r0, #92	@ 0x5c
 80022da:	f003 f8b5 	bl	8005448 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 80022de:	2300      	movs	r3, #0
 80022e0:	e073      	b.n	80023ca <xQueueReceive+0x21a>
                }
                else if( xEntryTimeSet == pdFALSE )
 80022e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d106      	bne.n	80022f6 <xQueueReceive+0x146>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80022e8:	f107 0310 	add.w	r3, r7, #16
 80022ec:	4618      	mov	r0, r3
 80022ee:	f000 fe67 	bl	8002fc0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80022f2:	2301      	movs	r3, #1
 80022f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80022f6:	f001 fdbb 	bl	8003e70 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80022fa:	f000 fba9 	bl	8002a50 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80022fe:	f001 fd85 	bl	8003e0c <vPortEnterCritical>
 8002302:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002304:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002308:	b25b      	sxtb	r3, r3
 800230a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800230e:	d103      	bne.n	8002318 <xQueueReceive+0x168>
 8002310:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002312:	2200      	movs	r2, #0
 8002314:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002318:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800231a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800231e:	b25b      	sxtb	r3, r3
 8002320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002324:	d103      	bne.n	800232e <xQueueReceive+0x17e>
 8002326:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002328:	2200      	movs	r2, #0
 800232a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800232e:	f001 fd9f 	bl	8003e70 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002332:	1d3a      	adds	r2, r7, #4
 8002334:	f107 0310 	add.w	r3, r7, #16
 8002338:	4611      	mov	r1, r2
 800233a:	4618      	mov	r0, r3
 800233c:	f000 fe56 	bl	8002fec <xTaskCheckForTimeOut>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d124      	bne.n	8002390 <xQueueReceive+0x1e0>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002346:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002348:	f000 f928 	bl	800259c <prvIsQueueEmpty>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d018      	beq.n	8002384 <xQueueReceive+0x1d4>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002352:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002354:	3324      	adds	r3, #36	@ 0x24
 8002356:	687a      	ldr	r2, [r7, #4]
 8002358:	4611      	mov	r1, r2
 800235a:	4618      	mov	r0, r3
 800235c:	f000 fd72 	bl	8002e44 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002360:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002362:	f000 f8c9 	bl	80024f8 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002366:	f000 fb81 	bl	8002a6c <xTaskResumeAll>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	f47f af69 	bne.w	8002244 <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
 8002372:	4b18      	ldr	r3, [pc, #96]	@ (80023d4 <xQueueReceive+0x224>)
 8002374:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002378:	601a      	str	r2, [r3, #0]
 800237a:	f3bf 8f4f 	dsb	sy
 800237e:	f3bf 8f6f 	isb	sy
 8002382:	e75f      	b.n	8002244 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002384:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002386:	f000 f8b7 	bl	80024f8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800238a:	f000 fb6f 	bl	8002a6c <xTaskResumeAll>
 800238e:	e759      	b.n	8002244 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002390:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002392:	f000 f8b1 	bl	80024f8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002396:	f000 fb69 	bl	8002a6c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800239a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800239c:	f000 f8fe 	bl	800259c <prvIsQueueEmpty>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	f43f af4e 	beq.w	8002244 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 80023a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023aa:	4618      	mov	r0, r3
 80023ac:	f003 fd62 	bl	8005e74 <SEGGER_SYSVIEW_ShrinkId>
 80023b0:	4604      	mov	r4, r0
 80023b2:	2000      	movs	r0, #0
 80023b4:	f003 fd5e 	bl	8005e74 <SEGGER_SYSVIEW_ShrinkId>
 80023b8:	4602      	mov	r2, r0
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2101      	movs	r1, #1
 80023be:	9100      	str	r1, [sp, #0]
 80023c0:	4621      	mov	r1, r4
 80023c2:	205c      	movs	r0, #92	@ 0x5c
 80023c4:	f003 f840 	bl	8005448 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 80023c8:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3734      	adds	r7, #52	@ 0x34
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd90      	pop	{r4, r7, pc}
 80023d2:	bf00      	nop
 80023d4:	e000ed04 	.word	0xe000ed04

080023d8 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b086      	sub	sp, #24
 80023dc:	af00      	add	r7, sp, #0
 80023de:	60f8      	str	r0, [r7, #12]
 80023e0:	60b9      	str	r1, [r7, #8]
 80023e2:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80023e4:	2300      	movs	r3, #0
 80023e6:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023ec:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d10d      	bne.n	8002412 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d14d      	bne.n	800249a <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	4618      	mov	r0, r3
 8002404:	f000 ff36 	bl	8003274 <xTaskPriorityDisinherit>
 8002408:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2200      	movs	r2, #0
 800240e:	609a      	str	r2, [r3, #8]
 8002410:	e043      	b.n	800249a <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d119      	bne.n	800244c <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	6858      	ldr	r0, [r3, #4]
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002420:	461a      	mov	r2, r3
 8002422:	68b9      	ldr	r1, [r7, #8]
 8002424:	f004 f8eb 	bl	80065fe <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	685a      	ldr	r2, [r3, #4]
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002430:	441a      	add	r2, r3
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	685a      	ldr	r2, [r3, #4]
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	429a      	cmp	r2, r3
 8002440:	d32b      	bcc.n	800249a <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	605a      	str	r2, [r3, #4]
 800244a:	e026      	b.n	800249a <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	68d8      	ldr	r0, [r3, #12]
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002454:	461a      	mov	r2, r3
 8002456:	68b9      	ldr	r1, [r7, #8]
 8002458:	f004 f8d1 	bl	80065fe <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	68da      	ldr	r2, [r3, #12]
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002464:	425b      	negs	r3, r3
 8002466:	441a      	add	r2, r3
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	68da      	ldr	r2, [r3, #12]
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	429a      	cmp	r2, r3
 8002476:	d207      	bcs.n	8002488 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	689a      	ldr	r2, [r3, #8]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002480:	425b      	negs	r3, r3
 8002482:	441a      	add	r2, r3
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2b02      	cmp	r3, #2
 800248c:	d105      	bne.n	800249a <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d002      	beq.n	800249a <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	3b01      	subs	r3, #1
 8002498:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	1c5a      	adds	r2, r3, #1
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 80024a2:	697b      	ldr	r3, [r7, #20]
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3718      	adds	r7, #24
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}

080024ac <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d018      	beq.n	80024f0 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	68da      	ldr	r2, [r3, #12]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024c6:	441a      	add	r2, r3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	68da      	ldr	r2, [r3, #12]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d303      	bcc.n	80024e0 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	68d9      	ldr	r1, [r3, #12]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024e8:	461a      	mov	r2, r3
 80024ea:	6838      	ldr	r0, [r7, #0]
 80024ec:	f004 f887 	bl	80065fe <memcpy>
    }
}
 80024f0:	bf00      	nop
 80024f2:	3708      	adds	r7, #8
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}

080024f8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002500:	f001 fc84 	bl	8003e0c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800250a:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800250c:	e011      	b.n	8002532 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002512:	2b00      	cmp	r3, #0
 8002514:	d012      	beq.n	800253c <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	3324      	adds	r3, #36	@ 0x24
 800251a:	4618      	mov	r0, r3
 800251c:	f000 fce8 	bl	8002ef0 <xTaskRemoveFromEventList>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d001      	beq.n	800252a <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8002526:	f000 fdc9 	bl	80030bc <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800252a:	7bfb      	ldrb	r3, [r7, #15]
 800252c:	3b01      	subs	r3, #1
 800252e:	b2db      	uxtb	r3, r3
 8002530:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002532:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002536:	2b00      	cmp	r3, #0
 8002538:	dce9      	bgt.n	800250e <prvUnlockQueue+0x16>
 800253a:	e000      	b.n	800253e <prvUnlockQueue+0x46>
                        break;
 800253c:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	22ff      	movs	r2, #255	@ 0xff
 8002542:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8002546:	f001 fc93 	bl	8003e70 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800254a:	f001 fc5f 	bl	8003e0c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002554:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002556:	e011      	b.n	800257c <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	691b      	ldr	r3, [r3, #16]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d012      	beq.n	8002586 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	3310      	adds	r3, #16
 8002564:	4618      	mov	r0, r3
 8002566:	f000 fcc3 	bl	8002ef0 <xTaskRemoveFromEventList>
 800256a:	4603      	mov	r3, r0
 800256c:	2b00      	cmp	r3, #0
 800256e:	d001      	beq.n	8002574 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002570:	f000 fda4 	bl	80030bc <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002574:	7bbb      	ldrb	r3, [r7, #14]
 8002576:	3b01      	subs	r3, #1
 8002578:	b2db      	uxtb	r3, r3
 800257a:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800257c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002580:	2b00      	cmp	r3, #0
 8002582:	dce9      	bgt.n	8002558 <prvUnlockQueue+0x60>
 8002584:	e000      	b.n	8002588 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002586:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	22ff      	movs	r2, #255	@ 0xff
 800258c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8002590:	f001 fc6e 	bl	8003e70 <vPortExitCritical>
}
 8002594:	bf00      	nop
 8002596:	3710      	adds	r7, #16
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}

0800259c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b084      	sub	sp, #16
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80025a4:	f001 fc32 	bl	8003e0c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d102      	bne.n	80025b6 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80025b0:	2301      	movs	r3, #1
 80025b2:	60fb      	str	r3, [r7, #12]
 80025b4:	e001      	b.n	80025ba <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80025b6:	2300      	movs	r3, #0
 80025b8:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80025ba:	f001 fc59 	bl	8003e70 <vPortExitCritical>

    return xReturn;
 80025be:	68fb      	ldr	r3, [r7, #12]
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3710      	adds	r7, #16
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}

080025c8 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b084      	sub	sp, #16
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80025d0:	f001 fc1c 	bl	8003e0c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025dc:	429a      	cmp	r2, r3
 80025de:	d102      	bne.n	80025e6 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80025e0:	2301      	movs	r3, #1
 80025e2:	60fb      	str	r3, [r7, #12]
 80025e4:	e001      	b.n	80025ea <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80025e6:	2300      	movs	r3, #0
 80025e8:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80025ea:	f001 fc41 	bl	8003e70 <vPortExitCritical>

    return xReturn;
 80025ee:	68fb      	ldr	r3, [r7, #12]
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3710      	adds	r7, #16
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}

080025f8 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b084      	sub	sp, #16
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002602:	2300      	movs	r3, #0
 8002604:	60fb      	str	r3, [r7, #12]
 8002606:	e01e      	b.n	8002646 <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002608:	4a13      	ldr	r2, [pc, #76]	@ (8002658 <vQueueAddToRegistry+0x60>)
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d115      	bne.n	8002640 <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002614:	4910      	ldr	r1, [pc, #64]	@ (8002658 <vQueueAddToRegistry+0x60>)
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	683a      	ldr	r2, [r7, #0]
 800261a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 800261e:	4a0e      	ldr	r2, [pc, #56]	@ (8002658 <vQueueAddToRegistry+0x60>)
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	00db      	lsls	r3, r3, #3
 8002624:	4413      	add	r3, r2
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4618      	mov	r0, r3
 800262e:	f003 fc21 	bl	8005e74 <SEGGER_SYSVIEW_ShrinkId>
 8002632:	4601      	mov	r1, r0
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	461a      	mov	r2, r3
 8002638:	2071      	movs	r0, #113	@ 0x71
 800263a:	f002 fe35 	bl	80052a8 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 800263e:	e006      	b.n	800264e <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	3301      	adds	r3, #1
 8002644:	60fb      	str	r3, [r7, #12]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2b07      	cmp	r3, #7
 800264a:	d9dd      	bls.n	8002608 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 800264c:	bf00      	nop
 800264e:	bf00      	nop
 8002650:	3710      	adds	r7, #16
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	200000d4 	.word	0x200000d4

0800265c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 800265c:	b580      	push	{r7, lr}
 800265e:	b086      	sub	sp, #24
 8002660:	af00      	add	r7, sp, #0
 8002662:	60f8      	str	r0, [r7, #12]
 8002664:	60b9      	str	r1, [r7, #8]
 8002666:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 800266c:	f001 fbce 	bl	8003e0c <vPortEnterCritical>
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002676:	b25b      	sxtb	r3, r3
 8002678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800267c:	d103      	bne.n	8002686 <vQueueWaitForMessageRestricted+0x2a>
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	2200      	movs	r2, #0
 8002682:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800268c:	b25b      	sxtb	r3, r3
 800268e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002692:	d103      	bne.n	800269c <vQueueWaitForMessageRestricted+0x40>
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	2200      	movs	r2, #0
 8002698:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800269c:	f001 fbe8 	bl	8003e70 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d106      	bne.n	80026b6 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	3324      	adds	r3, #36	@ 0x24
 80026ac:	687a      	ldr	r2, [r7, #4]
 80026ae:	68b9      	ldr	r1, [r7, #8]
 80026b0:	4618      	mov	r0, r3
 80026b2:	f000 fbed 	bl	8002e90 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80026b6:	6978      	ldr	r0, [r7, #20]
 80026b8:	f7ff ff1e 	bl	80024f8 <prvUnlockQueue>
    }
 80026bc:	bf00      	nop
 80026be:	3718      	adds	r7, #24
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}

080026c4 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b08c      	sub	sp, #48	@ 0x30
 80026c8:	af04      	add	r7, sp, #16
 80026ca:	60f8      	str	r0, [r7, #12]
 80026cc:	60b9      	str	r1, [r7, #8]
 80026ce:	603b      	str	r3, [r7, #0]
 80026d0:	4613      	mov	r3, r2
 80026d2:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80026d4:	88fb      	ldrh	r3, [r7, #6]
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	4618      	mov	r0, r3
 80026da:	f001 fcc9 	bl	8004070 <pvPortMalloc>
 80026de:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d00e      	beq.n	8002704 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80026e6:	2058      	movs	r0, #88	@ 0x58
 80026e8:	f001 fcc2 	bl	8004070 <pvPortMalloc>
 80026ec:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d003      	beq.n	80026fc <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	697a      	ldr	r2, [r7, #20]
 80026f8:	631a      	str	r2, [r3, #48]	@ 0x30
 80026fa:	e005      	b.n	8002708 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 80026fc:	6978      	ldr	r0, [r7, #20]
 80026fe:	f001 fd99 	bl	8004234 <vPortFree>
 8002702:	e001      	b.n	8002708 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002704:	2300      	movs	r3, #0
 8002706:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d013      	beq.n	8002736 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800270e:	88fa      	ldrh	r2, [r7, #6]
 8002710:	2300      	movs	r3, #0
 8002712:	9303      	str	r3, [sp, #12]
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	9302      	str	r3, [sp, #8]
 8002718:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800271a:	9301      	str	r3, [sp, #4]
 800271c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800271e:	9300      	str	r3, [sp, #0]
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	68b9      	ldr	r1, [r7, #8]
 8002724:	68f8      	ldr	r0, [r7, #12]
 8002726:	f000 f80e 	bl	8002746 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800272a:	69f8      	ldr	r0, [r7, #28]
 800272c:	f000 f8a2 	bl	8002874 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002730:	2301      	movs	r3, #1
 8002732:	61bb      	str	r3, [r7, #24]
 8002734:	e002      	b.n	800273c <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002736:	f04f 33ff 	mov.w	r3, #4294967295
 800273a:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800273c:	69bb      	ldr	r3, [r7, #24]
    }
 800273e:	4618      	mov	r0, r3
 8002740:	3720      	adds	r7, #32
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}

08002746 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002746:	b580      	push	{r7, lr}
 8002748:	b088      	sub	sp, #32
 800274a:	af00      	add	r7, sp, #0
 800274c:	60f8      	str	r0, [r7, #12]
 800274e:	60b9      	str	r1, [r7, #8]
 8002750:	607a      	str	r2, [r7, #4]
 8002752:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002754:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002756:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	461a      	mov	r2, r3
 800275e:	21a5      	movs	r1, #165	@ 0xa5
 8002760:	f003 feea 	bl	8006538 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002764:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002766:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800276e:	3b01      	subs	r3, #1
 8002770:	009b      	lsls	r3, r3, #2
 8002772:	4413      	add	r3, r2
 8002774:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002776:	69bb      	ldr	r3, [r7, #24]
 8002778:	f023 0307 	bic.w	r3, r3, #7
 800277c:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800277e:	69bb      	ldr	r3, [r7, #24]
 8002780:	f003 0307 	and.w	r3, r3, #7
 8002784:	2b00      	cmp	r3, #0
 8002786:	d00b      	beq.n	80027a0 <prvInitialiseNewTask+0x5a>
        __asm volatile
 8002788:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800278c:	f383 8811 	msr	BASEPRI, r3
 8002790:	f3bf 8f6f 	isb	sy
 8002794:	f3bf 8f4f 	dsb	sy
 8002798:	617b      	str	r3, [r7, #20]
    }
 800279a:	bf00      	nop
 800279c:	bf00      	nop
 800279e:	e7fd      	b.n	800279c <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d01f      	beq.n	80027e6 <prvInitialiseNewTask+0xa0>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80027a6:	2300      	movs	r3, #0
 80027a8:	61fb      	str	r3, [r7, #28]
 80027aa:	e012      	b.n	80027d2 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80027ac:	68ba      	ldr	r2, [r7, #8]
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	4413      	add	r3, r2
 80027b2:	7819      	ldrb	r1, [r3, #0]
 80027b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	4413      	add	r3, r2
 80027ba:	3334      	adds	r3, #52	@ 0x34
 80027bc:	460a      	mov	r2, r1
 80027be:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80027c0:	68ba      	ldr	r2, [r7, #8]
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	4413      	add	r3, r2
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d006      	beq.n	80027da <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80027cc:	69fb      	ldr	r3, [r7, #28]
 80027ce:	3301      	adds	r3, #1
 80027d0:	61fb      	str	r3, [r7, #28]
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	2b09      	cmp	r3, #9
 80027d6:	d9e9      	bls.n	80027ac <prvInitialiseNewTask+0x66>
 80027d8:	e000      	b.n	80027dc <prvInitialiseNewTask+0x96>
            {
                break;
 80027da:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80027dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027de:	2200      	movs	r2, #0
 80027e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80027e4:	e003      	b.n	80027ee <prvInitialiseNewTask+0xa8>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80027e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027e8:	2200      	movs	r2, #0
 80027ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80027ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027f0:	2b04      	cmp	r3, #4
 80027f2:	d901      	bls.n	80027f8 <prvInitialiseNewTask+0xb2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80027f4:	2304      	movs	r3, #4
 80027f6:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80027f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027fa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80027fc:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80027fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002800:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002802:	649a      	str	r2, [r3, #72]	@ 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002804:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002806:	2200      	movs	r2, #0
 8002808:	64da      	str	r2, [r3, #76]	@ 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800280a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800280c:	3304      	adds	r3, #4
 800280e:	4618      	mov	r0, r3
 8002810:	f7ff f958 	bl	8001ac4 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002814:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002816:	3318      	adds	r3, #24
 8002818:	4618      	mov	r0, r3
 800281a:	f7ff f953 	bl	8001ac4 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800281e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002820:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002822:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002824:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002826:	f1c3 0205 	rsb	r2, r3, #5
 800282a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800282c:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800282e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002830:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002832:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002834:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002836:	3350      	adds	r3, #80	@ 0x50
 8002838:	2204      	movs	r2, #4
 800283a:	2100      	movs	r1, #0
 800283c:	4618      	mov	r0, r3
 800283e:	f003 fe7b 	bl	8006538 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002844:	3354      	adds	r3, #84	@ 0x54
 8002846:	2201      	movs	r2, #1
 8002848:	2100      	movs	r1, #0
 800284a:	4618      	mov	r0, r3
 800284c:	f003 fe74 	bl	8006538 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002850:	683a      	ldr	r2, [r7, #0]
 8002852:	68f9      	ldr	r1, [r7, #12]
 8002854:	69b8      	ldr	r0, [r7, #24]
 8002856:	f001 f925 	bl	8003aa4 <pxPortInitialiseStack>
 800285a:	4602      	mov	r2, r0
 800285c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800285e:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002860:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002862:	2b00      	cmp	r3, #0
 8002864:	d002      	beq.n	800286c <prvInitialiseNewTask+0x126>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002866:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002868:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800286a:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800286c:	bf00      	nop
 800286e:	3720      	adds	r7, #32
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}

08002874 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002874:	b5b0      	push	{r4, r5, r7, lr}
 8002876:	b084      	sub	sp, #16
 8002878:	af02      	add	r7, sp, #8
 800287a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800287c:	f001 fac6 	bl	8003e0c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002880:	4b3b      	ldr	r3, [pc, #236]	@ (8002970 <prvAddNewTaskToReadyList+0xfc>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	3301      	adds	r3, #1
 8002886:	4a3a      	ldr	r2, [pc, #232]	@ (8002970 <prvAddNewTaskToReadyList+0xfc>)
 8002888:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800288a:	4b3a      	ldr	r3, [pc, #232]	@ (8002974 <prvAddNewTaskToReadyList+0x100>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d109      	bne.n	80028a6 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002892:	4a38      	ldr	r2, [pc, #224]	@ (8002974 <prvAddNewTaskToReadyList+0x100>)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002898:	4b35      	ldr	r3, [pc, #212]	@ (8002970 <prvAddNewTaskToReadyList+0xfc>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2b01      	cmp	r3, #1
 800289e:	d110      	bne.n	80028c2 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80028a0:	f000 fc30 	bl	8003104 <prvInitialiseTaskLists>
 80028a4:	e00d      	b.n	80028c2 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80028a6:	4b34      	ldr	r3, [pc, #208]	@ (8002978 <prvAddNewTaskToReadyList+0x104>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d109      	bne.n	80028c2 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80028ae:	4b31      	ldr	r3, [pc, #196]	@ (8002974 <prvAddNewTaskToReadyList+0x100>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d802      	bhi.n	80028c2 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80028bc:	4a2d      	ldr	r2, [pc, #180]	@ (8002974 <prvAddNewTaskToReadyList+0x100>)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80028c2:	4b2e      	ldr	r3, [pc, #184]	@ (800297c <prvAddNewTaskToReadyList+0x108>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	3301      	adds	r3, #1
 80028c8:	4a2c      	ldr	r2, [pc, #176]	@ (800297c <prvAddNewTaskToReadyList+0x108>)
 80028ca:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80028cc:	4b2b      	ldr	r3, [pc, #172]	@ (800297c <prvAddNewTaskToReadyList+0x108>)
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	641a      	str	r2, [r3, #64]	@ 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d016      	beq.n	8002908 <prvAddNewTaskToReadyList+0x94>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	4618      	mov	r0, r3
 80028de:	f003 f9a3 	bl	8005c28 <SEGGER_SYSVIEW_OnTaskCreate>
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028f2:	461d      	mov	r5, r3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	461c      	mov	r4, r3
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028fe:	1ae3      	subs	r3, r4, r3
 8002900:	9300      	str	r3, [sp, #0]
 8002902:	462b      	mov	r3, r5
 8002904:	f001 fe66 	bl	80045d4 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	4618      	mov	r0, r3
 800290c:	f003 fa10 	bl	8005d30 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002914:	2201      	movs	r2, #1
 8002916:	409a      	lsls	r2, r3
 8002918:	4b19      	ldr	r3, [pc, #100]	@ (8002980 <prvAddNewTaskToReadyList+0x10c>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4313      	orrs	r3, r2
 800291e:	4a18      	ldr	r2, [pc, #96]	@ (8002980 <prvAddNewTaskToReadyList+0x10c>)
 8002920:	6013      	str	r3, [r2, #0]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002926:	4613      	mov	r3, r2
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	4413      	add	r3, r2
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	4a15      	ldr	r2, [pc, #84]	@ (8002984 <prvAddNewTaskToReadyList+0x110>)
 8002930:	441a      	add	r2, r3
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	3304      	adds	r3, #4
 8002936:	4619      	mov	r1, r3
 8002938:	4610      	mov	r0, r2
 800293a:	f7ff f8d0 	bl	8001ade <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800293e:	f001 fa97 	bl	8003e70 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002942:	4b0d      	ldr	r3, [pc, #52]	@ (8002978 <prvAddNewTaskToReadyList+0x104>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d00e      	beq.n	8002968 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800294a:	4b0a      	ldr	r3, [pc, #40]	@ (8002974 <prvAddNewTaskToReadyList+0x100>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002954:	429a      	cmp	r2, r3
 8002956:	d207      	bcs.n	8002968 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002958:	4b0b      	ldr	r3, [pc, #44]	@ (8002988 <prvAddNewTaskToReadyList+0x114>)
 800295a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800295e:	601a      	str	r2, [r3, #0]
 8002960:	f3bf 8f4f 	dsb	sy
 8002964:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002968:	bf00      	nop
 800296a:	3708      	adds	r7, #8
 800296c:	46bd      	mov	sp, r7
 800296e:	bdb0      	pop	{r4, r5, r7, pc}
 8002970:	200001ec 	.word	0x200001ec
 8002974:	20000114 	.word	0x20000114
 8002978:	200001f8 	.word	0x200001f8
 800297c:	20000208 	.word	0x20000208
 8002980:	200001f4 	.word	0x200001f4
 8002984:	20000118 	.word	0x20000118
 8002988:	e000ed04 	.word	0xe000ed04

0800298c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b086      	sub	sp, #24
 8002990:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002992:	4b27      	ldr	r3, [pc, #156]	@ (8002a30 <vTaskStartScheduler+0xa4>)
 8002994:	9301      	str	r3, [sp, #4]
 8002996:	2300      	movs	r3, #0
 8002998:	9300      	str	r3, [sp, #0]
 800299a:	2300      	movs	r3, #0
 800299c:	2282      	movs	r2, #130	@ 0x82
 800299e:	4925      	ldr	r1, [pc, #148]	@ (8002a34 <vTaskStartScheduler+0xa8>)
 80029a0:	4825      	ldr	r0, [pc, #148]	@ (8002a38 <vTaskStartScheduler+0xac>)
 80029a2:	f7ff fe8f 	bl	80026c4 <xTaskCreate>
 80029a6:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d102      	bne.n	80029b4 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 80029ae:	f000 fd5b 	bl	8003468 <xTimerCreateTimerTask>
 80029b2:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d124      	bne.n	8002a04 <vTaskStartScheduler+0x78>
        __asm volatile
 80029ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029be:	f383 8811 	msr	BASEPRI, r3
 80029c2:	f3bf 8f6f 	isb	sy
 80029c6:	f3bf 8f4f 	dsb	sy
 80029ca:	60bb      	str	r3, [r7, #8]
    }
 80029cc:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80029ce:	4b1b      	ldr	r3, [pc, #108]	@ (8002a3c <vTaskStartScheduler+0xb0>)
 80029d0:	f04f 32ff 	mov.w	r2, #4294967295
 80029d4:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80029d6:	4b1a      	ldr	r3, [pc, #104]	@ (8002a40 <vTaskStartScheduler+0xb4>)
 80029d8:	2201      	movs	r2, #1
 80029da:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80029dc:	4b19      	ldr	r3, [pc, #100]	@ (8002a44 <vTaskStartScheduler+0xb8>)
 80029de:	2200      	movs	r2, #0
 80029e0:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80029e2:	4b19      	ldr	r3, [pc, #100]	@ (8002a48 <vTaskStartScheduler+0xbc>)
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	4b12      	ldr	r3, [pc, #72]	@ (8002a30 <vTaskStartScheduler+0xa4>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d102      	bne.n	80029f4 <vTaskStartScheduler+0x68>
 80029ee:	f003 f8ff 	bl	8005bf0 <SEGGER_SYSVIEW_OnIdle>
 80029f2:	e004      	b.n	80029fe <vTaskStartScheduler+0x72>
 80029f4:	4b14      	ldr	r3, [pc, #80]	@ (8002a48 <vTaskStartScheduler+0xbc>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4618      	mov	r0, r3
 80029fa:	f003 f957 	bl	8005cac <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80029fe:	f001 f8e1 	bl	8003bc4 <xPortStartScheduler>
 8002a02:	e00f      	b.n	8002a24 <vTaskStartScheduler+0x98>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a0a:	d10b      	bne.n	8002a24 <vTaskStartScheduler+0x98>
        __asm volatile
 8002a0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a10:	f383 8811 	msr	BASEPRI, r3
 8002a14:	f3bf 8f6f 	isb	sy
 8002a18:	f3bf 8f4f 	dsb	sy
 8002a1c:	607b      	str	r3, [r7, #4]
    }
 8002a1e:	bf00      	nop
 8002a20:	bf00      	nop
 8002a22:	e7fd      	b.n	8002a20 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002a24:	4b09      	ldr	r3, [pc, #36]	@ (8002a4c <vTaskStartScheduler+0xc0>)
 8002a26:	681b      	ldr	r3, [r3, #0]
}
 8002a28:	bf00      	nop
 8002a2a:	3710      	adds	r7, #16
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}
 8002a30:	20000210 	.word	0x20000210
 8002a34:	08006b00 	.word	0x08006b00
 8002a38:	080030d5 	.word	0x080030d5
 8002a3c:	2000020c 	.word	0x2000020c
 8002a40:	200001f8 	.word	0x200001f8
 8002a44:	200001f0 	.word	0x200001f0
 8002a48:	20000114 	.word	0x20000114
 8002a4c:	08006bec 	.word	0x08006bec

08002a50 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002a50:	b480      	push	{r7}
 8002a52:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002a54:	4b04      	ldr	r3, [pc, #16]	@ (8002a68 <vTaskSuspendAll+0x18>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	3301      	adds	r3, #1
 8002a5a:	4a03      	ldr	r2, [pc, #12]	@ (8002a68 <vTaskSuspendAll+0x18>)
 8002a5c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002a5e:	bf00      	nop
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr
 8002a68:	20000214 	.word	0x20000214

08002a6c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b084      	sub	sp, #16
 8002a70:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002a72:	2300      	movs	r3, #0
 8002a74:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002a76:	2300      	movs	r3, #0
 8002a78:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002a7a:	4b44      	ldr	r3, [pc, #272]	@ (8002b8c <xTaskResumeAll+0x120>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d10b      	bne.n	8002a9a <xTaskResumeAll+0x2e>
        __asm volatile
 8002a82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a86:	f383 8811 	msr	BASEPRI, r3
 8002a8a:	f3bf 8f6f 	isb	sy
 8002a8e:	f3bf 8f4f 	dsb	sy
 8002a92:	603b      	str	r3, [r7, #0]
    }
 8002a94:	bf00      	nop
 8002a96:	bf00      	nop
 8002a98:	e7fd      	b.n	8002a96 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002a9a:	f001 f9b7 	bl	8003e0c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002a9e:	4b3b      	ldr	r3, [pc, #236]	@ (8002b8c <xTaskResumeAll+0x120>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	3b01      	subs	r3, #1
 8002aa4:	4a39      	ldr	r2, [pc, #228]	@ (8002b8c <xTaskResumeAll+0x120>)
 8002aa6:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002aa8:	4b38      	ldr	r3, [pc, #224]	@ (8002b8c <xTaskResumeAll+0x120>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d165      	bne.n	8002b7c <xTaskResumeAll+0x110>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002ab0:	4b37      	ldr	r3, [pc, #220]	@ (8002b90 <xTaskResumeAll+0x124>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d061      	beq.n	8002b7c <xTaskResumeAll+0x110>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002ab8:	e032      	b.n	8002b20 <xTaskResumeAll+0xb4>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002aba:	4b36      	ldr	r3, [pc, #216]	@ (8002b94 <xTaskResumeAll+0x128>)
 8002abc:	68db      	ldr	r3, [r3, #12]
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	3318      	adds	r3, #24
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f7ff f866 	bl	8001b98 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	3304      	adds	r3, #4
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f7ff f861 	bl	8001b98 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f003 f929 	bl	8005d30 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	409a      	lsls	r2, r3
 8002ae6:	4b2c      	ldr	r3, [pc, #176]	@ (8002b98 <xTaskResumeAll+0x12c>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	4a2a      	ldr	r2, [pc, #168]	@ (8002b98 <xTaskResumeAll+0x12c>)
 8002aee:	6013      	str	r3, [r2, #0]
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002af4:	4613      	mov	r3, r2
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	4413      	add	r3, r2
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	4a27      	ldr	r2, [pc, #156]	@ (8002b9c <xTaskResumeAll+0x130>)
 8002afe:	441a      	add	r2, r3
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	3304      	adds	r3, #4
 8002b04:	4619      	mov	r1, r3
 8002b06:	4610      	mov	r0, r2
 8002b08:	f7fe ffe9 	bl	8001ade <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b10:	4b23      	ldr	r3, [pc, #140]	@ (8002ba0 <xTaskResumeAll+0x134>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d302      	bcc.n	8002b20 <xTaskResumeAll+0xb4>
                    {
                        xYieldPending = pdTRUE;
 8002b1a:	4b22      	ldr	r3, [pc, #136]	@ (8002ba4 <xTaskResumeAll+0x138>)
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002b20:	4b1c      	ldr	r3, [pc, #112]	@ (8002b94 <xTaskResumeAll+0x128>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d1c8      	bne.n	8002aba <xTaskResumeAll+0x4e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d001      	beq.n	8002b32 <xTaskResumeAll+0xc6>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002b2e:	f000 fb67 	bl	8003200 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002b32:	4b1d      	ldr	r3, [pc, #116]	@ (8002ba8 <xTaskResumeAll+0x13c>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d010      	beq.n	8002b60 <xTaskResumeAll+0xf4>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002b3e:	f000 f859 	bl	8002bf4 <xTaskIncrementTick>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d002      	beq.n	8002b4e <xTaskResumeAll+0xe2>
                            {
                                xYieldPending = pdTRUE;
 8002b48:	4b16      	ldr	r3, [pc, #88]	@ (8002ba4 <xTaskResumeAll+0x138>)
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	3b01      	subs	r3, #1
 8002b52:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d1f1      	bne.n	8002b3e <xTaskResumeAll+0xd2>

                        xPendedTicks = 0;
 8002b5a:	4b13      	ldr	r3, [pc, #76]	@ (8002ba8 <xTaskResumeAll+0x13c>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002b60:	4b10      	ldr	r3, [pc, #64]	@ (8002ba4 <xTaskResumeAll+0x138>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d009      	beq.n	8002b7c <xTaskResumeAll+0x110>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002b6c:	4b0f      	ldr	r3, [pc, #60]	@ (8002bac <xTaskResumeAll+0x140>)
 8002b6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002b72:	601a      	str	r2, [r3, #0]
 8002b74:	f3bf 8f4f 	dsb	sy
 8002b78:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002b7c:	f001 f978 	bl	8003e70 <vPortExitCritical>

    return xAlreadyYielded;
 8002b80:	68bb      	ldr	r3, [r7, #8]
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3710      	adds	r7, #16
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	20000214 	.word	0x20000214
 8002b90:	200001ec 	.word	0x200001ec
 8002b94:	200001ac 	.word	0x200001ac
 8002b98:	200001f4 	.word	0x200001f4
 8002b9c:	20000118 	.word	0x20000118
 8002ba0:	20000114 	.word	0x20000114
 8002ba4:	20000200 	.word	0x20000200
 8002ba8:	200001fc 	.word	0x200001fc
 8002bac:	e000ed04 	.word	0xe000ed04

08002bb0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b083      	sub	sp, #12
 8002bb4:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8002bb6:	4b05      	ldr	r3, [pc, #20]	@ (8002bcc <xTaskGetTickCount+0x1c>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8002bbc:	687b      	ldr	r3, [r7, #4]
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	370c      	adds	r7, #12
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr
 8002bca:	bf00      	nop
 8002bcc:	200001f0 	.word	0x200001f0

08002bd0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b082      	sub	sp, #8
 8002bd4:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002bd6:	f001 fa09 	bl	8003fec <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8002bda:	2300      	movs	r3, #0
 8002bdc:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8002bde:	4b04      	ldr	r3, [pc, #16]	@ (8002bf0 <xTaskGetTickCountFromISR+0x20>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002be4:	683b      	ldr	r3, [r7, #0]
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3708      	adds	r7, #8
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	200001f0 	.word	0x200001f0

08002bf4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b086      	sub	sp, #24
 8002bf8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002bfe:	4b51      	ldr	r3, [pc, #324]	@ (8002d44 <xTaskIncrementTick+0x150>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	f040 8093 	bne.w	8002d2e <xTaskIncrementTick+0x13a>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002c08:	4b4f      	ldr	r3, [pc, #316]	@ (8002d48 <xTaskIncrementTick+0x154>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	3301      	adds	r3, #1
 8002c0e:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002c10:	4a4d      	ldr	r2, [pc, #308]	@ (8002d48 <xTaskIncrementTick+0x154>)
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d121      	bne.n	8002c60 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8002c1c:	4b4b      	ldr	r3, [pc, #300]	@ (8002d4c <xTaskIncrementTick+0x158>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d00b      	beq.n	8002c3e <xTaskIncrementTick+0x4a>
        __asm volatile
 8002c26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c2a:	f383 8811 	msr	BASEPRI, r3
 8002c2e:	f3bf 8f6f 	isb	sy
 8002c32:	f3bf 8f4f 	dsb	sy
 8002c36:	603b      	str	r3, [r7, #0]
    }
 8002c38:	bf00      	nop
 8002c3a:	bf00      	nop
 8002c3c:	e7fd      	b.n	8002c3a <xTaskIncrementTick+0x46>
 8002c3e:	4b43      	ldr	r3, [pc, #268]	@ (8002d4c <xTaskIncrementTick+0x158>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	60fb      	str	r3, [r7, #12]
 8002c44:	4b42      	ldr	r3, [pc, #264]	@ (8002d50 <xTaskIncrementTick+0x15c>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a40      	ldr	r2, [pc, #256]	@ (8002d4c <xTaskIncrementTick+0x158>)
 8002c4a:	6013      	str	r3, [r2, #0]
 8002c4c:	4a40      	ldr	r2, [pc, #256]	@ (8002d50 <xTaskIncrementTick+0x15c>)
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	6013      	str	r3, [r2, #0]
 8002c52:	4b40      	ldr	r3, [pc, #256]	@ (8002d54 <xTaskIncrementTick+0x160>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	3301      	adds	r3, #1
 8002c58:	4a3e      	ldr	r2, [pc, #248]	@ (8002d54 <xTaskIncrementTick+0x160>)
 8002c5a:	6013      	str	r3, [r2, #0]
 8002c5c:	f000 fad0 	bl	8003200 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002c60:	4b3d      	ldr	r3, [pc, #244]	@ (8002d58 <xTaskIncrementTick+0x164>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	693a      	ldr	r2, [r7, #16]
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d34c      	bcc.n	8002d04 <xTaskIncrementTick+0x110>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002c6a:	4b38      	ldr	r3, [pc, #224]	@ (8002d4c <xTaskIncrementTick+0x158>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d104      	bne.n	8002c7e <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c74:	4b38      	ldr	r3, [pc, #224]	@ (8002d58 <xTaskIncrementTick+0x164>)
 8002c76:	f04f 32ff 	mov.w	r2, #4294967295
 8002c7a:	601a      	str	r2, [r3, #0]
                    break;
 8002c7c:	e042      	b.n	8002d04 <xTaskIncrementTick+0x110>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002c7e:	4b33      	ldr	r3, [pc, #204]	@ (8002d4c <xTaskIncrementTick+0x158>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	68db      	ldr	r3, [r3, #12]
 8002c86:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8002c8e:	693a      	ldr	r2, [r7, #16]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d203      	bcs.n	8002c9e <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002c96:	4a30      	ldr	r2, [pc, #192]	@ (8002d58 <xTaskIncrementTick+0x164>)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002c9c:	e032      	b.n	8002d04 <xTaskIncrementTick+0x110>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	3304      	adds	r3, #4
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f7fe ff78 	bl	8001b98 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d004      	beq.n	8002cba <xTaskIncrementTick+0xc6>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	3318      	adds	r3, #24
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f7fe ff6f 	bl	8001b98 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f003 f837 	bl	8005d30 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	409a      	lsls	r2, r3
 8002cca:	4b24      	ldr	r3, [pc, #144]	@ (8002d5c <xTaskIncrementTick+0x168>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	4a22      	ldr	r2, [pc, #136]	@ (8002d5c <xTaskIncrementTick+0x168>)
 8002cd2:	6013      	str	r3, [r2, #0]
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002cd8:	4613      	mov	r3, r2
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	4413      	add	r3, r2
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	4a1f      	ldr	r2, [pc, #124]	@ (8002d60 <xTaskIncrementTick+0x16c>)
 8002ce2:	441a      	add	r2, r3
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	3304      	adds	r3, #4
 8002ce8:	4619      	mov	r1, r3
 8002cea:	4610      	mov	r0, r2
 8002cec:	f7fe fef7 	bl	8001ade <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002cf4:	4b1b      	ldr	r3, [pc, #108]	@ (8002d64 <xTaskIncrementTick+0x170>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d3b5      	bcc.n	8002c6a <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002d02:	e7b2      	b.n	8002c6a <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002d04:	4b17      	ldr	r3, [pc, #92]	@ (8002d64 <xTaskIncrementTick+0x170>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d0a:	4915      	ldr	r1, [pc, #84]	@ (8002d60 <xTaskIncrementTick+0x16c>)
 8002d0c:	4613      	mov	r3, r2
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	4413      	add	r3, r2
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	440b      	add	r3, r1
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d901      	bls.n	8002d20 <xTaskIncrementTick+0x12c>
                {
                    xSwitchRequired = pdTRUE;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8002d20:	4b11      	ldr	r3, [pc, #68]	@ (8002d68 <xTaskIncrementTick+0x174>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d007      	beq.n	8002d38 <xTaskIncrementTick+0x144>
                {
                    xSwitchRequired = pdTRUE;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	617b      	str	r3, [r7, #20]
 8002d2c:	e004      	b.n	8002d38 <xTaskIncrementTick+0x144>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002d2e:	4b0f      	ldr	r3, [pc, #60]	@ (8002d6c <xTaskIncrementTick+0x178>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	3301      	adds	r3, #1
 8002d34:	4a0d      	ldr	r2, [pc, #52]	@ (8002d6c <xTaskIncrementTick+0x178>)
 8002d36:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8002d38:	697b      	ldr	r3, [r7, #20]
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3718      	adds	r7, #24
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	20000214 	.word	0x20000214
 8002d48:	200001f0 	.word	0x200001f0
 8002d4c:	200001a4 	.word	0x200001a4
 8002d50:	200001a8 	.word	0x200001a8
 8002d54:	20000204 	.word	0x20000204
 8002d58:	2000020c 	.word	0x2000020c
 8002d5c:	200001f4 	.word	0x200001f4
 8002d60:	20000118 	.word	0x20000118
 8002d64:	20000114 	.word	0x20000114
 8002d68:	20000200 	.word	0x20000200
 8002d6c:	200001fc 	.word	0x200001fc

08002d70 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b086      	sub	sp, #24
 8002d74:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002d76:	4b2d      	ldr	r3, [pc, #180]	@ (8002e2c <vTaskSwitchContext+0xbc>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d003      	beq.n	8002d86 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002d7e:	4b2c      	ldr	r3, [pc, #176]	@ (8002e30 <vTaskSwitchContext+0xc0>)
 8002d80:	2201      	movs	r2, #1
 8002d82:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8002d84:	e04e      	b.n	8002e24 <vTaskSwitchContext+0xb4>
        xYieldPending = pdFALSE;
 8002d86:	4b2a      	ldr	r3, [pc, #168]	@ (8002e30 <vTaskSwitchContext+0xc0>)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d8c:	4b29      	ldr	r3, [pc, #164]	@ (8002e34 <vTaskSwitchContext+0xc4>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	fab3 f383 	clz	r3, r3
 8002d98:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002d9a:	7afb      	ldrb	r3, [r7, #11]
 8002d9c:	f1c3 031f 	rsb	r3, r3, #31
 8002da0:	617b      	str	r3, [r7, #20]
 8002da2:	4925      	ldr	r1, [pc, #148]	@ (8002e38 <vTaskSwitchContext+0xc8>)
 8002da4:	697a      	ldr	r2, [r7, #20]
 8002da6:	4613      	mov	r3, r2
 8002da8:	009b      	lsls	r3, r3, #2
 8002daa:	4413      	add	r3, r2
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	440b      	add	r3, r1
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d10b      	bne.n	8002dce <vTaskSwitchContext+0x5e>
        __asm volatile
 8002db6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002dba:	f383 8811 	msr	BASEPRI, r3
 8002dbe:	f3bf 8f6f 	isb	sy
 8002dc2:	f3bf 8f4f 	dsb	sy
 8002dc6:	607b      	str	r3, [r7, #4]
    }
 8002dc8:	bf00      	nop
 8002dca:	bf00      	nop
 8002dcc:	e7fd      	b.n	8002dca <vTaskSwitchContext+0x5a>
 8002dce:	697a      	ldr	r2, [r7, #20]
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	4413      	add	r3, r2
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	4a17      	ldr	r2, [pc, #92]	@ (8002e38 <vTaskSwitchContext+0xc8>)
 8002dda:	4413      	add	r3, r2
 8002ddc:	613b      	str	r3, [r7, #16]
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	685a      	ldr	r2, [r3, #4]
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	605a      	str	r2, [r3, #4]
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	685a      	ldr	r2, [r3, #4]
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	3308      	adds	r3, #8
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d104      	bne.n	8002dfe <vTaskSwitchContext+0x8e>
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	685a      	ldr	r2, [r3, #4]
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	605a      	str	r2, [r3, #4]
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	4a0d      	ldr	r2, [pc, #52]	@ (8002e3c <vTaskSwitchContext+0xcc>)
 8002e06:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8002e08:	4b0c      	ldr	r3, [pc, #48]	@ (8002e3c <vTaskSwitchContext+0xcc>)
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	4b0c      	ldr	r3, [pc, #48]	@ (8002e40 <vTaskSwitchContext+0xd0>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d102      	bne.n	8002e1a <vTaskSwitchContext+0xaa>
 8002e14:	f002 feec 	bl	8005bf0 <SEGGER_SYSVIEW_OnIdle>
}
 8002e18:	e004      	b.n	8002e24 <vTaskSwitchContext+0xb4>
        traceTASK_SWITCHED_IN();
 8002e1a:	4b08      	ldr	r3, [pc, #32]	@ (8002e3c <vTaskSwitchContext+0xcc>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f002 ff44 	bl	8005cac <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8002e24:	bf00      	nop
 8002e26:	3718      	adds	r7, #24
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	20000214 	.word	0x20000214
 8002e30:	20000200 	.word	0x20000200
 8002e34:	200001f4 	.word	0x200001f4
 8002e38:	20000118 	.word	0x20000118
 8002e3c:	20000114 	.word	0x20000114
 8002e40:	20000210 	.word	0x20000210

08002e44 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b084      	sub	sp, #16
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d10b      	bne.n	8002e6c <vTaskPlaceOnEventList+0x28>
        __asm volatile
 8002e54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e58:	f383 8811 	msr	BASEPRI, r3
 8002e5c:	f3bf 8f6f 	isb	sy
 8002e60:	f3bf 8f4f 	dsb	sy
 8002e64:	60fb      	str	r3, [r7, #12]
    }
 8002e66:	bf00      	nop
 8002e68:	bf00      	nop
 8002e6a:	e7fd      	b.n	8002e68 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002e6c:	4b07      	ldr	r3, [pc, #28]	@ (8002e8c <vTaskPlaceOnEventList+0x48>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	3318      	adds	r3, #24
 8002e72:	4619      	mov	r1, r3
 8002e74:	6878      	ldr	r0, [r7, #4]
 8002e76:	f7fe fe56 	bl	8001b26 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002e7a:	2101      	movs	r1, #1
 8002e7c:	6838      	ldr	r0, [r7, #0]
 8002e7e:	f000 fa7b 	bl	8003378 <prvAddCurrentTaskToDelayedList>
}
 8002e82:	bf00      	nop
 8002e84:	3710      	adds	r7, #16
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	20000114 	.word	0x20000114

08002e90 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b086      	sub	sp, #24
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	60f8      	str	r0, [r7, #12]
 8002e98:	60b9      	str	r1, [r7, #8]
 8002e9a:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d10b      	bne.n	8002eba <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
 8002ea2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ea6:	f383 8811 	msr	BASEPRI, r3
 8002eaa:	f3bf 8f6f 	isb	sy
 8002eae:	f3bf 8f4f 	dsb	sy
 8002eb2:	617b      	str	r3, [r7, #20]
    }
 8002eb4:	bf00      	nop
 8002eb6:	bf00      	nop
 8002eb8:	e7fd      	b.n	8002eb6 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002eba:	4b0c      	ldr	r3, [pc, #48]	@ (8002eec <vTaskPlaceOnEventListRestricted+0x5c>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	3318      	adds	r3, #24
 8002ec0:	4619      	mov	r1, r3
 8002ec2:	68f8      	ldr	r0, [r7, #12]
 8002ec4:	f7fe fe0b 	bl	8001ade <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d002      	beq.n	8002ed4 <vTaskPlaceOnEventListRestricted+0x44>
        {
            xTicksToWait = portMAX_DELAY;
 8002ece:	f04f 33ff 	mov.w	r3, #4294967295
 8002ed2:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8002ed4:	2024      	movs	r0, #36	@ 0x24
 8002ed6:	f002 f98d 	bl	80051f4 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002eda:	6879      	ldr	r1, [r7, #4]
 8002edc:	68b8      	ldr	r0, [r7, #8]
 8002ede:	f000 fa4b 	bl	8003378 <prvAddCurrentTaskToDelayedList>
    }
 8002ee2:	bf00      	nop
 8002ee4:	3718      	adds	r7, #24
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	bf00      	nop
 8002eec:	20000114 	.word	0x20000114

08002ef0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b086      	sub	sp, #24
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	68db      	ldr	r3, [r3, #12]
 8002efe:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d10b      	bne.n	8002f1e <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 8002f06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f0a:	f383 8811 	msr	BASEPRI, r3
 8002f0e:	f3bf 8f6f 	isb	sy
 8002f12:	f3bf 8f4f 	dsb	sy
 8002f16:	60fb      	str	r3, [r7, #12]
    }
 8002f18:	bf00      	nop
 8002f1a:	bf00      	nop
 8002f1c:	e7fd      	b.n	8002f1a <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	3318      	adds	r3, #24
 8002f22:	4618      	mov	r0, r3
 8002f24:	f7fe fe38 	bl	8001b98 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002f28:	4b1f      	ldr	r3, [pc, #124]	@ (8002fa8 <xTaskRemoveFromEventList+0xb8>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d120      	bne.n	8002f72 <xTaskRemoveFromEventList+0x82>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	3304      	adds	r3, #4
 8002f34:	4618      	mov	r0, r3
 8002f36:	f7fe fe2f 	bl	8001b98 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f002 fef7 	bl	8005d30 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f46:	2201      	movs	r2, #1
 8002f48:	409a      	lsls	r2, r3
 8002f4a:	4b18      	ldr	r3, [pc, #96]	@ (8002fac <xTaskRemoveFromEventList+0xbc>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	4a16      	ldr	r2, [pc, #88]	@ (8002fac <xTaskRemoveFromEventList+0xbc>)
 8002f52:	6013      	str	r3, [r2, #0]
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f58:	4613      	mov	r3, r2
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	4413      	add	r3, r2
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	4a13      	ldr	r2, [pc, #76]	@ (8002fb0 <xTaskRemoveFromEventList+0xc0>)
 8002f62:	441a      	add	r2, r3
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	3304      	adds	r3, #4
 8002f68:	4619      	mov	r1, r3
 8002f6a:	4610      	mov	r0, r2
 8002f6c:	f7fe fdb7 	bl	8001ade <vListInsertEnd>
 8002f70:	e005      	b.n	8002f7e <xTaskRemoveFromEventList+0x8e>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	3318      	adds	r3, #24
 8002f76:	4619      	mov	r1, r3
 8002f78:	480e      	ldr	r0, [pc, #56]	@ (8002fb4 <xTaskRemoveFromEventList+0xc4>)
 8002f7a:	f7fe fdb0 	bl	8001ade <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f82:	4b0d      	ldr	r3, [pc, #52]	@ (8002fb8 <xTaskRemoveFromEventList+0xc8>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d905      	bls.n	8002f98 <xTaskRemoveFromEventList+0xa8>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8002f90:	4b0a      	ldr	r3, [pc, #40]	@ (8002fbc <xTaskRemoveFromEventList+0xcc>)
 8002f92:	2201      	movs	r2, #1
 8002f94:	601a      	str	r2, [r3, #0]
 8002f96:	e001      	b.n	8002f9c <xTaskRemoveFromEventList+0xac>
    }
    else
    {
        xReturn = pdFALSE;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8002f9c:	697b      	ldr	r3, [r7, #20]
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3718      	adds	r7, #24
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	20000214 	.word	0x20000214
 8002fac:	200001f4 	.word	0x200001f4
 8002fb0:	20000118 	.word	0x20000118
 8002fb4:	200001ac 	.word	0x200001ac
 8002fb8:	20000114 	.word	0x20000114
 8002fbc:	20000200 	.word	0x20000200

08002fc0 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002fc8:	4b06      	ldr	r3, [pc, #24]	@ (8002fe4 <vTaskInternalSetTimeOutState+0x24>)
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8002fd0:	4b05      	ldr	r3, [pc, #20]	@ (8002fe8 <vTaskInternalSetTimeOutState+0x28>)
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	605a      	str	r2, [r3, #4]
}
 8002fd8:	bf00      	nop
 8002fda:	370c      	adds	r7, #12
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr
 8002fe4:	20000204 	.word	0x20000204
 8002fe8:	200001f0 	.word	0x200001f0

08002fec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b088      	sub	sp, #32
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d10b      	bne.n	8003014 <xTaskCheckForTimeOut+0x28>
        __asm volatile
 8002ffc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003000:	f383 8811 	msr	BASEPRI, r3
 8003004:	f3bf 8f6f 	isb	sy
 8003008:	f3bf 8f4f 	dsb	sy
 800300c:	613b      	str	r3, [r7, #16]
    }
 800300e:	bf00      	nop
 8003010:	bf00      	nop
 8003012:	e7fd      	b.n	8003010 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d10b      	bne.n	8003032 <xTaskCheckForTimeOut+0x46>
        __asm volatile
 800301a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800301e:	f383 8811 	msr	BASEPRI, r3
 8003022:	f3bf 8f6f 	isb	sy
 8003026:	f3bf 8f4f 	dsb	sy
 800302a:	60fb      	str	r3, [r7, #12]
    }
 800302c:	bf00      	nop
 800302e:	bf00      	nop
 8003030:	e7fd      	b.n	800302e <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 8003032:	f000 feeb 	bl	8003e0c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003036:	4b1f      	ldr	r3, [pc, #124]	@ (80030b4 <xTaskCheckForTimeOut+0xc8>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	69ba      	ldr	r2, [r7, #24]
 8003042:	1ad3      	subs	r3, r2, r3
 8003044:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800304e:	d102      	bne.n	8003056 <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003050:	2300      	movs	r3, #0
 8003052:	61fb      	str	r3, [r7, #28]
 8003054:	e026      	b.n	80030a4 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	4b17      	ldr	r3, [pc, #92]	@ (80030b8 <xTaskCheckForTimeOut+0xcc>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	429a      	cmp	r2, r3
 8003060:	d00a      	beq.n	8003078 <xTaskCheckForTimeOut+0x8c>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	69ba      	ldr	r2, [r7, #24]
 8003068:	429a      	cmp	r2, r3
 800306a:	d305      	bcc.n	8003078 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800306c:	2301      	movs	r3, #1
 800306e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	2200      	movs	r2, #0
 8003074:	601a      	str	r2, [r3, #0]
 8003076:	e015      	b.n	80030a4 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	697a      	ldr	r2, [r7, #20]
 800307e:	429a      	cmp	r2, r3
 8003080:	d20b      	bcs.n	800309a <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	1ad2      	subs	r2, r2, r3
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f7ff ff96 	bl	8002fc0 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003094:	2300      	movs	r3, #0
 8003096:	61fb      	str	r3, [r7, #28]
 8003098:	e004      	b.n	80030a4 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	2200      	movs	r2, #0
 800309e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80030a0:	2301      	movs	r3, #1
 80030a2:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80030a4:	f000 fee4 	bl	8003e70 <vPortExitCritical>

    return xReturn;
 80030a8:	69fb      	ldr	r3, [r7, #28]
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3720      	adds	r7, #32
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	200001f0 	.word	0x200001f0
 80030b8:	20000204 	.word	0x20000204

080030bc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80030bc:	b480      	push	{r7}
 80030be:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80030c0:	4b03      	ldr	r3, [pc, #12]	@ (80030d0 <vTaskMissedYield+0x14>)
 80030c2:	2201      	movs	r2, #1
 80030c4:	601a      	str	r2, [r3, #0]
}
 80030c6:	bf00      	nop
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr
 80030d0:	20000200 	.word	0x20000200

080030d4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80030dc:	f000 f852 	bl	8003184 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80030e0:	4b06      	ldr	r3, [pc, #24]	@ (80030fc <prvIdleTask+0x28>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d9f9      	bls.n	80030dc <prvIdleTask+0x8>
                {
                    taskYIELD();
 80030e8:	4b05      	ldr	r3, [pc, #20]	@ (8003100 <prvIdleTask+0x2c>)
 80030ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80030ee:	601a      	str	r2, [r3, #0]
 80030f0:	f3bf 8f4f 	dsb	sy
 80030f4:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80030f8:	e7f0      	b.n	80030dc <prvIdleTask+0x8>
 80030fa:	bf00      	nop
 80030fc:	20000118 	.word	0x20000118
 8003100:	e000ed04 	.word	0xe000ed04

08003104 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b082      	sub	sp, #8
 8003108:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800310a:	2300      	movs	r3, #0
 800310c:	607b      	str	r3, [r7, #4]
 800310e:	e00c      	b.n	800312a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003110:	687a      	ldr	r2, [r7, #4]
 8003112:	4613      	mov	r3, r2
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	4413      	add	r3, r2
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	4a12      	ldr	r2, [pc, #72]	@ (8003164 <prvInitialiseTaskLists+0x60>)
 800311c:	4413      	add	r3, r2
 800311e:	4618      	mov	r0, r3
 8003120:	f7fe fcb0 	bl	8001a84 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	3301      	adds	r3, #1
 8003128:	607b      	str	r3, [r7, #4]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2b04      	cmp	r3, #4
 800312e:	d9ef      	bls.n	8003110 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003130:	480d      	ldr	r0, [pc, #52]	@ (8003168 <prvInitialiseTaskLists+0x64>)
 8003132:	f7fe fca7 	bl	8001a84 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003136:	480d      	ldr	r0, [pc, #52]	@ (800316c <prvInitialiseTaskLists+0x68>)
 8003138:	f7fe fca4 	bl	8001a84 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800313c:	480c      	ldr	r0, [pc, #48]	@ (8003170 <prvInitialiseTaskLists+0x6c>)
 800313e:	f7fe fca1 	bl	8001a84 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8003142:	480c      	ldr	r0, [pc, #48]	@ (8003174 <prvInitialiseTaskLists+0x70>)
 8003144:	f7fe fc9e 	bl	8001a84 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8003148:	480b      	ldr	r0, [pc, #44]	@ (8003178 <prvInitialiseTaskLists+0x74>)
 800314a:	f7fe fc9b 	bl	8001a84 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800314e:	4b0b      	ldr	r3, [pc, #44]	@ (800317c <prvInitialiseTaskLists+0x78>)
 8003150:	4a05      	ldr	r2, [pc, #20]	@ (8003168 <prvInitialiseTaskLists+0x64>)
 8003152:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003154:	4b0a      	ldr	r3, [pc, #40]	@ (8003180 <prvInitialiseTaskLists+0x7c>)
 8003156:	4a05      	ldr	r2, [pc, #20]	@ (800316c <prvInitialiseTaskLists+0x68>)
 8003158:	601a      	str	r2, [r3, #0]
}
 800315a:	bf00      	nop
 800315c:	3708      	adds	r7, #8
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}
 8003162:	bf00      	nop
 8003164:	20000118 	.word	0x20000118
 8003168:	2000017c 	.word	0x2000017c
 800316c:	20000190 	.word	0x20000190
 8003170:	200001ac 	.word	0x200001ac
 8003174:	200001c0 	.word	0x200001c0
 8003178:	200001d8 	.word	0x200001d8
 800317c:	200001a4 	.word	0x200001a4
 8003180:	200001a8 	.word	0x200001a8

08003184 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b082      	sub	sp, #8
 8003188:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800318a:	e019      	b.n	80031c0 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 800318c:	f000 fe3e 	bl	8003e0c <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003190:	4b10      	ldr	r3, [pc, #64]	@ (80031d4 <prvCheckTasksWaitingTermination+0x50>)
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	68db      	ldr	r3, [r3, #12]
 8003196:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	3304      	adds	r3, #4
 800319c:	4618      	mov	r0, r3
 800319e:	f7fe fcfb 	bl	8001b98 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 80031a2:	4b0d      	ldr	r3, [pc, #52]	@ (80031d8 <prvCheckTasksWaitingTermination+0x54>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	3b01      	subs	r3, #1
 80031a8:	4a0b      	ldr	r2, [pc, #44]	@ (80031d8 <prvCheckTasksWaitingTermination+0x54>)
 80031aa:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 80031ac:	4b0b      	ldr	r3, [pc, #44]	@ (80031dc <prvCheckTasksWaitingTermination+0x58>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	3b01      	subs	r3, #1
 80031b2:	4a0a      	ldr	r2, [pc, #40]	@ (80031dc <prvCheckTasksWaitingTermination+0x58>)
 80031b4:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 80031b6:	f000 fe5b 	bl	8003e70 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f000 f810 	bl	80031e0 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80031c0:	4b06      	ldr	r3, [pc, #24]	@ (80031dc <prvCheckTasksWaitingTermination+0x58>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d1e1      	bne.n	800318c <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80031c8:	bf00      	nop
 80031ca:	bf00      	nop
 80031cc:	3708      	adds	r7, #8
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	200001c0 	.word	0x200001c0
 80031d8:	200001ec 	.word	0x200001ec
 80031dc:	200001d4 	.word	0x200001d4

080031e0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b082      	sub	sp, #8
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ec:	4618      	mov	r0, r3
 80031ee:	f001 f821 	bl	8004234 <vPortFree>
                vPortFree( pxTCB );
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f001 f81e 	bl	8004234 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80031f8:	bf00      	nop
 80031fa:	3708      	adds	r7, #8
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}

08003200 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003200:	b480      	push	{r7}
 8003202:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003204:	4b0a      	ldr	r3, [pc, #40]	@ (8003230 <prvResetNextTaskUnblockTime+0x30>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d104      	bne.n	8003218 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800320e:	4b09      	ldr	r3, [pc, #36]	@ (8003234 <prvResetNextTaskUnblockTime+0x34>)
 8003210:	f04f 32ff 	mov.w	r2, #4294967295
 8003214:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003216:	e005      	b.n	8003224 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003218:	4b05      	ldr	r3, [pc, #20]	@ (8003230 <prvResetNextTaskUnblockTime+0x30>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	68db      	ldr	r3, [r3, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a04      	ldr	r2, [pc, #16]	@ (8003234 <prvResetNextTaskUnblockTime+0x34>)
 8003222:	6013      	str	r3, [r2, #0]
}
 8003224:	bf00      	nop
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr
 800322e:	bf00      	nop
 8003230:	200001a4 	.word	0x200001a4
 8003234:	2000020c 	.word	0x2000020c

08003238 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003238:	b480      	push	{r7}
 800323a:	b083      	sub	sp, #12
 800323c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800323e:	4b0b      	ldr	r3, [pc, #44]	@ (800326c <xTaskGetSchedulerState+0x34>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d102      	bne.n	800324c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003246:	2301      	movs	r3, #1
 8003248:	607b      	str	r3, [r7, #4]
 800324a:	e008      	b.n	800325e <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800324c:	4b08      	ldr	r3, [pc, #32]	@ (8003270 <xTaskGetSchedulerState+0x38>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d102      	bne.n	800325a <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003254:	2302      	movs	r3, #2
 8003256:	607b      	str	r3, [r7, #4]
 8003258:	e001      	b.n	800325e <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800325a:	2300      	movs	r3, #0
 800325c:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800325e:	687b      	ldr	r3, [r7, #4]
    }
 8003260:	4618      	mov	r0, r3
 8003262:	370c      	adds	r7, #12
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr
 800326c:	200001f8 	.word	0x200001f8
 8003270:	20000214 	.word	0x20000214

08003274 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8003274:	b580      	push	{r7, lr}
 8003276:	b086      	sub	sp, #24
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8003280:	2300      	movs	r3, #0
 8003282:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d06a      	beq.n	8003360 <xTaskPriorityDisinherit+0xec>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800328a:	4b38      	ldr	r3, [pc, #224]	@ (800336c <xTaskPriorityDisinherit+0xf8>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	693a      	ldr	r2, [r7, #16]
 8003290:	429a      	cmp	r2, r3
 8003292:	d00b      	beq.n	80032ac <xTaskPriorityDisinherit+0x38>
        __asm volatile
 8003294:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003298:	f383 8811 	msr	BASEPRI, r3
 800329c:	f3bf 8f6f 	isb	sy
 80032a0:	f3bf 8f4f 	dsb	sy
 80032a4:	60fb      	str	r3, [r7, #12]
    }
 80032a6:	bf00      	nop
 80032a8:	bf00      	nop
 80032aa:	e7fd      	b.n	80032a8 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d10b      	bne.n	80032cc <xTaskPriorityDisinherit+0x58>
        __asm volatile
 80032b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032b8:	f383 8811 	msr	BASEPRI, r3
 80032bc:	f3bf 8f6f 	isb	sy
 80032c0:	f3bf 8f4f 	dsb	sy
 80032c4:	60bb      	str	r3, [r7, #8]
    }
 80032c6:	bf00      	nop
 80032c8:	bf00      	nop
 80032ca:	e7fd      	b.n	80032c8 <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032d0:	1e5a      	subs	r2, r3, #1
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032de:	429a      	cmp	r2, r3
 80032e0:	d03e      	beq.n	8003360 <xTaskPriorityDisinherit+0xec>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d13a      	bne.n	8003360 <xTaskPriorityDisinherit+0xec>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	3304      	adds	r3, #4
 80032ee:	4618      	mov	r0, r3
 80032f0:	f7fe fc52 	bl	8001b98 <uxListRemove>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d10a      	bne.n	8003310 <xTaskPriorityDisinherit+0x9c>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032fe:	2201      	movs	r2, #1
 8003300:	fa02 f303 	lsl.w	r3, r2, r3
 8003304:	43da      	mvns	r2, r3
 8003306:	4b1a      	ldr	r3, [pc, #104]	@ (8003370 <xTaskPriorityDisinherit+0xfc>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4013      	ands	r3, r2
 800330c:	4a18      	ldr	r2, [pc, #96]	@ (8003370 <xTaskPriorityDisinherit+0xfc>)
 800330e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	4619      	mov	r1, r3
 8003314:	204a      	movs	r0, #74	@ 0x4a
 8003316:	f001 ff8b 	bl	8005230 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003326:	f1c3 0205 	rsb	r2, r3, #5
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003332:	2201      	movs	r2, #1
 8003334:	409a      	lsls	r2, r3
 8003336:	4b0e      	ldr	r3, [pc, #56]	@ (8003370 <xTaskPriorityDisinherit+0xfc>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4313      	orrs	r3, r2
 800333c:	4a0c      	ldr	r2, [pc, #48]	@ (8003370 <xTaskPriorityDisinherit+0xfc>)
 800333e:	6013      	str	r3, [r2, #0]
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003344:	4613      	mov	r3, r2
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	4413      	add	r3, r2
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	4a09      	ldr	r2, [pc, #36]	@ (8003374 <xTaskPriorityDisinherit+0x100>)
 800334e:	441a      	add	r2, r3
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	3304      	adds	r3, #4
 8003354:	4619      	mov	r1, r3
 8003356:	4610      	mov	r0, r2
 8003358:	f7fe fbc1 	bl	8001ade <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800335c:	2301      	movs	r3, #1
 800335e:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003360:	697b      	ldr	r3, [r7, #20]
    }
 8003362:	4618      	mov	r0, r3
 8003364:	3718      	adds	r7, #24
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	20000114 	.word	0x20000114
 8003370:	200001f4 	.word	0x200001f4
 8003374:	20000118 	.word	0x20000118

08003378 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b084      	sub	sp, #16
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003382:	4b32      	ldr	r3, [pc, #200]	@ (800344c <prvAddCurrentTaskToDelayedList+0xd4>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003388:	4b31      	ldr	r3, [pc, #196]	@ (8003450 <prvAddCurrentTaskToDelayedList+0xd8>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	3304      	adds	r3, #4
 800338e:	4618      	mov	r0, r3
 8003390:	f7fe fc02 	bl	8001b98 <uxListRemove>
 8003394:	4603      	mov	r3, r0
 8003396:	2b00      	cmp	r3, #0
 8003398:	d10b      	bne.n	80033b2 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800339a:	4b2d      	ldr	r3, [pc, #180]	@ (8003450 <prvAddCurrentTaskToDelayedList+0xd8>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033a0:	2201      	movs	r2, #1
 80033a2:	fa02 f303 	lsl.w	r3, r2, r3
 80033a6:	43da      	mvns	r2, r3
 80033a8:	4b2a      	ldr	r3, [pc, #168]	@ (8003454 <prvAddCurrentTaskToDelayedList+0xdc>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4013      	ands	r3, r2
 80033ae:	4a29      	ldr	r2, [pc, #164]	@ (8003454 <prvAddCurrentTaskToDelayedList+0xdc>)
 80033b0:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033b8:	d110      	bne.n	80033dc <prvAddCurrentTaskToDelayedList+0x64>
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d00d      	beq.n	80033dc <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 80033c0:	4b23      	ldr	r3, [pc, #140]	@ (8003450 <prvAddCurrentTaskToDelayedList+0xd8>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	211b      	movs	r1, #27
 80033c6:	4618      	mov	r0, r3
 80033c8:	f002 fcf4 	bl	8005db4 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80033cc:	4b20      	ldr	r3, [pc, #128]	@ (8003450 <prvAddCurrentTaskToDelayedList+0xd8>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	3304      	adds	r3, #4
 80033d2:	4619      	mov	r1, r3
 80033d4:	4820      	ldr	r0, [pc, #128]	@ (8003458 <prvAddCurrentTaskToDelayedList+0xe0>)
 80033d6:	f7fe fb82 	bl	8001ade <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80033da:	e032      	b.n	8003442 <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 80033dc:	68fa      	ldr	r2, [r7, #12]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4413      	add	r3, r2
 80033e2:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80033e4:	4b1a      	ldr	r3, [pc, #104]	@ (8003450 <prvAddCurrentTaskToDelayedList+0xd8>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	68ba      	ldr	r2, [r7, #8]
 80033ea:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 80033ec:	68ba      	ldr	r2, [r7, #8]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d20f      	bcs.n	8003414 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 80033f4:	4b16      	ldr	r3, [pc, #88]	@ (8003450 <prvAddCurrentTaskToDelayedList+0xd8>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	2104      	movs	r1, #4
 80033fa:	4618      	mov	r0, r3
 80033fc:	f002 fcda 	bl	8005db4 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003400:	4b16      	ldr	r3, [pc, #88]	@ (800345c <prvAddCurrentTaskToDelayedList+0xe4>)
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	4b12      	ldr	r3, [pc, #72]	@ (8003450 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	3304      	adds	r3, #4
 800340a:	4619      	mov	r1, r3
 800340c:	4610      	mov	r0, r2
 800340e:	f7fe fb8a 	bl	8001b26 <vListInsert>
}
 8003412:	e016      	b.n	8003442 <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8003414:	4b0e      	ldr	r3, [pc, #56]	@ (8003450 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	2104      	movs	r1, #4
 800341a:	4618      	mov	r0, r3
 800341c:	f002 fcca 	bl	8005db4 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003420:	4b0f      	ldr	r3, [pc, #60]	@ (8003460 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	4b0a      	ldr	r3, [pc, #40]	@ (8003450 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	3304      	adds	r3, #4
 800342a:	4619      	mov	r1, r3
 800342c:	4610      	mov	r0, r2
 800342e:	f7fe fb7a 	bl	8001b26 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8003432:	4b0c      	ldr	r3, [pc, #48]	@ (8003464 <prvAddCurrentTaskToDelayedList+0xec>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	68ba      	ldr	r2, [r7, #8]
 8003438:	429a      	cmp	r2, r3
 800343a:	d202      	bcs.n	8003442 <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 800343c:	4a09      	ldr	r2, [pc, #36]	@ (8003464 <prvAddCurrentTaskToDelayedList+0xec>)
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	6013      	str	r3, [r2, #0]
}
 8003442:	bf00      	nop
 8003444:	3710      	adds	r7, #16
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
 800344a:	bf00      	nop
 800344c:	200001f0 	.word	0x200001f0
 8003450:	20000114 	.word	0x20000114
 8003454:	200001f4 	.word	0x200001f4
 8003458:	200001d8 	.word	0x200001d8
 800345c:	200001a8 	.word	0x200001a8
 8003460:	200001a4 	.word	0x200001a4
 8003464:	2000020c 	.word	0x2000020c

08003468 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003468:	b580      	push	{r7, lr}
 800346a:	b084      	sub	sp, #16
 800346c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800346e:	2300      	movs	r3, #0
 8003470:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003472:	f000 fae1 	bl	8003a38 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003476:	4b12      	ldr	r3, [pc, #72]	@ (80034c0 <xTimerCreateTimerTask+0x58>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d00b      	beq.n	8003496 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 800347e:	4b11      	ldr	r3, [pc, #68]	@ (80034c4 <xTimerCreateTimerTask+0x5c>)
 8003480:	9301      	str	r3, [sp, #4]
 8003482:	2302      	movs	r3, #2
 8003484:	9300      	str	r3, [sp, #0]
 8003486:	2300      	movs	r3, #0
 8003488:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800348c:	490e      	ldr	r1, [pc, #56]	@ (80034c8 <xTimerCreateTimerTask+0x60>)
 800348e:	480f      	ldr	r0, [pc, #60]	@ (80034cc <xTimerCreateTimerTask+0x64>)
 8003490:	f7ff f918 	bl	80026c4 <xTaskCreate>
 8003494:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d10b      	bne.n	80034b4 <xTimerCreateTimerTask+0x4c>
        __asm volatile
 800349c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034a0:	f383 8811 	msr	BASEPRI, r3
 80034a4:	f3bf 8f6f 	isb	sy
 80034a8:	f3bf 8f4f 	dsb	sy
 80034ac:	603b      	str	r3, [r7, #0]
    }
 80034ae:	bf00      	nop
 80034b0:	bf00      	nop
 80034b2:	e7fd      	b.n	80034b0 <xTimerCreateTimerTask+0x48>
        return xReturn;
 80034b4:	687b      	ldr	r3, [r7, #4]
    }
 80034b6:	4618      	mov	r0, r3
 80034b8:	3708      	adds	r7, #8
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	20000248 	.word	0x20000248
 80034c4:	2000024c 	.word	0x2000024c
 80034c8:	08006b08 	.word	0x08006b08
 80034cc:	08003609 	.word	0x08003609

080034d0 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b08a      	sub	sp, #40	@ 0x28
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	60f8      	str	r0, [r7, #12]
 80034d8:	60b9      	str	r1, [r7, #8]
 80034da:	607a      	str	r2, [r7, #4]
 80034dc:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 80034de:	2300      	movs	r3, #0
 80034e0:	627b      	str	r3, [r7, #36]	@ 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d10b      	bne.n	8003500 <xTimerGenericCommand+0x30>
        __asm volatile
 80034e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034ec:	f383 8811 	msr	BASEPRI, r3
 80034f0:	f3bf 8f6f 	isb	sy
 80034f4:	f3bf 8f4f 	dsb	sy
 80034f8:	623b      	str	r3, [r7, #32]
    }
 80034fa:	bf00      	nop
 80034fc:	bf00      	nop
 80034fe:	e7fd      	b.n	80034fc <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8003500:	4b19      	ldr	r3, [pc, #100]	@ (8003568 <xTimerGenericCommand+0x98>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d02a      	beq.n	800355e <xTimerGenericCommand+0x8e>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	2b05      	cmp	r3, #5
 8003518:	dc18      	bgt.n	800354c <xTimerGenericCommand+0x7c>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800351a:	f7ff fe8d 	bl	8003238 <xTaskGetSchedulerState>
 800351e:	4603      	mov	r3, r0
 8003520:	2b02      	cmp	r3, #2
 8003522:	d109      	bne.n	8003538 <xTimerGenericCommand+0x68>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003524:	4b10      	ldr	r3, [pc, #64]	@ (8003568 <xTimerGenericCommand+0x98>)
 8003526:	6818      	ldr	r0, [r3, #0]
 8003528:	f107 0114 	add.w	r1, r7, #20
 800352c:	2300      	movs	r3, #0
 800352e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003530:	f7fe fc52 	bl	8001dd8 <xQueueGenericSend>
 8003534:	6278      	str	r0, [r7, #36]	@ 0x24
 8003536:	e012      	b.n	800355e <xTimerGenericCommand+0x8e>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003538:	4b0b      	ldr	r3, [pc, #44]	@ (8003568 <xTimerGenericCommand+0x98>)
 800353a:	6818      	ldr	r0, [r3, #0]
 800353c:	f107 0114 	add.w	r1, r7, #20
 8003540:	2300      	movs	r3, #0
 8003542:	2200      	movs	r2, #0
 8003544:	f7fe fc48 	bl	8001dd8 <xQueueGenericSend>
 8003548:	6278      	str	r0, [r7, #36]	@ 0x24
 800354a:	e008      	b.n	800355e <xTimerGenericCommand+0x8e>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800354c:	4b06      	ldr	r3, [pc, #24]	@ (8003568 <xTimerGenericCommand+0x98>)
 800354e:	6818      	ldr	r0, [r3, #0]
 8003550:	f107 0114 	add.w	r1, r7, #20
 8003554:	2300      	movs	r3, #0
 8003556:	683a      	ldr	r2, [r7, #0]
 8003558:	f7fe fd68 	bl	800202c <xQueueGenericSendFromISR>
 800355c:	6278      	str	r0, [r7, #36]	@ 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800355e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8003560:	4618      	mov	r0, r3
 8003562:	3728      	adds	r7, #40	@ 0x28
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}
 8003568:	20000248 	.word	0x20000248

0800356c <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800356c:	b580      	push	{r7, lr}
 800356e:	b088      	sub	sp, #32
 8003570:	af02      	add	r7, sp, #8
 8003572:	6078      	str	r0, [r7, #4]
 8003574:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003576:	4b23      	ldr	r3, [pc, #140]	@ (8003604 <prvProcessExpiredTimer+0x98>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	68db      	ldr	r3, [r3, #12]
 800357e:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	3304      	adds	r3, #4
 8003584:	4618      	mov	r0, r3
 8003586:	f7fe fb07 	bl	8001b98 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003590:	f003 0304 	and.w	r3, r3, #4
 8003594:	2b00      	cmp	r3, #0
 8003596:	d023      	beq.n	80035e0 <prvProcessExpiredTimer+0x74>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	699a      	ldr	r2, [r3, #24]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	18d1      	adds	r1, r2, r3
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	683a      	ldr	r2, [r7, #0]
 80035a4:	6978      	ldr	r0, [r7, #20]
 80035a6:	f000 f8d5 	bl	8003754 <prvInsertTimerInActiveList>
 80035aa:	4603      	mov	r3, r0
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d020      	beq.n	80035f2 <prvProcessExpiredTimer+0x86>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80035b0:	2300      	movs	r3, #0
 80035b2:	9300      	str	r3, [sp, #0]
 80035b4:	2300      	movs	r3, #0
 80035b6:	687a      	ldr	r2, [r7, #4]
 80035b8:	2100      	movs	r1, #0
 80035ba:	6978      	ldr	r0, [r7, #20]
 80035bc:	f7ff ff88 	bl	80034d0 <xTimerGenericCommand>
 80035c0:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d114      	bne.n	80035f2 <prvProcessExpiredTimer+0x86>
        __asm volatile
 80035c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035cc:	f383 8811 	msr	BASEPRI, r3
 80035d0:	f3bf 8f6f 	isb	sy
 80035d4:	f3bf 8f4f 	dsb	sy
 80035d8:	60fb      	str	r3, [r7, #12]
    }
 80035da:	bf00      	nop
 80035dc:	bf00      	nop
 80035de:	e7fd      	b.n	80035dc <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80035e6:	f023 0301 	bic.w	r3, r3, #1
 80035ea:	b2da      	uxtb	r2, r3
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	6a1b      	ldr	r3, [r3, #32]
 80035f6:	6978      	ldr	r0, [r7, #20]
 80035f8:	4798      	blx	r3
    }
 80035fa:	bf00      	nop
 80035fc:	3718      	adds	r7, #24
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}
 8003602:	bf00      	nop
 8003604:	20000240 	.word	0x20000240

08003608 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003608:	b580      	push	{r7, lr}
 800360a:	b084      	sub	sp, #16
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003610:	f107 0308 	add.w	r3, r7, #8
 8003614:	4618      	mov	r0, r3
 8003616:	f000 f859 	bl	80036cc <prvGetNextExpireTime>
 800361a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	4619      	mov	r1, r3
 8003620:	68f8      	ldr	r0, [r7, #12]
 8003622:	f000 f805 	bl	8003630 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003626:	f000 f8d7 	bl	80037d8 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800362a:	bf00      	nop
 800362c:	e7f0      	b.n	8003610 <prvTimerTask+0x8>
	...

08003630 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003630:	b580      	push	{r7, lr}
 8003632:	b084      	sub	sp, #16
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
 8003638:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800363a:	f7ff fa09 	bl	8002a50 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800363e:	f107 0308 	add.w	r3, r7, #8
 8003642:	4618      	mov	r0, r3
 8003644:	f000 f866 	bl	8003714 <prvSampleTimeNow>
 8003648:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d130      	bne.n	80036b2 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d10a      	bne.n	800366c <prvProcessTimerOrBlockTask+0x3c>
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	429a      	cmp	r2, r3
 800365c:	d806      	bhi.n	800366c <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800365e:	f7ff fa05 	bl	8002a6c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003662:	68f9      	ldr	r1, [r7, #12]
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	f7ff ff81 	bl	800356c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800366a:	e024      	b.n	80036b6 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d008      	beq.n	8003684 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003672:	4b13      	ldr	r3, [pc, #76]	@ (80036c0 <prvProcessTimerOrBlockTask+0x90>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d101      	bne.n	8003680 <prvProcessTimerOrBlockTask+0x50>
 800367c:	2301      	movs	r3, #1
 800367e:	e000      	b.n	8003682 <prvProcessTimerOrBlockTask+0x52>
 8003680:	2300      	movs	r3, #0
 8003682:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003684:	4b0f      	ldr	r3, [pc, #60]	@ (80036c4 <prvProcessTimerOrBlockTask+0x94>)
 8003686:	6818      	ldr	r0, [r3, #0]
 8003688:	687a      	ldr	r2, [r7, #4]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	683a      	ldr	r2, [r7, #0]
 8003690:	4619      	mov	r1, r3
 8003692:	f7fe ffe3 	bl	800265c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003696:	f7ff f9e9 	bl	8002a6c <xTaskResumeAll>
 800369a:	4603      	mov	r3, r0
 800369c:	2b00      	cmp	r3, #0
 800369e:	d10a      	bne.n	80036b6 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80036a0:	4b09      	ldr	r3, [pc, #36]	@ (80036c8 <prvProcessTimerOrBlockTask+0x98>)
 80036a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80036a6:	601a      	str	r2, [r3, #0]
 80036a8:	f3bf 8f4f 	dsb	sy
 80036ac:	f3bf 8f6f 	isb	sy
    }
 80036b0:	e001      	b.n	80036b6 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80036b2:	f7ff f9db 	bl	8002a6c <xTaskResumeAll>
    }
 80036b6:	bf00      	nop
 80036b8:	3710      	adds	r7, #16
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	bf00      	nop
 80036c0:	20000244 	.word	0x20000244
 80036c4:	20000248 	.word	0x20000248
 80036c8:	e000ed04 	.word	0xe000ed04

080036cc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80036cc:	b480      	push	{r7}
 80036ce:	b085      	sub	sp, #20
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80036d4:	4b0e      	ldr	r3, [pc, #56]	@ (8003710 <prvGetNextExpireTime+0x44>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d101      	bne.n	80036e2 <prvGetNextExpireTime+0x16>
 80036de:	2201      	movs	r2, #1
 80036e0:	e000      	b.n	80036e4 <prvGetNextExpireTime+0x18>
 80036e2:	2200      	movs	r2, #0
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d105      	bne.n	80036fc <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80036f0:	4b07      	ldr	r3, [pc, #28]	@ (8003710 <prvGetNextExpireTime+0x44>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	60fb      	str	r3, [r7, #12]
 80036fa:	e001      	b.n	8003700 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80036fc:	2300      	movs	r3, #0
 80036fe:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003700:	68fb      	ldr	r3, [r7, #12]
    }
 8003702:	4618      	mov	r0, r3
 8003704:	3714      	adds	r7, #20
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr
 800370e:	bf00      	nop
 8003710:	20000240 	.word	0x20000240

08003714 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003714:	b580      	push	{r7, lr}
 8003716:	b084      	sub	sp, #16
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 800371c:	f7ff fa48 	bl	8002bb0 <xTaskGetTickCount>
 8003720:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003722:	4b0b      	ldr	r3, [pc, #44]	@ (8003750 <prvSampleTimeNow+0x3c>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	68fa      	ldr	r2, [r7, #12]
 8003728:	429a      	cmp	r2, r3
 800372a:	d205      	bcs.n	8003738 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800372c:	f000 f91e 	bl	800396c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2201      	movs	r2, #1
 8003734:	601a      	str	r2, [r3, #0]
 8003736:	e002      	b.n	800373e <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800373e:	4a04      	ldr	r2, [pc, #16]	@ (8003750 <prvSampleTimeNow+0x3c>)
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003744:	68fb      	ldr	r3, [r7, #12]
    }
 8003746:	4618      	mov	r0, r3
 8003748:	3710      	adds	r7, #16
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}
 800374e:	bf00      	nop
 8003750:	20000250 	.word	0x20000250

08003754 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003754:	b580      	push	{r7, lr}
 8003756:	b086      	sub	sp, #24
 8003758:	af00      	add	r7, sp, #0
 800375a:	60f8      	str	r0, [r7, #12]
 800375c:	60b9      	str	r1, [r7, #8]
 800375e:	607a      	str	r2, [r7, #4]
 8003760:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003762:	2300      	movs	r3, #0
 8003764:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	68ba      	ldr	r2, [r7, #8]
 800376a:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	68fa      	ldr	r2, [r7, #12]
 8003770:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003772:	68ba      	ldr	r2, [r7, #8]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	429a      	cmp	r2, r3
 8003778:	d812      	bhi.n	80037a0 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	1ad2      	subs	r2, r2, r3
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	699b      	ldr	r3, [r3, #24]
 8003784:	429a      	cmp	r2, r3
 8003786:	d302      	bcc.n	800378e <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003788:	2301      	movs	r3, #1
 800378a:	617b      	str	r3, [r7, #20]
 800378c:	e01b      	b.n	80037c6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800378e:	4b10      	ldr	r3, [pc, #64]	@ (80037d0 <prvInsertTimerInActiveList+0x7c>)
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	3304      	adds	r3, #4
 8003796:	4619      	mov	r1, r3
 8003798:	4610      	mov	r0, r2
 800379a:	f7fe f9c4 	bl	8001b26 <vListInsert>
 800379e:	e012      	b.n	80037c6 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80037a0:	687a      	ldr	r2, [r7, #4]
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d206      	bcs.n	80037b6 <prvInsertTimerInActiveList+0x62>
 80037a8:	68ba      	ldr	r2, [r7, #8]
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d302      	bcc.n	80037b6 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80037b0:	2301      	movs	r3, #1
 80037b2:	617b      	str	r3, [r7, #20]
 80037b4:	e007      	b.n	80037c6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80037b6:	4b07      	ldr	r3, [pc, #28]	@ (80037d4 <prvInsertTimerInActiveList+0x80>)
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	3304      	adds	r3, #4
 80037be:	4619      	mov	r1, r3
 80037c0:	4610      	mov	r0, r2
 80037c2:	f7fe f9b0 	bl	8001b26 <vListInsert>
            }
        }

        return xProcessTimerNow;
 80037c6:	697b      	ldr	r3, [r7, #20]
    }
 80037c8:	4618      	mov	r0, r3
 80037ca:	3718      	adds	r7, #24
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}
 80037d0:	20000244 	.word	0x20000244
 80037d4:	20000240 	.word	0x20000240

080037d8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80037d8:	b580      	push	{r7, lr}
 80037da:	b08c      	sub	sp, #48	@ 0x30
 80037dc:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80037de:	e0b2      	b.n	8003946 <prvProcessReceivedCommands+0x16e>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	f2c0 80af 	blt.w	8003946 <prvProcessReceivedCommands+0x16e>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	627b      	str	r3, [r7, #36]	@ 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80037ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ee:	695b      	ldr	r3, [r3, #20]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d004      	beq.n	80037fe <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80037f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037f6:	3304      	adds	r3, #4
 80037f8:	4618      	mov	r0, r3
 80037fa:	f7fe f9cd 	bl	8001b98 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80037fe:	1d3b      	adds	r3, r7, #4
 8003800:	4618      	mov	r0, r3
 8003802:	f7ff ff87 	bl	8003714 <prvSampleTimeNow>
 8003806:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	2b09      	cmp	r3, #9
 800380c:	f200 8098 	bhi.w	8003940 <prvProcessReceivedCommands+0x168>
 8003810:	a201      	add	r2, pc, #4	@ (adr r2, 8003818 <prvProcessReceivedCommands+0x40>)
 8003812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003816:	bf00      	nop
 8003818:	08003841 	.word	0x08003841
 800381c:	08003841 	.word	0x08003841
 8003820:	08003841 	.word	0x08003841
 8003824:	080038b7 	.word	0x080038b7
 8003828:	080038cb 	.word	0x080038cb
 800382c:	08003917 	.word	0x08003917
 8003830:	08003841 	.word	0x08003841
 8003834:	08003841 	.word	0x08003841
 8003838:	080038b7 	.word	0x080038b7
 800383c:	080038cb 	.word	0x080038cb
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003842:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003846:	f043 0301 	orr.w	r3, r3, #1
 800384a:	b2da      	uxtb	r2, r3
 800384c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800384e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003852:	68fa      	ldr	r2, [r7, #12]
 8003854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003856:	699b      	ldr	r3, [r3, #24]
 8003858:	18d1      	adds	r1, r2, r3
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	6a3a      	ldr	r2, [r7, #32]
 800385e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003860:	f7ff ff78 	bl	8003754 <prvInsertTimerInActiveList>
 8003864:	4603      	mov	r3, r0
 8003866:	2b00      	cmp	r3, #0
 8003868:	d06c      	beq.n	8003944 <prvProcessReceivedCommands+0x16c>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800386a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800386c:	6a1b      	ldr	r3, [r3, #32]
 800386e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003870:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003874:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003878:	f003 0304 	and.w	r3, r3, #4
 800387c:	2b00      	cmp	r3, #0
 800387e:	d061      	beq.n	8003944 <prvProcessReceivedCommands+0x16c>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003880:	68fa      	ldr	r2, [r7, #12]
 8003882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003884:	699b      	ldr	r3, [r3, #24]
 8003886:	441a      	add	r2, r3
 8003888:	2300      	movs	r3, #0
 800388a:	9300      	str	r3, [sp, #0]
 800388c:	2300      	movs	r3, #0
 800388e:	2100      	movs	r1, #0
 8003890:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003892:	f7ff fe1d 	bl	80034d0 <xTimerGenericCommand>
 8003896:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8003898:	69fb      	ldr	r3, [r7, #28]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d152      	bne.n	8003944 <prvProcessReceivedCommands+0x16c>
        __asm volatile
 800389e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038a2:	f383 8811 	msr	BASEPRI, r3
 80038a6:	f3bf 8f6f 	isb	sy
 80038aa:	f3bf 8f4f 	dsb	sy
 80038ae:	61bb      	str	r3, [r7, #24]
    }
 80038b0:	bf00      	nop
 80038b2:	bf00      	nop
 80038b4:	e7fd      	b.n	80038b2 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80038b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038b8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80038bc:	f023 0301 	bic.w	r3, r3, #1
 80038c0:	b2da      	uxtb	r2, r3
 80038c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038c4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 80038c8:	e03d      	b.n	8003946 <prvProcessReceivedCommands+0x16e>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80038ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038cc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80038d0:	f043 0301 	orr.w	r3, r3, #1
 80038d4:	b2da      	uxtb	r2, r3
 80038d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038d8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80038dc:	68fa      	ldr	r2, [r7, #12]
 80038de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038e0:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80038e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038e4:	699b      	ldr	r3, [r3, #24]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d10b      	bne.n	8003902 <prvProcessReceivedCommands+0x12a>
        __asm volatile
 80038ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038ee:	f383 8811 	msr	BASEPRI, r3
 80038f2:	f3bf 8f6f 	isb	sy
 80038f6:	f3bf 8f4f 	dsb	sy
 80038fa:	617b      	str	r3, [r7, #20]
    }
 80038fc:	bf00      	nop
 80038fe:	bf00      	nop
 8003900:	e7fd      	b.n	80038fe <prvProcessReceivedCommands+0x126>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003904:	699a      	ldr	r2, [r3, #24]
 8003906:	6a3b      	ldr	r3, [r7, #32]
 8003908:	18d1      	adds	r1, r2, r3
 800390a:	6a3b      	ldr	r3, [r7, #32]
 800390c:	6a3a      	ldr	r2, [r7, #32]
 800390e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003910:	f7ff ff20 	bl	8003754 <prvInsertTimerInActiveList>
                        break;
 8003914:	e017      	b.n	8003946 <prvProcessReceivedCommands+0x16e>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003918:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800391c:	f003 0302 	and.w	r3, r3, #2
 8003920:	2b00      	cmp	r3, #0
 8003922:	d103      	bne.n	800392c <prvProcessReceivedCommands+0x154>
                                {
                                    vPortFree( pxTimer );
 8003924:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003926:	f000 fc85 	bl	8004234 <vPortFree>
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800392a:	e00c      	b.n	8003946 <prvProcessReceivedCommands+0x16e>
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800392c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800392e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003932:	f023 0301 	bic.w	r3, r3, #1
 8003936:	b2da      	uxtb	r2, r3
 8003938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800393a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800393e:	e002      	b.n	8003946 <prvProcessReceivedCommands+0x16e>

                    default:
                        /* Don't expect to get here. */
                        break;
 8003940:	bf00      	nop
 8003942:	e000      	b.n	8003946 <prvProcessReceivedCommands+0x16e>
                        break;
 8003944:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003946:	4b08      	ldr	r3, [pc, #32]	@ (8003968 <prvProcessReceivedCommands+0x190>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f107 0108 	add.w	r1, r7, #8
 800394e:	2200      	movs	r2, #0
 8003950:	4618      	mov	r0, r3
 8003952:	f7fe fc2d 	bl	80021b0 <xQueueReceive>
 8003956:	4603      	mov	r3, r0
 8003958:	2b00      	cmp	r3, #0
 800395a:	f47f af41 	bne.w	80037e0 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 800395e:	bf00      	nop
 8003960:	bf00      	nop
 8003962:	3728      	adds	r7, #40	@ 0x28
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}
 8003968:	20000248 	.word	0x20000248

0800396c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800396c:	b580      	push	{r7, lr}
 800396e:	b088      	sub	sp, #32
 8003970:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003972:	e049      	b.n	8003a08 <prvSwitchTimerLists+0x9c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003974:	4b2e      	ldr	r3, [pc, #184]	@ (8003a30 <prvSwitchTimerLists+0xc4>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	68db      	ldr	r3, [r3, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800397e:	4b2c      	ldr	r3, [pc, #176]	@ (8003a30 <prvSwitchTimerLists+0xc4>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	68db      	ldr	r3, [r3, #12]
 8003986:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	3304      	adds	r3, #4
 800398c:	4618      	mov	r0, r3
 800398e:	f7fe f903 	bl	8001b98 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	6a1b      	ldr	r3, [r3, #32]
 8003996:	68f8      	ldr	r0, [r7, #12]
 8003998:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80039a0:	f003 0304 	and.w	r3, r3, #4
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d02f      	beq.n	8003a08 <prvSwitchTimerLists+0x9c>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	699b      	ldr	r3, [r3, #24]
 80039ac:	693a      	ldr	r2, [r7, #16]
 80039ae:	4413      	add	r3, r2
 80039b0:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 80039b2:	68ba      	ldr	r2, [r7, #8]
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d90e      	bls.n	80039d8 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	68ba      	ldr	r2, [r7, #8]
 80039be:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	68fa      	ldr	r2, [r7, #12]
 80039c4:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80039c6:	4b1a      	ldr	r3, [pc, #104]	@ (8003a30 <prvSwitchTimerLists+0xc4>)
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	3304      	adds	r3, #4
 80039ce:	4619      	mov	r1, r3
 80039d0:	4610      	mov	r0, r2
 80039d2:	f7fe f8a8 	bl	8001b26 <vListInsert>
 80039d6:	e017      	b.n	8003a08 <prvSwitchTimerLists+0x9c>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80039d8:	2300      	movs	r3, #0
 80039da:	9300      	str	r3, [sp, #0]
 80039dc:	2300      	movs	r3, #0
 80039de:	693a      	ldr	r2, [r7, #16]
 80039e0:	2100      	movs	r1, #0
 80039e2:	68f8      	ldr	r0, [r7, #12]
 80039e4:	f7ff fd74 	bl	80034d0 <xTimerGenericCommand>
 80039e8:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d10b      	bne.n	8003a08 <prvSwitchTimerLists+0x9c>
        __asm volatile
 80039f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039f4:	f383 8811 	msr	BASEPRI, r3
 80039f8:	f3bf 8f6f 	isb	sy
 80039fc:	f3bf 8f4f 	dsb	sy
 8003a00:	603b      	str	r3, [r7, #0]
    }
 8003a02:	bf00      	nop
 8003a04:	bf00      	nop
 8003a06:	e7fd      	b.n	8003a04 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003a08:	4b09      	ldr	r3, [pc, #36]	@ (8003a30 <prvSwitchTimerLists+0xc4>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d1b0      	bne.n	8003974 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8003a12:	4b07      	ldr	r3, [pc, #28]	@ (8003a30 <prvSwitchTimerLists+0xc4>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8003a18:	4b06      	ldr	r3, [pc, #24]	@ (8003a34 <prvSwitchTimerLists+0xc8>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a04      	ldr	r2, [pc, #16]	@ (8003a30 <prvSwitchTimerLists+0xc4>)
 8003a1e:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003a20:	4a04      	ldr	r2, [pc, #16]	@ (8003a34 <prvSwitchTimerLists+0xc8>)
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	6013      	str	r3, [r2, #0]
    }
 8003a26:	bf00      	nop
 8003a28:	3718      	adds	r7, #24
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	bf00      	nop
 8003a30:	20000240 	.word	0x20000240
 8003a34:	20000244 	.word	0x20000244

08003a38 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003a3c:	f000 f9e6 	bl	8003e0c <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003a40:	4b12      	ldr	r3, [pc, #72]	@ (8003a8c <prvCheckForValidListAndQueue+0x54>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d11d      	bne.n	8003a84 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8003a48:	4811      	ldr	r0, [pc, #68]	@ (8003a90 <prvCheckForValidListAndQueue+0x58>)
 8003a4a:	f7fe f81b 	bl	8001a84 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8003a4e:	4811      	ldr	r0, [pc, #68]	@ (8003a94 <prvCheckForValidListAndQueue+0x5c>)
 8003a50:	f7fe f818 	bl	8001a84 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8003a54:	4b10      	ldr	r3, [pc, #64]	@ (8003a98 <prvCheckForValidListAndQueue+0x60>)
 8003a56:	4a0e      	ldr	r2, [pc, #56]	@ (8003a90 <prvCheckForValidListAndQueue+0x58>)
 8003a58:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8003a5a:	4b10      	ldr	r3, [pc, #64]	@ (8003a9c <prvCheckForValidListAndQueue+0x64>)
 8003a5c:	4a0d      	ldr	r2, [pc, #52]	@ (8003a94 <prvCheckForValidListAndQueue+0x5c>)
 8003a5e:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003a60:	2200      	movs	r2, #0
 8003a62:	210c      	movs	r1, #12
 8003a64:	200a      	movs	r0, #10
 8003a66:	f7fe f92b 	bl	8001cc0 <xQueueGenericCreate>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	4a07      	ldr	r2, [pc, #28]	@ (8003a8c <prvCheckForValidListAndQueue+0x54>)
 8003a6e:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8003a70:	4b06      	ldr	r3, [pc, #24]	@ (8003a8c <prvCheckForValidListAndQueue+0x54>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d005      	beq.n	8003a84 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003a78:	4b04      	ldr	r3, [pc, #16]	@ (8003a8c <prvCheckForValidListAndQueue+0x54>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4908      	ldr	r1, [pc, #32]	@ (8003aa0 <prvCheckForValidListAndQueue+0x68>)
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f7fe fdba 	bl	80025f8 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003a84:	f000 f9f4 	bl	8003e70 <vPortExitCritical>
    }
 8003a88:	bf00      	nop
 8003a8a:	bd80      	pop	{r7, pc}
 8003a8c:	20000248 	.word	0x20000248
 8003a90:	20000218 	.word	0x20000218
 8003a94:	2000022c 	.word	0x2000022c
 8003a98:	20000240 	.word	0x20000240
 8003a9c:	20000244 	.word	0x20000244
 8003aa0:	08006b10 	.word	0x08006b10

08003aa4 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b085      	sub	sp, #20
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	60f8      	str	r0, [r7, #12]
 8003aac:	60b9      	str	r1, [r7, #8]
 8003aae:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	3b04      	subs	r3, #4
 8003ab4:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003abc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	3b04      	subs	r3, #4
 8003ac2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	f023 0201 	bic.w	r2, r3, #1
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	3b04      	subs	r3, #4
 8003ad2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003ad4:	4a0c      	ldr	r2, [pc, #48]	@ (8003b08 <pxPortInitialiseStack+0x64>)
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	3b14      	subs	r3, #20
 8003ade:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003ae0:	687a      	ldr	r2, [r7, #4]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	3b04      	subs	r3, #4
 8003aea:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	f06f 0202 	mvn.w	r2, #2
 8003af2:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	3b20      	subs	r3, #32
 8003af8:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003afa:	68fb      	ldr	r3, [r7, #12]
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	3714      	adds	r7, #20
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr
 8003b08:	08003b0d 	.word	0x08003b0d

08003b0c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b085      	sub	sp, #20
 8003b10:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8003b12:	2300      	movs	r3, #0
 8003b14:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003b16:	4b13      	ldr	r3, [pc, #76]	@ (8003b64 <prvTaskExitError+0x58>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b1e:	d00b      	beq.n	8003b38 <prvTaskExitError+0x2c>
        __asm volatile
 8003b20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b24:	f383 8811 	msr	BASEPRI, r3
 8003b28:	f3bf 8f6f 	isb	sy
 8003b2c:	f3bf 8f4f 	dsb	sy
 8003b30:	60fb      	str	r3, [r7, #12]
    }
 8003b32:	bf00      	nop
 8003b34:	bf00      	nop
 8003b36:	e7fd      	b.n	8003b34 <prvTaskExitError+0x28>
        __asm volatile
 8003b38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b3c:	f383 8811 	msr	BASEPRI, r3
 8003b40:	f3bf 8f6f 	isb	sy
 8003b44:	f3bf 8f4f 	dsb	sy
 8003b48:	60bb      	str	r3, [r7, #8]
    }
 8003b4a:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003b4c:	bf00      	nop
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d0fc      	beq.n	8003b4e <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003b54:	bf00      	nop
 8003b56:	bf00      	nop
 8003b58:	3714      	adds	r7, #20
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr
 8003b62:	bf00      	nop
 8003b64:	2000000c 	.word	0x2000000c
	...

08003b70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003b70:	4b07      	ldr	r3, [pc, #28]	@ (8003b90 <pxCurrentTCBConst2>)
 8003b72:	6819      	ldr	r1, [r3, #0]
 8003b74:	6808      	ldr	r0, [r1, #0]
 8003b76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b7a:	f380 8809 	msr	PSP, r0
 8003b7e:	f3bf 8f6f 	isb	sy
 8003b82:	f04f 0000 	mov.w	r0, #0
 8003b86:	f380 8811 	msr	BASEPRI, r0
 8003b8a:	4770      	bx	lr
 8003b8c:	f3af 8000 	nop.w

08003b90 <pxCurrentTCBConst2>:
 8003b90:	20000114 	.word	0x20000114
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003b94:	bf00      	nop
 8003b96:	bf00      	nop

08003b98 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003b98:	4808      	ldr	r0, [pc, #32]	@ (8003bbc <prvPortStartFirstTask+0x24>)
 8003b9a:	6800      	ldr	r0, [r0, #0]
 8003b9c:	6800      	ldr	r0, [r0, #0]
 8003b9e:	f380 8808 	msr	MSP, r0
 8003ba2:	f04f 0000 	mov.w	r0, #0
 8003ba6:	f380 8814 	msr	CONTROL, r0
 8003baa:	b662      	cpsie	i
 8003bac:	b661      	cpsie	f
 8003bae:	f3bf 8f4f 	dsb	sy
 8003bb2:	f3bf 8f6f 	isb	sy
 8003bb6:	df00      	svc	0
 8003bb8:	bf00      	nop
 8003bba:	0000      	.short	0x0000
 8003bbc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003bc0:	bf00      	nop
 8003bc2:	bf00      	nop

08003bc4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b086      	sub	sp, #24
 8003bc8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003bca:	4b47      	ldr	r3, [pc, #284]	@ (8003ce8 <xPortStartScheduler+0x124>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a47      	ldr	r2, [pc, #284]	@ (8003cec <xPortStartScheduler+0x128>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d10b      	bne.n	8003bec <xPortStartScheduler+0x28>
        __asm volatile
 8003bd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bd8:	f383 8811 	msr	BASEPRI, r3
 8003bdc:	f3bf 8f6f 	isb	sy
 8003be0:	f3bf 8f4f 	dsb	sy
 8003be4:	60fb      	str	r3, [r7, #12]
    }
 8003be6:	bf00      	nop
 8003be8:	bf00      	nop
 8003bea:	e7fd      	b.n	8003be8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003bec:	4b3e      	ldr	r3, [pc, #248]	@ (8003ce8 <xPortStartScheduler+0x124>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a3f      	ldr	r2, [pc, #252]	@ (8003cf0 <xPortStartScheduler+0x12c>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d10b      	bne.n	8003c0e <xPortStartScheduler+0x4a>
        __asm volatile
 8003bf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bfa:	f383 8811 	msr	BASEPRI, r3
 8003bfe:	f3bf 8f6f 	isb	sy
 8003c02:	f3bf 8f4f 	dsb	sy
 8003c06:	613b      	str	r3, [r7, #16]
    }
 8003c08:	bf00      	nop
 8003c0a:	bf00      	nop
 8003c0c:	e7fd      	b.n	8003c0a <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003c0e:	4b39      	ldr	r3, [pc, #228]	@ (8003cf4 <xPortStartScheduler+0x130>)
 8003c10:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	781b      	ldrb	r3, [r3, #0]
 8003c16:	b2db      	uxtb	r3, r3
 8003c18:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	22ff      	movs	r2, #255	@ 0xff
 8003c1e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	781b      	ldrb	r3, [r3, #0]
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003c28:	78fb      	ldrb	r3, [r7, #3]
 8003c2a:	b2db      	uxtb	r3, r3
 8003c2c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003c30:	b2da      	uxtb	r2, r3
 8003c32:	4b31      	ldr	r3, [pc, #196]	@ (8003cf8 <xPortStartScheduler+0x134>)
 8003c34:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003c36:	4b31      	ldr	r3, [pc, #196]	@ (8003cfc <xPortStartScheduler+0x138>)
 8003c38:	2207      	movs	r2, #7
 8003c3a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003c3c:	e009      	b.n	8003c52 <xPortStartScheduler+0x8e>
            {
                ulMaxPRIGROUPValue--;
 8003c3e:	4b2f      	ldr	r3, [pc, #188]	@ (8003cfc <xPortStartScheduler+0x138>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	3b01      	subs	r3, #1
 8003c44:	4a2d      	ldr	r2, [pc, #180]	@ (8003cfc <xPortStartScheduler+0x138>)
 8003c46:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003c48:	78fb      	ldrb	r3, [r7, #3]
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	005b      	lsls	r3, r3, #1
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003c52:	78fb      	ldrb	r3, [r7, #3]
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c5a:	2b80      	cmp	r3, #128	@ 0x80
 8003c5c:	d0ef      	beq.n	8003c3e <xPortStartScheduler+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003c5e:	4b27      	ldr	r3, [pc, #156]	@ (8003cfc <xPortStartScheduler+0x138>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f1c3 0307 	rsb	r3, r3, #7
 8003c66:	2b04      	cmp	r3, #4
 8003c68:	d00b      	beq.n	8003c82 <xPortStartScheduler+0xbe>
        __asm volatile
 8003c6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c6e:	f383 8811 	msr	BASEPRI, r3
 8003c72:	f3bf 8f6f 	isb	sy
 8003c76:	f3bf 8f4f 	dsb	sy
 8003c7a:	60bb      	str	r3, [r7, #8]
    }
 8003c7c:	bf00      	nop
 8003c7e:	bf00      	nop
 8003c80:	e7fd      	b.n	8003c7e <xPortStartScheduler+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003c82:	4b1e      	ldr	r3, [pc, #120]	@ (8003cfc <xPortStartScheduler+0x138>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	021b      	lsls	r3, r3, #8
 8003c88:	4a1c      	ldr	r2, [pc, #112]	@ (8003cfc <xPortStartScheduler+0x138>)
 8003c8a:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003c8c:	4b1b      	ldr	r3, [pc, #108]	@ (8003cfc <xPortStartScheduler+0x138>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003c94:	4a19      	ldr	r2, [pc, #100]	@ (8003cfc <xPortStartScheduler+0x138>)
 8003c96:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	b2da      	uxtb	r2, r3
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8003ca0:	4b17      	ldr	r3, [pc, #92]	@ (8003d00 <xPortStartScheduler+0x13c>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a16      	ldr	r2, [pc, #88]	@ (8003d00 <xPortStartScheduler+0x13c>)
 8003ca6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003caa:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003cac:	4b14      	ldr	r3, [pc, #80]	@ (8003d00 <xPortStartScheduler+0x13c>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a13      	ldr	r2, [pc, #76]	@ (8003d00 <xPortStartScheduler+0x13c>)
 8003cb2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8003cb6:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003cb8:	f000 f968 	bl	8003f8c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003cbc:	4b11      	ldr	r3, [pc, #68]	@ (8003d04 <xPortStartScheduler+0x140>)
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8003cc2:	f000 f987 	bl	8003fd4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003cc6:	4b10      	ldr	r3, [pc, #64]	@ (8003d08 <xPortStartScheduler+0x144>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a0f      	ldr	r2, [pc, #60]	@ (8003d08 <xPortStartScheduler+0x144>)
 8003ccc:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8003cd0:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8003cd2:	f7ff ff61 	bl	8003b98 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003cd6:	f7ff f84b 	bl	8002d70 <vTaskSwitchContext>
    prvTaskExitError();
 8003cda:	f7ff ff17 	bl	8003b0c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003cde:	2300      	movs	r3, #0
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	3718      	adds	r7, #24
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}
 8003ce8:	e000ed00 	.word	0xe000ed00
 8003cec:	410fc271 	.word	0x410fc271
 8003cf0:	410fc270 	.word	0x410fc270
 8003cf4:	e000e400 	.word	0xe000e400
 8003cf8:	20000254 	.word	0x20000254
 8003cfc:	20000258 	.word	0x20000258
 8003d00:	e000ed20 	.word	0xe000ed20
 8003d04:	2000000c 	.word	0x2000000c
 8003d08:	e000ef34 	.word	0xe000ef34

08003d0c <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b087      	sub	sp, #28
 8003d10:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003d12:	4b38      	ldr	r3, [pc, #224]	@ (8003df4 <vInitPrioGroupValue+0xe8>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a38      	ldr	r2, [pc, #224]	@ (8003df8 <vInitPrioGroupValue+0xec>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d10b      	bne.n	8003d34 <vInitPrioGroupValue+0x28>
        __asm volatile
 8003d1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d20:	f383 8811 	msr	BASEPRI, r3
 8003d24:	f3bf 8f6f 	isb	sy
 8003d28:	f3bf 8f4f 	dsb	sy
 8003d2c:	60fb      	str	r3, [r7, #12]
    }
 8003d2e:	bf00      	nop
 8003d30:	bf00      	nop
 8003d32:	e7fd      	b.n	8003d30 <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003d34:	4b2f      	ldr	r3, [pc, #188]	@ (8003df4 <vInitPrioGroupValue+0xe8>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a30      	ldr	r2, [pc, #192]	@ (8003dfc <vInitPrioGroupValue+0xf0>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d10b      	bne.n	8003d56 <vInitPrioGroupValue+0x4a>
        __asm volatile
 8003d3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d42:	f383 8811 	msr	BASEPRI, r3
 8003d46:	f3bf 8f6f 	isb	sy
 8003d4a:	f3bf 8f4f 	dsb	sy
 8003d4e:	613b      	str	r3, [r7, #16]
    }
 8003d50:	bf00      	nop
 8003d52:	bf00      	nop
 8003d54:	e7fd      	b.n	8003d52 <vInitPrioGroupValue+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003d56:	4b2a      	ldr	r3, [pc, #168]	@ (8003e00 <vInitPrioGroupValue+0xf4>)
 8003d58:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	781b      	ldrb	r3, [r3, #0]
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	22ff      	movs	r2, #255	@ 0xff
 8003d66:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	781b      	ldrb	r3, [r3, #0]
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003d70:	78fb      	ldrb	r3, [r7, #3]
 8003d72:	b2db      	uxtb	r3, r3
 8003d74:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003d78:	b2da      	uxtb	r2, r3
 8003d7a:	4b22      	ldr	r3, [pc, #136]	@ (8003e04 <vInitPrioGroupValue+0xf8>)
 8003d7c:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003d7e:	4b22      	ldr	r3, [pc, #136]	@ (8003e08 <vInitPrioGroupValue+0xfc>)
 8003d80:	2207      	movs	r2, #7
 8003d82:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003d84:	e009      	b.n	8003d9a <vInitPrioGroupValue+0x8e>
            {
                ulMaxPRIGROUPValue--;
 8003d86:	4b20      	ldr	r3, [pc, #128]	@ (8003e08 <vInitPrioGroupValue+0xfc>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	3b01      	subs	r3, #1
 8003d8c:	4a1e      	ldr	r2, [pc, #120]	@ (8003e08 <vInitPrioGroupValue+0xfc>)
 8003d8e:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003d90:	78fb      	ldrb	r3, [r7, #3]
 8003d92:	b2db      	uxtb	r3, r3
 8003d94:	005b      	lsls	r3, r3, #1
 8003d96:	b2db      	uxtb	r3, r3
 8003d98:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003d9a:	78fb      	ldrb	r3, [r7, #3]
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003da2:	2b80      	cmp	r3, #128	@ 0x80
 8003da4:	d0ef      	beq.n	8003d86 <vInitPrioGroupValue+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003da6:	4b18      	ldr	r3, [pc, #96]	@ (8003e08 <vInitPrioGroupValue+0xfc>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f1c3 0307 	rsb	r3, r3, #7
 8003dae:	2b04      	cmp	r3, #4
 8003db0:	d00b      	beq.n	8003dca <vInitPrioGroupValue+0xbe>
        __asm volatile
 8003db2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003db6:	f383 8811 	msr	BASEPRI, r3
 8003dba:	f3bf 8f6f 	isb	sy
 8003dbe:	f3bf 8f4f 	dsb	sy
 8003dc2:	60bb      	str	r3, [r7, #8]
    }
 8003dc4:	bf00      	nop
 8003dc6:	bf00      	nop
 8003dc8:	e7fd      	b.n	8003dc6 <vInitPrioGroupValue+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003dca:	4b0f      	ldr	r3, [pc, #60]	@ (8003e08 <vInitPrioGroupValue+0xfc>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	021b      	lsls	r3, r3, #8
 8003dd0:	4a0d      	ldr	r2, [pc, #52]	@ (8003e08 <vInitPrioGroupValue+0xfc>)
 8003dd2:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003dd4:	4b0c      	ldr	r3, [pc, #48]	@ (8003e08 <vInitPrioGroupValue+0xfc>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003ddc:	4a0a      	ldr	r2, [pc, #40]	@ (8003e08 <vInitPrioGroupValue+0xfc>)
 8003dde:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	b2da      	uxtb	r2, r3
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8003de8:	bf00      	nop
 8003dea:	371c      	adds	r7, #28
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr
 8003df4:	e000ed00 	.word	0xe000ed00
 8003df8:	410fc271 	.word	0x410fc271
 8003dfc:	410fc270 	.word	0x410fc270
 8003e00:	e000e400 	.word	0xe000e400
 8003e04:	20000254 	.word	0x20000254
 8003e08:	20000258 	.word	0x20000258

08003e0c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b083      	sub	sp, #12
 8003e10:	af00      	add	r7, sp, #0
        __asm volatile
 8003e12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e16:	f383 8811 	msr	BASEPRI, r3
 8003e1a:	f3bf 8f6f 	isb	sy
 8003e1e:	f3bf 8f4f 	dsb	sy
 8003e22:	607b      	str	r3, [r7, #4]
    }
 8003e24:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8003e26:	4b10      	ldr	r3, [pc, #64]	@ (8003e68 <vPortEnterCritical+0x5c>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	3301      	adds	r3, #1
 8003e2c:	4a0e      	ldr	r2, [pc, #56]	@ (8003e68 <vPortEnterCritical+0x5c>)
 8003e2e:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003e30:	4b0d      	ldr	r3, [pc, #52]	@ (8003e68 <vPortEnterCritical+0x5c>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d110      	bne.n	8003e5a <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003e38:	4b0c      	ldr	r3, [pc, #48]	@ (8003e6c <vPortEnterCritical+0x60>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d00b      	beq.n	8003e5a <vPortEnterCritical+0x4e>
        __asm volatile
 8003e42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e46:	f383 8811 	msr	BASEPRI, r3
 8003e4a:	f3bf 8f6f 	isb	sy
 8003e4e:	f3bf 8f4f 	dsb	sy
 8003e52:	603b      	str	r3, [r7, #0]
    }
 8003e54:	bf00      	nop
 8003e56:	bf00      	nop
 8003e58:	e7fd      	b.n	8003e56 <vPortEnterCritical+0x4a>
    }
}
 8003e5a:	bf00      	nop
 8003e5c:	370c      	adds	r7, #12
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr
 8003e66:	bf00      	nop
 8003e68:	2000000c 	.word	0x2000000c
 8003e6c:	e000ed04 	.word	0xe000ed04

08003e70 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003e70:	b480      	push	{r7}
 8003e72:	b083      	sub	sp, #12
 8003e74:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8003e76:	4b12      	ldr	r3, [pc, #72]	@ (8003ec0 <vPortExitCritical+0x50>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d10b      	bne.n	8003e96 <vPortExitCritical+0x26>
        __asm volatile
 8003e7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e82:	f383 8811 	msr	BASEPRI, r3
 8003e86:	f3bf 8f6f 	isb	sy
 8003e8a:	f3bf 8f4f 	dsb	sy
 8003e8e:	607b      	str	r3, [r7, #4]
    }
 8003e90:	bf00      	nop
 8003e92:	bf00      	nop
 8003e94:	e7fd      	b.n	8003e92 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8003e96:	4b0a      	ldr	r3, [pc, #40]	@ (8003ec0 <vPortExitCritical+0x50>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	3b01      	subs	r3, #1
 8003e9c:	4a08      	ldr	r2, [pc, #32]	@ (8003ec0 <vPortExitCritical+0x50>)
 8003e9e:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003ea0:	4b07      	ldr	r3, [pc, #28]	@ (8003ec0 <vPortExitCritical+0x50>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d105      	bne.n	8003eb4 <vPortExitCritical+0x44>
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	f383 8811 	msr	BASEPRI, r3
    }
 8003eb2:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8003eb4:	bf00      	nop
 8003eb6:	370c      	adds	r7, #12
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr
 8003ec0:	2000000c 	.word	0x2000000c
	...

08003ed0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003ed0:	f3ef 8009 	mrs	r0, PSP
 8003ed4:	f3bf 8f6f 	isb	sy
 8003ed8:	4b15      	ldr	r3, [pc, #84]	@ (8003f30 <pxCurrentTCBConst>)
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	f01e 0f10 	tst.w	lr, #16
 8003ee0:	bf08      	it	eq
 8003ee2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003ee6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003eea:	6010      	str	r0, [r2, #0]
 8003eec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003ef0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8003ef4:	f380 8811 	msr	BASEPRI, r0
 8003ef8:	f3bf 8f4f 	dsb	sy
 8003efc:	f3bf 8f6f 	isb	sy
 8003f00:	f7fe ff36 	bl	8002d70 <vTaskSwitchContext>
 8003f04:	f04f 0000 	mov.w	r0, #0
 8003f08:	f380 8811 	msr	BASEPRI, r0
 8003f0c:	bc09      	pop	{r0, r3}
 8003f0e:	6819      	ldr	r1, [r3, #0]
 8003f10:	6808      	ldr	r0, [r1, #0]
 8003f12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f16:	f01e 0f10 	tst.w	lr, #16
 8003f1a:	bf08      	it	eq
 8003f1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003f20:	f380 8809 	msr	PSP, r0
 8003f24:	f3bf 8f6f 	isb	sy
 8003f28:	4770      	bx	lr
 8003f2a:	bf00      	nop
 8003f2c:	f3af 8000 	nop.w

08003f30 <pxCurrentTCBConst>:
 8003f30:	20000114 	.word	0x20000114
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003f34:	bf00      	nop
 8003f36:	bf00      	nop

08003f38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b082      	sub	sp, #8
 8003f3c:	af00      	add	r7, sp, #0
        __asm volatile
 8003f3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f42:	f383 8811 	msr	BASEPRI, r3
 8003f46:	f3bf 8f6f 	isb	sy
 8003f4a:	f3bf 8f4f 	dsb	sy
 8003f4e:	607b      	str	r3, [r7, #4]
    }
 8003f50:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8003f52:	f001 fdd3 	bl	8005afc <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003f56:	f7fe fe4d 	bl	8002bf4 <xTaskIncrementTick>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d006      	beq.n	8003f6e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8003f60:	f001 fe2a 	bl	8005bb8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003f64:	4b08      	ldr	r3, [pc, #32]	@ (8003f88 <SysTick_Handler+0x50>)
 8003f66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f6a:	601a      	str	r2, [r3, #0]
 8003f6c:	e001      	b.n	8003f72 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 8003f6e:	f001 fe07 	bl	8005b80 <SEGGER_SYSVIEW_RecordExitISR>
 8003f72:	2300      	movs	r3, #0
 8003f74:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	f383 8811 	msr	BASEPRI, r3
    }
 8003f7c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 8003f7e:	bf00      	nop
 8003f80:	3708      	adds	r7, #8
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}
 8003f86:	bf00      	nop
 8003f88:	e000ed04 	.word	0xe000ed04

08003f8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003f90:	4b0b      	ldr	r3, [pc, #44]	@ (8003fc0 <vPortSetupTimerInterrupt+0x34>)
 8003f92:	2200      	movs	r2, #0
 8003f94:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003f96:	4b0b      	ldr	r3, [pc, #44]	@ (8003fc4 <vPortSetupTimerInterrupt+0x38>)
 8003f98:	2200      	movs	r2, #0
 8003f9a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003f9c:	4b0a      	ldr	r3, [pc, #40]	@ (8003fc8 <vPortSetupTimerInterrupt+0x3c>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a0a      	ldr	r2, [pc, #40]	@ (8003fcc <vPortSetupTimerInterrupt+0x40>)
 8003fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8003fa6:	099b      	lsrs	r3, r3, #6
 8003fa8:	4a09      	ldr	r2, [pc, #36]	@ (8003fd0 <vPortSetupTimerInterrupt+0x44>)
 8003faa:	3b01      	subs	r3, #1
 8003fac:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003fae:	4b04      	ldr	r3, [pc, #16]	@ (8003fc0 <vPortSetupTimerInterrupt+0x34>)
 8003fb0:	2207      	movs	r2, #7
 8003fb2:	601a      	str	r2, [r3, #0]
}
 8003fb4:	bf00      	nop
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr
 8003fbe:	bf00      	nop
 8003fc0:	e000e010 	.word	0xe000e010
 8003fc4:	e000e018 	.word	0xe000e018
 8003fc8:	20000000 	.word	0x20000000
 8003fcc:	10624dd3 	.word	0x10624dd3
 8003fd0:	e000e014 	.word	0xe000e014

08003fd4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003fd4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8003fe4 <vPortEnableVFP+0x10>
 8003fd8:	6801      	ldr	r1, [r0, #0]
 8003fda:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8003fde:	6001      	str	r1, [r0, #0]
 8003fe0:	4770      	bx	lr
 8003fe2:	0000      	.short	0x0000
 8003fe4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8003fe8:	bf00      	nop
 8003fea:	bf00      	nop

08003fec <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8003fec:	b480      	push	{r7}
 8003fee:	b085      	sub	sp, #20
 8003ff0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8003ff2:	f3ef 8305 	mrs	r3, IPSR
 8003ff6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2b0f      	cmp	r3, #15
 8003ffc:	d915      	bls.n	800402a <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003ffe:	4a18      	ldr	r2, [pc, #96]	@ (8004060 <vPortValidateInterruptPriority+0x74>)
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	4413      	add	r3, r2
 8004004:	781b      	ldrb	r3, [r3, #0]
 8004006:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004008:	4b16      	ldr	r3, [pc, #88]	@ (8004064 <vPortValidateInterruptPriority+0x78>)
 800400a:	781b      	ldrb	r3, [r3, #0]
 800400c:	7afa      	ldrb	r2, [r7, #11]
 800400e:	429a      	cmp	r2, r3
 8004010:	d20b      	bcs.n	800402a <vPortValidateInterruptPriority+0x3e>
        __asm volatile
 8004012:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004016:	f383 8811 	msr	BASEPRI, r3
 800401a:	f3bf 8f6f 	isb	sy
 800401e:	f3bf 8f4f 	dsb	sy
 8004022:	607b      	str	r3, [r7, #4]
    }
 8004024:	bf00      	nop
 8004026:	bf00      	nop
 8004028:	e7fd      	b.n	8004026 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800402a:	4b0f      	ldr	r3, [pc, #60]	@ (8004068 <vPortValidateInterruptPriority+0x7c>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004032:	4b0e      	ldr	r3, [pc, #56]	@ (800406c <vPortValidateInterruptPriority+0x80>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	429a      	cmp	r2, r3
 8004038:	d90b      	bls.n	8004052 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 800403a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800403e:	f383 8811 	msr	BASEPRI, r3
 8004042:	f3bf 8f6f 	isb	sy
 8004046:	f3bf 8f4f 	dsb	sy
 800404a:	603b      	str	r3, [r7, #0]
    }
 800404c:	bf00      	nop
 800404e:	bf00      	nop
 8004050:	e7fd      	b.n	800404e <vPortValidateInterruptPriority+0x62>
    }
 8004052:	bf00      	nop
 8004054:	3714      	adds	r7, #20
 8004056:	46bd      	mov	sp, r7
 8004058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405c:	4770      	bx	lr
 800405e:	bf00      	nop
 8004060:	e000e3f0 	.word	0xe000e3f0
 8004064:	20000254 	.word	0x20000254
 8004068:	e000ed0c 	.word	0xe000ed0c
 800406c:	20000258 	.word	0x20000258

08004070 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b08a      	sub	sp, #40	@ 0x28
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8004078:	2300      	movs	r3, #0
 800407a:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 800407c:	f7fe fce8 	bl	8002a50 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8004080:	4b66      	ldr	r3, [pc, #408]	@ (800421c <pvPortMalloc+0x1ac>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d101      	bne.n	800408c <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004088:	f000 f938 	bl	80042fc <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800408c:	4b64      	ldr	r3, [pc, #400]	@ (8004220 <pvPortMalloc+0x1b0>)
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	4013      	ands	r3, r2
 8004094:	2b00      	cmp	r3, #0
 8004096:	f040 80a9 	bne.w	80041ec <pvPortMalloc+0x17c>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d02e      	beq.n	80040fe <pvPortMalloc+0x8e>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80040a0:	2208      	movs	r2, #8
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 80040a6:	687a      	ldr	r2, [r7, #4]
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d228      	bcs.n	80040fe <pvPortMalloc+0x8e>
            {
                xWantedSize += xHeapStructSize;
 80040ac:	2208      	movs	r2, #8
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	4413      	add	r3, r2
 80040b2:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	f003 0307 	and.w	r3, r3, #7
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d022      	beq.n	8004104 <pvPortMalloc+0x94>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	f023 0307 	bic.w	r3, r3, #7
 80040c4:	3308      	adds	r3, #8
 80040c6:	687a      	ldr	r2, [r7, #4]
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d215      	bcs.n	80040f8 <pvPortMalloc+0x88>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	f023 0307 	bic.w	r3, r3, #7
 80040d2:	3308      	adds	r3, #8
 80040d4:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	f003 0307 	and.w	r3, r3, #7
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d011      	beq.n	8004104 <pvPortMalloc+0x94>
        __asm volatile
 80040e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040e4:	f383 8811 	msr	BASEPRI, r3
 80040e8:	f3bf 8f6f 	isb	sy
 80040ec:	f3bf 8f4f 	dsb	sy
 80040f0:	617b      	str	r3, [r7, #20]
    }
 80040f2:	bf00      	nop
 80040f4:	bf00      	nop
 80040f6:	e7fd      	b.n	80040f4 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 80040f8:	2300      	movs	r3, #0
 80040fa:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80040fc:	e002      	b.n	8004104 <pvPortMalloc+0x94>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 80040fe:	2300      	movs	r3, #0
 8004100:	607b      	str	r3, [r7, #4]
 8004102:	e000      	b.n	8004106 <pvPortMalloc+0x96>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004104:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d06f      	beq.n	80041ec <pvPortMalloc+0x17c>
 800410c:	4b45      	ldr	r3, [pc, #276]	@ (8004224 <pvPortMalloc+0x1b4>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	687a      	ldr	r2, [r7, #4]
 8004112:	429a      	cmp	r2, r3
 8004114:	d86a      	bhi.n	80041ec <pvPortMalloc+0x17c>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004116:	4b44      	ldr	r3, [pc, #272]	@ (8004228 <pvPortMalloc+0x1b8>)
 8004118:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800411a:	4b43      	ldr	r3, [pc, #268]	@ (8004228 <pvPortMalloc+0x1b8>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004120:	e004      	b.n	800412c <pvPortMalloc+0xbc>
                {
                    pxPreviousBlock = pxBlock;
 8004122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004124:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800412c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	687a      	ldr	r2, [r7, #4]
 8004132:	429a      	cmp	r2, r3
 8004134:	d903      	bls.n	800413e <pvPortMalloc+0xce>
 8004136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d1f1      	bne.n	8004122 <pvPortMalloc+0xb2>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800413e:	4b37      	ldr	r3, [pc, #220]	@ (800421c <pvPortMalloc+0x1ac>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004144:	429a      	cmp	r2, r3
 8004146:	d051      	beq.n	80041ec <pvPortMalloc+0x17c>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004148:	6a3b      	ldr	r3, [r7, #32]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	2208      	movs	r2, #8
 800414e:	4413      	add	r3, r2
 8004150:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	6a3b      	ldr	r3, [r7, #32]
 8004158:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800415a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800415c:	685a      	ldr	r2, [r3, #4]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	1ad2      	subs	r2, r2, r3
 8004162:	2308      	movs	r3, #8
 8004164:	005b      	lsls	r3, r3, #1
 8004166:	429a      	cmp	r2, r3
 8004168:	d920      	bls.n	80041ac <pvPortMalloc+0x13c>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800416a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	4413      	add	r3, r2
 8004170:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004172:	69bb      	ldr	r3, [r7, #24]
 8004174:	f003 0307 	and.w	r3, r3, #7
 8004178:	2b00      	cmp	r3, #0
 800417a:	d00b      	beq.n	8004194 <pvPortMalloc+0x124>
        __asm volatile
 800417c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004180:	f383 8811 	msr	BASEPRI, r3
 8004184:	f3bf 8f6f 	isb	sy
 8004188:	f3bf 8f4f 	dsb	sy
 800418c:	613b      	str	r3, [r7, #16]
    }
 800418e:	bf00      	nop
 8004190:	bf00      	nop
 8004192:	e7fd      	b.n	8004190 <pvPortMalloc+0x120>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004196:	685a      	ldr	r2, [r3, #4]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	1ad2      	subs	r2, r2, r3
 800419c:	69bb      	ldr	r3, [r7, #24]
 800419e:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80041a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041a2:	687a      	ldr	r2, [r7, #4]
 80041a4:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80041a6:	69b8      	ldr	r0, [r7, #24]
 80041a8:	f000 f90a 	bl	80043c0 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80041ac:	4b1d      	ldr	r3, [pc, #116]	@ (8004224 <pvPortMalloc+0x1b4>)
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	1ad3      	subs	r3, r2, r3
 80041b6:	4a1b      	ldr	r2, [pc, #108]	@ (8004224 <pvPortMalloc+0x1b4>)
 80041b8:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80041ba:	4b1a      	ldr	r3, [pc, #104]	@ (8004224 <pvPortMalloc+0x1b4>)
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	4b1b      	ldr	r3, [pc, #108]	@ (800422c <pvPortMalloc+0x1bc>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	429a      	cmp	r2, r3
 80041c4:	d203      	bcs.n	80041ce <pvPortMalloc+0x15e>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80041c6:	4b17      	ldr	r3, [pc, #92]	@ (8004224 <pvPortMalloc+0x1b4>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a18      	ldr	r2, [pc, #96]	@ (800422c <pvPortMalloc+0x1bc>)
 80041cc:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80041ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041d0:	685a      	ldr	r2, [r3, #4]
 80041d2:	4b13      	ldr	r3, [pc, #76]	@ (8004220 <pvPortMalloc+0x1b0>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	431a      	orrs	r2, r3
 80041d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041da:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80041dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041de:	2200      	movs	r2, #0
 80041e0:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80041e2:	4b13      	ldr	r3, [pc, #76]	@ (8004230 <pvPortMalloc+0x1c0>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	3301      	adds	r3, #1
 80041e8:	4a11      	ldr	r2, [pc, #68]	@ (8004230 <pvPortMalloc+0x1c0>)
 80041ea:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80041ec:	f7fe fc3e 	bl	8002a6c <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80041f0:	69fb      	ldr	r3, [r7, #28]
 80041f2:	f003 0307 	and.w	r3, r3, #7
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d00b      	beq.n	8004212 <pvPortMalloc+0x1a2>
        __asm volatile
 80041fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041fe:	f383 8811 	msr	BASEPRI, r3
 8004202:	f3bf 8f6f 	isb	sy
 8004206:	f3bf 8f4f 	dsb	sy
 800420a:	60fb      	str	r3, [r7, #12]
    }
 800420c:	bf00      	nop
 800420e:	bf00      	nop
 8004210:	e7fd      	b.n	800420e <pvPortMalloc+0x19e>
    return pvReturn;
 8004212:	69fb      	ldr	r3, [r7, #28]
}
 8004214:	4618      	mov	r0, r3
 8004216:	3728      	adds	r7, #40	@ 0x28
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}
 800421c:	20012e64 	.word	0x20012e64
 8004220:	20012e78 	.word	0x20012e78
 8004224:	20012e68 	.word	0x20012e68
 8004228:	20012e5c 	.word	0x20012e5c
 800422c:	20012e6c 	.word	0x20012e6c
 8004230:	20012e70 	.word	0x20012e70

08004234 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b086      	sub	sp, #24
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d04f      	beq.n	80042e6 <vPortFree+0xb2>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004246:	2308      	movs	r3, #8
 8004248:	425b      	negs	r3, r3
 800424a:	697a      	ldr	r2, [r7, #20]
 800424c:	4413      	add	r3, r2
 800424e:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	685a      	ldr	r2, [r3, #4]
 8004258:	4b25      	ldr	r3, [pc, #148]	@ (80042f0 <vPortFree+0xbc>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4013      	ands	r3, r2
 800425e:	2b00      	cmp	r3, #0
 8004260:	d10b      	bne.n	800427a <vPortFree+0x46>
        __asm volatile
 8004262:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004266:	f383 8811 	msr	BASEPRI, r3
 800426a:	f3bf 8f6f 	isb	sy
 800426e:	f3bf 8f4f 	dsb	sy
 8004272:	60fb      	str	r3, [r7, #12]
    }
 8004274:	bf00      	nop
 8004276:	bf00      	nop
 8004278:	e7fd      	b.n	8004276 <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d00b      	beq.n	800429a <vPortFree+0x66>
        __asm volatile
 8004282:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004286:	f383 8811 	msr	BASEPRI, r3
 800428a:	f3bf 8f6f 	isb	sy
 800428e:	f3bf 8f4f 	dsb	sy
 8004292:	60bb      	str	r3, [r7, #8]
    }
 8004294:	bf00      	nop
 8004296:	bf00      	nop
 8004298:	e7fd      	b.n	8004296 <vPortFree+0x62>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	685a      	ldr	r2, [r3, #4]
 800429e:	4b14      	ldr	r3, [pc, #80]	@ (80042f0 <vPortFree+0xbc>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4013      	ands	r3, r2
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d01e      	beq.n	80042e6 <vPortFree+0xb2>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d11a      	bne.n	80042e6 <vPortFree+0xb2>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	685a      	ldr	r2, [r3, #4]
 80042b4:	4b0e      	ldr	r3, [pc, #56]	@ (80042f0 <vPortFree+0xbc>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	43db      	mvns	r3, r3
 80042ba:	401a      	ands	r2, r3
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80042c0:	f7fe fbc6 	bl	8002a50 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	685a      	ldr	r2, [r3, #4]
 80042c8:	4b0a      	ldr	r3, [pc, #40]	@ (80042f4 <vPortFree+0xc0>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4413      	add	r3, r2
 80042ce:	4a09      	ldr	r2, [pc, #36]	@ (80042f4 <vPortFree+0xc0>)
 80042d0:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80042d2:	6938      	ldr	r0, [r7, #16]
 80042d4:	f000 f874 	bl	80043c0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80042d8:	4b07      	ldr	r3, [pc, #28]	@ (80042f8 <vPortFree+0xc4>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	3301      	adds	r3, #1
 80042de:	4a06      	ldr	r2, [pc, #24]	@ (80042f8 <vPortFree+0xc4>)
 80042e0:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80042e2:	f7fe fbc3 	bl	8002a6c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80042e6:	bf00      	nop
 80042e8:	3718      	adds	r7, #24
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}
 80042ee:	bf00      	nop
 80042f0:	20012e78 	.word	0x20012e78
 80042f4:	20012e68 	.word	0x20012e68
 80042f8:	20012e74 	.word	0x20012e74

080042fc <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80042fc:	b480      	push	{r7}
 80042fe:	b085      	sub	sp, #20
 8004300:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004302:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 8004306:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8004308:	4b27      	ldr	r3, [pc, #156]	@ (80043a8 <prvHeapInit+0xac>)
 800430a:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	f003 0307 	and.w	r3, r3, #7
 8004312:	2b00      	cmp	r3, #0
 8004314:	d00c      	beq.n	8004330 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	3307      	adds	r3, #7
 800431a:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f023 0307 	bic.w	r3, r3, #7
 8004322:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004324:	68ba      	ldr	r2, [r7, #8]
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	1ad3      	subs	r3, r2, r3
 800432a:	4a1f      	ldr	r2, [pc, #124]	@ (80043a8 <prvHeapInit+0xac>)
 800432c:	4413      	add	r3, r2
 800432e:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004334:	4a1d      	ldr	r2, [pc, #116]	@ (80043ac <prvHeapInit+0xb0>)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800433a:	4b1c      	ldr	r3, [pc, #112]	@ (80043ac <prvHeapInit+0xb0>)
 800433c:	2200      	movs	r2, #0
 800433e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	68ba      	ldr	r2, [r7, #8]
 8004344:	4413      	add	r3, r2
 8004346:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004348:	2208      	movs	r2, #8
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	1a9b      	subs	r3, r3, r2
 800434e:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f023 0307 	bic.w	r3, r3, #7
 8004356:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	4a15      	ldr	r2, [pc, #84]	@ (80043b0 <prvHeapInit+0xb4>)
 800435c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800435e:	4b14      	ldr	r3, [pc, #80]	@ (80043b0 <prvHeapInit+0xb4>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	2200      	movs	r2, #0
 8004364:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8004366:	4b12      	ldr	r3, [pc, #72]	@ (80043b0 <prvHeapInit+0xb4>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	2200      	movs	r2, #0
 800436c:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	68fa      	ldr	r2, [r7, #12]
 8004376:	1ad2      	subs	r2, r2, r3
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800437c:	4b0c      	ldr	r3, [pc, #48]	@ (80043b0 <prvHeapInit+0xb4>)
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	4a0a      	ldr	r2, [pc, #40]	@ (80043b4 <prvHeapInit+0xb8>)
 800438a:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	4a09      	ldr	r2, [pc, #36]	@ (80043b8 <prvHeapInit+0xbc>)
 8004392:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004394:	4b09      	ldr	r3, [pc, #36]	@ (80043bc <prvHeapInit+0xc0>)
 8004396:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800439a:	601a      	str	r2, [r3, #0]
}
 800439c:	bf00      	nop
 800439e:	3714      	adds	r7, #20
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr
 80043a8:	2000025c 	.word	0x2000025c
 80043ac:	20012e5c 	.word	0x20012e5c
 80043b0:	20012e64 	.word	0x20012e64
 80043b4:	20012e6c 	.word	0x20012e6c
 80043b8:	20012e68 	.word	0x20012e68
 80043bc:	20012e78 	.word	0x20012e78

080043c0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80043c0:	b480      	push	{r7}
 80043c2:	b085      	sub	sp, #20
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80043c8:	4b28      	ldr	r3, [pc, #160]	@ (800446c <prvInsertBlockIntoFreeList+0xac>)
 80043ca:	60fb      	str	r3, [r7, #12]
 80043cc:	e002      	b.n	80043d4 <prvInsertBlockIntoFreeList+0x14>
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	60fb      	str	r3, [r7, #12]
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	687a      	ldr	r2, [r7, #4]
 80043da:	429a      	cmp	r2, r3
 80043dc:	d8f7      	bhi.n	80043ce <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	68ba      	ldr	r2, [r7, #8]
 80043e8:	4413      	add	r3, r2
 80043ea:	687a      	ldr	r2, [r7, #4]
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d108      	bne.n	8004402 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	685a      	ldr	r2, [r3, #4]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	441a      	add	r2, r3
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	68ba      	ldr	r2, [r7, #8]
 800440c:	441a      	add	r2, r3
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	429a      	cmp	r2, r3
 8004414:	d118      	bne.n	8004448 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	4b15      	ldr	r3, [pc, #84]	@ (8004470 <prvInsertBlockIntoFreeList+0xb0>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	429a      	cmp	r2, r3
 8004420:	d00d      	beq.n	800443e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	685a      	ldr	r2, [r3, #4]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	441a      	add	r2, r3
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	601a      	str	r2, [r3, #0]
 800443c:	e008      	b.n	8004450 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800443e:	4b0c      	ldr	r3, [pc, #48]	@ (8004470 <prvInsertBlockIntoFreeList+0xb0>)
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	601a      	str	r2, [r3, #0]
 8004446:	e003      	b.n	8004450 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004450:	68fa      	ldr	r2, [r7, #12]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	429a      	cmp	r2, r3
 8004456:	d002      	beq.n	800445e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	687a      	ldr	r2, [r7, #4]
 800445c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800445e:	bf00      	nop
 8004460:	3714      	adds	r7, #20
 8004462:	46bd      	mov	sp, r7
 8004464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004468:	4770      	bx	lr
 800446a:	bf00      	nop
 800446c:	20012e5c 	.word	0x20012e5c
 8004470:	20012e64 	.word	0x20012e64

08004474 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004474:	b580      	push	{r7, lr}
 8004476:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8004478:	4803      	ldr	r0, [pc, #12]	@ (8004488 <_cbSendSystemDesc+0x14>)
 800447a:	f001 fae9 	bl	8005a50 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800447e:	4803      	ldr	r0, [pc, #12]	@ (800448c <_cbSendSystemDesc+0x18>)
 8004480:	f001 fae6 	bl	8005a50 <SEGGER_SYSVIEW_SendSysDesc>
}
 8004484:	bf00      	nop
 8004486:	bd80      	pop	{r7, pc}
 8004488:	08006b18 	.word	0x08006b18
 800448c:	08006b4c 	.word	0x08006b4c

08004490 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004490:	b580      	push	{r7, lr}
 8004492:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004494:	4b06      	ldr	r3, [pc, #24]	@ (80044b0 <SEGGER_SYSVIEW_Conf+0x20>)
 8004496:	6818      	ldr	r0, [r3, #0]
 8004498:	4b05      	ldr	r3, [pc, #20]	@ (80044b0 <SEGGER_SYSVIEW_Conf+0x20>)
 800449a:	6819      	ldr	r1, [r3, #0]
 800449c:	4b05      	ldr	r3, [pc, #20]	@ (80044b4 <SEGGER_SYSVIEW_Conf+0x24>)
 800449e:	4a06      	ldr	r2, [pc, #24]	@ (80044b8 <SEGGER_SYSVIEW_Conf+0x28>)
 80044a0:	f000 fe54 	bl	800514c <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 80044a4:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 80044a8:	f000 fe94 	bl	80051d4 <SEGGER_SYSVIEW_SetRAMBase>
}
 80044ac:	bf00      	nop
 80044ae:	bd80      	pop	{r7, pc}
 80044b0:	20000000 	.word	0x20000000
 80044b4:	08004475 	.word	0x08004475
 80044b8:	08006bf0 	.word	0x08006bf0

080044bc <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 80044bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044be:	b085      	sub	sp, #20
 80044c0:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 80044c2:	2300      	movs	r3, #0
 80044c4:	607b      	str	r3, [r7, #4]
 80044c6:	e033      	b.n	8004530 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 80044c8:	491e      	ldr	r1, [pc, #120]	@ (8004544 <_cbSendTaskList+0x88>)
 80044ca:	687a      	ldr	r2, [r7, #4]
 80044cc:	4613      	mov	r3, r2
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	4413      	add	r3, r2
 80044d2:	009b      	lsls	r3, r3, #2
 80044d4:	440b      	add	r3, r1
 80044d6:	6818      	ldr	r0, [r3, #0]
 80044d8:	491a      	ldr	r1, [pc, #104]	@ (8004544 <_cbSendTaskList+0x88>)
 80044da:	687a      	ldr	r2, [r7, #4]
 80044dc:	4613      	mov	r3, r2
 80044de:	009b      	lsls	r3, r3, #2
 80044e0:	4413      	add	r3, r2
 80044e2:	009b      	lsls	r3, r3, #2
 80044e4:	440b      	add	r3, r1
 80044e6:	3304      	adds	r3, #4
 80044e8:	6819      	ldr	r1, [r3, #0]
 80044ea:	4c16      	ldr	r4, [pc, #88]	@ (8004544 <_cbSendTaskList+0x88>)
 80044ec:	687a      	ldr	r2, [r7, #4]
 80044ee:	4613      	mov	r3, r2
 80044f0:	009b      	lsls	r3, r3, #2
 80044f2:	4413      	add	r3, r2
 80044f4:	009b      	lsls	r3, r3, #2
 80044f6:	4423      	add	r3, r4
 80044f8:	3308      	adds	r3, #8
 80044fa:	681c      	ldr	r4, [r3, #0]
 80044fc:	4d11      	ldr	r5, [pc, #68]	@ (8004544 <_cbSendTaskList+0x88>)
 80044fe:	687a      	ldr	r2, [r7, #4]
 8004500:	4613      	mov	r3, r2
 8004502:	009b      	lsls	r3, r3, #2
 8004504:	4413      	add	r3, r2
 8004506:	009b      	lsls	r3, r3, #2
 8004508:	442b      	add	r3, r5
 800450a:	330c      	adds	r3, #12
 800450c:	681d      	ldr	r5, [r3, #0]
 800450e:	4e0d      	ldr	r6, [pc, #52]	@ (8004544 <_cbSendTaskList+0x88>)
 8004510:	687a      	ldr	r2, [r7, #4]
 8004512:	4613      	mov	r3, r2
 8004514:	009b      	lsls	r3, r3, #2
 8004516:	4413      	add	r3, r2
 8004518:	009b      	lsls	r3, r3, #2
 800451a:	4433      	add	r3, r6
 800451c:	3310      	adds	r3, #16
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	9300      	str	r3, [sp, #0]
 8004522:	462b      	mov	r3, r5
 8004524:	4622      	mov	r2, r4
 8004526:	f000 f8bd 	bl	80046a4 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	3301      	adds	r3, #1
 800452e:	607b      	str	r3, [r7, #4]
 8004530:	4b05      	ldr	r3, [pc, #20]	@ (8004548 <_cbSendTaskList+0x8c>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	687a      	ldr	r2, [r7, #4]
 8004536:	429a      	cmp	r2, r3
 8004538:	d3c6      	bcc.n	80044c8 <_cbSendTaskList+0xc>
  }
}
 800453a:	bf00      	nop
 800453c:	bf00      	nop
 800453e:	370c      	adds	r7, #12
 8004540:	46bd      	mov	sp, r7
 8004542:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004544:	20012e7c 	.word	0x20012e7c
 8004548:	20012f1c 	.word	0x20012f1c

0800454c <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 800454c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004550:	b082      	sub	sp, #8
 8004552:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004554:	f7fe fb3c 	bl	8002bd0 <xTaskGetTickCountFromISR>
 8004558:	4603      	mov	r3, r0
 800455a:	2200      	movs	r2, #0
 800455c:	469a      	mov	sl, r3
 800455e:	4693      	mov	fp, r2
 8004560:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004564:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004568:	4602      	mov	r2, r0
 800456a:	460b      	mov	r3, r1
 800456c:	f04f 0a00 	mov.w	sl, #0
 8004570:	f04f 0b00 	mov.w	fp, #0
 8004574:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8004578:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 800457c:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8004580:	4652      	mov	r2, sl
 8004582:	465b      	mov	r3, fp
 8004584:	1a14      	subs	r4, r2, r0
 8004586:	eb63 0501 	sbc.w	r5, r3, r1
 800458a:	f04f 0200 	mov.w	r2, #0
 800458e:	f04f 0300 	mov.w	r3, #0
 8004592:	00ab      	lsls	r3, r5, #2
 8004594:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8004598:	00a2      	lsls	r2, r4, #2
 800459a:	4614      	mov	r4, r2
 800459c:	461d      	mov	r5, r3
 800459e:	eb14 0800 	adds.w	r8, r4, r0
 80045a2:	eb45 0901 	adc.w	r9, r5, r1
 80045a6:	f04f 0200 	mov.w	r2, #0
 80045aa:	f04f 0300 	mov.w	r3, #0
 80045ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80045b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80045b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80045ba:	4690      	mov	r8, r2
 80045bc:	4699      	mov	r9, r3
 80045be:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 80045c2:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 80045c6:	4610      	mov	r0, r2
 80045c8:	4619      	mov	r1, r3
 80045ca:	3708      	adds	r7, #8
 80045cc:	46bd      	mov	sp, r7
 80045ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080045d4 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b086      	sub	sp, #24
 80045d8:	af02      	add	r7, sp, #8
 80045da:	60f8      	str	r0, [r7, #12]
 80045dc:	60b9      	str	r1, [r7, #8]
 80045de:	607a      	str	r2, [r7, #4]
 80045e0:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80045e2:	2205      	movs	r2, #5
 80045e4:	492b      	ldr	r1, [pc, #172]	@ (8004694 <SYSVIEW_AddTask+0xc0>)
 80045e6:	68b8      	ldr	r0, [r7, #8]
 80045e8:	f001 ff96 	bl	8006518 <memcmp>
 80045ec:	4603      	mov	r3, r0
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d04b      	beq.n	800468a <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80045f2:	4b29      	ldr	r3, [pc, #164]	@ (8004698 <SYSVIEW_AddTask+0xc4>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	2b07      	cmp	r3, #7
 80045f8:	d903      	bls.n	8004602 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80045fa:	4828      	ldr	r0, [pc, #160]	@ (800469c <SYSVIEW_AddTask+0xc8>)
 80045fc:	f001 fd26 	bl	800604c <SEGGER_SYSVIEW_Warn>
    return;
 8004600:	e044      	b.n	800468c <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004602:	4b25      	ldr	r3, [pc, #148]	@ (8004698 <SYSVIEW_AddTask+0xc4>)
 8004604:	681a      	ldr	r2, [r3, #0]
 8004606:	4926      	ldr	r1, [pc, #152]	@ (80046a0 <SYSVIEW_AddTask+0xcc>)
 8004608:	4613      	mov	r3, r2
 800460a:	009b      	lsls	r3, r3, #2
 800460c:	4413      	add	r3, r2
 800460e:	009b      	lsls	r3, r3, #2
 8004610:	440b      	add	r3, r1
 8004612:	68fa      	ldr	r2, [r7, #12]
 8004614:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004616:	4b20      	ldr	r3, [pc, #128]	@ (8004698 <SYSVIEW_AddTask+0xc4>)
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	4921      	ldr	r1, [pc, #132]	@ (80046a0 <SYSVIEW_AddTask+0xcc>)
 800461c:	4613      	mov	r3, r2
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	4413      	add	r3, r2
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	440b      	add	r3, r1
 8004626:	3304      	adds	r3, #4
 8004628:	68ba      	ldr	r2, [r7, #8]
 800462a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 800462c:	4b1a      	ldr	r3, [pc, #104]	@ (8004698 <SYSVIEW_AddTask+0xc4>)
 800462e:	681a      	ldr	r2, [r3, #0]
 8004630:	491b      	ldr	r1, [pc, #108]	@ (80046a0 <SYSVIEW_AddTask+0xcc>)
 8004632:	4613      	mov	r3, r2
 8004634:	009b      	lsls	r3, r3, #2
 8004636:	4413      	add	r3, r2
 8004638:	009b      	lsls	r3, r3, #2
 800463a:	440b      	add	r3, r1
 800463c:	3308      	adds	r3, #8
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004642:	4b15      	ldr	r3, [pc, #84]	@ (8004698 <SYSVIEW_AddTask+0xc4>)
 8004644:	681a      	ldr	r2, [r3, #0]
 8004646:	4916      	ldr	r1, [pc, #88]	@ (80046a0 <SYSVIEW_AddTask+0xcc>)
 8004648:	4613      	mov	r3, r2
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	4413      	add	r3, r2
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	440b      	add	r3, r1
 8004652:	330c      	adds	r3, #12
 8004654:	683a      	ldr	r2, [r7, #0]
 8004656:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004658:	4b0f      	ldr	r3, [pc, #60]	@ (8004698 <SYSVIEW_AddTask+0xc4>)
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	4910      	ldr	r1, [pc, #64]	@ (80046a0 <SYSVIEW_AddTask+0xcc>)
 800465e:	4613      	mov	r3, r2
 8004660:	009b      	lsls	r3, r3, #2
 8004662:	4413      	add	r3, r2
 8004664:	009b      	lsls	r3, r3, #2
 8004666:	440b      	add	r3, r1
 8004668:	3310      	adds	r3, #16
 800466a:	69ba      	ldr	r2, [r7, #24]
 800466c:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800466e:	4b0a      	ldr	r3, [pc, #40]	@ (8004698 <SYSVIEW_AddTask+0xc4>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	3301      	adds	r3, #1
 8004674:	4a08      	ldr	r2, [pc, #32]	@ (8004698 <SYSVIEW_AddTask+0xc4>)
 8004676:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004678:	69bb      	ldr	r3, [r7, #24]
 800467a:	9300      	str	r3, [sp, #0]
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	68b9      	ldr	r1, [r7, #8]
 8004682:	68f8      	ldr	r0, [r7, #12]
 8004684:	f000 f80e 	bl	80046a4 <SYSVIEW_SendTaskInfo>
 8004688:	e000      	b.n	800468c <SYSVIEW_AddTask+0xb8>
    return;
 800468a:	bf00      	nop

}
 800468c:	3710      	adds	r7, #16
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}
 8004692:	bf00      	nop
 8004694:	08006b5c 	.word	0x08006b5c
 8004698:	20012f1c 	.word	0x20012f1c
 800469c:	08006b64 	.word	0x08006b64
 80046a0:	20012e7c 	.word	0x20012e7c

080046a4 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b08a      	sub	sp, #40	@ 0x28
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	60f8      	str	r0, [r7, #12]
 80046ac:	60b9      	str	r1, [r7, #8]
 80046ae:	607a      	str	r2, [r7, #4]
 80046b0:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80046b2:	f107 0314 	add.w	r3, r7, #20
 80046b6:	2214      	movs	r2, #20
 80046b8:	2100      	movs	r1, #0
 80046ba:	4618      	mov	r0, r3
 80046bc:	f001 ff3c 	bl	8006538 <memset>
  TaskInfo.TaskID     = TaskID;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 80046d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046d2:	627b      	str	r3, [r7, #36]	@ 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 80046d4:	f107 0314 	add.w	r3, r7, #20
 80046d8:	4618      	mov	r0, r3
 80046da:	f001 f8c1 	bl	8005860 <SEGGER_SYSVIEW_SendTaskInfo>
}
 80046de:	bf00      	nop
 80046e0:	3728      	adds	r7, #40	@ 0x28
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}
	...

080046e8 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 80046e8:	b480      	push	{r7}
 80046ea:	b083      	sub	sp, #12
 80046ec:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80046ee:	4b24      	ldr	r3, [pc, #144]	@ (8004780 <_DoInit+0x98>)
 80046f0:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2203      	movs	r2, #3
 80046f6:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2203      	movs	r2, #3
 80046fc:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	4a20      	ldr	r2, [pc, #128]	@ (8004784 <_DoInit+0x9c>)
 8004702:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	4a20      	ldr	r2, [pc, #128]	@ (8004788 <_DoInit+0xa0>)
 8004708:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004710:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2200      	movs	r2, #0
 8004716:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2200      	movs	r2, #0
 800471c:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2200      	movs	r2, #0
 8004722:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	4a17      	ldr	r2, [pc, #92]	@ (8004784 <_DoInit+0x9c>)
 8004728:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	4a17      	ldr	r2, [pc, #92]	@ (800478c <_DoInit+0xa4>)
 800472e:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2210      	movs	r2, #16
 8004734:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2200      	movs	r2, #0
 800473a:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2200      	movs	r2, #0
 8004740:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2200      	movs	r2, #0
 8004746:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	3307      	adds	r3, #7
 800474c:	4a10      	ldr	r2, [pc, #64]	@ (8004790 <_DoInit+0xa8>)
 800474e:	6810      	ldr	r0, [r2, #0]
 8004750:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004752:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	4a0e      	ldr	r2, [pc, #56]	@ (8004794 <_DoInit+0xac>)
 800475a:	6810      	ldr	r0, [r2, #0]
 800475c:	6018      	str	r0, [r3, #0]
 800475e:	8891      	ldrh	r1, [r2, #4]
 8004760:	7992      	ldrb	r2, [r2, #6]
 8004762:	8099      	strh	r1, [r3, #4]
 8004764:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004766:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2220      	movs	r2, #32
 800476e:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004770:	f3bf 8f5f 	dmb	sy
}
 8004774:	bf00      	nop
 8004776:	370c      	adds	r7, #12
 8004778:	46bd      	mov	sp, r7
 800477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477e:	4770      	bx	lr
 8004780:	20012f20 	.word	0x20012f20
 8004784:	08006bb4 	.word	0x08006bb4
 8004788:	20012fc8 	.word	0x20012fc8
 800478c:	200133c8 	.word	0x200133c8
 8004790:	08006bc0 	.word	0x08006bc0
 8004794:	08006bc4 	.word	0x08006bc4

08004798 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8004798:	b580      	push	{r7, lr}
 800479a:	b08a      	sub	sp, #40	@ 0x28
 800479c:	af00      	add	r7, sp, #0
 800479e:	60f8      	str	r0, [r7, #12]
 80047a0:	60b9      	str	r1, [r7, #8]
 80047a2:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 80047a4:	2300      	movs	r3, #0
 80047a6:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	68db      	ldr	r3, [r3, #12]
 80047ac:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	691b      	ldr	r3, [r3, #16]
 80047b2:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 80047b4:	69ba      	ldr	r2, [r7, #24]
 80047b6:	69fb      	ldr	r3, [r7, #28]
 80047b8:	429a      	cmp	r2, r3
 80047ba:	d905      	bls.n	80047c8 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 80047bc:	69ba      	ldr	r2, [r7, #24]
 80047be:	69fb      	ldr	r3, [r7, #28]
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	3b01      	subs	r3, #1
 80047c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80047c6:	e007      	b.n	80047d8 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	689a      	ldr	r2, [r3, #8]
 80047cc:	69b9      	ldr	r1, [r7, #24]
 80047ce:	69fb      	ldr	r3, [r7, #28]
 80047d0:	1acb      	subs	r3, r1, r3
 80047d2:	4413      	add	r3, r2
 80047d4:	3b01      	subs	r3, #1
 80047d6:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	689a      	ldr	r2, [r3, #8]
 80047dc:	69fb      	ldr	r3, [r7, #28]
 80047de:	1ad3      	subs	r3, r2, r3
 80047e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047e2:	4293      	cmp	r3, r2
 80047e4:	bf28      	it	cs
 80047e6:	4613      	movcs	r3, r2
 80047e8:	627b      	str	r3, [r7, #36]	@ 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 80047ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	4293      	cmp	r3, r2
 80047f0:	bf28      	it	cs
 80047f2:	4613      	movcs	r3, r2
 80047f4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	685a      	ldr	r2, [r3, #4]
 80047fa:	69fb      	ldr	r3, [r7, #28]
 80047fc:	4413      	add	r3, r2
 80047fe:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8004800:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004802:	68b9      	ldr	r1, [r7, #8]
 8004804:	6978      	ldr	r0, [r7, #20]
 8004806:	f001 fefa 	bl	80065fe <memcpy>
    NumBytesWritten += NumBytesToWrite;
 800480a:	6a3a      	ldr	r2, [r7, #32]
 800480c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800480e:	4413      	add	r3, r2
 8004810:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8004812:	68ba      	ldr	r2, [r7, #8]
 8004814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004816:	4413      	add	r3, r2
 8004818:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 800481a:	687a      	ldr	r2, [r7, #4]
 800481c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800481e:	1ad3      	subs	r3, r2, r3
 8004820:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8004822:	69fa      	ldr	r2, [r7, #28]
 8004824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004826:	4413      	add	r3, r2
 8004828:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	69fa      	ldr	r2, [r7, #28]
 8004830:	429a      	cmp	r2, r3
 8004832:	d101      	bne.n	8004838 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8004834:	2300      	movs	r3, #0
 8004836:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004838:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	69fa      	ldr	r2, [r7, #28]
 8004840:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d1b2      	bne.n	80047ae <_WriteBlocking+0x16>
  return NumBytesWritten;
 8004848:	6a3b      	ldr	r3, [r7, #32]
}
 800484a:	4618      	mov	r0, r3
 800484c:	3728      	adds	r7, #40	@ 0x28
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}

08004852 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8004852:	b580      	push	{r7, lr}
 8004854:	b088      	sub	sp, #32
 8004856:	af00      	add	r7, sp, #0
 8004858:	60f8      	str	r0, [r7, #12]
 800485a:	60b9      	str	r1, [r7, #8]
 800485c:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	68db      	ldr	r3, [r3, #12]
 8004862:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	689a      	ldr	r2, [r3, #8]
 8004868:	69fb      	ldr	r3, [r7, #28]
 800486a:	1ad3      	subs	r3, r2, r3
 800486c:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 800486e:	69ba      	ldr	r2, [r7, #24]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	429a      	cmp	r2, r3
 8004874:	d911      	bls.n	800489a <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	685a      	ldr	r2, [r3, #4]
 800487a:	69fb      	ldr	r3, [r7, #28]
 800487c:	4413      	add	r3, r2
 800487e:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8004880:	687a      	ldr	r2, [r7, #4]
 8004882:	68b9      	ldr	r1, [r7, #8]
 8004884:	6938      	ldr	r0, [r7, #16]
 8004886:	f001 feba 	bl	80065fe <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800488a:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 800488e:	69fa      	ldr	r2, [r7, #28]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	441a      	add	r2, r3
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8004898:	e01f      	b.n	80048da <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 800489a:	69bb      	ldr	r3, [r7, #24]
 800489c:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	685a      	ldr	r2, [r3, #4]
 80048a2:	69fb      	ldr	r3, [r7, #28]
 80048a4:	4413      	add	r3, r2
 80048a6:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 80048a8:	697a      	ldr	r2, [r7, #20]
 80048aa:	68b9      	ldr	r1, [r7, #8]
 80048ac:	6938      	ldr	r0, [r7, #16]
 80048ae:	f001 fea6 	bl	80065fe <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 80048b2:	687a      	ldr	r2, [r7, #4]
 80048b4:	69bb      	ldr	r3, [r7, #24]
 80048b6:	1ad3      	subs	r3, r2, r3
 80048b8:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 80048c0:	68ba      	ldr	r2, [r7, #8]
 80048c2:	69bb      	ldr	r3, [r7, #24]
 80048c4:	4413      	add	r3, r2
 80048c6:	697a      	ldr	r2, [r7, #20]
 80048c8:	4619      	mov	r1, r3
 80048ca:	6938      	ldr	r0, [r7, #16]
 80048cc:	f001 fe97 	bl	80065fe <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80048d0:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	697a      	ldr	r2, [r7, #20]
 80048d8:	60da      	str	r2, [r3, #12]
}
 80048da:	bf00      	nop
 80048dc:	3720      	adds	r7, #32
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}

080048e2 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 80048e2:	b480      	push	{r7}
 80048e4:	b087      	sub	sp, #28
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	691b      	ldr	r3, [r3, #16]
 80048ee:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	68db      	ldr	r3, [r3, #12]
 80048f4:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 80048f6:	693a      	ldr	r2, [r7, #16]
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	429a      	cmp	r2, r3
 80048fc:	d808      	bhi.n	8004910 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	689a      	ldr	r2, [r3, #8]
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	1ad2      	subs	r2, r2, r3
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	4413      	add	r3, r2
 800490a:	3b01      	subs	r3, #1
 800490c:	617b      	str	r3, [r7, #20]
 800490e:	e004      	b.n	800491a <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8004910:	693a      	ldr	r2, [r7, #16]
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	1ad3      	subs	r3, r2, r3
 8004916:	3b01      	subs	r3, #1
 8004918:	617b      	str	r3, [r7, #20]
  }
  return r;
 800491a:	697b      	ldr	r3, [r7, #20]
}
 800491c:	4618      	mov	r0, r3
 800491e:	371c      	adds	r7, #28
 8004920:	46bd      	mov	sp, r7
 8004922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004926:	4770      	bx	lr

08004928 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004928:	b580      	push	{r7, lr}
 800492a:	b08c      	sub	sp, #48	@ 0x30
 800492c:	af00      	add	r7, sp, #0
 800492e:	60f8      	str	r0, [r7, #12]
 8004930:	60b9      	str	r1, [r7, #8]
 8004932:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8004934:	4b3e      	ldr	r3, [pc, #248]	@ (8004a30 <SEGGER_RTT_ReadNoLock+0x108>)
 8004936:	623b      	str	r3, [r7, #32]
 8004938:	6a3b      	ldr	r3, [r7, #32]
 800493a:	781b      	ldrb	r3, [r3, #0]
 800493c:	b2db      	uxtb	r3, r3
 800493e:	2b00      	cmp	r3, #0
 8004940:	d101      	bne.n	8004946 <SEGGER_RTT_ReadNoLock+0x1e>
 8004942:	f7ff fed1 	bl	80046e8 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004946:	68fa      	ldr	r2, [r7, #12]
 8004948:	4613      	mov	r3, r2
 800494a:	005b      	lsls	r3, r3, #1
 800494c:	4413      	add	r3, r2
 800494e:	00db      	lsls	r3, r3, #3
 8004950:	3360      	adds	r3, #96	@ 0x60
 8004952:	4a37      	ldr	r2, [pc, #220]	@ (8004a30 <SEGGER_RTT_ReadNoLock+0x108>)
 8004954:	4413      	add	r3, r2
 8004956:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 800495c:	69fb      	ldr	r3, [r7, #28]
 800495e:	691b      	ldr	r3, [r3, #16]
 8004960:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 8004962:	69fb      	ldr	r3, [r7, #28]
 8004964:	68db      	ldr	r3, [r3, #12]
 8004966:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004968:	2300      	movs	r3, #0
 800496a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800496c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800496e:	69bb      	ldr	r3, [r7, #24]
 8004970:	429a      	cmp	r2, r3
 8004972:	d92b      	bls.n	80049cc <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004974:	69fb      	ldr	r3, [r7, #28]
 8004976:	689a      	ldr	r2, [r3, #8]
 8004978:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800497a:	1ad3      	subs	r3, r2, r3
 800497c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800497e:	697a      	ldr	r2, [r7, #20]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	4293      	cmp	r3, r2
 8004984:	bf28      	it	cs
 8004986:	4613      	movcs	r3, r2
 8004988:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800498a:	69fb      	ldr	r3, [r7, #28]
 800498c:	685a      	ldr	r2, [r3, #4]
 800498e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004990:	4413      	add	r3, r2
 8004992:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004994:	697a      	ldr	r2, [r7, #20]
 8004996:	6939      	ldr	r1, [r7, #16]
 8004998:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800499a:	f001 fe30 	bl	80065fe <memcpy>
    NumBytesRead += NumBytesRem;
 800499e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	4413      	add	r3, r2
 80049a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 80049a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	4413      	add	r3, r2
 80049ac:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 80049ae:	687a      	ldr	r2, [r7, #4]
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	1ad3      	subs	r3, r2, r3
 80049b4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80049b6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	4413      	add	r3, r2
 80049bc:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80049be:	69fb      	ldr	r3, [r7, #28]
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d101      	bne.n	80049cc <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80049c8:	2300      	movs	r3, #0
 80049ca:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80049cc:	69ba      	ldr	r2, [r7, #24]
 80049ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049d0:	1ad3      	subs	r3, r2, r3
 80049d2:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80049d4:	697a      	ldr	r2, [r7, #20]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	4293      	cmp	r3, r2
 80049da:	bf28      	it	cs
 80049dc:	4613      	movcs	r3, r2
 80049de:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d019      	beq.n	8004a1a <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80049e6:	69fb      	ldr	r3, [r7, #28]
 80049e8:	685a      	ldr	r2, [r3, #4]
 80049ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049ec:	4413      	add	r3, r2
 80049ee:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80049f0:	697a      	ldr	r2, [r7, #20]
 80049f2:	6939      	ldr	r1, [r7, #16]
 80049f4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80049f6:	f001 fe02 	bl	80065fe <memcpy>
    NumBytesRead += NumBytesRem;
 80049fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	4413      	add	r3, r2
 8004a00:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8004a02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	4413      	add	r3, r2
 8004a08:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	1ad3      	subs	r3, r2, r3
 8004a10:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004a12:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	4413      	add	r3, r2
 8004a18:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 8004a1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d002      	beq.n	8004a26 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004a20:	69fb      	ldr	r3, [r7, #28]
 8004a22:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004a24:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004a26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	3730      	adds	r7, #48	@ 0x30
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}
 8004a30:	20012f20 	.word	0x20012f20

08004a34 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b088      	sub	sp, #32
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	60f8      	str	r0, [r7, #12]
 8004a3c:	60b9      	str	r1, [r7, #8]
 8004a3e:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	1c5a      	adds	r2, r3, #1
 8004a48:	4613      	mov	r3, r2
 8004a4a:	005b      	lsls	r3, r3, #1
 8004a4c:	4413      	add	r3, r2
 8004a4e:	00db      	lsls	r3, r3, #3
 8004a50:	4a1f      	ldr	r2, [pc, #124]	@ (8004ad0 <SEGGER_RTT_WriteNoLock+0x9c>)
 8004a52:	4413      	add	r3, r2
 8004a54:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	695b      	ldr	r3, [r3, #20]
 8004a5a:	2b02      	cmp	r3, #2
 8004a5c:	d029      	beq.n	8004ab2 <SEGGER_RTT_WriteNoLock+0x7e>
 8004a5e:	2b02      	cmp	r3, #2
 8004a60:	d82e      	bhi.n	8004ac0 <SEGGER_RTT_WriteNoLock+0x8c>
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d002      	beq.n	8004a6c <SEGGER_RTT_WriteNoLock+0x38>
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d013      	beq.n	8004a92 <SEGGER_RTT_WriteNoLock+0x5e>
 8004a6a:	e029      	b.n	8004ac0 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8004a6c:	6978      	ldr	r0, [r7, #20]
 8004a6e:	f7ff ff38 	bl	80048e2 <_GetAvailWriteSpace>
 8004a72:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8004a74:	693a      	ldr	r2, [r7, #16]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d202      	bcs.n	8004a82 <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8004a80:	e021      	b.n	8004ac6 <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8004a86:	687a      	ldr	r2, [r7, #4]
 8004a88:	69b9      	ldr	r1, [r7, #24]
 8004a8a:	6978      	ldr	r0, [r7, #20]
 8004a8c:	f7ff fee1 	bl	8004852 <_WriteNoCheck>
    break;
 8004a90:	e019      	b.n	8004ac6 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8004a92:	6978      	ldr	r0, [r7, #20]
 8004a94:	f7ff ff25 	bl	80048e2 <_GetAvailWriteSpace>
 8004a98:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	bf28      	it	cs
 8004aa2:	4613      	movcs	r3, r2
 8004aa4:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8004aa6:	69fa      	ldr	r2, [r7, #28]
 8004aa8:	69b9      	ldr	r1, [r7, #24]
 8004aaa:	6978      	ldr	r0, [r7, #20]
 8004aac:	f7ff fed1 	bl	8004852 <_WriteNoCheck>
    break;
 8004ab0:	e009      	b.n	8004ac6 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	69b9      	ldr	r1, [r7, #24]
 8004ab6:	6978      	ldr	r0, [r7, #20]
 8004ab8:	f7ff fe6e 	bl	8004798 <_WriteBlocking>
 8004abc:	61f8      	str	r0, [r7, #28]
    break;
 8004abe:	e002      	b.n	8004ac6 <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	61fb      	str	r3, [r7, #28]
    break;
 8004ac4:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8004ac6:	69fb      	ldr	r3, [r7, #28]
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3720      	adds	r7, #32
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}
 8004ad0:	20012f20 	.word	0x20012f20

08004ad4 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b088      	sub	sp, #32
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	60f8      	str	r0, [r7, #12]
 8004adc:	60b9      	str	r1, [r7, #8]
 8004ade:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8004ae0:	4b0e      	ldr	r3, [pc, #56]	@ (8004b1c <SEGGER_RTT_Write+0x48>)
 8004ae2:	61fb      	str	r3, [r7, #28]
 8004ae4:	69fb      	ldr	r3, [r7, #28]
 8004ae6:	781b      	ldrb	r3, [r3, #0]
 8004ae8:	b2db      	uxtb	r3, r3
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d101      	bne.n	8004af2 <SEGGER_RTT_Write+0x1e>
 8004aee:	f7ff fdfb 	bl	80046e8 <_DoInit>
  SEGGER_RTT_LOCK();
 8004af2:	f3ef 8311 	mrs	r3, BASEPRI
 8004af6:	f04f 0120 	mov.w	r1, #32
 8004afa:	f381 8811 	msr	BASEPRI, r1
 8004afe:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8004b00:	687a      	ldr	r2, [r7, #4]
 8004b02:	68b9      	ldr	r1, [r7, #8]
 8004b04:	68f8      	ldr	r0, [r7, #12]
 8004b06:	f7ff ff95 	bl	8004a34 <SEGGER_RTT_WriteNoLock>
 8004b0a:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8004b0c:	69bb      	ldr	r3, [r7, #24]
 8004b0e:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8004b12:	697b      	ldr	r3, [r7, #20]
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	3720      	adds	r7, #32
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd80      	pop	{r7, pc}
 8004b1c:	20012f20 	.word	0x20012f20

08004b20 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b088      	sub	sp, #32
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	60f8      	str	r0, [r7, #12]
 8004b28:	60b9      	str	r1, [r7, #8]
 8004b2a:	607a      	str	r2, [r7, #4]
 8004b2c:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8004b2e:	4b3d      	ldr	r3, [pc, #244]	@ (8004c24 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004b30:	61bb      	str	r3, [r7, #24]
 8004b32:	69bb      	ldr	r3, [r7, #24]
 8004b34:	781b      	ldrb	r3, [r3, #0]
 8004b36:	b2db      	uxtb	r3, r3
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d101      	bne.n	8004b40 <SEGGER_RTT_AllocUpBuffer+0x20>
 8004b3c:	f7ff fdd4 	bl	80046e8 <_DoInit>
  SEGGER_RTT_LOCK();
 8004b40:	f3ef 8311 	mrs	r3, BASEPRI
 8004b44:	f04f 0120 	mov.w	r1, #32
 8004b48:	f381 8811 	msr	BASEPRI, r1
 8004b4c:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004b4e:	4b35      	ldr	r3, [pc, #212]	@ (8004c24 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004b50:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8004b52:	2300      	movs	r3, #0
 8004b54:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8004b56:	6939      	ldr	r1, [r7, #16]
 8004b58:	69fb      	ldr	r3, [r7, #28]
 8004b5a:	1c5a      	adds	r2, r3, #1
 8004b5c:	4613      	mov	r3, r2
 8004b5e:	005b      	lsls	r3, r3, #1
 8004b60:	4413      	add	r3, r2
 8004b62:	00db      	lsls	r3, r3, #3
 8004b64:	440b      	add	r3, r1
 8004b66:	3304      	adds	r3, #4
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d008      	beq.n	8004b80 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8004b6e:	69fb      	ldr	r3, [r7, #28]
 8004b70:	3301      	adds	r3, #1
 8004b72:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	691b      	ldr	r3, [r3, #16]
 8004b78:	69fa      	ldr	r2, [r7, #28]
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	dbeb      	blt.n	8004b56 <SEGGER_RTT_AllocUpBuffer+0x36>
 8004b7e:	e000      	b.n	8004b82 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8004b80:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	691b      	ldr	r3, [r3, #16]
 8004b86:	69fa      	ldr	r2, [r7, #28]
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	da3f      	bge.n	8004c0c <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8004b8c:	6939      	ldr	r1, [r7, #16]
 8004b8e:	69fb      	ldr	r3, [r7, #28]
 8004b90:	1c5a      	adds	r2, r3, #1
 8004b92:	4613      	mov	r3, r2
 8004b94:	005b      	lsls	r3, r3, #1
 8004b96:	4413      	add	r3, r2
 8004b98:	00db      	lsls	r3, r3, #3
 8004b9a:	440b      	add	r3, r1
 8004b9c:	68fa      	ldr	r2, [r7, #12]
 8004b9e:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8004ba0:	6939      	ldr	r1, [r7, #16]
 8004ba2:	69fb      	ldr	r3, [r7, #28]
 8004ba4:	1c5a      	adds	r2, r3, #1
 8004ba6:	4613      	mov	r3, r2
 8004ba8:	005b      	lsls	r3, r3, #1
 8004baa:	4413      	add	r3, r2
 8004bac:	00db      	lsls	r3, r3, #3
 8004bae:	440b      	add	r3, r1
 8004bb0:	3304      	adds	r3, #4
 8004bb2:	68ba      	ldr	r2, [r7, #8]
 8004bb4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8004bb6:	6939      	ldr	r1, [r7, #16]
 8004bb8:	69fa      	ldr	r2, [r7, #28]
 8004bba:	4613      	mov	r3, r2
 8004bbc:	005b      	lsls	r3, r3, #1
 8004bbe:	4413      	add	r3, r2
 8004bc0:	00db      	lsls	r3, r3, #3
 8004bc2:	440b      	add	r3, r1
 8004bc4:	3320      	adds	r3, #32
 8004bc6:	687a      	ldr	r2, [r7, #4]
 8004bc8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8004bca:	6939      	ldr	r1, [r7, #16]
 8004bcc:	69fa      	ldr	r2, [r7, #28]
 8004bce:	4613      	mov	r3, r2
 8004bd0:	005b      	lsls	r3, r3, #1
 8004bd2:	4413      	add	r3, r2
 8004bd4:	00db      	lsls	r3, r3, #3
 8004bd6:	440b      	add	r3, r1
 8004bd8:	3328      	adds	r3, #40	@ 0x28
 8004bda:	2200      	movs	r2, #0
 8004bdc:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8004bde:	6939      	ldr	r1, [r7, #16]
 8004be0:	69fa      	ldr	r2, [r7, #28]
 8004be2:	4613      	mov	r3, r2
 8004be4:	005b      	lsls	r3, r3, #1
 8004be6:	4413      	add	r3, r2
 8004be8:	00db      	lsls	r3, r3, #3
 8004bea:	440b      	add	r3, r1
 8004bec:	3324      	adds	r3, #36	@ 0x24
 8004bee:	2200      	movs	r2, #0
 8004bf0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8004bf2:	6939      	ldr	r1, [r7, #16]
 8004bf4:	69fa      	ldr	r2, [r7, #28]
 8004bf6:	4613      	mov	r3, r2
 8004bf8:	005b      	lsls	r3, r3, #1
 8004bfa:	4413      	add	r3, r2
 8004bfc:	00db      	lsls	r3, r3, #3
 8004bfe:	440b      	add	r3, r1
 8004c00:	332c      	adds	r3, #44	@ 0x2c
 8004c02:	683a      	ldr	r2, [r7, #0]
 8004c04:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004c06:	f3bf 8f5f 	dmb	sy
 8004c0a:	e002      	b.n	8004c12 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8004c0c:	f04f 33ff 	mov.w	r3, #4294967295
 8004c10:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8004c18:	69fb      	ldr	r3, [r7, #28]
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3720      	adds	r7, #32
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}
 8004c22:	bf00      	nop
 8004c24:	20012f20 	.word	0x20012f20

08004c28 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b088      	sub	sp, #32
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	60f8      	str	r0, [r7, #12]
 8004c30:	60b9      	str	r1, [r7, #8]
 8004c32:	607a      	str	r2, [r7, #4]
 8004c34:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8004c36:	4b33      	ldr	r3, [pc, #204]	@ (8004d04 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8004c38:	61bb      	str	r3, [r7, #24]
 8004c3a:	69bb      	ldr	r3, [r7, #24]
 8004c3c:	781b      	ldrb	r3, [r3, #0]
 8004c3e:	b2db      	uxtb	r3, r3
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d101      	bne.n	8004c48 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8004c44:	f7ff fd50 	bl	80046e8 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004c48:	4b2e      	ldr	r3, [pc, #184]	@ (8004d04 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8004c4a:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	695b      	ldr	r3, [r3, #20]
 8004c50:	461a      	mov	r2, r3
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d24d      	bcs.n	8004cf4 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 8004c58:	f3ef 8311 	mrs	r3, BASEPRI
 8004c5c:	f04f 0120 	mov.w	r1, #32
 8004c60:	f381 8811 	msr	BASEPRI, r1
 8004c64:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d031      	beq.n	8004cd0 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 8004c6c:	6979      	ldr	r1, [r7, #20]
 8004c6e:	68fa      	ldr	r2, [r7, #12]
 8004c70:	4613      	mov	r3, r2
 8004c72:	005b      	lsls	r3, r3, #1
 8004c74:	4413      	add	r3, r2
 8004c76:	00db      	lsls	r3, r3, #3
 8004c78:	440b      	add	r3, r1
 8004c7a:	3360      	adds	r3, #96	@ 0x60
 8004c7c:	68ba      	ldr	r2, [r7, #8]
 8004c7e:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8004c80:	6979      	ldr	r1, [r7, #20]
 8004c82:	68fa      	ldr	r2, [r7, #12]
 8004c84:	4613      	mov	r3, r2
 8004c86:	005b      	lsls	r3, r3, #1
 8004c88:	4413      	add	r3, r2
 8004c8a:	00db      	lsls	r3, r3, #3
 8004c8c:	440b      	add	r3, r1
 8004c8e:	3364      	adds	r3, #100	@ 0x64
 8004c90:	687a      	ldr	r2, [r7, #4]
 8004c92:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8004c94:	6979      	ldr	r1, [r7, #20]
 8004c96:	68fa      	ldr	r2, [r7, #12]
 8004c98:	4613      	mov	r3, r2
 8004c9a:	005b      	lsls	r3, r3, #1
 8004c9c:	4413      	add	r3, r2
 8004c9e:	00db      	lsls	r3, r3, #3
 8004ca0:	440b      	add	r3, r1
 8004ca2:	3368      	adds	r3, #104	@ 0x68
 8004ca4:	683a      	ldr	r2, [r7, #0]
 8004ca6:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 8004ca8:	6979      	ldr	r1, [r7, #20]
 8004caa:	68fa      	ldr	r2, [r7, #12]
 8004cac:	4613      	mov	r3, r2
 8004cae:	005b      	lsls	r3, r3, #1
 8004cb0:	4413      	add	r3, r2
 8004cb2:	00db      	lsls	r3, r3, #3
 8004cb4:	440b      	add	r3, r1
 8004cb6:	3370      	adds	r3, #112	@ 0x70
 8004cb8:	2200      	movs	r2, #0
 8004cba:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 8004cbc:	6979      	ldr	r1, [r7, #20]
 8004cbe:	68fa      	ldr	r2, [r7, #12]
 8004cc0:	4613      	mov	r3, r2
 8004cc2:	005b      	lsls	r3, r3, #1
 8004cc4:	4413      	add	r3, r2
 8004cc6:	00db      	lsls	r3, r3, #3
 8004cc8:	440b      	add	r3, r1
 8004cca:	336c      	adds	r3, #108	@ 0x6c
 8004ccc:	2200      	movs	r2, #0
 8004cce:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8004cd0:	6979      	ldr	r1, [r7, #20]
 8004cd2:	68fa      	ldr	r2, [r7, #12]
 8004cd4:	4613      	mov	r3, r2
 8004cd6:	005b      	lsls	r3, r3, #1
 8004cd8:	4413      	add	r3, r2
 8004cda:	00db      	lsls	r3, r3, #3
 8004cdc:	440b      	add	r3, r1
 8004cde:	3374      	adds	r3, #116	@ 0x74
 8004ce0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004ce2:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004ce4:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	61fb      	str	r3, [r7, #28]
 8004cf2:	e002      	b.n	8004cfa <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 8004cf4:	f04f 33ff 	mov.w	r3, #4294967295
 8004cf8:	61fb      	str	r3, [r7, #28]
  }
  return r;
 8004cfa:	69fb      	ldr	r3, [r7, #28]
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	3720      	adds	r7, #32
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}
 8004d04:	20012f20 	.word	0x20012f20

08004d08 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8004d08:	b480      	push	{r7}
 8004d0a:	b087      	sub	sp, #28
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	60f8      	str	r0, [r7, #12]
 8004d10:	60b9      	str	r1, [r7, #8]
 8004d12:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8004d14:	2300      	movs	r3, #0
 8004d16:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8004d18:	e002      	b.n	8004d20 <_EncodeStr+0x18>
    Len++;
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	3301      	adds	r3, #1
 8004d1e:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8004d20:	68ba      	ldr	r2, [r7, #8]
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	4413      	add	r3, r2
 8004d26:	781b      	ldrb	r3, [r3, #0]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d1f6      	bne.n	8004d1a <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8004d2c:	693a      	ldr	r2, [r7, #16]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	429a      	cmp	r2, r3
 8004d32:	d901      	bls.n	8004d38 <_EncodeStr+0x30>
    Len = Limit;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	2bfe      	cmp	r3, #254	@ 0xfe
 8004d3c:	d806      	bhi.n	8004d4c <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	1c5a      	adds	r2, r3, #1
 8004d42:	60fa      	str	r2, [r7, #12]
 8004d44:	693a      	ldr	r2, [r7, #16]
 8004d46:	b2d2      	uxtb	r2, r2
 8004d48:	701a      	strb	r2, [r3, #0]
 8004d4a:	e011      	b.n	8004d70 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	1c5a      	adds	r2, r3, #1
 8004d50:	60fa      	str	r2, [r7, #12]
 8004d52:	22ff      	movs	r2, #255	@ 0xff
 8004d54:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	1c5a      	adds	r2, r3, #1
 8004d5a:	60fa      	str	r2, [r7, #12]
 8004d5c:	693a      	ldr	r2, [r7, #16]
 8004d5e:	b2d2      	uxtb	r2, r2
 8004d60:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	0a19      	lsrs	r1, r3, #8
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	1c5a      	adds	r2, r3, #1
 8004d6a:	60fa      	str	r2, [r7, #12]
 8004d6c:	b2ca      	uxtb	r2, r1
 8004d6e:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8004d70:	2300      	movs	r3, #0
 8004d72:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8004d74:	e00a      	b.n	8004d8c <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8004d76:	68ba      	ldr	r2, [r7, #8]
 8004d78:	1c53      	adds	r3, r2, #1
 8004d7a:	60bb      	str	r3, [r7, #8]
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	1c59      	adds	r1, r3, #1
 8004d80:	60f9      	str	r1, [r7, #12]
 8004d82:	7812      	ldrb	r2, [r2, #0]
 8004d84:	701a      	strb	r2, [r3, #0]
    n++;
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	3301      	adds	r3, #1
 8004d8a:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8004d8c:	697a      	ldr	r2, [r7, #20]
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d3f0      	bcc.n	8004d76 <_EncodeStr+0x6e>
  }
  return pPayload;
 8004d94:	68fb      	ldr	r3, [r7, #12]
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	371c      	adds	r7, #28
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da0:	4770      	bx	lr

08004da2 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8004da2:	b480      	push	{r7}
 8004da4:	b083      	sub	sp, #12
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	3304      	adds	r3, #4
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	370c      	adds	r7, #12
 8004db2:	46bd      	mov	sp, r7
 8004db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db8:	4770      	bx	lr
	...

08004dbc <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b082      	sub	sp, #8
 8004dc0:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004dc2:	4b35      	ldr	r3, [pc, #212]	@ (8004e98 <_HandleIncomingPacket+0xdc>)
 8004dc4:	7e1b      	ldrb	r3, [r3, #24]
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	1cfb      	adds	r3, r7, #3
 8004dca:	2201      	movs	r2, #1
 8004dcc:	4619      	mov	r1, r3
 8004dce:	f7ff fdab 	bl	8004928 <SEGGER_RTT_ReadNoLock>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	dd59      	ble.n	8004e90 <_HandleIncomingPacket+0xd4>
    switch (Cmd) {
 8004ddc:	78fb      	ldrb	r3, [r7, #3]
 8004dde:	2b80      	cmp	r3, #128	@ 0x80
 8004de0:	d032      	beq.n	8004e48 <_HandleIncomingPacket+0x8c>
 8004de2:	2b80      	cmp	r3, #128	@ 0x80
 8004de4:	dc42      	bgt.n	8004e6c <_HandleIncomingPacket+0xb0>
 8004de6:	2b07      	cmp	r3, #7
 8004de8:	dc16      	bgt.n	8004e18 <_HandleIncomingPacket+0x5c>
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	dd3e      	ble.n	8004e6c <_HandleIncomingPacket+0xb0>
 8004dee:	3b01      	subs	r3, #1
 8004df0:	2b06      	cmp	r3, #6
 8004df2:	d83b      	bhi.n	8004e6c <_HandleIncomingPacket+0xb0>
 8004df4:	a201      	add	r2, pc, #4	@ (adr r2, 8004dfc <_HandleIncomingPacket+0x40>)
 8004df6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dfa:	bf00      	nop
 8004dfc:	08004e1f 	.word	0x08004e1f
 8004e00:	08004e25 	.word	0x08004e25
 8004e04:	08004e2b 	.word	0x08004e2b
 8004e08:	08004e31 	.word	0x08004e31
 8004e0c:	08004e37 	.word	0x08004e37
 8004e10:	08004e3d 	.word	0x08004e3d
 8004e14:	08004e43 	.word	0x08004e43
 8004e18:	2b7f      	cmp	r3, #127	@ 0x7f
 8004e1a:	d034      	beq.n	8004e86 <_HandleIncomingPacket+0xca>
 8004e1c:	e026      	b.n	8004e6c <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8004e1e:	f000 fba5 	bl	800556c <SEGGER_SYSVIEW_Start>
      break;
 8004e22:	e035      	b.n	8004e90 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8004e24:	f000 fc5c 	bl	80056e0 <SEGGER_SYSVIEW_Stop>
      break;
 8004e28:	e032      	b.n	8004e90 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8004e2a:	f000 fe35 	bl	8005a98 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8004e2e:	e02f      	b.n	8004e90 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8004e30:	f000 fdfa 	bl	8005a28 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8004e34:	e02c      	b.n	8004e90 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8004e36:	f000 fc79 	bl	800572c <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8004e3a:	e029      	b.n	8004e90 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8004e3c:	f001 f8c8 	bl	8005fd0 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8004e40:	e026      	b.n	8004e90 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8004e42:	f001 f8a7 	bl	8005f94 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8004e46:	e023      	b.n	8004e90 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004e48:	4b13      	ldr	r3, [pc, #76]	@ (8004e98 <_HandleIncomingPacket+0xdc>)
 8004e4a:	7e1b      	ldrb	r3, [r3, #24]
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	1cfb      	adds	r3, r7, #3
 8004e50:	2201      	movs	r2, #1
 8004e52:	4619      	mov	r1, r3
 8004e54:	f7ff fd68 	bl	8004928 <SEGGER_RTT_ReadNoLock>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	dd13      	ble.n	8004e8a <_HandleIncomingPacket+0xce>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8004e62:	78fb      	ldrb	r3, [r7, #3]
 8004e64:	4618      	mov	r0, r3
 8004e66:	f001 f815 	bl	8005e94 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8004e6a:	e00e      	b.n	8004e8a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8004e6c:	78fb      	ldrb	r3, [r7, #3]
 8004e6e:	b25b      	sxtb	r3, r3
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	da0c      	bge.n	8004e8e <_HandleIncomingPacket+0xd2>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004e74:	4b08      	ldr	r3, [pc, #32]	@ (8004e98 <_HandleIncomingPacket+0xdc>)
 8004e76:	7e1b      	ldrb	r3, [r3, #24]
 8004e78:	4618      	mov	r0, r3
 8004e7a:	1cfb      	adds	r3, r7, #3
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	4619      	mov	r1, r3
 8004e80:	f7ff fd52 	bl	8004928 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8004e84:	e003      	b.n	8004e8e <_HandleIncomingPacket+0xd2>
      break;
 8004e86:	bf00      	nop
 8004e88:	e002      	b.n	8004e90 <_HandleIncomingPacket+0xd4>
      break;
 8004e8a:	bf00      	nop
 8004e8c:	e000      	b.n	8004e90 <_HandleIncomingPacket+0xd4>
      break;
 8004e8e:	bf00      	nop
    }
  }
}
 8004e90:	bf00      	nop
 8004e92:	3708      	adds	r7, #8
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}
 8004e98:	200143e0 	.word	0x200143e0

08004e9c <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b08c      	sub	sp, #48	@ 0x30
 8004ea0:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8004ea6:	1d3b      	adds	r3, r7, #4
 8004ea8:	3301      	adds	r3, #1
 8004eaa:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8004eac:	69fb      	ldr	r3, [r7, #28]
 8004eae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004eb0:	4b31      	ldr	r3, [pc, #196]	@ (8004f78 <_TrySendOverflowPacket+0xdc>)
 8004eb2:	695b      	ldr	r3, [r3, #20]
 8004eb4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004eb6:	e00b      	b.n	8004ed0 <_TrySendOverflowPacket+0x34>
 8004eb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eba:	b2da      	uxtb	r2, r3
 8004ebc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ebe:	1c59      	adds	r1, r3, #1
 8004ec0:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004ec2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004ec6:	b2d2      	uxtb	r2, r2
 8004ec8:	701a      	strb	r2, [r3, #0]
 8004eca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ecc:	09db      	lsrs	r3, r3, #7
 8004ece:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004ed0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ed2:	2b7f      	cmp	r3, #127	@ 0x7f
 8004ed4:	d8f0      	bhi.n	8004eb8 <_TrySendOverflowPacket+0x1c>
 8004ed6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ed8:	1c5a      	adds	r2, r3, #1
 8004eda:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004edc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004ede:	b2d2      	uxtb	r2, r2
 8004ee0:	701a      	strb	r2, [r3, #0]
 8004ee2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ee4:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004ee6:	4b25      	ldr	r3, [pc, #148]	@ (8004f7c <_TrySendOverflowPacket+0xe0>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004eec:	4b22      	ldr	r3, [pc, #136]	@ (8004f78 <_TrySendOverflowPacket+0xdc>)
 8004eee:	68db      	ldr	r3, [r3, #12]
 8004ef0:	69ba      	ldr	r2, [r7, #24]
 8004ef2:	1ad3      	subs	r3, r2, r3
 8004ef4:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8004ef6:	69fb      	ldr	r3, [r7, #28]
 8004ef8:	627b      	str	r3, [r7, #36]	@ 0x24
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	623b      	str	r3, [r7, #32]
 8004efe:	e00b      	b.n	8004f18 <_TrySendOverflowPacket+0x7c>
 8004f00:	6a3b      	ldr	r3, [r7, #32]
 8004f02:	b2da      	uxtb	r2, r3
 8004f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f06:	1c59      	adds	r1, r3, #1
 8004f08:	6279      	str	r1, [r7, #36]	@ 0x24
 8004f0a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004f0e:	b2d2      	uxtb	r2, r2
 8004f10:	701a      	strb	r2, [r3, #0]
 8004f12:	6a3b      	ldr	r3, [r7, #32]
 8004f14:	09db      	lsrs	r3, r3, #7
 8004f16:	623b      	str	r3, [r7, #32]
 8004f18:	6a3b      	ldr	r3, [r7, #32]
 8004f1a:	2b7f      	cmp	r3, #127	@ 0x7f
 8004f1c:	d8f0      	bhi.n	8004f00 <_TrySendOverflowPacket+0x64>
 8004f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f20:	1c5a      	adds	r2, r3, #1
 8004f22:	627a      	str	r2, [r7, #36]	@ 0x24
 8004f24:	6a3a      	ldr	r2, [r7, #32]
 8004f26:	b2d2      	uxtb	r2, r2
 8004f28:	701a      	strb	r2, [r3, #0]
 8004f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f2c:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8004f2e:	4b12      	ldr	r3, [pc, #72]	@ (8004f78 <_TrySendOverflowPacket+0xdc>)
 8004f30:	785b      	ldrb	r3, [r3, #1]
 8004f32:	4618      	mov	r0, r3
 8004f34:	1d3b      	adds	r3, r7, #4
 8004f36:	69fa      	ldr	r2, [r7, #28]
 8004f38:	1ad3      	subs	r3, r2, r3
 8004f3a:	461a      	mov	r2, r3
 8004f3c:	1d3b      	adds	r3, r7, #4
 8004f3e:	4619      	mov	r1, r3
 8004f40:	f7fb f946 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004f44:	4603      	mov	r3, r0
 8004f46:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d009      	beq.n	8004f62 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004f4e:	4a0a      	ldr	r2, [pc, #40]	@ (8004f78 <_TrySendOverflowPacket+0xdc>)
 8004f50:	69bb      	ldr	r3, [r7, #24]
 8004f52:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8004f54:	4b08      	ldr	r3, [pc, #32]	@ (8004f78 <_TrySendOverflowPacket+0xdc>)
 8004f56:	781b      	ldrb	r3, [r3, #0]
 8004f58:	3b01      	subs	r3, #1
 8004f5a:	b2da      	uxtb	r2, r3
 8004f5c:	4b06      	ldr	r3, [pc, #24]	@ (8004f78 <_TrySendOverflowPacket+0xdc>)
 8004f5e:	701a      	strb	r2, [r3, #0]
 8004f60:	e004      	b.n	8004f6c <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8004f62:	4b05      	ldr	r3, [pc, #20]	@ (8004f78 <_TrySendOverflowPacket+0xdc>)
 8004f64:	695b      	ldr	r3, [r3, #20]
 8004f66:	3301      	adds	r3, #1
 8004f68:	4a03      	ldr	r2, [pc, #12]	@ (8004f78 <_TrySendOverflowPacket+0xdc>)
 8004f6a:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8004f6c:	693b      	ldr	r3, [r7, #16]
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3730      	adds	r7, #48	@ 0x30
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}
 8004f76:	bf00      	nop
 8004f78:	200143e0 	.word	0x200143e0
 8004f7c:	e0001004 	.word	0xe0001004

08004f80 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b08a      	sub	sp, #40	@ 0x28
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	60f8      	str	r0, [r7, #12]
 8004f88:	60b9      	str	r1, [r7, #8]
 8004f8a:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8004f8c:	4b6c      	ldr	r3, [pc, #432]	@ (8005140 <_SendPacket+0x1c0>)
 8004f8e:	781b      	ldrb	r3, [r3, #0]
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d010      	beq.n	8004fb6 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8004f94:	4b6a      	ldr	r3, [pc, #424]	@ (8005140 <_SendPacket+0x1c0>)
 8004f96:	781b      	ldrb	r3, [r3, #0]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	f000 80a3 	beq.w	80050e4 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8004f9e:	4b68      	ldr	r3, [pc, #416]	@ (8005140 <_SendPacket+0x1c0>)
 8004fa0:	781b      	ldrb	r3, [r3, #0]
 8004fa2:	2b02      	cmp	r3, #2
 8004fa4:	d109      	bne.n	8004fba <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8004fa6:	f7ff ff79 	bl	8004e9c <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8004faa:	4b65      	ldr	r3, [pc, #404]	@ (8005140 <_SendPacket+0x1c0>)
 8004fac:	781b      	ldrb	r3, [r3, #0]
 8004fae:	2b01      	cmp	r3, #1
 8004fb0:	f040 809a 	bne.w	80050e8 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 8004fb4:	e001      	b.n	8004fba <_SendPacket+0x3a>
    goto Send;
 8004fb6:	bf00      	nop
 8004fb8:	e000      	b.n	8004fbc <_SendPacket+0x3c>
Send:
 8004fba:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2b1f      	cmp	r3, #31
 8004fc0:	d809      	bhi.n	8004fd6 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8004fc2:	4b5f      	ldr	r3, [pc, #380]	@ (8005140 <_SendPacket+0x1c0>)
 8004fc4:	69da      	ldr	r2, [r3, #28]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	fa22 f303 	lsr.w	r3, r2, r3
 8004fcc:	f003 0301 	and.w	r3, r3, #1
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	f040 808b 	bne.w	80050ec <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2b17      	cmp	r3, #23
 8004fda:	d807      	bhi.n	8004fec <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	3b01      	subs	r3, #1
 8004fe0:	60fb      	str	r3, [r7, #12]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	b2da      	uxtb	r2, r3
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	701a      	strb	r2, [r3, #0]
 8004fea:	e03d      	b.n	8005068 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8004fec:	68ba      	ldr	r2, [r7, #8]
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	1ad3      	subs	r3, r2, r3
 8004ff2:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8004ff4:	69fb      	ldr	r3, [r7, #28]
 8004ff6:	2b7f      	cmp	r3, #127	@ 0x7f
 8004ff8:	d912      	bls.n	8005020 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8004ffa:	69fb      	ldr	r3, [r7, #28]
 8004ffc:	09da      	lsrs	r2, r3, #7
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	3b01      	subs	r3, #1
 8005002:	60fb      	str	r3, [r7, #12]
 8005004:	b2d2      	uxtb	r2, r2
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 800500a:	69fb      	ldr	r3, [r7, #28]
 800500c:	b2db      	uxtb	r3, r3
 800500e:	68fa      	ldr	r2, [r7, #12]
 8005010:	3a01      	subs	r2, #1
 8005012:	60fa      	str	r2, [r7, #12]
 8005014:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005018:	b2da      	uxtb	r2, r3
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	701a      	strb	r2, [r3, #0]
 800501e:	e006      	b.n	800502e <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	3b01      	subs	r3, #1
 8005024:	60fb      	str	r3, [r7, #12]
 8005026:	69fb      	ldr	r3, [r7, #28]
 8005028:	b2da      	uxtb	r2, r3
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2b7f      	cmp	r3, #127	@ 0x7f
 8005032:	d912      	bls.n	800505a <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	09da      	lsrs	r2, r3, #7
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	3b01      	subs	r3, #1
 800503c:	60fb      	str	r3, [r7, #12]
 800503e:	b2d2      	uxtb	r2, r2
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	b2db      	uxtb	r3, r3
 8005048:	68fa      	ldr	r2, [r7, #12]
 800504a:	3a01      	subs	r2, #1
 800504c:	60fa      	str	r2, [r7, #12]
 800504e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005052:	b2da      	uxtb	r2, r3
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	701a      	strb	r2, [r3, #0]
 8005058:	e006      	b.n	8005068 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	3b01      	subs	r3, #1
 800505e:	60fb      	str	r3, [r7, #12]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	b2da      	uxtb	r2, r3
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005068:	4b36      	ldr	r3, [pc, #216]	@ (8005144 <_SendPacket+0x1c4>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800506e:	4b34      	ldr	r3, [pc, #208]	@ (8005140 <_SendPacket+0x1c0>)
 8005070:	68db      	ldr	r3, [r3, #12]
 8005072:	69ba      	ldr	r2, [r7, #24]
 8005074:	1ad3      	subs	r3, r2, r3
 8005076:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	627b      	str	r3, [r7, #36]	@ 0x24
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	623b      	str	r3, [r7, #32]
 8005080:	e00b      	b.n	800509a <_SendPacket+0x11a>
 8005082:	6a3b      	ldr	r3, [r7, #32]
 8005084:	b2da      	uxtb	r2, r3
 8005086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005088:	1c59      	adds	r1, r3, #1
 800508a:	6279      	str	r1, [r7, #36]	@ 0x24
 800508c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005090:	b2d2      	uxtb	r2, r2
 8005092:	701a      	strb	r2, [r3, #0]
 8005094:	6a3b      	ldr	r3, [r7, #32]
 8005096:	09db      	lsrs	r3, r3, #7
 8005098:	623b      	str	r3, [r7, #32]
 800509a:	6a3b      	ldr	r3, [r7, #32]
 800509c:	2b7f      	cmp	r3, #127	@ 0x7f
 800509e:	d8f0      	bhi.n	8005082 <_SendPacket+0x102>
 80050a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050a2:	1c5a      	adds	r2, r3, #1
 80050a4:	627a      	str	r2, [r7, #36]	@ 0x24
 80050a6:	6a3a      	ldr	r2, [r7, #32]
 80050a8:	b2d2      	uxtb	r2, r2
 80050aa:	701a      	strb	r2, [r3, #0]
 80050ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ae:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 80050b0:	4b23      	ldr	r3, [pc, #140]	@ (8005140 <_SendPacket+0x1c0>)
 80050b2:	785b      	ldrb	r3, [r3, #1]
 80050b4:	4618      	mov	r0, r3
 80050b6:	68ba      	ldr	r2, [r7, #8]
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	1ad3      	subs	r3, r2, r3
 80050bc:	461a      	mov	r2, r3
 80050be:	68f9      	ldr	r1, [r7, #12]
 80050c0:	f7fb f886 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80050c4:	4603      	mov	r3, r0
 80050c6:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d003      	beq.n	80050d6 <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80050ce:	4a1c      	ldr	r2, [pc, #112]	@ (8005140 <_SendPacket+0x1c0>)
 80050d0:	69bb      	ldr	r3, [r7, #24]
 80050d2:	60d3      	str	r3, [r2, #12]
 80050d4:	e00b      	b.n	80050ee <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80050d6:	4b1a      	ldr	r3, [pc, #104]	@ (8005140 <_SendPacket+0x1c0>)
 80050d8:	781b      	ldrb	r3, [r3, #0]
 80050da:	3301      	adds	r3, #1
 80050dc:	b2da      	uxtb	r2, r3
 80050de:	4b18      	ldr	r3, [pc, #96]	@ (8005140 <_SendPacket+0x1c0>)
 80050e0:	701a      	strb	r2, [r3, #0]
 80050e2:	e004      	b.n	80050ee <_SendPacket+0x16e>
    goto SendDone;
 80050e4:	bf00      	nop
 80050e6:	e002      	b.n	80050ee <_SendPacket+0x16e>
      goto SendDone;
 80050e8:	bf00      	nop
 80050ea:	e000      	b.n	80050ee <_SendPacket+0x16e>
      goto SendDone;
 80050ec:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80050ee:	4b14      	ldr	r3, [pc, #80]	@ (8005140 <_SendPacket+0x1c0>)
 80050f0:	7e1b      	ldrb	r3, [r3, #24]
 80050f2:	4619      	mov	r1, r3
 80050f4:	4a14      	ldr	r2, [pc, #80]	@ (8005148 <_SendPacket+0x1c8>)
 80050f6:	460b      	mov	r3, r1
 80050f8:	005b      	lsls	r3, r3, #1
 80050fa:	440b      	add	r3, r1
 80050fc:	00db      	lsls	r3, r3, #3
 80050fe:	4413      	add	r3, r2
 8005100:	336c      	adds	r3, #108	@ 0x6c
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	4b0e      	ldr	r3, [pc, #56]	@ (8005140 <_SendPacket+0x1c0>)
 8005106:	7e1b      	ldrb	r3, [r3, #24]
 8005108:	4618      	mov	r0, r3
 800510a:	490f      	ldr	r1, [pc, #60]	@ (8005148 <_SendPacket+0x1c8>)
 800510c:	4603      	mov	r3, r0
 800510e:	005b      	lsls	r3, r3, #1
 8005110:	4403      	add	r3, r0
 8005112:	00db      	lsls	r3, r3, #3
 8005114:	440b      	add	r3, r1
 8005116:	3370      	adds	r3, #112	@ 0x70
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	429a      	cmp	r2, r3
 800511c:	d00b      	beq.n	8005136 <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800511e:	4b08      	ldr	r3, [pc, #32]	@ (8005140 <_SendPacket+0x1c0>)
 8005120:	789b      	ldrb	r3, [r3, #2]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d107      	bne.n	8005136 <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005126:	4b06      	ldr	r3, [pc, #24]	@ (8005140 <_SendPacket+0x1c0>)
 8005128:	2201      	movs	r2, #1
 800512a:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800512c:	f7ff fe46 	bl	8004dbc <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005130:	4b03      	ldr	r3, [pc, #12]	@ (8005140 <_SendPacket+0x1c0>)
 8005132:	2200      	movs	r2, #0
 8005134:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8005136:	bf00      	nop
 8005138:	3728      	adds	r7, #40	@ 0x28
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}
 800513e:	bf00      	nop
 8005140:	200143e0 	.word	0x200143e0
 8005144:	e0001004 	.word	0xe0001004
 8005148:	20012f20 	.word	0x20012f20

0800514c <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 800514c:	b580      	push	{r7, lr}
 800514e:	b086      	sub	sp, #24
 8005150:	af02      	add	r7, sp, #8
 8005152:	60f8      	str	r0, [r7, #12]
 8005154:	60b9      	str	r1, [r7, #8]
 8005156:	607a      	str	r2, [r7, #4]
 8005158:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800515a:	2300      	movs	r3, #0
 800515c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8005160:	4917      	ldr	r1, [pc, #92]	@ (80051c0 <SEGGER_SYSVIEW_Init+0x74>)
 8005162:	4818      	ldr	r0, [pc, #96]	@ (80051c4 <SEGGER_SYSVIEW_Init+0x78>)
 8005164:	f7ff fcdc 	bl	8004b20 <SEGGER_RTT_AllocUpBuffer>
 8005168:	4603      	mov	r3, r0
 800516a:	b2da      	uxtb	r2, r3
 800516c:	4b16      	ldr	r3, [pc, #88]	@ (80051c8 <SEGGER_SYSVIEW_Init+0x7c>)
 800516e:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8005170:	4b15      	ldr	r3, [pc, #84]	@ (80051c8 <SEGGER_SYSVIEW_Init+0x7c>)
 8005172:	785a      	ldrb	r2, [r3, #1]
 8005174:	4b14      	ldr	r3, [pc, #80]	@ (80051c8 <SEGGER_SYSVIEW_Init+0x7c>)
 8005176:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005178:	4b13      	ldr	r3, [pc, #76]	@ (80051c8 <SEGGER_SYSVIEW_Init+0x7c>)
 800517a:	7e1b      	ldrb	r3, [r3, #24]
 800517c:	4618      	mov	r0, r3
 800517e:	2300      	movs	r3, #0
 8005180:	9300      	str	r3, [sp, #0]
 8005182:	2308      	movs	r3, #8
 8005184:	4a11      	ldr	r2, [pc, #68]	@ (80051cc <SEGGER_SYSVIEW_Init+0x80>)
 8005186:	490f      	ldr	r1, [pc, #60]	@ (80051c4 <SEGGER_SYSVIEW_Init+0x78>)
 8005188:	f7ff fd4e 	bl	8004c28 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 800518c:	4b0e      	ldr	r3, [pc, #56]	@ (80051c8 <SEGGER_SYSVIEW_Init+0x7c>)
 800518e:	2200      	movs	r2, #0
 8005190:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005192:	4b0f      	ldr	r3, [pc, #60]	@ (80051d0 <SEGGER_SYSVIEW_Init+0x84>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a0c      	ldr	r2, [pc, #48]	@ (80051c8 <SEGGER_SYSVIEW_Init+0x7c>)
 8005198:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800519a:	4a0b      	ldr	r2, [pc, #44]	@ (80051c8 <SEGGER_SYSVIEW_Init+0x7c>)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 80051a0:	4a09      	ldr	r2, [pc, #36]	@ (80051c8 <SEGGER_SYSVIEW_Init+0x7c>)
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 80051a6:	4a08      	ldr	r2, [pc, #32]	@ (80051c8 <SEGGER_SYSVIEW_Init+0x7c>)
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 80051ac:	4a06      	ldr	r2, [pc, #24]	@ (80051c8 <SEGGER_SYSVIEW_Init+0x7c>)
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 80051b2:	4b05      	ldr	r3, [pc, #20]	@ (80051c8 <SEGGER_SYSVIEW_Init+0x7c>)
 80051b4:	2200      	movs	r2, #0
 80051b6:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 80051b8:	bf00      	nop
 80051ba:	3710      	adds	r7, #16
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd80      	pop	{r7, pc}
 80051c0:	200133d8 	.word	0x200133d8
 80051c4:	08006bcc 	.word	0x08006bcc
 80051c8:	200143e0 	.word	0x200143e0
 80051cc:	200143d8 	.word	0x200143d8
 80051d0:	e0001004 	.word	0xe0001004

080051d4 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 80051d4:	b480      	push	{r7}
 80051d6:	b083      	sub	sp, #12
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 80051dc:	4a04      	ldr	r2, [pc, #16]	@ (80051f0 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6113      	str	r3, [r2, #16]
}
 80051e2:	bf00      	nop
 80051e4:	370c      	adds	r7, #12
 80051e6:	46bd      	mov	sp, r7
 80051e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ec:	4770      	bx	lr
 80051ee:	bf00      	nop
 80051f0:	200143e0 	.word	0x200143e0

080051f4 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b084      	sub	sp, #16
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80051fc:	f3ef 8311 	mrs	r3, BASEPRI
 8005200:	f04f 0120 	mov.w	r1, #32
 8005204:	f381 8811 	msr	BASEPRI, r1
 8005208:	60fb      	str	r3, [r7, #12]
 800520a:	4808      	ldr	r0, [pc, #32]	@ (800522c <SEGGER_SYSVIEW_RecordVoid+0x38>)
 800520c:	f7ff fdc9 	bl	8004da2 <_PreparePacket>
 8005210:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8005212:	687a      	ldr	r2, [r7, #4]
 8005214:	68b9      	ldr	r1, [r7, #8]
 8005216:	68b8      	ldr	r0, [r7, #8]
 8005218:	f7ff feb2 	bl	8004f80 <_SendPacket>
  RECORD_END();
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	f383 8811 	msr	BASEPRI, r3
}
 8005222:	bf00      	nop
 8005224:	3710      	adds	r7, #16
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}
 800522a:	bf00      	nop
 800522c:	20014410 	.word	0x20014410

08005230 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8005230:	b580      	push	{r7, lr}
 8005232:	b088      	sub	sp, #32
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
 8005238:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800523a:	f3ef 8311 	mrs	r3, BASEPRI
 800523e:	f04f 0120 	mov.w	r1, #32
 8005242:	f381 8811 	msr	BASEPRI, r1
 8005246:	617b      	str	r3, [r7, #20]
 8005248:	4816      	ldr	r0, [pc, #88]	@ (80052a4 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800524a:	f7ff fdaa 	bl	8004da2 <_PreparePacket>
 800524e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	61fb      	str	r3, [r7, #28]
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	61bb      	str	r3, [r7, #24]
 800525c:	e00b      	b.n	8005276 <SEGGER_SYSVIEW_RecordU32+0x46>
 800525e:	69bb      	ldr	r3, [r7, #24]
 8005260:	b2da      	uxtb	r2, r3
 8005262:	69fb      	ldr	r3, [r7, #28]
 8005264:	1c59      	adds	r1, r3, #1
 8005266:	61f9      	str	r1, [r7, #28]
 8005268:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800526c:	b2d2      	uxtb	r2, r2
 800526e:	701a      	strb	r2, [r3, #0]
 8005270:	69bb      	ldr	r3, [r7, #24]
 8005272:	09db      	lsrs	r3, r3, #7
 8005274:	61bb      	str	r3, [r7, #24]
 8005276:	69bb      	ldr	r3, [r7, #24]
 8005278:	2b7f      	cmp	r3, #127	@ 0x7f
 800527a:	d8f0      	bhi.n	800525e <SEGGER_SYSVIEW_RecordU32+0x2e>
 800527c:	69fb      	ldr	r3, [r7, #28]
 800527e:	1c5a      	adds	r2, r3, #1
 8005280:	61fa      	str	r2, [r7, #28]
 8005282:	69ba      	ldr	r2, [r7, #24]
 8005284:	b2d2      	uxtb	r2, r2
 8005286:	701a      	strb	r2, [r3, #0]
 8005288:	69fb      	ldr	r3, [r7, #28]
 800528a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800528c:	687a      	ldr	r2, [r7, #4]
 800528e:	68f9      	ldr	r1, [r7, #12]
 8005290:	6938      	ldr	r0, [r7, #16]
 8005292:	f7ff fe75 	bl	8004f80 <_SendPacket>
  RECORD_END();
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	f383 8811 	msr	BASEPRI, r3
}
 800529c:	bf00      	nop
 800529e:	3720      	adds	r7, #32
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}
 80052a4:	20014410 	.word	0x20014410

080052a8 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b08c      	sub	sp, #48	@ 0x30
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	60f8      	str	r0, [r7, #12]
 80052b0:	60b9      	str	r1, [r7, #8]
 80052b2:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80052b4:	f3ef 8311 	mrs	r3, BASEPRI
 80052b8:	f04f 0120 	mov.w	r1, #32
 80052bc:	f381 8811 	msr	BASEPRI, r1
 80052c0:	61fb      	str	r3, [r7, #28]
 80052c2:	4825      	ldr	r0, [pc, #148]	@ (8005358 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80052c4:	f7ff fd6d 	bl	8004da2 <_PreparePacket>
 80052c8:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80052ca:	69bb      	ldr	r3, [r7, #24]
 80052cc:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80052d6:	e00b      	b.n	80052f0 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80052d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052da:	b2da      	uxtb	r2, r3
 80052dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052de:	1c59      	adds	r1, r3, #1
 80052e0:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80052e2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80052e6:	b2d2      	uxtb	r2, r2
 80052e8:	701a      	strb	r2, [r3, #0]
 80052ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052ec:	09db      	lsrs	r3, r3, #7
 80052ee:	62bb      	str	r3, [r7, #40]	@ 0x28
 80052f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052f2:	2b7f      	cmp	r3, #127	@ 0x7f
 80052f4:	d8f0      	bhi.n	80052d8 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80052f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052f8:	1c5a      	adds	r2, r3, #1
 80052fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80052fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80052fe:	b2d2      	uxtb	r2, r2
 8005300:	701a      	strb	r2, [r3, #0]
 8005302:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005304:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	627b      	str	r3, [r7, #36]	@ 0x24
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	623b      	str	r3, [r7, #32]
 800530e:	e00b      	b.n	8005328 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8005310:	6a3b      	ldr	r3, [r7, #32]
 8005312:	b2da      	uxtb	r2, r3
 8005314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005316:	1c59      	adds	r1, r3, #1
 8005318:	6279      	str	r1, [r7, #36]	@ 0x24
 800531a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800531e:	b2d2      	uxtb	r2, r2
 8005320:	701a      	strb	r2, [r3, #0]
 8005322:	6a3b      	ldr	r3, [r7, #32]
 8005324:	09db      	lsrs	r3, r3, #7
 8005326:	623b      	str	r3, [r7, #32]
 8005328:	6a3b      	ldr	r3, [r7, #32]
 800532a:	2b7f      	cmp	r3, #127	@ 0x7f
 800532c:	d8f0      	bhi.n	8005310 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800532e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005330:	1c5a      	adds	r2, r3, #1
 8005332:	627a      	str	r2, [r7, #36]	@ 0x24
 8005334:	6a3a      	ldr	r2, [r7, #32]
 8005336:	b2d2      	uxtb	r2, r2
 8005338:	701a      	strb	r2, [r3, #0]
 800533a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800533c:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800533e:	68fa      	ldr	r2, [r7, #12]
 8005340:	6979      	ldr	r1, [r7, #20]
 8005342:	69b8      	ldr	r0, [r7, #24]
 8005344:	f7ff fe1c 	bl	8004f80 <_SendPacket>
  RECORD_END();
 8005348:	69fb      	ldr	r3, [r7, #28]
 800534a:	f383 8811 	msr	BASEPRI, r3
}
 800534e:	bf00      	nop
 8005350:	3730      	adds	r7, #48	@ 0x30
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}
 8005356:	bf00      	nop
 8005358:	20014410 	.word	0x20014410

0800535c <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 800535c:	b580      	push	{r7, lr}
 800535e:	b08e      	sub	sp, #56	@ 0x38
 8005360:	af00      	add	r7, sp, #0
 8005362:	60f8      	str	r0, [r7, #12]
 8005364:	60b9      	str	r1, [r7, #8]
 8005366:	607a      	str	r2, [r7, #4]
 8005368:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 800536a:	f3ef 8311 	mrs	r3, BASEPRI
 800536e:	f04f 0120 	mov.w	r1, #32
 8005372:	f381 8811 	msr	BASEPRI, r1
 8005376:	61fb      	str	r3, [r7, #28]
 8005378:	4832      	ldr	r0, [pc, #200]	@ (8005444 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 800537a:	f7ff fd12 	bl	8004da2 <_PreparePacket>
 800537e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005380:	69bb      	ldr	r3, [r7, #24]
 8005382:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	637b      	str	r3, [r7, #52]	@ 0x34
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	633b      	str	r3, [r7, #48]	@ 0x30
 800538c:	e00b      	b.n	80053a6 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 800538e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005390:	b2da      	uxtb	r2, r3
 8005392:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005394:	1c59      	adds	r1, r3, #1
 8005396:	6379      	str	r1, [r7, #52]	@ 0x34
 8005398:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800539c:	b2d2      	uxtb	r2, r2
 800539e:	701a      	strb	r2, [r3, #0]
 80053a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053a2:	09db      	lsrs	r3, r3, #7
 80053a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80053a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053a8:	2b7f      	cmp	r3, #127	@ 0x7f
 80053aa:	d8f0      	bhi.n	800538e <SEGGER_SYSVIEW_RecordU32x3+0x32>
 80053ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053ae:	1c5a      	adds	r2, r3, #1
 80053b0:	637a      	str	r2, [r7, #52]	@ 0x34
 80053b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80053b4:	b2d2      	uxtb	r2, r2
 80053b6:	701a      	strb	r2, [r3, #0]
 80053b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053ba:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80053c4:	e00b      	b.n	80053de <SEGGER_SYSVIEW_RecordU32x3+0x82>
 80053c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053c8:	b2da      	uxtb	r2, r3
 80053ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053cc:	1c59      	adds	r1, r3, #1
 80053ce:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80053d0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80053d4:	b2d2      	uxtb	r2, r2
 80053d6:	701a      	strb	r2, [r3, #0]
 80053d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053da:	09db      	lsrs	r3, r3, #7
 80053dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80053de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053e0:	2b7f      	cmp	r3, #127	@ 0x7f
 80053e2:	d8f0      	bhi.n	80053c6 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 80053e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053e6:	1c5a      	adds	r2, r3, #1
 80053e8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80053ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80053ec:	b2d2      	uxtb	r2, r2
 80053ee:	701a      	strb	r2, [r3, #0]
 80053f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053f2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	623b      	str	r3, [r7, #32]
 80053fc:	e00b      	b.n	8005416 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 80053fe:	6a3b      	ldr	r3, [r7, #32]
 8005400:	b2da      	uxtb	r2, r3
 8005402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005404:	1c59      	adds	r1, r3, #1
 8005406:	6279      	str	r1, [r7, #36]	@ 0x24
 8005408:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800540c:	b2d2      	uxtb	r2, r2
 800540e:	701a      	strb	r2, [r3, #0]
 8005410:	6a3b      	ldr	r3, [r7, #32]
 8005412:	09db      	lsrs	r3, r3, #7
 8005414:	623b      	str	r3, [r7, #32]
 8005416:	6a3b      	ldr	r3, [r7, #32]
 8005418:	2b7f      	cmp	r3, #127	@ 0x7f
 800541a:	d8f0      	bhi.n	80053fe <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 800541c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800541e:	1c5a      	adds	r2, r3, #1
 8005420:	627a      	str	r2, [r7, #36]	@ 0x24
 8005422:	6a3a      	ldr	r2, [r7, #32]
 8005424:	b2d2      	uxtb	r2, r2
 8005426:	701a      	strb	r2, [r3, #0]
 8005428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800542a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800542c:	68fa      	ldr	r2, [r7, #12]
 800542e:	6979      	ldr	r1, [r7, #20]
 8005430:	69b8      	ldr	r0, [r7, #24]
 8005432:	f7ff fda5 	bl	8004f80 <_SendPacket>
  RECORD_END();
 8005436:	69fb      	ldr	r3, [r7, #28]
 8005438:	f383 8811 	msr	BASEPRI, r3
}
 800543c:	bf00      	nop
 800543e:	3738      	adds	r7, #56	@ 0x38
 8005440:	46bd      	mov	sp, r7
 8005442:	bd80      	pop	{r7, pc}
 8005444:	20014410 	.word	0x20014410

08005448 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8005448:	b580      	push	{r7, lr}
 800544a:	b090      	sub	sp, #64	@ 0x40
 800544c:	af00      	add	r7, sp, #0
 800544e:	60f8      	str	r0, [r7, #12]
 8005450:	60b9      	str	r1, [r7, #8]
 8005452:	607a      	str	r2, [r7, #4]
 8005454:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005456:	f3ef 8311 	mrs	r3, BASEPRI
 800545a:	f04f 0120 	mov.w	r1, #32
 800545e:	f381 8811 	msr	BASEPRI, r1
 8005462:	61fb      	str	r3, [r7, #28]
 8005464:	4840      	ldr	r0, [pc, #256]	@ (8005568 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8005466:	f7ff fc9c 	bl	8004da2 <_PreparePacket>
 800546a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800546c:	69bb      	ldr	r3, [r7, #24]
 800546e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005478:	e00b      	b.n	8005492 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 800547a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800547c:	b2da      	uxtb	r2, r3
 800547e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005480:	1c59      	adds	r1, r3, #1
 8005482:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8005484:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005488:	b2d2      	uxtb	r2, r2
 800548a:	701a      	strb	r2, [r3, #0]
 800548c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800548e:	09db      	lsrs	r3, r3, #7
 8005490:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005492:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005494:	2b7f      	cmp	r3, #127	@ 0x7f
 8005496:	d8f0      	bhi.n	800547a <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8005498:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800549a:	1c5a      	adds	r2, r3, #1
 800549c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800549e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80054a0:	b2d2      	uxtb	r2, r2
 80054a2:	701a      	strb	r2, [r3, #0]
 80054a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054a6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	633b      	str	r3, [r7, #48]	@ 0x30
 80054b0:	e00b      	b.n	80054ca <SEGGER_SYSVIEW_RecordU32x4+0x82>
 80054b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054b4:	b2da      	uxtb	r2, r3
 80054b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054b8:	1c59      	adds	r1, r3, #1
 80054ba:	6379      	str	r1, [r7, #52]	@ 0x34
 80054bc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80054c0:	b2d2      	uxtb	r2, r2
 80054c2:	701a      	strb	r2, [r3, #0]
 80054c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054c6:	09db      	lsrs	r3, r3, #7
 80054c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80054ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054cc:	2b7f      	cmp	r3, #127	@ 0x7f
 80054ce:	d8f0      	bhi.n	80054b2 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 80054d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054d2:	1c5a      	adds	r2, r3, #1
 80054d4:	637a      	str	r2, [r7, #52]	@ 0x34
 80054d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054d8:	b2d2      	uxtb	r2, r2
 80054da:	701a      	strb	r2, [r3, #0]
 80054dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054de:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80054e8:	e00b      	b.n	8005502 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 80054ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054ec:	b2da      	uxtb	r2, r3
 80054ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054f0:	1c59      	adds	r1, r3, #1
 80054f2:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80054f4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80054f8:	b2d2      	uxtb	r2, r2
 80054fa:	701a      	strb	r2, [r3, #0]
 80054fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054fe:	09db      	lsrs	r3, r3, #7
 8005500:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005502:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005504:	2b7f      	cmp	r3, #127	@ 0x7f
 8005506:	d8f0      	bhi.n	80054ea <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8005508:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800550a:	1c5a      	adds	r2, r3, #1
 800550c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800550e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005510:	b2d2      	uxtb	r2, r2
 8005512:	701a      	strb	r2, [r3, #0]
 8005514:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005516:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	627b      	str	r3, [r7, #36]	@ 0x24
 800551c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800551e:	623b      	str	r3, [r7, #32]
 8005520:	e00b      	b.n	800553a <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8005522:	6a3b      	ldr	r3, [r7, #32]
 8005524:	b2da      	uxtb	r2, r3
 8005526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005528:	1c59      	adds	r1, r3, #1
 800552a:	6279      	str	r1, [r7, #36]	@ 0x24
 800552c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005530:	b2d2      	uxtb	r2, r2
 8005532:	701a      	strb	r2, [r3, #0]
 8005534:	6a3b      	ldr	r3, [r7, #32]
 8005536:	09db      	lsrs	r3, r3, #7
 8005538:	623b      	str	r3, [r7, #32]
 800553a:	6a3b      	ldr	r3, [r7, #32]
 800553c:	2b7f      	cmp	r3, #127	@ 0x7f
 800553e:	d8f0      	bhi.n	8005522 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8005540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005542:	1c5a      	adds	r2, r3, #1
 8005544:	627a      	str	r2, [r7, #36]	@ 0x24
 8005546:	6a3a      	ldr	r2, [r7, #32]
 8005548:	b2d2      	uxtb	r2, r2
 800554a:	701a      	strb	r2, [r3, #0]
 800554c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800554e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005550:	68fa      	ldr	r2, [r7, #12]
 8005552:	6979      	ldr	r1, [r7, #20]
 8005554:	69b8      	ldr	r0, [r7, #24]
 8005556:	f7ff fd13 	bl	8004f80 <_SendPacket>
  RECORD_END();
 800555a:	69fb      	ldr	r3, [r7, #28]
 800555c:	f383 8811 	msr	BASEPRI, r3
}
 8005560:	bf00      	nop
 8005562:	3740      	adds	r7, #64	@ 0x40
 8005564:	46bd      	mov	sp, r7
 8005566:	bd80      	pop	{r7, pc}
 8005568:	20014410 	.word	0x20014410

0800556c <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 800556c:	b580      	push	{r7, lr}
 800556e:	b08c      	sub	sp, #48	@ 0x30
 8005570:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8005572:	4b58      	ldr	r3, [pc, #352]	@ (80056d4 <SEGGER_SYSVIEW_Start+0x168>)
 8005574:	2201      	movs	r2, #1
 8005576:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8005578:	f3ef 8311 	mrs	r3, BASEPRI
 800557c:	f04f 0120 	mov.w	r1, #32
 8005580:	f381 8811 	msr	BASEPRI, r1
 8005584:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8005586:	4b53      	ldr	r3, [pc, #332]	@ (80056d4 <SEGGER_SYSVIEW_Start+0x168>)
 8005588:	785b      	ldrb	r3, [r3, #1]
 800558a:	220a      	movs	r2, #10
 800558c:	4952      	ldr	r1, [pc, #328]	@ (80056d8 <SEGGER_SYSVIEW_Start+0x16c>)
 800558e:	4618      	mov	r0, r3
 8005590:	f7fa fe1e 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800559a:	200a      	movs	r0, #10
 800559c:	f7ff fe2a 	bl	80051f4 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80055a0:	f3ef 8311 	mrs	r3, BASEPRI
 80055a4:	f04f 0120 	mov.w	r1, #32
 80055a8:	f381 8811 	msr	BASEPRI, r1
 80055ac:	60bb      	str	r3, [r7, #8]
 80055ae:	484b      	ldr	r0, [pc, #300]	@ (80056dc <SEGGER_SYSVIEW_Start+0x170>)
 80055b0:	f7ff fbf7 	bl	8004da2 <_PreparePacket>
 80055b4:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80055be:	4b45      	ldr	r3, [pc, #276]	@ (80056d4 <SEGGER_SYSVIEW_Start+0x168>)
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80055c4:	e00b      	b.n	80055de <SEGGER_SYSVIEW_Start+0x72>
 80055c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055c8:	b2da      	uxtb	r2, r3
 80055ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055cc:	1c59      	adds	r1, r3, #1
 80055ce:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80055d0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80055d4:	b2d2      	uxtb	r2, r2
 80055d6:	701a      	strb	r2, [r3, #0]
 80055d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055da:	09db      	lsrs	r3, r3, #7
 80055dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80055de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055e0:	2b7f      	cmp	r3, #127	@ 0x7f
 80055e2:	d8f0      	bhi.n	80055c6 <SEGGER_SYSVIEW_Start+0x5a>
 80055e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055e6:	1c5a      	adds	r2, r3, #1
 80055e8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80055ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80055ec:	b2d2      	uxtb	r2, r2
 80055ee:	701a      	strb	r2, [r3, #0]
 80055f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055f2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80055f8:	4b36      	ldr	r3, [pc, #216]	@ (80056d4 <SEGGER_SYSVIEW_Start+0x168>)
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	623b      	str	r3, [r7, #32]
 80055fe:	e00b      	b.n	8005618 <SEGGER_SYSVIEW_Start+0xac>
 8005600:	6a3b      	ldr	r3, [r7, #32]
 8005602:	b2da      	uxtb	r2, r3
 8005604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005606:	1c59      	adds	r1, r3, #1
 8005608:	6279      	str	r1, [r7, #36]	@ 0x24
 800560a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800560e:	b2d2      	uxtb	r2, r2
 8005610:	701a      	strb	r2, [r3, #0]
 8005612:	6a3b      	ldr	r3, [r7, #32]
 8005614:	09db      	lsrs	r3, r3, #7
 8005616:	623b      	str	r3, [r7, #32]
 8005618:	6a3b      	ldr	r3, [r7, #32]
 800561a:	2b7f      	cmp	r3, #127	@ 0x7f
 800561c:	d8f0      	bhi.n	8005600 <SEGGER_SYSVIEW_Start+0x94>
 800561e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005620:	1c5a      	adds	r2, r3, #1
 8005622:	627a      	str	r2, [r7, #36]	@ 0x24
 8005624:	6a3a      	ldr	r2, [r7, #32]
 8005626:	b2d2      	uxtb	r2, r2
 8005628:	701a      	strb	r2, [r3, #0]
 800562a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800562c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	61fb      	str	r3, [r7, #28]
 8005632:	4b28      	ldr	r3, [pc, #160]	@ (80056d4 <SEGGER_SYSVIEW_Start+0x168>)
 8005634:	691b      	ldr	r3, [r3, #16]
 8005636:	61bb      	str	r3, [r7, #24]
 8005638:	e00b      	b.n	8005652 <SEGGER_SYSVIEW_Start+0xe6>
 800563a:	69bb      	ldr	r3, [r7, #24]
 800563c:	b2da      	uxtb	r2, r3
 800563e:	69fb      	ldr	r3, [r7, #28]
 8005640:	1c59      	adds	r1, r3, #1
 8005642:	61f9      	str	r1, [r7, #28]
 8005644:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005648:	b2d2      	uxtb	r2, r2
 800564a:	701a      	strb	r2, [r3, #0]
 800564c:	69bb      	ldr	r3, [r7, #24]
 800564e:	09db      	lsrs	r3, r3, #7
 8005650:	61bb      	str	r3, [r7, #24]
 8005652:	69bb      	ldr	r3, [r7, #24]
 8005654:	2b7f      	cmp	r3, #127	@ 0x7f
 8005656:	d8f0      	bhi.n	800563a <SEGGER_SYSVIEW_Start+0xce>
 8005658:	69fb      	ldr	r3, [r7, #28]
 800565a:	1c5a      	adds	r2, r3, #1
 800565c:	61fa      	str	r2, [r7, #28]
 800565e:	69ba      	ldr	r2, [r7, #24]
 8005660:	b2d2      	uxtb	r2, r2
 8005662:	701a      	strb	r2, [r3, #0]
 8005664:	69fb      	ldr	r3, [r7, #28]
 8005666:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	617b      	str	r3, [r7, #20]
 800566c:	2300      	movs	r3, #0
 800566e:	613b      	str	r3, [r7, #16]
 8005670:	e00b      	b.n	800568a <SEGGER_SYSVIEW_Start+0x11e>
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	b2da      	uxtb	r2, r3
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	1c59      	adds	r1, r3, #1
 800567a:	6179      	str	r1, [r7, #20]
 800567c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005680:	b2d2      	uxtb	r2, r2
 8005682:	701a      	strb	r2, [r3, #0]
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	09db      	lsrs	r3, r3, #7
 8005688:	613b      	str	r3, [r7, #16]
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	2b7f      	cmp	r3, #127	@ 0x7f
 800568e:	d8f0      	bhi.n	8005672 <SEGGER_SYSVIEW_Start+0x106>
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	1c5a      	adds	r2, r3, #1
 8005694:	617a      	str	r2, [r7, #20]
 8005696:	693a      	ldr	r2, [r7, #16]
 8005698:	b2d2      	uxtb	r2, r2
 800569a:	701a      	strb	r2, [r3, #0]
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80056a0:	2218      	movs	r2, #24
 80056a2:	6839      	ldr	r1, [r7, #0]
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f7ff fc6b 	bl	8004f80 <_SendPacket>
      RECORD_END();
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80056b0:	4b08      	ldr	r3, [pc, #32]	@ (80056d4 <SEGGER_SYSVIEW_Start+0x168>)
 80056b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d002      	beq.n	80056be <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 80056b8:	4b06      	ldr	r3, [pc, #24]	@ (80056d4 <SEGGER_SYSVIEW_Start+0x168>)
 80056ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056bc:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80056be:	f000 f9eb 	bl	8005a98 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80056c2:	f000 f9b1 	bl	8005a28 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80056c6:	f000 fc83 	bl	8005fd0 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 80056ca:	bf00      	nop
 80056cc:	3730      	adds	r7, #48	@ 0x30
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}
 80056d2:	bf00      	nop
 80056d4:	200143e0 	.word	0x200143e0
 80056d8:	08006bf8 	.word	0x08006bf8
 80056dc:	20014410 	.word	0x20014410

080056e0 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b082      	sub	sp, #8
 80056e4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80056e6:	f3ef 8311 	mrs	r3, BASEPRI
 80056ea:	f04f 0120 	mov.w	r1, #32
 80056ee:	f381 8811 	msr	BASEPRI, r1
 80056f2:	607b      	str	r3, [r7, #4]
 80056f4:	480b      	ldr	r0, [pc, #44]	@ (8005724 <SEGGER_SYSVIEW_Stop+0x44>)
 80056f6:	f7ff fb54 	bl	8004da2 <_PreparePacket>
 80056fa:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80056fc:	4b0a      	ldr	r3, [pc, #40]	@ (8005728 <SEGGER_SYSVIEW_Stop+0x48>)
 80056fe:	781b      	ldrb	r3, [r3, #0]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d007      	beq.n	8005714 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8005704:	220b      	movs	r2, #11
 8005706:	6839      	ldr	r1, [r7, #0]
 8005708:	6838      	ldr	r0, [r7, #0]
 800570a:	f7ff fc39 	bl	8004f80 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800570e:	4b06      	ldr	r3, [pc, #24]	@ (8005728 <SEGGER_SYSVIEW_Stop+0x48>)
 8005710:	2200      	movs	r2, #0
 8005712:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	f383 8811 	msr	BASEPRI, r3
}
 800571a:	bf00      	nop
 800571c:	3708      	adds	r7, #8
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}
 8005722:	bf00      	nop
 8005724:	20014410 	.word	0x20014410
 8005728:	200143e0 	.word	0x200143e0

0800572c <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800572c:	b580      	push	{r7, lr}
 800572e:	b08c      	sub	sp, #48	@ 0x30
 8005730:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005732:	f3ef 8311 	mrs	r3, BASEPRI
 8005736:	f04f 0120 	mov.w	r1, #32
 800573a:	f381 8811 	msr	BASEPRI, r1
 800573e:	60fb      	str	r3, [r7, #12]
 8005740:	4845      	ldr	r0, [pc, #276]	@ (8005858 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8005742:	f7ff fb2e 	bl	8004da2 <_PreparePacket>
 8005746:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005750:	4b42      	ldr	r3, [pc, #264]	@ (800585c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005756:	e00b      	b.n	8005770 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8005758:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800575a:	b2da      	uxtb	r2, r3
 800575c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800575e:	1c59      	adds	r1, r3, #1
 8005760:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005762:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005766:	b2d2      	uxtb	r2, r2
 8005768:	701a      	strb	r2, [r3, #0]
 800576a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800576c:	09db      	lsrs	r3, r3, #7
 800576e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005770:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005772:	2b7f      	cmp	r3, #127	@ 0x7f
 8005774:	d8f0      	bhi.n	8005758 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8005776:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005778:	1c5a      	adds	r2, r3, #1
 800577a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800577c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800577e:	b2d2      	uxtb	r2, r2
 8005780:	701a      	strb	r2, [r3, #0]
 8005782:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005784:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	627b      	str	r3, [r7, #36]	@ 0x24
 800578a:	4b34      	ldr	r3, [pc, #208]	@ (800585c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800578c:	689b      	ldr	r3, [r3, #8]
 800578e:	623b      	str	r3, [r7, #32]
 8005790:	e00b      	b.n	80057aa <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8005792:	6a3b      	ldr	r3, [r7, #32]
 8005794:	b2da      	uxtb	r2, r3
 8005796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005798:	1c59      	adds	r1, r3, #1
 800579a:	6279      	str	r1, [r7, #36]	@ 0x24
 800579c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80057a0:	b2d2      	uxtb	r2, r2
 80057a2:	701a      	strb	r2, [r3, #0]
 80057a4:	6a3b      	ldr	r3, [r7, #32]
 80057a6:	09db      	lsrs	r3, r3, #7
 80057a8:	623b      	str	r3, [r7, #32]
 80057aa:	6a3b      	ldr	r3, [r7, #32]
 80057ac:	2b7f      	cmp	r3, #127	@ 0x7f
 80057ae:	d8f0      	bhi.n	8005792 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80057b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057b2:	1c5a      	adds	r2, r3, #1
 80057b4:	627a      	str	r2, [r7, #36]	@ 0x24
 80057b6:	6a3a      	ldr	r2, [r7, #32]
 80057b8:	b2d2      	uxtb	r2, r2
 80057ba:	701a      	strb	r2, [r3, #0]
 80057bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057be:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	61fb      	str	r3, [r7, #28]
 80057c4:	4b25      	ldr	r3, [pc, #148]	@ (800585c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80057c6:	691b      	ldr	r3, [r3, #16]
 80057c8:	61bb      	str	r3, [r7, #24]
 80057ca:	e00b      	b.n	80057e4 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80057cc:	69bb      	ldr	r3, [r7, #24]
 80057ce:	b2da      	uxtb	r2, r3
 80057d0:	69fb      	ldr	r3, [r7, #28]
 80057d2:	1c59      	adds	r1, r3, #1
 80057d4:	61f9      	str	r1, [r7, #28]
 80057d6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80057da:	b2d2      	uxtb	r2, r2
 80057dc:	701a      	strb	r2, [r3, #0]
 80057de:	69bb      	ldr	r3, [r7, #24]
 80057e0:	09db      	lsrs	r3, r3, #7
 80057e2:	61bb      	str	r3, [r7, #24]
 80057e4:	69bb      	ldr	r3, [r7, #24]
 80057e6:	2b7f      	cmp	r3, #127	@ 0x7f
 80057e8:	d8f0      	bhi.n	80057cc <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80057ea:	69fb      	ldr	r3, [r7, #28]
 80057ec:	1c5a      	adds	r2, r3, #1
 80057ee:	61fa      	str	r2, [r7, #28]
 80057f0:	69ba      	ldr	r2, [r7, #24]
 80057f2:	b2d2      	uxtb	r2, r2
 80057f4:	701a      	strb	r2, [r3, #0]
 80057f6:	69fb      	ldr	r3, [r7, #28]
 80057f8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	617b      	str	r3, [r7, #20]
 80057fe:	2300      	movs	r3, #0
 8005800:	613b      	str	r3, [r7, #16]
 8005802:	e00b      	b.n	800581c <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	b2da      	uxtb	r2, r3
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	1c59      	adds	r1, r3, #1
 800580c:	6179      	str	r1, [r7, #20]
 800580e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005812:	b2d2      	uxtb	r2, r2
 8005814:	701a      	strb	r2, [r3, #0]
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	09db      	lsrs	r3, r3, #7
 800581a:	613b      	str	r3, [r7, #16]
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005820:	d8f0      	bhi.n	8005804 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	1c5a      	adds	r2, r3, #1
 8005826:	617a      	str	r2, [r7, #20]
 8005828:	693a      	ldr	r2, [r7, #16]
 800582a:	b2d2      	uxtb	r2, r2
 800582c:	701a      	strb	r2, [r3, #0]
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005832:	2218      	movs	r2, #24
 8005834:	6879      	ldr	r1, [r7, #4]
 8005836:	68b8      	ldr	r0, [r7, #8]
 8005838:	f7ff fba2 	bl	8004f80 <_SendPacket>
  RECORD_END();
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005842:	4b06      	ldr	r3, [pc, #24]	@ (800585c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005846:	2b00      	cmp	r3, #0
 8005848:	d002      	beq.n	8005850 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800584a:	4b04      	ldr	r3, [pc, #16]	@ (800585c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800584c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800584e:	4798      	blx	r3
  }
}
 8005850:	bf00      	nop
 8005852:	3730      	adds	r7, #48	@ 0x30
 8005854:	46bd      	mov	sp, r7
 8005856:	bd80      	pop	{r7, pc}
 8005858:	20014410 	.word	0x20014410
 800585c:	200143e0 	.word	0x200143e0

08005860 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8005860:	b580      	push	{r7, lr}
 8005862:	b092      	sub	sp, #72	@ 0x48
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8005868:	f3ef 8311 	mrs	r3, BASEPRI
 800586c:	f04f 0120 	mov.w	r1, #32
 8005870:	f381 8811 	msr	BASEPRI, r1
 8005874:	617b      	str	r3, [r7, #20]
 8005876:	486a      	ldr	r0, [pc, #424]	@ (8005a20 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8005878:	f7ff fa93 	bl	8004da2 <_PreparePacket>
 800587c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	647b      	str	r3, [r7, #68]	@ 0x44
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681a      	ldr	r2, [r3, #0]
 800588a:	4b66      	ldr	r3, [pc, #408]	@ (8005a24 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800588c:	691b      	ldr	r3, [r3, #16]
 800588e:	1ad3      	subs	r3, r2, r3
 8005890:	643b      	str	r3, [r7, #64]	@ 0x40
 8005892:	e00b      	b.n	80058ac <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8005894:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005896:	b2da      	uxtb	r2, r3
 8005898:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800589a:	1c59      	adds	r1, r3, #1
 800589c:	6479      	str	r1, [r7, #68]	@ 0x44
 800589e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80058a2:	b2d2      	uxtb	r2, r2
 80058a4:	701a      	strb	r2, [r3, #0]
 80058a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80058a8:	09db      	lsrs	r3, r3, #7
 80058aa:	643b      	str	r3, [r7, #64]	@ 0x40
 80058ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80058ae:	2b7f      	cmp	r3, #127	@ 0x7f
 80058b0:	d8f0      	bhi.n	8005894 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 80058b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80058b4:	1c5a      	adds	r2, r3, #1
 80058b6:	647a      	str	r2, [r7, #68]	@ 0x44
 80058b8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80058ba:	b2d2      	uxtb	r2, r2
 80058bc:	701a      	strb	r2, [r3, #0]
 80058be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80058c0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	689b      	ldr	r3, [r3, #8]
 80058ca:	63bb      	str	r3, [r7, #56]	@ 0x38
 80058cc:	e00b      	b.n	80058e6 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 80058ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058d0:	b2da      	uxtb	r2, r3
 80058d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058d4:	1c59      	adds	r1, r3, #1
 80058d6:	63f9      	str	r1, [r7, #60]	@ 0x3c
 80058d8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80058dc:	b2d2      	uxtb	r2, r2
 80058de:	701a      	strb	r2, [r3, #0]
 80058e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058e2:	09db      	lsrs	r3, r3, #7
 80058e4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80058e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058e8:	2b7f      	cmp	r3, #127	@ 0x7f
 80058ea:	d8f0      	bhi.n	80058ce <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80058ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058ee:	1c5a      	adds	r2, r3, #1
 80058f0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80058f2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80058f4:	b2d2      	uxtb	r2, r2
 80058f6:	701a      	strb	r2, [r3, #0]
 80058f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058fa:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	2220      	movs	r2, #32
 8005902:	4619      	mov	r1, r3
 8005904:	68f8      	ldr	r0, [r7, #12]
 8005906:	f7ff f9ff 	bl	8004d08 <_EncodeStr>
 800590a:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800590c:	2209      	movs	r2, #9
 800590e:	68f9      	ldr	r1, [r7, #12]
 8005910:	6938      	ldr	r0, [r7, #16]
 8005912:	f7ff fb35 	bl	8004f80 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	637b      	str	r3, [r7, #52]	@ 0x34
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681a      	ldr	r2, [r3, #0]
 8005922:	4b40      	ldr	r3, [pc, #256]	@ (8005a24 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005924:	691b      	ldr	r3, [r3, #16]
 8005926:	1ad3      	subs	r3, r2, r3
 8005928:	633b      	str	r3, [r7, #48]	@ 0x30
 800592a:	e00b      	b.n	8005944 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 800592c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800592e:	b2da      	uxtb	r2, r3
 8005930:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005932:	1c59      	adds	r1, r3, #1
 8005934:	6379      	str	r1, [r7, #52]	@ 0x34
 8005936:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800593a:	b2d2      	uxtb	r2, r2
 800593c:	701a      	strb	r2, [r3, #0]
 800593e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005940:	09db      	lsrs	r3, r3, #7
 8005942:	633b      	str	r3, [r7, #48]	@ 0x30
 8005944:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005946:	2b7f      	cmp	r3, #127	@ 0x7f
 8005948:	d8f0      	bhi.n	800592c <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800594a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800594c:	1c5a      	adds	r2, r3, #1
 800594e:	637a      	str	r2, [r7, #52]	@ 0x34
 8005950:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005952:	b2d2      	uxtb	r2, r2
 8005954:	701a      	strb	r2, [r3, #0]
 8005956:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005958:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	68db      	ldr	r3, [r3, #12]
 8005962:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005964:	e00b      	b.n	800597e <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8005966:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005968:	b2da      	uxtb	r2, r3
 800596a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800596c:	1c59      	adds	r1, r3, #1
 800596e:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005970:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005974:	b2d2      	uxtb	r2, r2
 8005976:	701a      	strb	r2, [r3, #0]
 8005978:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800597a:	09db      	lsrs	r3, r3, #7
 800597c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800597e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005980:	2b7f      	cmp	r3, #127	@ 0x7f
 8005982:	d8f0      	bhi.n	8005966 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8005984:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005986:	1c5a      	adds	r2, r3, #1
 8005988:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800598a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800598c:	b2d2      	uxtb	r2, r2
 800598e:	701a      	strb	r2, [r3, #0]
 8005990:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005992:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	627b      	str	r3, [r7, #36]	@ 0x24
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	691b      	ldr	r3, [r3, #16]
 800599c:	623b      	str	r3, [r7, #32]
 800599e:	e00b      	b.n	80059b8 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 80059a0:	6a3b      	ldr	r3, [r7, #32]
 80059a2:	b2da      	uxtb	r2, r3
 80059a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059a6:	1c59      	adds	r1, r3, #1
 80059a8:	6279      	str	r1, [r7, #36]	@ 0x24
 80059aa:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80059ae:	b2d2      	uxtb	r2, r2
 80059b0:	701a      	strb	r2, [r3, #0]
 80059b2:	6a3b      	ldr	r3, [r7, #32]
 80059b4:	09db      	lsrs	r3, r3, #7
 80059b6:	623b      	str	r3, [r7, #32]
 80059b8:	6a3b      	ldr	r3, [r7, #32]
 80059ba:	2b7f      	cmp	r3, #127	@ 0x7f
 80059bc:	d8f0      	bhi.n	80059a0 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 80059be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059c0:	1c5a      	adds	r2, r3, #1
 80059c2:	627a      	str	r2, [r7, #36]	@ 0x24
 80059c4:	6a3a      	ldr	r2, [r7, #32]
 80059c6:	b2d2      	uxtb	r2, r2
 80059c8:	701a      	strb	r2, [r3, #0]
 80059ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059cc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	61fb      	str	r3, [r7, #28]
 80059d2:	2300      	movs	r3, #0
 80059d4:	61bb      	str	r3, [r7, #24]
 80059d6:	e00b      	b.n	80059f0 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 80059d8:	69bb      	ldr	r3, [r7, #24]
 80059da:	b2da      	uxtb	r2, r3
 80059dc:	69fb      	ldr	r3, [r7, #28]
 80059de:	1c59      	adds	r1, r3, #1
 80059e0:	61f9      	str	r1, [r7, #28]
 80059e2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80059e6:	b2d2      	uxtb	r2, r2
 80059e8:	701a      	strb	r2, [r3, #0]
 80059ea:	69bb      	ldr	r3, [r7, #24]
 80059ec:	09db      	lsrs	r3, r3, #7
 80059ee:	61bb      	str	r3, [r7, #24]
 80059f0:	69bb      	ldr	r3, [r7, #24]
 80059f2:	2b7f      	cmp	r3, #127	@ 0x7f
 80059f4:	d8f0      	bhi.n	80059d8 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 80059f6:	69fb      	ldr	r3, [r7, #28]
 80059f8:	1c5a      	adds	r2, r3, #1
 80059fa:	61fa      	str	r2, [r7, #28]
 80059fc:	69ba      	ldr	r2, [r7, #24]
 80059fe:	b2d2      	uxtb	r2, r2
 8005a00:	701a      	strb	r2, [r3, #0]
 8005a02:	69fb      	ldr	r3, [r7, #28]
 8005a04:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8005a06:	2215      	movs	r2, #21
 8005a08:	68f9      	ldr	r1, [r7, #12]
 8005a0a:	6938      	ldr	r0, [r7, #16]
 8005a0c:	f7ff fab8 	bl	8004f80 <_SendPacket>
  RECORD_END();
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	f383 8811 	msr	BASEPRI, r3
}
 8005a16:	bf00      	nop
 8005a18:	3748      	adds	r7, #72	@ 0x48
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}
 8005a1e:	bf00      	nop
 8005a20:	20014410 	.word	0x20014410
 8005a24:	200143e0 	.word	0x200143e0

08005a28 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8005a2c:	4b07      	ldr	r3, [pc, #28]	@ (8005a4c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005a2e:	6a1b      	ldr	r3, [r3, #32]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d008      	beq.n	8005a46 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8005a34:	4b05      	ldr	r3, [pc, #20]	@ (8005a4c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005a36:	6a1b      	ldr	r3, [r3, #32]
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d003      	beq.n	8005a46 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8005a3e:	4b03      	ldr	r3, [pc, #12]	@ (8005a4c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005a40:	6a1b      	ldr	r3, [r3, #32]
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	4798      	blx	r3
  }
}
 8005a46:	bf00      	nop
 8005a48:	bd80      	pop	{r7, pc}
 8005a4a:	bf00      	nop
 8005a4c:	200143e0 	.word	0x200143e0

08005a50 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b086      	sub	sp, #24
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005a58:	f3ef 8311 	mrs	r3, BASEPRI
 8005a5c:	f04f 0120 	mov.w	r1, #32
 8005a60:	f381 8811 	msr	BASEPRI, r1
 8005a64:	617b      	str	r3, [r7, #20]
 8005a66:	480b      	ldr	r0, [pc, #44]	@ (8005a94 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8005a68:	f7ff f99b 	bl	8004da2 <_PreparePacket>
 8005a6c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005a6e:	2280      	movs	r2, #128	@ 0x80
 8005a70:	6879      	ldr	r1, [r7, #4]
 8005a72:	6938      	ldr	r0, [r7, #16]
 8005a74:	f7ff f948 	bl	8004d08 <_EncodeStr>
 8005a78:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8005a7a:	220e      	movs	r2, #14
 8005a7c:	68f9      	ldr	r1, [r7, #12]
 8005a7e:	6938      	ldr	r0, [r7, #16]
 8005a80:	f7ff fa7e 	bl	8004f80 <_SendPacket>
  RECORD_END();
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	f383 8811 	msr	BASEPRI, r3
}
 8005a8a:	bf00      	nop
 8005a8c:	3718      	adds	r7, #24
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd80      	pop	{r7, pc}
 8005a92:	bf00      	nop
 8005a94:	20014410 	.word	0x20014410

08005a98 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8005a98:	b590      	push	{r4, r7, lr}
 8005a9a:	b083      	sub	sp, #12
 8005a9c:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8005a9e:	4b15      	ldr	r3, [pc, #84]	@ (8005af4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005aa0:	6a1b      	ldr	r3, [r3, #32]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d01a      	beq.n	8005adc <SEGGER_SYSVIEW_RecordSystime+0x44>
 8005aa6:	4b13      	ldr	r3, [pc, #76]	@ (8005af4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005aa8:	6a1b      	ldr	r3, [r3, #32]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d015      	beq.n	8005adc <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8005ab0:	4b10      	ldr	r3, [pc, #64]	@ (8005af4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005ab2:	6a1b      	ldr	r3, [r3, #32]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4798      	blx	r3
 8005ab8:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005abc:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8005abe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005ac2:	f04f 0200 	mov.w	r2, #0
 8005ac6:	f04f 0300 	mov.w	r3, #0
 8005aca:	000a      	movs	r2, r1
 8005acc:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005ace:	4613      	mov	r3, r2
 8005ad0:	461a      	mov	r2, r3
 8005ad2:	4621      	mov	r1, r4
 8005ad4:	200d      	movs	r0, #13
 8005ad6:	f7ff fbe7 	bl	80052a8 <SEGGER_SYSVIEW_RecordU32x2>
 8005ada:	e006      	b.n	8005aea <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8005adc:	4b06      	ldr	r3, [pc, #24]	@ (8005af8 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4619      	mov	r1, r3
 8005ae2:	200c      	movs	r0, #12
 8005ae4:	f7ff fba4 	bl	8005230 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8005ae8:	bf00      	nop
 8005aea:	bf00      	nop
 8005aec:	370c      	adds	r7, #12
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd90      	pop	{r4, r7, pc}
 8005af2:	bf00      	nop
 8005af4:	200143e0 	.word	0x200143e0
 8005af8:	e0001004 	.word	0xe0001004

08005afc <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b086      	sub	sp, #24
 8005b00:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005b02:	f3ef 8311 	mrs	r3, BASEPRI
 8005b06:	f04f 0120 	mov.w	r1, #32
 8005b0a:	f381 8811 	msr	BASEPRI, r1
 8005b0e:	60fb      	str	r3, [r7, #12]
 8005b10:	4819      	ldr	r0, [pc, #100]	@ (8005b78 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8005b12:	f7ff f946 	bl	8004da2 <_PreparePacket>
 8005b16:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8005b1c:	4b17      	ldr	r3, [pc, #92]	@ (8005b7c <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b24:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	617b      	str	r3, [r7, #20]
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	613b      	str	r3, [r7, #16]
 8005b2e:	e00b      	b.n	8005b48 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	b2da      	uxtb	r2, r3
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	1c59      	adds	r1, r3, #1
 8005b38:	6179      	str	r1, [r7, #20]
 8005b3a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005b3e:	b2d2      	uxtb	r2, r2
 8005b40:	701a      	strb	r2, [r3, #0]
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	09db      	lsrs	r3, r3, #7
 8005b46:	613b      	str	r3, [r7, #16]
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	2b7f      	cmp	r3, #127	@ 0x7f
 8005b4c:	d8f0      	bhi.n	8005b30 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	1c5a      	adds	r2, r3, #1
 8005b52:	617a      	str	r2, [r7, #20]
 8005b54:	693a      	ldr	r2, [r7, #16]
 8005b56:	b2d2      	uxtb	r2, r2
 8005b58:	701a      	strb	r2, [r3, #0]
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8005b5e:	2202      	movs	r2, #2
 8005b60:	6879      	ldr	r1, [r7, #4]
 8005b62:	68b8      	ldr	r0, [r7, #8]
 8005b64:	f7ff fa0c 	bl	8004f80 <_SendPacket>
  RECORD_END();
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	f383 8811 	msr	BASEPRI, r3
}
 8005b6e:	bf00      	nop
 8005b70:	3718      	adds	r7, #24
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}
 8005b76:	bf00      	nop
 8005b78:	20014410 	.word	0x20014410
 8005b7c:	e000ed04 	.word	0xe000ed04

08005b80 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b082      	sub	sp, #8
 8005b84:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005b86:	f3ef 8311 	mrs	r3, BASEPRI
 8005b8a:	f04f 0120 	mov.w	r1, #32
 8005b8e:	f381 8811 	msr	BASEPRI, r1
 8005b92:	607b      	str	r3, [r7, #4]
 8005b94:	4807      	ldr	r0, [pc, #28]	@ (8005bb4 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8005b96:	f7ff f904 	bl	8004da2 <_PreparePacket>
 8005b9a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8005b9c:	2203      	movs	r2, #3
 8005b9e:	6839      	ldr	r1, [r7, #0]
 8005ba0:	6838      	ldr	r0, [r7, #0]
 8005ba2:	f7ff f9ed 	bl	8004f80 <_SendPacket>
  RECORD_END();
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	f383 8811 	msr	BASEPRI, r3
}
 8005bac:	bf00      	nop
 8005bae:	3708      	adds	r7, #8
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}
 8005bb4:	20014410 	.word	0x20014410

08005bb8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b082      	sub	sp, #8
 8005bbc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005bbe:	f3ef 8311 	mrs	r3, BASEPRI
 8005bc2:	f04f 0120 	mov.w	r1, #32
 8005bc6:	f381 8811 	msr	BASEPRI, r1
 8005bca:	607b      	str	r3, [r7, #4]
 8005bcc:	4807      	ldr	r0, [pc, #28]	@ (8005bec <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8005bce:	f7ff f8e8 	bl	8004da2 <_PreparePacket>
 8005bd2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8005bd4:	2212      	movs	r2, #18
 8005bd6:	6839      	ldr	r1, [r7, #0]
 8005bd8:	6838      	ldr	r0, [r7, #0]
 8005bda:	f7ff f9d1 	bl	8004f80 <_SendPacket>
  RECORD_END();
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	f383 8811 	msr	BASEPRI, r3
}
 8005be4:	bf00      	nop
 8005be6:	3708      	adds	r7, #8
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}
 8005bec:	20014410 	.word	0x20014410

08005bf0 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b082      	sub	sp, #8
 8005bf4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005bf6:	f3ef 8311 	mrs	r3, BASEPRI
 8005bfa:	f04f 0120 	mov.w	r1, #32
 8005bfe:	f381 8811 	msr	BASEPRI, r1
 8005c02:	607b      	str	r3, [r7, #4]
 8005c04:	4807      	ldr	r0, [pc, #28]	@ (8005c24 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8005c06:	f7ff f8cc 	bl	8004da2 <_PreparePacket>
 8005c0a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8005c0c:	2211      	movs	r2, #17
 8005c0e:	6839      	ldr	r1, [r7, #0]
 8005c10:	6838      	ldr	r0, [r7, #0]
 8005c12:	f7ff f9b5 	bl	8004f80 <_SendPacket>
  RECORD_END();
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	f383 8811 	msr	BASEPRI, r3
}
 8005c1c:	bf00      	nop
 8005c1e:	3708      	adds	r7, #8
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bd80      	pop	{r7, pc}
 8005c24:	20014410 	.word	0x20014410

08005c28 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b088      	sub	sp, #32
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005c30:	f3ef 8311 	mrs	r3, BASEPRI
 8005c34:	f04f 0120 	mov.w	r1, #32
 8005c38:	f381 8811 	msr	BASEPRI, r1
 8005c3c:	617b      	str	r3, [r7, #20]
 8005c3e:	4819      	ldr	r0, [pc, #100]	@ (8005ca4 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8005c40:	f7ff f8af 	bl	8004da2 <_PreparePacket>
 8005c44:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005c4a:	4b17      	ldr	r3, [pc, #92]	@ (8005ca8 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8005c4c:	691b      	ldr	r3, [r3, #16]
 8005c4e:	687a      	ldr	r2, [r7, #4]
 8005c50:	1ad3      	subs	r3, r2, r3
 8005c52:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	61fb      	str	r3, [r7, #28]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	61bb      	str	r3, [r7, #24]
 8005c5c:	e00b      	b.n	8005c76 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8005c5e:	69bb      	ldr	r3, [r7, #24]
 8005c60:	b2da      	uxtb	r2, r3
 8005c62:	69fb      	ldr	r3, [r7, #28]
 8005c64:	1c59      	adds	r1, r3, #1
 8005c66:	61f9      	str	r1, [r7, #28]
 8005c68:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005c6c:	b2d2      	uxtb	r2, r2
 8005c6e:	701a      	strb	r2, [r3, #0]
 8005c70:	69bb      	ldr	r3, [r7, #24]
 8005c72:	09db      	lsrs	r3, r3, #7
 8005c74:	61bb      	str	r3, [r7, #24]
 8005c76:	69bb      	ldr	r3, [r7, #24]
 8005c78:	2b7f      	cmp	r3, #127	@ 0x7f
 8005c7a:	d8f0      	bhi.n	8005c5e <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8005c7c:	69fb      	ldr	r3, [r7, #28]
 8005c7e:	1c5a      	adds	r2, r3, #1
 8005c80:	61fa      	str	r2, [r7, #28]
 8005c82:	69ba      	ldr	r2, [r7, #24]
 8005c84:	b2d2      	uxtb	r2, r2
 8005c86:	701a      	strb	r2, [r3, #0]
 8005c88:	69fb      	ldr	r3, [r7, #28]
 8005c8a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8005c8c:	2208      	movs	r2, #8
 8005c8e:	68f9      	ldr	r1, [r7, #12]
 8005c90:	6938      	ldr	r0, [r7, #16]
 8005c92:	f7ff f975 	bl	8004f80 <_SendPacket>
  RECORD_END();
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	f383 8811 	msr	BASEPRI, r3
}
 8005c9c:	bf00      	nop
 8005c9e:	3720      	adds	r7, #32
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}
 8005ca4:	20014410 	.word	0x20014410
 8005ca8:	200143e0 	.word	0x200143e0

08005cac <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b088      	sub	sp, #32
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005cb4:	f3ef 8311 	mrs	r3, BASEPRI
 8005cb8:	f04f 0120 	mov.w	r1, #32
 8005cbc:	f381 8811 	msr	BASEPRI, r1
 8005cc0:	617b      	str	r3, [r7, #20]
 8005cc2:	4819      	ldr	r0, [pc, #100]	@ (8005d28 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8005cc4:	f7ff f86d 	bl	8004da2 <_PreparePacket>
 8005cc8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005cce:	4b17      	ldr	r3, [pc, #92]	@ (8005d2c <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8005cd0:	691b      	ldr	r3, [r3, #16]
 8005cd2:	687a      	ldr	r2, [r7, #4]
 8005cd4:	1ad3      	subs	r3, r2, r3
 8005cd6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	61fb      	str	r3, [r7, #28]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	61bb      	str	r3, [r7, #24]
 8005ce0:	e00b      	b.n	8005cfa <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8005ce2:	69bb      	ldr	r3, [r7, #24]
 8005ce4:	b2da      	uxtb	r2, r3
 8005ce6:	69fb      	ldr	r3, [r7, #28]
 8005ce8:	1c59      	adds	r1, r3, #1
 8005cea:	61f9      	str	r1, [r7, #28]
 8005cec:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005cf0:	b2d2      	uxtb	r2, r2
 8005cf2:	701a      	strb	r2, [r3, #0]
 8005cf4:	69bb      	ldr	r3, [r7, #24]
 8005cf6:	09db      	lsrs	r3, r3, #7
 8005cf8:	61bb      	str	r3, [r7, #24]
 8005cfa:	69bb      	ldr	r3, [r7, #24]
 8005cfc:	2b7f      	cmp	r3, #127	@ 0x7f
 8005cfe:	d8f0      	bhi.n	8005ce2 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8005d00:	69fb      	ldr	r3, [r7, #28]
 8005d02:	1c5a      	adds	r2, r3, #1
 8005d04:	61fa      	str	r2, [r7, #28]
 8005d06:	69ba      	ldr	r2, [r7, #24]
 8005d08:	b2d2      	uxtb	r2, r2
 8005d0a:	701a      	strb	r2, [r3, #0]
 8005d0c:	69fb      	ldr	r3, [r7, #28]
 8005d0e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8005d10:	2204      	movs	r2, #4
 8005d12:	68f9      	ldr	r1, [r7, #12]
 8005d14:	6938      	ldr	r0, [r7, #16]
 8005d16:	f7ff f933 	bl	8004f80 <_SendPacket>
  RECORD_END();
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	f383 8811 	msr	BASEPRI, r3
}
 8005d20:	bf00      	nop
 8005d22:	3720      	adds	r7, #32
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}
 8005d28:	20014410 	.word	0x20014410
 8005d2c:	200143e0 	.word	0x200143e0

08005d30 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b088      	sub	sp, #32
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005d38:	f3ef 8311 	mrs	r3, BASEPRI
 8005d3c:	f04f 0120 	mov.w	r1, #32
 8005d40:	f381 8811 	msr	BASEPRI, r1
 8005d44:	617b      	str	r3, [r7, #20]
 8005d46:	4819      	ldr	r0, [pc, #100]	@ (8005dac <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8005d48:	f7ff f82b 	bl	8004da2 <_PreparePacket>
 8005d4c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005d52:	4b17      	ldr	r3, [pc, #92]	@ (8005db0 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8005d54:	691b      	ldr	r3, [r3, #16]
 8005d56:	687a      	ldr	r2, [r7, #4]
 8005d58:	1ad3      	subs	r3, r2, r3
 8005d5a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	61fb      	str	r3, [r7, #28]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	61bb      	str	r3, [r7, #24]
 8005d64:	e00b      	b.n	8005d7e <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8005d66:	69bb      	ldr	r3, [r7, #24]
 8005d68:	b2da      	uxtb	r2, r3
 8005d6a:	69fb      	ldr	r3, [r7, #28]
 8005d6c:	1c59      	adds	r1, r3, #1
 8005d6e:	61f9      	str	r1, [r7, #28]
 8005d70:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005d74:	b2d2      	uxtb	r2, r2
 8005d76:	701a      	strb	r2, [r3, #0]
 8005d78:	69bb      	ldr	r3, [r7, #24]
 8005d7a:	09db      	lsrs	r3, r3, #7
 8005d7c:	61bb      	str	r3, [r7, #24]
 8005d7e:	69bb      	ldr	r3, [r7, #24]
 8005d80:	2b7f      	cmp	r3, #127	@ 0x7f
 8005d82:	d8f0      	bhi.n	8005d66 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8005d84:	69fb      	ldr	r3, [r7, #28]
 8005d86:	1c5a      	adds	r2, r3, #1
 8005d88:	61fa      	str	r2, [r7, #28]
 8005d8a:	69ba      	ldr	r2, [r7, #24]
 8005d8c:	b2d2      	uxtb	r2, r2
 8005d8e:	701a      	strb	r2, [r3, #0]
 8005d90:	69fb      	ldr	r3, [r7, #28]
 8005d92:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8005d94:	2206      	movs	r2, #6
 8005d96:	68f9      	ldr	r1, [r7, #12]
 8005d98:	6938      	ldr	r0, [r7, #16]
 8005d9a:	f7ff f8f1 	bl	8004f80 <_SendPacket>
  RECORD_END();
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	f383 8811 	msr	BASEPRI, r3
}
 8005da4:	bf00      	nop
 8005da6:	3720      	adds	r7, #32
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}
 8005dac:	20014410 	.word	0x20014410
 8005db0:	200143e0 	.word	0x200143e0

08005db4 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b08a      	sub	sp, #40	@ 0x28
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
 8005dbc:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005dbe:	f3ef 8311 	mrs	r3, BASEPRI
 8005dc2:	f04f 0120 	mov.w	r1, #32
 8005dc6:	f381 8811 	msr	BASEPRI, r1
 8005dca:	617b      	str	r3, [r7, #20]
 8005dcc:	4827      	ldr	r0, [pc, #156]	@ (8005e6c <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8005dce:	f7fe ffe8 	bl	8004da2 <_PreparePacket>
 8005dd2:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005dd8:	4b25      	ldr	r3, [pc, #148]	@ (8005e70 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8005dda:	691b      	ldr	r3, [r3, #16]
 8005ddc:	687a      	ldr	r2, [r7, #4]
 8005dde:	1ad3      	subs	r3, r2, r3
 8005de0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	627b      	str	r3, [r7, #36]	@ 0x24
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	623b      	str	r3, [r7, #32]
 8005dea:	e00b      	b.n	8005e04 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8005dec:	6a3b      	ldr	r3, [r7, #32]
 8005dee:	b2da      	uxtb	r2, r3
 8005df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005df2:	1c59      	adds	r1, r3, #1
 8005df4:	6279      	str	r1, [r7, #36]	@ 0x24
 8005df6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005dfa:	b2d2      	uxtb	r2, r2
 8005dfc:	701a      	strb	r2, [r3, #0]
 8005dfe:	6a3b      	ldr	r3, [r7, #32]
 8005e00:	09db      	lsrs	r3, r3, #7
 8005e02:	623b      	str	r3, [r7, #32]
 8005e04:	6a3b      	ldr	r3, [r7, #32]
 8005e06:	2b7f      	cmp	r3, #127	@ 0x7f
 8005e08:	d8f0      	bhi.n	8005dec <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8005e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e0c:	1c5a      	adds	r2, r3, #1
 8005e0e:	627a      	str	r2, [r7, #36]	@ 0x24
 8005e10:	6a3a      	ldr	r2, [r7, #32]
 8005e12:	b2d2      	uxtb	r2, r2
 8005e14:	701a      	strb	r2, [r3, #0]
 8005e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e18:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	61fb      	str	r3, [r7, #28]
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	61bb      	str	r3, [r7, #24]
 8005e22:	e00b      	b.n	8005e3c <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8005e24:	69bb      	ldr	r3, [r7, #24]
 8005e26:	b2da      	uxtb	r2, r3
 8005e28:	69fb      	ldr	r3, [r7, #28]
 8005e2a:	1c59      	adds	r1, r3, #1
 8005e2c:	61f9      	str	r1, [r7, #28]
 8005e2e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005e32:	b2d2      	uxtb	r2, r2
 8005e34:	701a      	strb	r2, [r3, #0]
 8005e36:	69bb      	ldr	r3, [r7, #24]
 8005e38:	09db      	lsrs	r3, r3, #7
 8005e3a:	61bb      	str	r3, [r7, #24]
 8005e3c:	69bb      	ldr	r3, [r7, #24]
 8005e3e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005e40:	d8f0      	bhi.n	8005e24 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8005e42:	69fb      	ldr	r3, [r7, #28]
 8005e44:	1c5a      	adds	r2, r3, #1
 8005e46:	61fa      	str	r2, [r7, #28]
 8005e48:	69ba      	ldr	r2, [r7, #24]
 8005e4a:	b2d2      	uxtb	r2, r2
 8005e4c:	701a      	strb	r2, [r3, #0]
 8005e4e:	69fb      	ldr	r3, [r7, #28]
 8005e50:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8005e52:	2207      	movs	r2, #7
 8005e54:	68f9      	ldr	r1, [r7, #12]
 8005e56:	6938      	ldr	r0, [r7, #16]
 8005e58:	f7ff f892 	bl	8004f80 <_SendPacket>
  RECORD_END();
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	f383 8811 	msr	BASEPRI, r3
}
 8005e62:	bf00      	nop
 8005e64:	3728      	adds	r7, #40	@ 0x28
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}
 8005e6a:	bf00      	nop
 8005e6c:	20014410 	.word	0x20014410
 8005e70:	200143e0 	.word	0x200143e0

08005e74 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8005e74:	b480      	push	{r7}
 8005e76:	b083      	sub	sp, #12
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8005e7c:	4b04      	ldr	r3, [pc, #16]	@ (8005e90 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8005e7e:	691b      	ldr	r3, [r3, #16]
 8005e80:	687a      	ldr	r2, [r7, #4]
 8005e82:	1ad3      	subs	r3, r2, r3
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	370c      	adds	r7, #12
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8e:	4770      	bx	lr
 8005e90:	200143e0 	.word	0x200143e0

08005e94 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b08c      	sub	sp, #48	@ 0x30
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8005e9e:	4b3b      	ldr	r3, [pc, #236]	@ (8005f8c <SEGGER_SYSVIEW_SendModule+0xf8>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d06d      	beq.n	8005f82 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8005ea6:	4b39      	ldr	r3, [pc, #228]	@ (8005f8c <SEGGER_SYSVIEW_SendModule+0xf8>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 8005eac:	2300      	movs	r3, #0
 8005eae:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005eb0:	e008      	b.n	8005ec4 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8005eb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005eb4:	691b      	ldr	r3, [r3, #16]
 8005eb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 8005eb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d007      	beq.n	8005ece <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8005ebe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ec0:	3301      	adds	r3, #1
 8005ec2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005ec4:	79fb      	ldrb	r3, [r7, #7]
 8005ec6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005ec8:	429a      	cmp	r2, r3
 8005eca:	d3f2      	bcc.n	8005eb2 <SEGGER_SYSVIEW_SendModule+0x1e>
 8005ecc:	e000      	b.n	8005ed0 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8005ece:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8005ed0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d055      	beq.n	8005f82 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005ed6:	f3ef 8311 	mrs	r3, BASEPRI
 8005eda:	f04f 0120 	mov.w	r1, #32
 8005ede:	f381 8811 	msr	BASEPRI, r1
 8005ee2:	617b      	str	r3, [r7, #20]
 8005ee4:	482a      	ldr	r0, [pc, #168]	@ (8005f90 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8005ee6:	f7fe ff5c 	bl	8004da2 <_PreparePacket>
 8005eea:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8005eec:	693b      	ldr	r3, [r7, #16]
 8005eee:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ef4:	79fb      	ldrb	r3, [r7, #7]
 8005ef6:	623b      	str	r3, [r7, #32]
 8005ef8:	e00b      	b.n	8005f12 <SEGGER_SYSVIEW_SendModule+0x7e>
 8005efa:	6a3b      	ldr	r3, [r7, #32]
 8005efc:	b2da      	uxtb	r2, r3
 8005efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f00:	1c59      	adds	r1, r3, #1
 8005f02:	6279      	str	r1, [r7, #36]	@ 0x24
 8005f04:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005f08:	b2d2      	uxtb	r2, r2
 8005f0a:	701a      	strb	r2, [r3, #0]
 8005f0c:	6a3b      	ldr	r3, [r7, #32]
 8005f0e:	09db      	lsrs	r3, r3, #7
 8005f10:	623b      	str	r3, [r7, #32]
 8005f12:	6a3b      	ldr	r3, [r7, #32]
 8005f14:	2b7f      	cmp	r3, #127	@ 0x7f
 8005f16:	d8f0      	bhi.n	8005efa <SEGGER_SYSVIEW_SendModule+0x66>
 8005f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f1a:	1c5a      	adds	r2, r3, #1
 8005f1c:	627a      	str	r2, [r7, #36]	@ 0x24
 8005f1e:	6a3a      	ldr	r2, [r7, #32]
 8005f20:	b2d2      	uxtb	r2, r2
 8005f22:	701a      	strb	r2, [r3, #0]
 8005f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f26:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	61fb      	str	r3, [r7, #28]
 8005f2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f2e:	689b      	ldr	r3, [r3, #8]
 8005f30:	61bb      	str	r3, [r7, #24]
 8005f32:	e00b      	b.n	8005f4c <SEGGER_SYSVIEW_SendModule+0xb8>
 8005f34:	69bb      	ldr	r3, [r7, #24]
 8005f36:	b2da      	uxtb	r2, r3
 8005f38:	69fb      	ldr	r3, [r7, #28]
 8005f3a:	1c59      	adds	r1, r3, #1
 8005f3c:	61f9      	str	r1, [r7, #28]
 8005f3e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005f42:	b2d2      	uxtb	r2, r2
 8005f44:	701a      	strb	r2, [r3, #0]
 8005f46:	69bb      	ldr	r3, [r7, #24]
 8005f48:	09db      	lsrs	r3, r3, #7
 8005f4a:	61bb      	str	r3, [r7, #24]
 8005f4c:	69bb      	ldr	r3, [r7, #24]
 8005f4e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005f50:	d8f0      	bhi.n	8005f34 <SEGGER_SYSVIEW_SendModule+0xa0>
 8005f52:	69fb      	ldr	r3, [r7, #28]
 8005f54:	1c5a      	adds	r2, r3, #1
 8005f56:	61fa      	str	r2, [r7, #28]
 8005f58:	69ba      	ldr	r2, [r7, #24]
 8005f5a:	b2d2      	uxtb	r2, r2
 8005f5c:	701a      	strb	r2, [r3, #0]
 8005f5e:	69fb      	ldr	r3, [r7, #28]
 8005f60:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005f62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	2280      	movs	r2, #128	@ 0x80
 8005f68:	4619      	mov	r1, r3
 8005f6a:	68f8      	ldr	r0, [r7, #12]
 8005f6c:	f7fe fecc 	bl	8004d08 <_EncodeStr>
 8005f70:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8005f72:	2216      	movs	r2, #22
 8005f74:	68f9      	ldr	r1, [r7, #12]
 8005f76:	6938      	ldr	r0, [r7, #16]
 8005f78:	f7ff f802 	bl	8004f80 <_SendPacket>
      RECORD_END();
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8005f82:	bf00      	nop
 8005f84:	3730      	adds	r7, #48	@ 0x30
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}
 8005f8a:	bf00      	nop
 8005f8c:	20014408 	.word	0x20014408
 8005f90:	20014410 	.word	0x20014410

08005f94 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b082      	sub	sp, #8
 8005f98:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8005f9a:	4b0c      	ldr	r3, [pc, #48]	@ (8005fcc <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d00f      	beq.n	8005fc2 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8005fa2:	4b0a      	ldr	r3, [pc, #40]	@ (8005fcc <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	68db      	ldr	r3, [r3, #12]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d002      	beq.n	8005fb6 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	68db      	ldr	r3, [r3, #12]
 8005fb4:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	691b      	ldr	r3, [r3, #16]
 8005fba:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d1f2      	bne.n	8005fa8 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8005fc2:	bf00      	nop
 8005fc4:	3708      	adds	r7, #8
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd80      	pop	{r7, pc}
 8005fca:	bf00      	nop
 8005fcc:	20014408 	.word	0x20014408

08005fd0 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b086      	sub	sp, #24
 8005fd4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8005fd6:	f3ef 8311 	mrs	r3, BASEPRI
 8005fda:	f04f 0120 	mov.w	r1, #32
 8005fde:	f381 8811 	msr	BASEPRI, r1
 8005fe2:	60fb      	str	r3, [r7, #12]
 8005fe4:	4817      	ldr	r0, [pc, #92]	@ (8006044 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8005fe6:	f7fe fedc 	bl	8004da2 <_PreparePacket>
 8005fea:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	617b      	str	r3, [r7, #20]
 8005ff4:	4b14      	ldr	r3, [pc, #80]	@ (8006048 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8005ff6:	781b      	ldrb	r3, [r3, #0]
 8005ff8:	613b      	str	r3, [r7, #16]
 8005ffa:	e00b      	b.n	8006014 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	b2da      	uxtb	r2, r3
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	1c59      	adds	r1, r3, #1
 8006004:	6179      	str	r1, [r7, #20]
 8006006:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800600a:	b2d2      	uxtb	r2, r2
 800600c:	701a      	strb	r2, [r3, #0]
 800600e:	693b      	ldr	r3, [r7, #16]
 8006010:	09db      	lsrs	r3, r3, #7
 8006012:	613b      	str	r3, [r7, #16]
 8006014:	693b      	ldr	r3, [r7, #16]
 8006016:	2b7f      	cmp	r3, #127	@ 0x7f
 8006018:	d8f0      	bhi.n	8005ffc <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	1c5a      	adds	r2, r3, #1
 800601e:	617a      	str	r2, [r7, #20]
 8006020:	693a      	ldr	r2, [r7, #16]
 8006022:	b2d2      	uxtb	r2, r2
 8006024:	701a      	strb	r2, [r3, #0]
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800602a:	221b      	movs	r2, #27
 800602c:	6879      	ldr	r1, [r7, #4]
 800602e:	68b8      	ldr	r0, [r7, #8]
 8006030:	f7fe ffa6 	bl	8004f80 <_SendPacket>
  RECORD_END();
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	f383 8811 	msr	BASEPRI, r3
}
 800603a:	bf00      	nop
 800603c:	3718      	adds	r7, #24
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}
 8006042:	bf00      	nop
 8006044:	20014410 	.word	0x20014410
 8006048:	2001440c 	.word	0x2001440c

0800604c <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 800604c:	b580      	push	{r7, lr}
 800604e:	b08a      	sub	sp, #40	@ 0x28
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006054:	f3ef 8311 	mrs	r3, BASEPRI
 8006058:	f04f 0120 	mov.w	r1, #32
 800605c:	f381 8811 	msr	BASEPRI, r1
 8006060:	617b      	str	r3, [r7, #20]
 8006062:	4827      	ldr	r0, [pc, #156]	@ (8006100 <SEGGER_SYSVIEW_Warn+0xb4>)
 8006064:	f7fe fe9d 	bl	8004da2 <_PreparePacket>
 8006068:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800606a:	2280      	movs	r2, #128	@ 0x80
 800606c:	6879      	ldr	r1, [r7, #4]
 800606e:	6938      	ldr	r0, [r7, #16]
 8006070:	f7fe fe4a 	bl	8004d08 <_EncodeStr>
 8006074:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	627b      	str	r3, [r7, #36]	@ 0x24
 800607a:	2301      	movs	r3, #1
 800607c:	623b      	str	r3, [r7, #32]
 800607e:	e00b      	b.n	8006098 <SEGGER_SYSVIEW_Warn+0x4c>
 8006080:	6a3b      	ldr	r3, [r7, #32]
 8006082:	b2da      	uxtb	r2, r3
 8006084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006086:	1c59      	adds	r1, r3, #1
 8006088:	6279      	str	r1, [r7, #36]	@ 0x24
 800608a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800608e:	b2d2      	uxtb	r2, r2
 8006090:	701a      	strb	r2, [r3, #0]
 8006092:	6a3b      	ldr	r3, [r7, #32]
 8006094:	09db      	lsrs	r3, r3, #7
 8006096:	623b      	str	r3, [r7, #32]
 8006098:	6a3b      	ldr	r3, [r7, #32]
 800609a:	2b7f      	cmp	r3, #127	@ 0x7f
 800609c:	d8f0      	bhi.n	8006080 <SEGGER_SYSVIEW_Warn+0x34>
 800609e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060a0:	1c5a      	adds	r2, r3, #1
 80060a2:	627a      	str	r2, [r7, #36]	@ 0x24
 80060a4:	6a3a      	ldr	r2, [r7, #32]
 80060a6:	b2d2      	uxtb	r2, r2
 80060a8:	701a      	strb	r2, [r3, #0]
 80060aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060ac:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	61fb      	str	r3, [r7, #28]
 80060b2:	2300      	movs	r3, #0
 80060b4:	61bb      	str	r3, [r7, #24]
 80060b6:	e00b      	b.n	80060d0 <SEGGER_SYSVIEW_Warn+0x84>
 80060b8:	69bb      	ldr	r3, [r7, #24]
 80060ba:	b2da      	uxtb	r2, r3
 80060bc:	69fb      	ldr	r3, [r7, #28]
 80060be:	1c59      	adds	r1, r3, #1
 80060c0:	61f9      	str	r1, [r7, #28]
 80060c2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80060c6:	b2d2      	uxtb	r2, r2
 80060c8:	701a      	strb	r2, [r3, #0]
 80060ca:	69bb      	ldr	r3, [r7, #24]
 80060cc:	09db      	lsrs	r3, r3, #7
 80060ce:	61bb      	str	r3, [r7, #24]
 80060d0:	69bb      	ldr	r3, [r7, #24]
 80060d2:	2b7f      	cmp	r3, #127	@ 0x7f
 80060d4:	d8f0      	bhi.n	80060b8 <SEGGER_SYSVIEW_Warn+0x6c>
 80060d6:	69fb      	ldr	r3, [r7, #28]
 80060d8:	1c5a      	adds	r2, r3, #1
 80060da:	61fa      	str	r2, [r7, #28]
 80060dc:	69ba      	ldr	r2, [r7, #24]
 80060de:	b2d2      	uxtb	r2, r2
 80060e0:	701a      	strb	r2, [r3, #0]
 80060e2:	69fb      	ldr	r3, [r7, #28]
 80060e4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80060e6:	221a      	movs	r2, #26
 80060e8:	68f9      	ldr	r1, [r7, #12]
 80060ea:	6938      	ldr	r0, [r7, #16]
 80060ec:	f7fe ff48 	bl	8004f80 <_SendPacket>
  RECORD_END();
 80060f0:	697b      	ldr	r3, [r7, #20]
 80060f2:	f383 8811 	msr	BASEPRI, r3
}
 80060f6:	bf00      	nop
 80060f8:	3728      	adds	r7, #40	@ 0x28
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}
 80060fe:	bf00      	nop
 8006100:	20014410 	.word	0x20014410

08006104 <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 8006104:	b580      	push	{r7, lr}
 8006106:	b084      	sub	sp, #16
 8006108:	af00      	add	r7, sp, #0
 800610a:	60f8      	str	r0, [r7, #12]
 800610c:	60b9      	str	r1, [r7, #8]
 800610e:	607a      	str	r2, [r7, #4]
 8006110:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 8006112:	683a      	ldr	r2, [r7, #0]
 8006114:	6879      	ldr	r1, [r7, #4]
 8006116:	2000      	movs	r0, #0
 8006118:	f7fe fcdc 	bl	8004ad4 <SEGGER_RTT_Write>
  return len;
 800611c:	683b      	ldr	r3, [r7, #0]
}
 800611e:	4618      	mov	r0, r3
 8006120:	3710      	adds	r7, #16
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}
	...

08006128 <std>:
 8006128:	2300      	movs	r3, #0
 800612a:	b510      	push	{r4, lr}
 800612c:	4604      	mov	r4, r0
 800612e:	e9c0 3300 	strd	r3, r3, [r0]
 8006132:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006136:	6083      	str	r3, [r0, #8]
 8006138:	8181      	strh	r1, [r0, #12]
 800613a:	6643      	str	r3, [r0, #100]	@ 0x64
 800613c:	81c2      	strh	r2, [r0, #14]
 800613e:	6183      	str	r3, [r0, #24]
 8006140:	4619      	mov	r1, r3
 8006142:	2208      	movs	r2, #8
 8006144:	305c      	adds	r0, #92	@ 0x5c
 8006146:	f000 f9f7 	bl	8006538 <memset>
 800614a:	4b0d      	ldr	r3, [pc, #52]	@ (8006180 <std+0x58>)
 800614c:	6263      	str	r3, [r4, #36]	@ 0x24
 800614e:	4b0d      	ldr	r3, [pc, #52]	@ (8006184 <std+0x5c>)
 8006150:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006152:	4b0d      	ldr	r3, [pc, #52]	@ (8006188 <std+0x60>)
 8006154:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006156:	4b0d      	ldr	r3, [pc, #52]	@ (800618c <std+0x64>)
 8006158:	6323      	str	r3, [r4, #48]	@ 0x30
 800615a:	4b0d      	ldr	r3, [pc, #52]	@ (8006190 <std+0x68>)
 800615c:	6224      	str	r4, [r4, #32]
 800615e:	429c      	cmp	r4, r3
 8006160:	d006      	beq.n	8006170 <std+0x48>
 8006162:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006166:	4294      	cmp	r4, r2
 8006168:	d002      	beq.n	8006170 <std+0x48>
 800616a:	33d0      	adds	r3, #208	@ 0xd0
 800616c:	429c      	cmp	r4, r3
 800616e:	d105      	bne.n	800617c <std+0x54>
 8006170:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006174:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006178:	f000 ba3e 	b.w	80065f8 <__retarget_lock_init_recursive>
 800617c:	bd10      	pop	{r4, pc}
 800617e:	bf00      	nop
 8006180:	08006369 	.word	0x08006369
 8006184:	0800638b 	.word	0x0800638b
 8006188:	080063c3 	.word	0x080063c3
 800618c:	080063e7 	.word	0x080063e7
 8006190:	200144f4 	.word	0x200144f4

08006194 <stdio_exit_handler>:
 8006194:	4a02      	ldr	r2, [pc, #8]	@ (80061a0 <stdio_exit_handler+0xc>)
 8006196:	4903      	ldr	r1, [pc, #12]	@ (80061a4 <stdio_exit_handler+0x10>)
 8006198:	4803      	ldr	r0, [pc, #12]	@ (80061a8 <stdio_exit_handler+0x14>)
 800619a:	f000 b869 	b.w	8006270 <_fwalk_sglue>
 800619e:	bf00      	nop
 80061a0:	20000010 	.word	0x20000010
 80061a4:	08006915 	.word	0x08006915
 80061a8:	20000020 	.word	0x20000020

080061ac <cleanup_stdio>:
 80061ac:	6841      	ldr	r1, [r0, #4]
 80061ae:	4b0c      	ldr	r3, [pc, #48]	@ (80061e0 <cleanup_stdio+0x34>)
 80061b0:	4299      	cmp	r1, r3
 80061b2:	b510      	push	{r4, lr}
 80061b4:	4604      	mov	r4, r0
 80061b6:	d001      	beq.n	80061bc <cleanup_stdio+0x10>
 80061b8:	f000 fbac 	bl	8006914 <_fflush_r>
 80061bc:	68a1      	ldr	r1, [r4, #8]
 80061be:	4b09      	ldr	r3, [pc, #36]	@ (80061e4 <cleanup_stdio+0x38>)
 80061c0:	4299      	cmp	r1, r3
 80061c2:	d002      	beq.n	80061ca <cleanup_stdio+0x1e>
 80061c4:	4620      	mov	r0, r4
 80061c6:	f000 fba5 	bl	8006914 <_fflush_r>
 80061ca:	68e1      	ldr	r1, [r4, #12]
 80061cc:	4b06      	ldr	r3, [pc, #24]	@ (80061e8 <cleanup_stdio+0x3c>)
 80061ce:	4299      	cmp	r1, r3
 80061d0:	d004      	beq.n	80061dc <cleanup_stdio+0x30>
 80061d2:	4620      	mov	r0, r4
 80061d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061d8:	f000 bb9c 	b.w	8006914 <_fflush_r>
 80061dc:	bd10      	pop	{r4, pc}
 80061de:	bf00      	nop
 80061e0:	200144f4 	.word	0x200144f4
 80061e4:	2001455c 	.word	0x2001455c
 80061e8:	200145c4 	.word	0x200145c4

080061ec <global_stdio_init.part.0>:
 80061ec:	b510      	push	{r4, lr}
 80061ee:	4b0b      	ldr	r3, [pc, #44]	@ (800621c <global_stdio_init.part.0+0x30>)
 80061f0:	4c0b      	ldr	r4, [pc, #44]	@ (8006220 <global_stdio_init.part.0+0x34>)
 80061f2:	4a0c      	ldr	r2, [pc, #48]	@ (8006224 <global_stdio_init.part.0+0x38>)
 80061f4:	601a      	str	r2, [r3, #0]
 80061f6:	4620      	mov	r0, r4
 80061f8:	2200      	movs	r2, #0
 80061fa:	2104      	movs	r1, #4
 80061fc:	f7ff ff94 	bl	8006128 <std>
 8006200:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006204:	2201      	movs	r2, #1
 8006206:	2109      	movs	r1, #9
 8006208:	f7ff ff8e 	bl	8006128 <std>
 800620c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006210:	2202      	movs	r2, #2
 8006212:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006216:	2112      	movs	r1, #18
 8006218:	f7ff bf86 	b.w	8006128 <std>
 800621c:	2001462c 	.word	0x2001462c
 8006220:	200144f4 	.word	0x200144f4
 8006224:	08006195 	.word	0x08006195

08006228 <__sfp_lock_acquire>:
 8006228:	4801      	ldr	r0, [pc, #4]	@ (8006230 <__sfp_lock_acquire+0x8>)
 800622a:	f000 b9e6 	b.w	80065fa <__retarget_lock_acquire_recursive>
 800622e:	bf00      	nop
 8006230:	20014635 	.word	0x20014635

08006234 <__sfp_lock_release>:
 8006234:	4801      	ldr	r0, [pc, #4]	@ (800623c <__sfp_lock_release+0x8>)
 8006236:	f000 b9e1 	b.w	80065fc <__retarget_lock_release_recursive>
 800623a:	bf00      	nop
 800623c:	20014635 	.word	0x20014635

08006240 <__sinit>:
 8006240:	b510      	push	{r4, lr}
 8006242:	4604      	mov	r4, r0
 8006244:	f7ff fff0 	bl	8006228 <__sfp_lock_acquire>
 8006248:	6a23      	ldr	r3, [r4, #32]
 800624a:	b11b      	cbz	r3, 8006254 <__sinit+0x14>
 800624c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006250:	f7ff bff0 	b.w	8006234 <__sfp_lock_release>
 8006254:	4b04      	ldr	r3, [pc, #16]	@ (8006268 <__sinit+0x28>)
 8006256:	6223      	str	r3, [r4, #32]
 8006258:	4b04      	ldr	r3, [pc, #16]	@ (800626c <__sinit+0x2c>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d1f5      	bne.n	800624c <__sinit+0xc>
 8006260:	f7ff ffc4 	bl	80061ec <global_stdio_init.part.0>
 8006264:	e7f2      	b.n	800624c <__sinit+0xc>
 8006266:	bf00      	nop
 8006268:	080061ad 	.word	0x080061ad
 800626c:	2001462c 	.word	0x2001462c

08006270 <_fwalk_sglue>:
 8006270:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006274:	4607      	mov	r7, r0
 8006276:	4688      	mov	r8, r1
 8006278:	4614      	mov	r4, r2
 800627a:	2600      	movs	r6, #0
 800627c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006280:	f1b9 0901 	subs.w	r9, r9, #1
 8006284:	d505      	bpl.n	8006292 <_fwalk_sglue+0x22>
 8006286:	6824      	ldr	r4, [r4, #0]
 8006288:	2c00      	cmp	r4, #0
 800628a:	d1f7      	bne.n	800627c <_fwalk_sglue+0xc>
 800628c:	4630      	mov	r0, r6
 800628e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006292:	89ab      	ldrh	r3, [r5, #12]
 8006294:	2b01      	cmp	r3, #1
 8006296:	d907      	bls.n	80062a8 <_fwalk_sglue+0x38>
 8006298:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800629c:	3301      	adds	r3, #1
 800629e:	d003      	beq.n	80062a8 <_fwalk_sglue+0x38>
 80062a0:	4629      	mov	r1, r5
 80062a2:	4638      	mov	r0, r7
 80062a4:	47c0      	blx	r8
 80062a6:	4306      	orrs	r6, r0
 80062a8:	3568      	adds	r5, #104	@ 0x68
 80062aa:	e7e9      	b.n	8006280 <_fwalk_sglue+0x10>

080062ac <_puts_r>:
 80062ac:	6a03      	ldr	r3, [r0, #32]
 80062ae:	b570      	push	{r4, r5, r6, lr}
 80062b0:	6884      	ldr	r4, [r0, #8]
 80062b2:	4605      	mov	r5, r0
 80062b4:	460e      	mov	r6, r1
 80062b6:	b90b      	cbnz	r3, 80062bc <_puts_r+0x10>
 80062b8:	f7ff ffc2 	bl	8006240 <__sinit>
 80062bc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80062be:	07db      	lsls	r3, r3, #31
 80062c0:	d405      	bmi.n	80062ce <_puts_r+0x22>
 80062c2:	89a3      	ldrh	r3, [r4, #12]
 80062c4:	0598      	lsls	r0, r3, #22
 80062c6:	d402      	bmi.n	80062ce <_puts_r+0x22>
 80062c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80062ca:	f000 f996 	bl	80065fa <__retarget_lock_acquire_recursive>
 80062ce:	89a3      	ldrh	r3, [r4, #12]
 80062d0:	0719      	lsls	r1, r3, #28
 80062d2:	d502      	bpl.n	80062da <_puts_r+0x2e>
 80062d4:	6923      	ldr	r3, [r4, #16]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d135      	bne.n	8006346 <_puts_r+0x9a>
 80062da:	4621      	mov	r1, r4
 80062dc:	4628      	mov	r0, r5
 80062de:	f000 f8c5 	bl	800646c <__swsetup_r>
 80062e2:	b380      	cbz	r0, 8006346 <_puts_r+0x9a>
 80062e4:	f04f 35ff 	mov.w	r5, #4294967295
 80062e8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80062ea:	07da      	lsls	r2, r3, #31
 80062ec:	d405      	bmi.n	80062fa <_puts_r+0x4e>
 80062ee:	89a3      	ldrh	r3, [r4, #12]
 80062f0:	059b      	lsls	r3, r3, #22
 80062f2:	d402      	bmi.n	80062fa <_puts_r+0x4e>
 80062f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80062f6:	f000 f981 	bl	80065fc <__retarget_lock_release_recursive>
 80062fa:	4628      	mov	r0, r5
 80062fc:	bd70      	pop	{r4, r5, r6, pc}
 80062fe:	2b00      	cmp	r3, #0
 8006300:	da04      	bge.n	800630c <_puts_r+0x60>
 8006302:	69a2      	ldr	r2, [r4, #24]
 8006304:	429a      	cmp	r2, r3
 8006306:	dc17      	bgt.n	8006338 <_puts_r+0x8c>
 8006308:	290a      	cmp	r1, #10
 800630a:	d015      	beq.n	8006338 <_puts_r+0x8c>
 800630c:	6823      	ldr	r3, [r4, #0]
 800630e:	1c5a      	adds	r2, r3, #1
 8006310:	6022      	str	r2, [r4, #0]
 8006312:	7019      	strb	r1, [r3, #0]
 8006314:	68a3      	ldr	r3, [r4, #8]
 8006316:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800631a:	3b01      	subs	r3, #1
 800631c:	60a3      	str	r3, [r4, #8]
 800631e:	2900      	cmp	r1, #0
 8006320:	d1ed      	bne.n	80062fe <_puts_r+0x52>
 8006322:	2b00      	cmp	r3, #0
 8006324:	da11      	bge.n	800634a <_puts_r+0x9e>
 8006326:	4622      	mov	r2, r4
 8006328:	210a      	movs	r1, #10
 800632a:	4628      	mov	r0, r5
 800632c:	f000 f85f 	bl	80063ee <__swbuf_r>
 8006330:	3001      	adds	r0, #1
 8006332:	d0d7      	beq.n	80062e4 <_puts_r+0x38>
 8006334:	250a      	movs	r5, #10
 8006336:	e7d7      	b.n	80062e8 <_puts_r+0x3c>
 8006338:	4622      	mov	r2, r4
 800633a:	4628      	mov	r0, r5
 800633c:	f000 f857 	bl	80063ee <__swbuf_r>
 8006340:	3001      	adds	r0, #1
 8006342:	d1e7      	bne.n	8006314 <_puts_r+0x68>
 8006344:	e7ce      	b.n	80062e4 <_puts_r+0x38>
 8006346:	3e01      	subs	r6, #1
 8006348:	e7e4      	b.n	8006314 <_puts_r+0x68>
 800634a:	6823      	ldr	r3, [r4, #0]
 800634c:	1c5a      	adds	r2, r3, #1
 800634e:	6022      	str	r2, [r4, #0]
 8006350:	220a      	movs	r2, #10
 8006352:	701a      	strb	r2, [r3, #0]
 8006354:	e7ee      	b.n	8006334 <_puts_r+0x88>
	...

08006358 <puts>:
 8006358:	4b02      	ldr	r3, [pc, #8]	@ (8006364 <puts+0xc>)
 800635a:	4601      	mov	r1, r0
 800635c:	6818      	ldr	r0, [r3, #0]
 800635e:	f7ff bfa5 	b.w	80062ac <_puts_r>
 8006362:	bf00      	nop
 8006364:	2000001c 	.word	0x2000001c

08006368 <__sread>:
 8006368:	b510      	push	{r4, lr}
 800636a:	460c      	mov	r4, r1
 800636c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006370:	f000 f90c 	bl	800658c <_read_r>
 8006374:	2800      	cmp	r0, #0
 8006376:	bfab      	itete	ge
 8006378:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800637a:	89a3      	ldrhlt	r3, [r4, #12]
 800637c:	181b      	addge	r3, r3, r0
 800637e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006382:	bfac      	ite	ge
 8006384:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006386:	81a3      	strhlt	r3, [r4, #12]
 8006388:	bd10      	pop	{r4, pc}

0800638a <__swrite>:
 800638a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800638e:	461f      	mov	r7, r3
 8006390:	898b      	ldrh	r3, [r1, #12]
 8006392:	05db      	lsls	r3, r3, #23
 8006394:	4605      	mov	r5, r0
 8006396:	460c      	mov	r4, r1
 8006398:	4616      	mov	r6, r2
 800639a:	d505      	bpl.n	80063a8 <__swrite+0x1e>
 800639c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063a0:	2302      	movs	r3, #2
 80063a2:	2200      	movs	r2, #0
 80063a4:	f000 f8e0 	bl	8006568 <_lseek_r>
 80063a8:	89a3      	ldrh	r3, [r4, #12]
 80063aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80063ae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80063b2:	81a3      	strh	r3, [r4, #12]
 80063b4:	4632      	mov	r2, r6
 80063b6:	463b      	mov	r3, r7
 80063b8:	4628      	mov	r0, r5
 80063ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80063be:	f7ff bea1 	b.w	8006104 <_write_r>

080063c2 <__sseek>:
 80063c2:	b510      	push	{r4, lr}
 80063c4:	460c      	mov	r4, r1
 80063c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063ca:	f000 f8cd 	bl	8006568 <_lseek_r>
 80063ce:	1c43      	adds	r3, r0, #1
 80063d0:	89a3      	ldrh	r3, [r4, #12]
 80063d2:	bf15      	itete	ne
 80063d4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80063d6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80063da:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80063de:	81a3      	strheq	r3, [r4, #12]
 80063e0:	bf18      	it	ne
 80063e2:	81a3      	strhne	r3, [r4, #12]
 80063e4:	bd10      	pop	{r4, pc}

080063e6 <__sclose>:
 80063e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063ea:	f000 b8ad 	b.w	8006548 <_close_r>

080063ee <__swbuf_r>:
 80063ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063f0:	460e      	mov	r6, r1
 80063f2:	4614      	mov	r4, r2
 80063f4:	4605      	mov	r5, r0
 80063f6:	b118      	cbz	r0, 8006400 <__swbuf_r+0x12>
 80063f8:	6a03      	ldr	r3, [r0, #32]
 80063fa:	b90b      	cbnz	r3, 8006400 <__swbuf_r+0x12>
 80063fc:	f7ff ff20 	bl	8006240 <__sinit>
 8006400:	69a3      	ldr	r3, [r4, #24]
 8006402:	60a3      	str	r3, [r4, #8]
 8006404:	89a3      	ldrh	r3, [r4, #12]
 8006406:	071a      	lsls	r2, r3, #28
 8006408:	d501      	bpl.n	800640e <__swbuf_r+0x20>
 800640a:	6923      	ldr	r3, [r4, #16]
 800640c:	b943      	cbnz	r3, 8006420 <__swbuf_r+0x32>
 800640e:	4621      	mov	r1, r4
 8006410:	4628      	mov	r0, r5
 8006412:	f000 f82b 	bl	800646c <__swsetup_r>
 8006416:	b118      	cbz	r0, 8006420 <__swbuf_r+0x32>
 8006418:	f04f 37ff 	mov.w	r7, #4294967295
 800641c:	4638      	mov	r0, r7
 800641e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006420:	6823      	ldr	r3, [r4, #0]
 8006422:	6922      	ldr	r2, [r4, #16]
 8006424:	1a98      	subs	r0, r3, r2
 8006426:	6963      	ldr	r3, [r4, #20]
 8006428:	b2f6      	uxtb	r6, r6
 800642a:	4283      	cmp	r3, r0
 800642c:	4637      	mov	r7, r6
 800642e:	dc05      	bgt.n	800643c <__swbuf_r+0x4e>
 8006430:	4621      	mov	r1, r4
 8006432:	4628      	mov	r0, r5
 8006434:	f000 fa6e 	bl	8006914 <_fflush_r>
 8006438:	2800      	cmp	r0, #0
 800643a:	d1ed      	bne.n	8006418 <__swbuf_r+0x2a>
 800643c:	68a3      	ldr	r3, [r4, #8]
 800643e:	3b01      	subs	r3, #1
 8006440:	60a3      	str	r3, [r4, #8]
 8006442:	6823      	ldr	r3, [r4, #0]
 8006444:	1c5a      	adds	r2, r3, #1
 8006446:	6022      	str	r2, [r4, #0]
 8006448:	701e      	strb	r6, [r3, #0]
 800644a:	6962      	ldr	r2, [r4, #20]
 800644c:	1c43      	adds	r3, r0, #1
 800644e:	429a      	cmp	r2, r3
 8006450:	d004      	beq.n	800645c <__swbuf_r+0x6e>
 8006452:	89a3      	ldrh	r3, [r4, #12]
 8006454:	07db      	lsls	r3, r3, #31
 8006456:	d5e1      	bpl.n	800641c <__swbuf_r+0x2e>
 8006458:	2e0a      	cmp	r6, #10
 800645a:	d1df      	bne.n	800641c <__swbuf_r+0x2e>
 800645c:	4621      	mov	r1, r4
 800645e:	4628      	mov	r0, r5
 8006460:	f000 fa58 	bl	8006914 <_fflush_r>
 8006464:	2800      	cmp	r0, #0
 8006466:	d0d9      	beq.n	800641c <__swbuf_r+0x2e>
 8006468:	e7d6      	b.n	8006418 <__swbuf_r+0x2a>
	...

0800646c <__swsetup_r>:
 800646c:	b538      	push	{r3, r4, r5, lr}
 800646e:	4b29      	ldr	r3, [pc, #164]	@ (8006514 <__swsetup_r+0xa8>)
 8006470:	4605      	mov	r5, r0
 8006472:	6818      	ldr	r0, [r3, #0]
 8006474:	460c      	mov	r4, r1
 8006476:	b118      	cbz	r0, 8006480 <__swsetup_r+0x14>
 8006478:	6a03      	ldr	r3, [r0, #32]
 800647a:	b90b      	cbnz	r3, 8006480 <__swsetup_r+0x14>
 800647c:	f7ff fee0 	bl	8006240 <__sinit>
 8006480:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006484:	0719      	lsls	r1, r3, #28
 8006486:	d422      	bmi.n	80064ce <__swsetup_r+0x62>
 8006488:	06da      	lsls	r2, r3, #27
 800648a:	d407      	bmi.n	800649c <__swsetup_r+0x30>
 800648c:	2209      	movs	r2, #9
 800648e:	602a      	str	r2, [r5, #0]
 8006490:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006494:	81a3      	strh	r3, [r4, #12]
 8006496:	f04f 30ff 	mov.w	r0, #4294967295
 800649a:	e033      	b.n	8006504 <__swsetup_r+0x98>
 800649c:	0758      	lsls	r0, r3, #29
 800649e:	d512      	bpl.n	80064c6 <__swsetup_r+0x5a>
 80064a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80064a2:	b141      	cbz	r1, 80064b6 <__swsetup_r+0x4a>
 80064a4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80064a8:	4299      	cmp	r1, r3
 80064aa:	d002      	beq.n	80064b2 <__swsetup_r+0x46>
 80064ac:	4628      	mov	r0, r5
 80064ae:	f000 f8b5 	bl	800661c <_free_r>
 80064b2:	2300      	movs	r3, #0
 80064b4:	6363      	str	r3, [r4, #52]	@ 0x34
 80064b6:	89a3      	ldrh	r3, [r4, #12]
 80064b8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80064bc:	81a3      	strh	r3, [r4, #12]
 80064be:	2300      	movs	r3, #0
 80064c0:	6063      	str	r3, [r4, #4]
 80064c2:	6923      	ldr	r3, [r4, #16]
 80064c4:	6023      	str	r3, [r4, #0]
 80064c6:	89a3      	ldrh	r3, [r4, #12]
 80064c8:	f043 0308 	orr.w	r3, r3, #8
 80064cc:	81a3      	strh	r3, [r4, #12]
 80064ce:	6923      	ldr	r3, [r4, #16]
 80064d0:	b94b      	cbnz	r3, 80064e6 <__swsetup_r+0x7a>
 80064d2:	89a3      	ldrh	r3, [r4, #12]
 80064d4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80064d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80064dc:	d003      	beq.n	80064e6 <__swsetup_r+0x7a>
 80064de:	4621      	mov	r1, r4
 80064e0:	4628      	mov	r0, r5
 80064e2:	f000 fa65 	bl	80069b0 <__smakebuf_r>
 80064e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80064ea:	f013 0201 	ands.w	r2, r3, #1
 80064ee:	d00a      	beq.n	8006506 <__swsetup_r+0x9a>
 80064f0:	2200      	movs	r2, #0
 80064f2:	60a2      	str	r2, [r4, #8]
 80064f4:	6962      	ldr	r2, [r4, #20]
 80064f6:	4252      	negs	r2, r2
 80064f8:	61a2      	str	r2, [r4, #24]
 80064fa:	6922      	ldr	r2, [r4, #16]
 80064fc:	b942      	cbnz	r2, 8006510 <__swsetup_r+0xa4>
 80064fe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006502:	d1c5      	bne.n	8006490 <__swsetup_r+0x24>
 8006504:	bd38      	pop	{r3, r4, r5, pc}
 8006506:	0799      	lsls	r1, r3, #30
 8006508:	bf58      	it	pl
 800650a:	6962      	ldrpl	r2, [r4, #20]
 800650c:	60a2      	str	r2, [r4, #8]
 800650e:	e7f4      	b.n	80064fa <__swsetup_r+0x8e>
 8006510:	2000      	movs	r0, #0
 8006512:	e7f7      	b.n	8006504 <__swsetup_r+0x98>
 8006514:	2000001c 	.word	0x2000001c

08006518 <memcmp>:
 8006518:	b510      	push	{r4, lr}
 800651a:	3901      	subs	r1, #1
 800651c:	4402      	add	r2, r0
 800651e:	4290      	cmp	r0, r2
 8006520:	d101      	bne.n	8006526 <memcmp+0xe>
 8006522:	2000      	movs	r0, #0
 8006524:	e005      	b.n	8006532 <memcmp+0x1a>
 8006526:	7803      	ldrb	r3, [r0, #0]
 8006528:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800652c:	42a3      	cmp	r3, r4
 800652e:	d001      	beq.n	8006534 <memcmp+0x1c>
 8006530:	1b18      	subs	r0, r3, r4
 8006532:	bd10      	pop	{r4, pc}
 8006534:	3001      	adds	r0, #1
 8006536:	e7f2      	b.n	800651e <memcmp+0x6>

08006538 <memset>:
 8006538:	4402      	add	r2, r0
 800653a:	4603      	mov	r3, r0
 800653c:	4293      	cmp	r3, r2
 800653e:	d100      	bne.n	8006542 <memset+0xa>
 8006540:	4770      	bx	lr
 8006542:	f803 1b01 	strb.w	r1, [r3], #1
 8006546:	e7f9      	b.n	800653c <memset+0x4>

08006548 <_close_r>:
 8006548:	b538      	push	{r3, r4, r5, lr}
 800654a:	4d06      	ldr	r5, [pc, #24]	@ (8006564 <_close_r+0x1c>)
 800654c:	2300      	movs	r3, #0
 800654e:	4604      	mov	r4, r0
 8006550:	4608      	mov	r0, r1
 8006552:	602b      	str	r3, [r5, #0]
 8006554:	f7fa f9ef 	bl	8000936 <_close>
 8006558:	1c43      	adds	r3, r0, #1
 800655a:	d102      	bne.n	8006562 <_close_r+0x1a>
 800655c:	682b      	ldr	r3, [r5, #0]
 800655e:	b103      	cbz	r3, 8006562 <_close_r+0x1a>
 8006560:	6023      	str	r3, [r4, #0]
 8006562:	bd38      	pop	{r3, r4, r5, pc}
 8006564:	20014630 	.word	0x20014630

08006568 <_lseek_r>:
 8006568:	b538      	push	{r3, r4, r5, lr}
 800656a:	4d07      	ldr	r5, [pc, #28]	@ (8006588 <_lseek_r+0x20>)
 800656c:	4604      	mov	r4, r0
 800656e:	4608      	mov	r0, r1
 8006570:	4611      	mov	r1, r2
 8006572:	2200      	movs	r2, #0
 8006574:	602a      	str	r2, [r5, #0]
 8006576:	461a      	mov	r2, r3
 8006578:	f7fa fa04 	bl	8000984 <_lseek>
 800657c:	1c43      	adds	r3, r0, #1
 800657e:	d102      	bne.n	8006586 <_lseek_r+0x1e>
 8006580:	682b      	ldr	r3, [r5, #0]
 8006582:	b103      	cbz	r3, 8006586 <_lseek_r+0x1e>
 8006584:	6023      	str	r3, [r4, #0]
 8006586:	bd38      	pop	{r3, r4, r5, pc}
 8006588:	20014630 	.word	0x20014630

0800658c <_read_r>:
 800658c:	b538      	push	{r3, r4, r5, lr}
 800658e:	4d07      	ldr	r5, [pc, #28]	@ (80065ac <_read_r+0x20>)
 8006590:	4604      	mov	r4, r0
 8006592:	4608      	mov	r0, r1
 8006594:	4611      	mov	r1, r2
 8006596:	2200      	movs	r2, #0
 8006598:	602a      	str	r2, [r5, #0]
 800659a:	461a      	mov	r2, r3
 800659c:	f7fa f9ae 	bl	80008fc <_read>
 80065a0:	1c43      	adds	r3, r0, #1
 80065a2:	d102      	bne.n	80065aa <_read_r+0x1e>
 80065a4:	682b      	ldr	r3, [r5, #0]
 80065a6:	b103      	cbz	r3, 80065aa <_read_r+0x1e>
 80065a8:	6023      	str	r3, [r4, #0]
 80065aa:	bd38      	pop	{r3, r4, r5, pc}
 80065ac:	20014630 	.word	0x20014630

080065b0 <__libc_init_array>:
 80065b0:	b570      	push	{r4, r5, r6, lr}
 80065b2:	4d0d      	ldr	r5, [pc, #52]	@ (80065e8 <__libc_init_array+0x38>)
 80065b4:	4c0d      	ldr	r4, [pc, #52]	@ (80065ec <__libc_init_array+0x3c>)
 80065b6:	1b64      	subs	r4, r4, r5
 80065b8:	10a4      	asrs	r4, r4, #2
 80065ba:	2600      	movs	r6, #0
 80065bc:	42a6      	cmp	r6, r4
 80065be:	d109      	bne.n	80065d4 <__libc_init_array+0x24>
 80065c0:	4d0b      	ldr	r5, [pc, #44]	@ (80065f0 <__libc_init_array+0x40>)
 80065c2:	4c0c      	ldr	r4, [pc, #48]	@ (80065f4 <__libc_init_array+0x44>)
 80065c4:	f000 fa70 	bl	8006aa8 <_init>
 80065c8:	1b64      	subs	r4, r4, r5
 80065ca:	10a4      	asrs	r4, r4, #2
 80065cc:	2600      	movs	r6, #0
 80065ce:	42a6      	cmp	r6, r4
 80065d0:	d105      	bne.n	80065de <__libc_init_array+0x2e>
 80065d2:	bd70      	pop	{r4, r5, r6, pc}
 80065d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80065d8:	4798      	blx	r3
 80065da:	3601      	adds	r6, #1
 80065dc:	e7ee      	b.n	80065bc <__libc_init_array+0xc>
 80065de:	f855 3b04 	ldr.w	r3, [r5], #4
 80065e2:	4798      	blx	r3
 80065e4:	3601      	adds	r6, #1
 80065e6:	e7f2      	b.n	80065ce <__libc_init_array+0x1e>
 80065e8:	08006c0c 	.word	0x08006c0c
 80065ec:	08006c0c 	.word	0x08006c0c
 80065f0:	08006c0c 	.word	0x08006c0c
 80065f4:	08006c10 	.word	0x08006c10

080065f8 <__retarget_lock_init_recursive>:
 80065f8:	4770      	bx	lr

080065fa <__retarget_lock_acquire_recursive>:
 80065fa:	4770      	bx	lr

080065fc <__retarget_lock_release_recursive>:
 80065fc:	4770      	bx	lr

080065fe <memcpy>:
 80065fe:	440a      	add	r2, r1
 8006600:	4291      	cmp	r1, r2
 8006602:	f100 33ff 	add.w	r3, r0, #4294967295
 8006606:	d100      	bne.n	800660a <memcpy+0xc>
 8006608:	4770      	bx	lr
 800660a:	b510      	push	{r4, lr}
 800660c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006610:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006614:	4291      	cmp	r1, r2
 8006616:	d1f9      	bne.n	800660c <memcpy+0xe>
 8006618:	bd10      	pop	{r4, pc}
	...

0800661c <_free_r>:
 800661c:	b538      	push	{r3, r4, r5, lr}
 800661e:	4605      	mov	r5, r0
 8006620:	2900      	cmp	r1, #0
 8006622:	d041      	beq.n	80066a8 <_free_r+0x8c>
 8006624:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006628:	1f0c      	subs	r4, r1, #4
 800662a:	2b00      	cmp	r3, #0
 800662c:	bfb8      	it	lt
 800662e:	18e4      	addlt	r4, r4, r3
 8006630:	f000 f8e0 	bl	80067f4 <__malloc_lock>
 8006634:	4a1d      	ldr	r2, [pc, #116]	@ (80066ac <_free_r+0x90>)
 8006636:	6813      	ldr	r3, [r2, #0]
 8006638:	b933      	cbnz	r3, 8006648 <_free_r+0x2c>
 800663a:	6063      	str	r3, [r4, #4]
 800663c:	6014      	str	r4, [r2, #0]
 800663e:	4628      	mov	r0, r5
 8006640:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006644:	f000 b8dc 	b.w	8006800 <__malloc_unlock>
 8006648:	42a3      	cmp	r3, r4
 800664a:	d908      	bls.n	800665e <_free_r+0x42>
 800664c:	6820      	ldr	r0, [r4, #0]
 800664e:	1821      	adds	r1, r4, r0
 8006650:	428b      	cmp	r3, r1
 8006652:	bf01      	itttt	eq
 8006654:	6819      	ldreq	r1, [r3, #0]
 8006656:	685b      	ldreq	r3, [r3, #4]
 8006658:	1809      	addeq	r1, r1, r0
 800665a:	6021      	streq	r1, [r4, #0]
 800665c:	e7ed      	b.n	800663a <_free_r+0x1e>
 800665e:	461a      	mov	r2, r3
 8006660:	685b      	ldr	r3, [r3, #4]
 8006662:	b10b      	cbz	r3, 8006668 <_free_r+0x4c>
 8006664:	42a3      	cmp	r3, r4
 8006666:	d9fa      	bls.n	800665e <_free_r+0x42>
 8006668:	6811      	ldr	r1, [r2, #0]
 800666a:	1850      	adds	r0, r2, r1
 800666c:	42a0      	cmp	r0, r4
 800666e:	d10b      	bne.n	8006688 <_free_r+0x6c>
 8006670:	6820      	ldr	r0, [r4, #0]
 8006672:	4401      	add	r1, r0
 8006674:	1850      	adds	r0, r2, r1
 8006676:	4283      	cmp	r3, r0
 8006678:	6011      	str	r1, [r2, #0]
 800667a:	d1e0      	bne.n	800663e <_free_r+0x22>
 800667c:	6818      	ldr	r0, [r3, #0]
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	6053      	str	r3, [r2, #4]
 8006682:	4408      	add	r0, r1
 8006684:	6010      	str	r0, [r2, #0]
 8006686:	e7da      	b.n	800663e <_free_r+0x22>
 8006688:	d902      	bls.n	8006690 <_free_r+0x74>
 800668a:	230c      	movs	r3, #12
 800668c:	602b      	str	r3, [r5, #0]
 800668e:	e7d6      	b.n	800663e <_free_r+0x22>
 8006690:	6820      	ldr	r0, [r4, #0]
 8006692:	1821      	adds	r1, r4, r0
 8006694:	428b      	cmp	r3, r1
 8006696:	bf04      	itt	eq
 8006698:	6819      	ldreq	r1, [r3, #0]
 800669a:	685b      	ldreq	r3, [r3, #4]
 800669c:	6063      	str	r3, [r4, #4]
 800669e:	bf04      	itt	eq
 80066a0:	1809      	addeq	r1, r1, r0
 80066a2:	6021      	streq	r1, [r4, #0]
 80066a4:	6054      	str	r4, [r2, #4]
 80066a6:	e7ca      	b.n	800663e <_free_r+0x22>
 80066a8:	bd38      	pop	{r3, r4, r5, pc}
 80066aa:	bf00      	nop
 80066ac:	2001463c 	.word	0x2001463c

080066b0 <sbrk_aligned>:
 80066b0:	b570      	push	{r4, r5, r6, lr}
 80066b2:	4e0f      	ldr	r6, [pc, #60]	@ (80066f0 <sbrk_aligned+0x40>)
 80066b4:	460c      	mov	r4, r1
 80066b6:	6831      	ldr	r1, [r6, #0]
 80066b8:	4605      	mov	r5, r0
 80066ba:	b911      	cbnz	r1, 80066c2 <sbrk_aligned+0x12>
 80066bc:	f000 f9d6 	bl	8006a6c <_sbrk_r>
 80066c0:	6030      	str	r0, [r6, #0]
 80066c2:	4621      	mov	r1, r4
 80066c4:	4628      	mov	r0, r5
 80066c6:	f000 f9d1 	bl	8006a6c <_sbrk_r>
 80066ca:	1c43      	adds	r3, r0, #1
 80066cc:	d103      	bne.n	80066d6 <sbrk_aligned+0x26>
 80066ce:	f04f 34ff 	mov.w	r4, #4294967295
 80066d2:	4620      	mov	r0, r4
 80066d4:	bd70      	pop	{r4, r5, r6, pc}
 80066d6:	1cc4      	adds	r4, r0, #3
 80066d8:	f024 0403 	bic.w	r4, r4, #3
 80066dc:	42a0      	cmp	r0, r4
 80066de:	d0f8      	beq.n	80066d2 <sbrk_aligned+0x22>
 80066e0:	1a21      	subs	r1, r4, r0
 80066e2:	4628      	mov	r0, r5
 80066e4:	f000 f9c2 	bl	8006a6c <_sbrk_r>
 80066e8:	3001      	adds	r0, #1
 80066ea:	d1f2      	bne.n	80066d2 <sbrk_aligned+0x22>
 80066ec:	e7ef      	b.n	80066ce <sbrk_aligned+0x1e>
 80066ee:	bf00      	nop
 80066f0:	20014638 	.word	0x20014638

080066f4 <_malloc_r>:
 80066f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066f8:	1ccd      	adds	r5, r1, #3
 80066fa:	f025 0503 	bic.w	r5, r5, #3
 80066fe:	3508      	adds	r5, #8
 8006700:	2d0c      	cmp	r5, #12
 8006702:	bf38      	it	cc
 8006704:	250c      	movcc	r5, #12
 8006706:	2d00      	cmp	r5, #0
 8006708:	4606      	mov	r6, r0
 800670a:	db01      	blt.n	8006710 <_malloc_r+0x1c>
 800670c:	42a9      	cmp	r1, r5
 800670e:	d904      	bls.n	800671a <_malloc_r+0x26>
 8006710:	230c      	movs	r3, #12
 8006712:	6033      	str	r3, [r6, #0]
 8006714:	2000      	movs	r0, #0
 8006716:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800671a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80067f0 <_malloc_r+0xfc>
 800671e:	f000 f869 	bl	80067f4 <__malloc_lock>
 8006722:	f8d8 3000 	ldr.w	r3, [r8]
 8006726:	461c      	mov	r4, r3
 8006728:	bb44      	cbnz	r4, 800677c <_malloc_r+0x88>
 800672a:	4629      	mov	r1, r5
 800672c:	4630      	mov	r0, r6
 800672e:	f7ff ffbf 	bl	80066b0 <sbrk_aligned>
 8006732:	1c43      	adds	r3, r0, #1
 8006734:	4604      	mov	r4, r0
 8006736:	d158      	bne.n	80067ea <_malloc_r+0xf6>
 8006738:	f8d8 4000 	ldr.w	r4, [r8]
 800673c:	4627      	mov	r7, r4
 800673e:	2f00      	cmp	r7, #0
 8006740:	d143      	bne.n	80067ca <_malloc_r+0xd6>
 8006742:	2c00      	cmp	r4, #0
 8006744:	d04b      	beq.n	80067de <_malloc_r+0xea>
 8006746:	6823      	ldr	r3, [r4, #0]
 8006748:	4639      	mov	r1, r7
 800674a:	4630      	mov	r0, r6
 800674c:	eb04 0903 	add.w	r9, r4, r3
 8006750:	f000 f98c 	bl	8006a6c <_sbrk_r>
 8006754:	4581      	cmp	r9, r0
 8006756:	d142      	bne.n	80067de <_malloc_r+0xea>
 8006758:	6821      	ldr	r1, [r4, #0]
 800675a:	1a6d      	subs	r5, r5, r1
 800675c:	4629      	mov	r1, r5
 800675e:	4630      	mov	r0, r6
 8006760:	f7ff ffa6 	bl	80066b0 <sbrk_aligned>
 8006764:	3001      	adds	r0, #1
 8006766:	d03a      	beq.n	80067de <_malloc_r+0xea>
 8006768:	6823      	ldr	r3, [r4, #0]
 800676a:	442b      	add	r3, r5
 800676c:	6023      	str	r3, [r4, #0]
 800676e:	f8d8 3000 	ldr.w	r3, [r8]
 8006772:	685a      	ldr	r2, [r3, #4]
 8006774:	bb62      	cbnz	r2, 80067d0 <_malloc_r+0xdc>
 8006776:	f8c8 7000 	str.w	r7, [r8]
 800677a:	e00f      	b.n	800679c <_malloc_r+0xa8>
 800677c:	6822      	ldr	r2, [r4, #0]
 800677e:	1b52      	subs	r2, r2, r5
 8006780:	d420      	bmi.n	80067c4 <_malloc_r+0xd0>
 8006782:	2a0b      	cmp	r2, #11
 8006784:	d917      	bls.n	80067b6 <_malloc_r+0xc2>
 8006786:	1961      	adds	r1, r4, r5
 8006788:	42a3      	cmp	r3, r4
 800678a:	6025      	str	r5, [r4, #0]
 800678c:	bf18      	it	ne
 800678e:	6059      	strne	r1, [r3, #4]
 8006790:	6863      	ldr	r3, [r4, #4]
 8006792:	bf08      	it	eq
 8006794:	f8c8 1000 	streq.w	r1, [r8]
 8006798:	5162      	str	r2, [r4, r5]
 800679a:	604b      	str	r3, [r1, #4]
 800679c:	4630      	mov	r0, r6
 800679e:	f000 f82f 	bl	8006800 <__malloc_unlock>
 80067a2:	f104 000b 	add.w	r0, r4, #11
 80067a6:	1d23      	adds	r3, r4, #4
 80067a8:	f020 0007 	bic.w	r0, r0, #7
 80067ac:	1ac2      	subs	r2, r0, r3
 80067ae:	bf1c      	itt	ne
 80067b0:	1a1b      	subne	r3, r3, r0
 80067b2:	50a3      	strne	r3, [r4, r2]
 80067b4:	e7af      	b.n	8006716 <_malloc_r+0x22>
 80067b6:	6862      	ldr	r2, [r4, #4]
 80067b8:	42a3      	cmp	r3, r4
 80067ba:	bf0c      	ite	eq
 80067bc:	f8c8 2000 	streq.w	r2, [r8]
 80067c0:	605a      	strne	r2, [r3, #4]
 80067c2:	e7eb      	b.n	800679c <_malloc_r+0xa8>
 80067c4:	4623      	mov	r3, r4
 80067c6:	6864      	ldr	r4, [r4, #4]
 80067c8:	e7ae      	b.n	8006728 <_malloc_r+0x34>
 80067ca:	463c      	mov	r4, r7
 80067cc:	687f      	ldr	r7, [r7, #4]
 80067ce:	e7b6      	b.n	800673e <_malloc_r+0x4a>
 80067d0:	461a      	mov	r2, r3
 80067d2:	685b      	ldr	r3, [r3, #4]
 80067d4:	42a3      	cmp	r3, r4
 80067d6:	d1fb      	bne.n	80067d0 <_malloc_r+0xdc>
 80067d8:	2300      	movs	r3, #0
 80067da:	6053      	str	r3, [r2, #4]
 80067dc:	e7de      	b.n	800679c <_malloc_r+0xa8>
 80067de:	230c      	movs	r3, #12
 80067e0:	6033      	str	r3, [r6, #0]
 80067e2:	4630      	mov	r0, r6
 80067e4:	f000 f80c 	bl	8006800 <__malloc_unlock>
 80067e8:	e794      	b.n	8006714 <_malloc_r+0x20>
 80067ea:	6005      	str	r5, [r0, #0]
 80067ec:	e7d6      	b.n	800679c <_malloc_r+0xa8>
 80067ee:	bf00      	nop
 80067f0:	2001463c 	.word	0x2001463c

080067f4 <__malloc_lock>:
 80067f4:	4801      	ldr	r0, [pc, #4]	@ (80067fc <__malloc_lock+0x8>)
 80067f6:	f7ff bf00 	b.w	80065fa <__retarget_lock_acquire_recursive>
 80067fa:	bf00      	nop
 80067fc:	20014634 	.word	0x20014634

08006800 <__malloc_unlock>:
 8006800:	4801      	ldr	r0, [pc, #4]	@ (8006808 <__malloc_unlock+0x8>)
 8006802:	f7ff befb 	b.w	80065fc <__retarget_lock_release_recursive>
 8006806:	bf00      	nop
 8006808:	20014634 	.word	0x20014634

0800680c <__sflush_r>:
 800680c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006814:	0716      	lsls	r6, r2, #28
 8006816:	4605      	mov	r5, r0
 8006818:	460c      	mov	r4, r1
 800681a:	d454      	bmi.n	80068c6 <__sflush_r+0xba>
 800681c:	684b      	ldr	r3, [r1, #4]
 800681e:	2b00      	cmp	r3, #0
 8006820:	dc02      	bgt.n	8006828 <__sflush_r+0x1c>
 8006822:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006824:	2b00      	cmp	r3, #0
 8006826:	dd48      	ble.n	80068ba <__sflush_r+0xae>
 8006828:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800682a:	2e00      	cmp	r6, #0
 800682c:	d045      	beq.n	80068ba <__sflush_r+0xae>
 800682e:	2300      	movs	r3, #0
 8006830:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006834:	682f      	ldr	r7, [r5, #0]
 8006836:	6a21      	ldr	r1, [r4, #32]
 8006838:	602b      	str	r3, [r5, #0]
 800683a:	d030      	beq.n	800689e <__sflush_r+0x92>
 800683c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800683e:	89a3      	ldrh	r3, [r4, #12]
 8006840:	0759      	lsls	r1, r3, #29
 8006842:	d505      	bpl.n	8006850 <__sflush_r+0x44>
 8006844:	6863      	ldr	r3, [r4, #4]
 8006846:	1ad2      	subs	r2, r2, r3
 8006848:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800684a:	b10b      	cbz	r3, 8006850 <__sflush_r+0x44>
 800684c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800684e:	1ad2      	subs	r2, r2, r3
 8006850:	2300      	movs	r3, #0
 8006852:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006854:	6a21      	ldr	r1, [r4, #32]
 8006856:	4628      	mov	r0, r5
 8006858:	47b0      	blx	r6
 800685a:	1c43      	adds	r3, r0, #1
 800685c:	89a3      	ldrh	r3, [r4, #12]
 800685e:	d106      	bne.n	800686e <__sflush_r+0x62>
 8006860:	6829      	ldr	r1, [r5, #0]
 8006862:	291d      	cmp	r1, #29
 8006864:	d82b      	bhi.n	80068be <__sflush_r+0xb2>
 8006866:	4a2a      	ldr	r2, [pc, #168]	@ (8006910 <__sflush_r+0x104>)
 8006868:	40ca      	lsrs	r2, r1
 800686a:	07d6      	lsls	r6, r2, #31
 800686c:	d527      	bpl.n	80068be <__sflush_r+0xb2>
 800686e:	2200      	movs	r2, #0
 8006870:	6062      	str	r2, [r4, #4]
 8006872:	04d9      	lsls	r1, r3, #19
 8006874:	6922      	ldr	r2, [r4, #16]
 8006876:	6022      	str	r2, [r4, #0]
 8006878:	d504      	bpl.n	8006884 <__sflush_r+0x78>
 800687a:	1c42      	adds	r2, r0, #1
 800687c:	d101      	bne.n	8006882 <__sflush_r+0x76>
 800687e:	682b      	ldr	r3, [r5, #0]
 8006880:	b903      	cbnz	r3, 8006884 <__sflush_r+0x78>
 8006882:	6560      	str	r0, [r4, #84]	@ 0x54
 8006884:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006886:	602f      	str	r7, [r5, #0]
 8006888:	b1b9      	cbz	r1, 80068ba <__sflush_r+0xae>
 800688a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800688e:	4299      	cmp	r1, r3
 8006890:	d002      	beq.n	8006898 <__sflush_r+0x8c>
 8006892:	4628      	mov	r0, r5
 8006894:	f7ff fec2 	bl	800661c <_free_r>
 8006898:	2300      	movs	r3, #0
 800689a:	6363      	str	r3, [r4, #52]	@ 0x34
 800689c:	e00d      	b.n	80068ba <__sflush_r+0xae>
 800689e:	2301      	movs	r3, #1
 80068a0:	4628      	mov	r0, r5
 80068a2:	47b0      	blx	r6
 80068a4:	4602      	mov	r2, r0
 80068a6:	1c50      	adds	r0, r2, #1
 80068a8:	d1c9      	bne.n	800683e <__sflush_r+0x32>
 80068aa:	682b      	ldr	r3, [r5, #0]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d0c6      	beq.n	800683e <__sflush_r+0x32>
 80068b0:	2b1d      	cmp	r3, #29
 80068b2:	d001      	beq.n	80068b8 <__sflush_r+0xac>
 80068b4:	2b16      	cmp	r3, #22
 80068b6:	d11e      	bne.n	80068f6 <__sflush_r+0xea>
 80068b8:	602f      	str	r7, [r5, #0]
 80068ba:	2000      	movs	r0, #0
 80068bc:	e022      	b.n	8006904 <__sflush_r+0xf8>
 80068be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80068c2:	b21b      	sxth	r3, r3
 80068c4:	e01b      	b.n	80068fe <__sflush_r+0xf2>
 80068c6:	690f      	ldr	r7, [r1, #16]
 80068c8:	2f00      	cmp	r7, #0
 80068ca:	d0f6      	beq.n	80068ba <__sflush_r+0xae>
 80068cc:	0793      	lsls	r3, r2, #30
 80068ce:	680e      	ldr	r6, [r1, #0]
 80068d0:	bf08      	it	eq
 80068d2:	694b      	ldreq	r3, [r1, #20]
 80068d4:	600f      	str	r7, [r1, #0]
 80068d6:	bf18      	it	ne
 80068d8:	2300      	movne	r3, #0
 80068da:	eba6 0807 	sub.w	r8, r6, r7
 80068de:	608b      	str	r3, [r1, #8]
 80068e0:	f1b8 0f00 	cmp.w	r8, #0
 80068e4:	dde9      	ble.n	80068ba <__sflush_r+0xae>
 80068e6:	6a21      	ldr	r1, [r4, #32]
 80068e8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80068ea:	4643      	mov	r3, r8
 80068ec:	463a      	mov	r2, r7
 80068ee:	4628      	mov	r0, r5
 80068f0:	47b0      	blx	r6
 80068f2:	2800      	cmp	r0, #0
 80068f4:	dc08      	bgt.n	8006908 <__sflush_r+0xfc>
 80068f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80068fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80068fe:	81a3      	strh	r3, [r4, #12]
 8006900:	f04f 30ff 	mov.w	r0, #4294967295
 8006904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006908:	4407      	add	r7, r0
 800690a:	eba8 0800 	sub.w	r8, r8, r0
 800690e:	e7e7      	b.n	80068e0 <__sflush_r+0xd4>
 8006910:	20400001 	.word	0x20400001

08006914 <_fflush_r>:
 8006914:	b538      	push	{r3, r4, r5, lr}
 8006916:	690b      	ldr	r3, [r1, #16]
 8006918:	4605      	mov	r5, r0
 800691a:	460c      	mov	r4, r1
 800691c:	b913      	cbnz	r3, 8006924 <_fflush_r+0x10>
 800691e:	2500      	movs	r5, #0
 8006920:	4628      	mov	r0, r5
 8006922:	bd38      	pop	{r3, r4, r5, pc}
 8006924:	b118      	cbz	r0, 800692e <_fflush_r+0x1a>
 8006926:	6a03      	ldr	r3, [r0, #32]
 8006928:	b90b      	cbnz	r3, 800692e <_fflush_r+0x1a>
 800692a:	f7ff fc89 	bl	8006240 <__sinit>
 800692e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d0f3      	beq.n	800691e <_fflush_r+0xa>
 8006936:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006938:	07d0      	lsls	r0, r2, #31
 800693a:	d404      	bmi.n	8006946 <_fflush_r+0x32>
 800693c:	0599      	lsls	r1, r3, #22
 800693e:	d402      	bmi.n	8006946 <_fflush_r+0x32>
 8006940:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006942:	f7ff fe5a 	bl	80065fa <__retarget_lock_acquire_recursive>
 8006946:	4628      	mov	r0, r5
 8006948:	4621      	mov	r1, r4
 800694a:	f7ff ff5f 	bl	800680c <__sflush_r>
 800694e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006950:	07da      	lsls	r2, r3, #31
 8006952:	4605      	mov	r5, r0
 8006954:	d4e4      	bmi.n	8006920 <_fflush_r+0xc>
 8006956:	89a3      	ldrh	r3, [r4, #12]
 8006958:	059b      	lsls	r3, r3, #22
 800695a:	d4e1      	bmi.n	8006920 <_fflush_r+0xc>
 800695c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800695e:	f7ff fe4d 	bl	80065fc <__retarget_lock_release_recursive>
 8006962:	e7dd      	b.n	8006920 <_fflush_r+0xc>

08006964 <__swhatbuf_r>:
 8006964:	b570      	push	{r4, r5, r6, lr}
 8006966:	460c      	mov	r4, r1
 8006968:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800696c:	2900      	cmp	r1, #0
 800696e:	b096      	sub	sp, #88	@ 0x58
 8006970:	4615      	mov	r5, r2
 8006972:	461e      	mov	r6, r3
 8006974:	da0d      	bge.n	8006992 <__swhatbuf_r+0x2e>
 8006976:	89a3      	ldrh	r3, [r4, #12]
 8006978:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800697c:	f04f 0100 	mov.w	r1, #0
 8006980:	bf14      	ite	ne
 8006982:	2340      	movne	r3, #64	@ 0x40
 8006984:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006988:	2000      	movs	r0, #0
 800698a:	6031      	str	r1, [r6, #0]
 800698c:	602b      	str	r3, [r5, #0]
 800698e:	b016      	add	sp, #88	@ 0x58
 8006990:	bd70      	pop	{r4, r5, r6, pc}
 8006992:	466a      	mov	r2, sp
 8006994:	f000 f848 	bl	8006a28 <_fstat_r>
 8006998:	2800      	cmp	r0, #0
 800699a:	dbec      	blt.n	8006976 <__swhatbuf_r+0x12>
 800699c:	9901      	ldr	r1, [sp, #4]
 800699e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80069a2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80069a6:	4259      	negs	r1, r3
 80069a8:	4159      	adcs	r1, r3
 80069aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80069ae:	e7eb      	b.n	8006988 <__swhatbuf_r+0x24>

080069b0 <__smakebuf_r>:
 80069b0:	898b      	ldrh	r3, [r1, #12]
 80069b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80069b4:	079d      	lsls	r5, r3, #30
 80069b6:	4606      	mov	r6, r0
 80069b8:	460c      	mov	r4, r1
 80069ba:	d507      	bpl.n	80069cc <__smakebuf_r+0x1c>
 80069bc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80069c0:	6023      	str	r3, [r4, #0]
 80069c2:	6123      	str	r3, [r4, #16]
 80069c4:	2301      	movs	r3, #1
 80069c6:	6163      	str	r3, [r4, #20]
 80069c8:	b003      	add	sp, #12
 80069ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80069cc:	ab01      	add	r3, sp, #4
 80069ce:	466a      	mov	r2, sp
 80069d0:	f7ff ffc8 	bl	8006964 <__swhatbuf_r>
 80069d4:	9f00      	ldr	r7, [sp, #0]
 80069d6:	4605      	mov	r5, r0
 80069d8:	4639      	mov	r1, r7
 80069da:	4630      	mov	r0, r6
 80069dc:	f7ff fe8a 	bl	80066f4 <_malloc_r>
 80069e0:	b948      	cbnz	r0, 80069f6 <__smakebuf_r+0x46>
 80069e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80069e6:	059a      	lsls	r2, r3, #22
 80069e8:	d4ee      	bmi.n	80069c8 <__smakebuf_r+0x18>
 80069ea:	f023 0303 	bic.w	r3, r3, #3
 80069ee:	f043 0302 	orr.w	r3, r3, #2
 80069f2:	81a3      	strh	r3, [r4, #12]
 80069f4:	e7e2      	b.n	80069bc <__smakebuf_r+0xc>
 80069f6:	89a3      	ldrh	r3, [r4, #12]
 80069f8:	6020      	str	r0, [r4, #0]
 80069fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069fe:	81a3      	strh	r3, [r4, #12]
 8006a00:	9b01      	ldr	r3, [sp, #4]
 8006a02:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006a06:	b15b      	cbz	r3, 8006a20 <__smakebuf_r+0x70>
 8006a08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a0c:	4630      	mov	r0, r6
 8006a0e:	f000 f81d 	bl	8006a4c <_isatty_r>
 8006a12:	b128      	cbz	r0, 8006a20 <__smakebuf_r+0x70>
 8006a14:	89a3      	ldrh	r3, [r4, #12]
 8006a16:	f023 0303 	bic.w	r3, r3, #3
 8006a1a:	f043 0301 	orr.w	r3, r3, #1
 8006a1e:	81a3      	strh	r3, [r4, #12]
 8006a20:	89a3      	ldrh	r3, [r4, #12]
 8006a22:	431d      	orrs	r5, r3
 8006a24:	81a5      	strh	r5, [r4, #12]
 8006a26:	e7cf      	b.n	80069c8 <__smakebuf_r+0x18>

08006a28 <_fstat_r>:
 8006a28:	b538      	push	{r3, r4, r5, lr}
 8006a2a:	4d07      	ldr	r5, [pc, #28]	@ (8006a48 <_fstat_r+0x20>)
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	4604      	mov	r4, r0
 8006a30:	4608      	mov	r0, r1
 8006a32:	4611      	mov	r1, r2
 8006a34:	602b      	str	r3, [r5, #0]
 8006a36:	f7f9 ff8a 	bl	800094e <_fstat>
 8006a3a:	1c43      	adds	r3, r0, #1
 8006a3c:	d102      	bne.n	8006a44 <_fstat_r+0x1c>
 8006a3e:	682b      	ldr	r3, [r5, #0]
 8006a40:	b103      	cbz	r3, 8006a44 <_fstat_r+0x1c>
 8006a42:	6023      	str	r3, [r4, #0]
 8006a44:	bd38      	pop	{r3, r4, r5, pc}
 8006a46:	bf00      	nop
 8006a48:	20014630 	.word	0x20014630

08006a4c <_isatty_r>:
 8006a4c:	b538      	push	{r3, r4, r5, lr}
 8006a4e:	4d06      	ldr	r5, [pc, #24]	@ (8006a68 <_isatty_r+0x1c>)
 8006a50:	2300      	movs	r3, #0
 8006a52:	4604      	mov	r4, r0
 8006a54:	4608      	mov	r0, r1
 8006a56:	602b      	str	r3, [r5, #0]
 8006a58:	f7f9 ff89 	bl	800096e <_isatty>
 8006a5c:	1c43      	adds	r3, r0, #1
 8006a5e:	d102      	bne.n	8006a66 <_isatty_r+0x1a>
 8006a60:	682b      	ldr	r3, [r5, #0]
 8006a62:	b103      	cbz	r3, 8006a66 <_isatty_r+0x1a>
 8006a64:	6023      	str	r3, [r4, #0]
 8006a66:	bd38      	pop	{r3, r4, r5, pc}
 8006a68:	20014630 	.word	0x20014630

08006a6c <_sbrk_r>:
 8006a6c:	b538      	push	{r3, r4, r5, lr}
 8006a6e:	4d06      	ldr	r5, [pc, #24]	@ (8006a88 <_sbrk_r+0x1c>)
 8006a70:	2300      	movs	r3, #0
 8006a72:	4604      	mov	r4, r0
 8006a74:	4608      	mov	r0, r1
 8006a76:	602b      	str	r3, [r5, #0]
 8006a78:	f000 f808 	bl	8006a8c <_sbrk>
 8006a7c:	1c43      	adds	r3, r0, #1
 8006a7e:	d102      	bne.n	8006a86 <_sbrk_r+0x1a>
 8006a80:	682b      	ldr	r3, [r5, #0]
 8006a82:	b103      	cbz	r3, 8006a86 <_sbrk_r+0x1a>
 8006a84:	6023      	str	r3, [r4, #0]
 8006a86:	bd38      	pop	{r3, r4, r5, pc}
 8006a88:	20014630 	.word	0x20014630

08006a8c <_sbrk>:
 8006a8c:	4a04      	ldr	r2, [pc, #16]	@ (8006aa0 <_sbrk+0x14>)
 8006a8e:	6811      	ldr	r1, [r2, #0]
 8006a90:	4603      	mov	r3, r0
 8006a92:	b909      	cbnz	r1, 8006a98 <_sbrk+0xc>
 8006a94:	4903      	ldr	r1, [pc, #12]	@ (8006aa4 <_sbrk+0x18>)
 8006a96:	6011      	str	r1, [r2, #0]
 8006a98:	6810      	ldr	r0, [r2, #0]
 8006a9a:	4403      	add	r3, r0
 8006a9c:	6013      	str	r3, [r2, #0]
 8006a9e:	4770      	bx	lr
 8006aa0:	20014640 	.word	0x20014640
 8006aa4:	20014648 	.word	0x20014648

08006aa8 <_init>:
 8006aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006aaa:	bf00      	nop
 8006aac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006aae:	bc08      	pop	{r3}
 8006ab0:	469e      	mov	lr, r3
 8006ab2:	4770      	bx	lr

08006ab4 <_fini>:
 8006ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ab6:	bf00      	nop
 8006ab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006aba:	bc08      	pop	{r3}
 8006abc:	469e      	mov	lr, r3
 8006abe:	4770      	bx	lr
