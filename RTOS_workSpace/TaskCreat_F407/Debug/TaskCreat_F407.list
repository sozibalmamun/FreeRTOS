
TaskCreat_F407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000713c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b4  080072cc  080072cc  000082cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007480  08007480  00009060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007480  08007480  00008480  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007488  08007488  00009060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007488  08007488  00008488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800748c  0800748c  0000848c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08007490  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00009060  2**0
                  CONTENTS
 10 .bss          00006218  20000060  20000060  00009060  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20006278  20006278  00009060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00009060  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001898c  00000000  00000000  00009090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000034d9  00000000  00000000  00021a1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015a8  00000000  00000000  00024ef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010a5  00000000  00000000  000264a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000041cb  00000000  00000000  00027545  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000177f8  00000000  00000000  0002b710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d96ed  00000000  00000000  00042f08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011c5f5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006064  00000000  00000000  0011c638  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000a1  00000000  00000000  0012269c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080072b4 	.word	0x080072b4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	080072b4 	.word	0x080072b4

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20004b5c 	.word	0x20004b5c
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b988 	b.w	8000638 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	468e      	mov	lr, r1
 8000348:	4604      	mov	r4, r0
 800034a:	4688      	mov	r8, r1
 800034c:	2b00      	cmp	r3, #0
 800034e:	d14a      	bne.n	80003e6 <__udivmoddi4+0xa6>
 8000350:	428a      	cmp	r2, r1
 8000352:	4617      	mov	r7, r2
 8000354:	d962      	bls.n	800041c <__udivmoddi4+0xdc>
 8000356:	fab2 f682 	clz	r6, r2
 800035a:	b14e      	cbz	r6, 8000370 <__udivmoddi4+0x30>
 800035c:	f1c6 0320 	rsb	r3, r6, #32
 8000360:	fa01 f806 	lsl.w	r8, r1, r6
 8000364:	fa20 f303 	lsr.w	r3, r0, r3
 8000368:	40b7      	lsls	r7, r6
 800036a:	ea43 0808 	orr.w	r8, r3, r8
 800036e:	40b4      	lsls	r4, r6
 8000370:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000374:	fa1f fc87 	uxth.w	ip, r7
 8000378:	fbb8 f1fe 	udiv	r1, r8, lr
 800037c:	0c23      	lsrs	r3, r4, #16
 800037e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000382:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000386:	fb01 f20c 	mul.w	r2, r1, ip
 800038a:	429a      	cmp	r2, r3
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0x62>
 800038e:	18fb      	adds	r3, r7, r3
 8000390:	f101 30ff 	add.w	r0, r1, #4294967295
 8000394:	f080 80ea 	bcs.w	800056c <__udivmoddi4+0x22c>
 8000398:	429a      	cmp	r2, r3
 800039a:	f240 80e7 	bls.w	800056c <__udivmoddi4+0x22c>
 800039e:	3902      	subs	r1, #2
 80003a0:	443b      	add	r3, r7
 80003a2:	1a9a      	subs	r2, r3, r2
 80003a4:	b2a3      	uxth	r3, r4
 80003a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80003aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80003ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b2:	fb00 fc0c 	mul.w	ip, r0, ip
 80003b6:	459c      	cmp	ip, r3
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x8e>
 80003ba:	18fb      	adds	r3, r7, r3
 80003bc:	f100 32ff 	add.w	r2, r0, #4294967295
 80003c0:	f080 80d6 	bcs.w	8000570 <__udivmoddi4+0x230>
 80003c4:	459c      	cmp	ip, r3
 80003c6:	f240 80d3 	bls.w	8000570 <__udivmoddi4+0x230>
 80003ca:	443b      	add	r3, r7
 80003cc:	3802      	subs	r0, #2
 80003ce:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003d2:	eba3 030c 	sub.w	r3, r3, ip
 80003d6:	2100      	movs	r1, #0
 80003d8:	b11d      	cbz	r5, 80003e2 <__udivmoddi4+0xa2>
 80003da:	40f3      	lsrs	r3, r6
 80003dc:	2200      	movs	r2, #0
 80003de:	e9c5 3200 	strd	r3, r2, [r5]
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d905      	bls.n	80003f6 <__udivmoddi4+0xb6>
 80003ea:	b10d      	cbz	r5, 80003f0 <__udivmoddi4+0xb0>
 80003ec:	e9c5 0100 	strd	r0, r1, [r5]
 80003f0:	2100      	movs	r1, #0
 80003f2:	4608      	mov	r0, r1
 80003f4:	e7f5      	b.n	80003e2 <__udivmoddi4+0xa2>
 80003f6:	fab3 f183 	clz	r1, r3
 80003fa:	2900      	cmp	r1, #0
 80003fc:	d146      	bne.n	800048c <__udivmoddi4+0x14c>
 80003fe:	4573      	cmp	r3, lr
 8000400:	d302      	bcc.n	8000408 <__udivmoddi4+0xc8>
 8000402:	4282      	cmp	r2, r0
 8000404:	f200 8105 	bhi.w	8000612 <__udivmoddi4+0x2d2>
 8000408:	1a84      	subs	r4, r0, r2
 800040a:	eb6e 0203 	sbc.w	r2, lr, r3
 800040e:	2001      	movs	r0, #1
 8000410:	4690      	mov	r8, r2
 8000412:	2d00      	cmp	r5, #0
 8000414:	d0e5      	beq.n	80003e2 <__udivmoddi4+0xa2>
 8000416:	e9c5 4800 	strd	r4, r8, [r5]
 800041a:	e7e2      	b.n	80003e2 <__udivmoddi4+0xa2>
 800041c:	2a00      	cmp	r2, #0
 800041e:	f000 8090 	beq.w	8000542 <__udivmoddi4+0x202>
 8000422:	fab2 f682 	clz	r6, r2
 8000426:	2e00      	cmp	r6, #0
 8000428:	f040 80a4 	bne.w	8000574 <__udivmoddi4+0x234>
 800042c:	1a8a      	subs	r2, r1, r2
 800042e:	0c03      	lsrs	r3, r0, #16
 8000430:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000434:	b280      	uxth	r0, r0
 8000436:	b2bc      	uxth	r4, r7
 8000438:	2101      	movs	r1, #1
 800043a:	fbb2 fcfe 	udiv	ip, r2, lr
 800043e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000442:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000446:	fb04 f20c 	mul.w	r2, r4, ip
 800044a:	429a      	cmp	r2, r3
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x11e>
 800044e:	18fb      	adds	r3, r7, r3
 8000450:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x11c>
 8000456:	429a      	cmp	r2, r3
 8000458:	f200 80e0 	bhi.w	800061c <__udivmoddi4+0x2dc>
 800045c:	46c4      	mov	ip, r8
 800045e:	1a9b      	subs	r3, r3, r2
 8000460:	fbb3 f2fe 	udiv	r2, r3, lr
 8000464:	fb0e 3312 	mls	r3, lr, r2, r3
 8000468:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800046c:	fb02 f404 	mul.w	r4, r2, r4
 8000470:	429c      	cmp	r4, r3
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x144>
 8000474:	18fb      	adds	r3, r7, r3
 8000476:	f102 30ff 	add.w	r0, r2, #4294967295
 800047a:	d202      	bcs.n	8000482 <__udivmoddi4+0x142>
 800047c:	429c      	cmp	r4, r3
 800047e:	f200 80ca 	bhi.w	8000616 <__udivmoddi4+0x2d6>
 8000482:	4602      	mov	r2, r0
 8000484:	1b1b      	subs	r3, r3, r4
 8000486:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800048a:	e7a5      	b.n	80003d8 <__udivmoddi4+0x98>
 800048c:	f1c1 0620 	rsb	r6, r1, #32
 8000490:	408b      	lsls	r3, r1
 8000492:	fa22 f706 	lsr.w	r7, r2, r6
 8000496:	431f      	orrs	r7, r3
 8000498:	fa0e f401 	lsl.w	r4, lr, r1
 800049c:	fa20 f306 	lsr.w	r3, r0, r6
 80004a0:	fa2e fe06 	lsr.w	lr, lr, r6
 80004a4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80004a8:	4323      	orrs	r3, r4
 80004aa:	fa00 f801 	lsl.w	r8, r0, r1
 80004ae:	fa1f fc87 	uxth.w	ip, r7
 80004b2:	fbbe f0f9 	udiv	r0, lr, r9
 80004b6:	0c1c      	lsrs	r4, r3, #16
 80004b8:	fb09 ee10 	mls	lr, r9, r0, lr
 80004bc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80004c0:	fb00 fe0c 	mul.w	lr, r0, ip
 80004c4:	45a6      	cmp	lr, r4
 80004c6:	fa02 f201 	lsl.w	r2, r2, r1
 80004ca:	d909      	bls.n	80004e0 <__udivmoddi4+0x1a0>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f100 3aff 	add.w	sl, r0, #4294967295
 80004d2:	f080 809c 	bcs.w	800060e <__udivmoddi4+0x2ce>
 80004d6:	45a6      	cmp	lr, r4
 80004d8:	f240 8099 	bls.w	800060e <__udivmoddi4+0x2ce>
 80004dc:	3802      	subs	r0, #2
 80004de:	443c      	add	r4, r7
 80004e0:	eba4 040e 	sub.w	r4, r4, lr
 80004e4:	fa1f fe83 	uxth.w	lr, r3
 80004e8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004ec:	fb09 4413 	mls	r4, r9, r3, r4
 80004f0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004f4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004f8:	45a4      	cmp	ip, r4
 80004fa:	d908      	bls.n	800050e <__udivmoddi4+0x1ce>
 80004fc:	193c      	adds	r4, r7, r4
 80004fe:	f103 3eff 	add.w	lr, r3, #4294967295
 8000502:	f080 8082 	bcs.w	800060a <__udivmoddi4+0x2ca>
 8000506:	45a4      	cmp	ip, r4
 8000508:	d97f      	bls.n	800060a <__udivmoddi4+0x2ca>
 800050a:	3b02      	subs	r3, #2
 800050c:	443c      	add	r4, r7
 800050e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000512:	eba4 040c 	sub.w	r4, r4, ip
 8000516:	fba0 ec02 	umull	lr, ip, r0, r2
 800051a:	4564      	cmp	r4, ip
 800051c:	4673      	mov	r3, lr
 800051e:	46e1      	mov	r9, ip
 8000520:	d362      	bcc.n	80005e8 <__udivmoddi4+0x2a8>
 8000522:	d05f      	beq.n	80005e4 <__udivmoddi4+0x2a4>
 8000524:	b15d      	cbz	r5, 800053e <__udivmoddi4+0x1fe>
 8000526:	ebb8 0203 	subs.w	r2, r8, r3
 800052a:	eb64 0409 	sbc.w	r4, r4, r9
 800052e:	fa04 f606 	lsl.w	r6, r4, r6
 8000532:	fa22 f301 	lsr.w	r3, r2, r1
 8000536:	431e      	orrs	r6, r3
 8000538:	40cc      	lsrs	r4, r1
 800053a:	e9c5 6400 	strd	r6, r4, [r5]
 800053e:	2100      	movs	r1, #0
 8000540:	e74f      	b.n	80003e2 <__udivmoddi4+0xa2>
 8000542:	fbb1 fcf2 	udiv	ip, r1, r2
 8000546:	0c01      	lsrs	r1, r0, #16
 8000548:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800054c:	b280      	uxth	r0, r0
 800054e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000552:	463b      	mov	r3, r7
 8000554:	4638      	mov	r0, r7
 8000556:	463c      	mov	r4, r7
 8000558:	46b8      	mov	r8, r7
 800055a:	46be      	mov	lr, r7
 800055c:	2620      	movs	r6, #32
 800055e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000562:	eba2 0208 	sub.w	r2, r2, r8
 8000566:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800056a:	e766      	b.n	800043a <__udivmoddi4+0xfa>
 800056c:	4601      	mov	r1, r0
 800056e:	e718      	b.n	80003a2 <__udivmoddi4+0x62>
 8000570:	4610      	mov	r0, r2
 8000572:	e72c      	b.n	80003ce <__udivmoddi4+0x8e>
 8000574:	f1c6 0220 	rsb	r2, r6, #32
 8000578:	fa2e f302 	lsr.w	r3, lr, r2
 800057c:	40b7      	lsls	r7, r6
 800057e:	40b1      	lsls	r1, r6
 8000580:	fa20 f202 	lsr.w	r2, r0, r2
 8000584:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000588:	430a      	orrs	r2, r1
 800058a:	fbb3 f8fe 	udiv	r8, r3, lr
 800058e:	b2bc      	uxth	r4, r7
 8000590:	fb0e 3318 	mls	r3, lr, r8, r3
 8000594:	0c11      	lsrs	r1, r2, #16
 8000596:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800059a:	fb08 f904 	mul.w	r9, r8, r4
 800059e:	40b0      	lsls	r0, r6
 80005a0:	4589      	cmp	r9, r1
 80005a2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80005a6:	b280      	uxth	r0, r0
 80005a8:	d93e      	bls.n	8000628 <__udivmoddi4+0x2e8>
 80005aa:	1879      	adds	r1, r7, r1
 80005ac:	f108 3cff 	add.w	ip, r8, #4294967295
 80005b0:	d201      	bcs.n	80005b6 <__udivmoddi4+0x276>
 80005b2:	4589      	cmp	r9, r1
 80005b4:	d81f      	bhi.n	80005f6 <__udivmoddi4+0x2b6>
 80005b6:	eba1 0109 	sub.w	r1, r1, r9
 80005ba:	fbb1 f9fe 	udiv	r9, r1, lr
 80005be:	fb09 f804 	mul.w	r8, r9, r4
 80005c2:	fb0e 1119 	mls	r1, lr, r9, r1
 80005c6:	b292      	uxth	r2, r2
 80005c8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005cc:	4542      	cmp	r2, r8
 80005ce:	d229      	bcs.n	8000624 <__udivmoddi4+0x2e4>
 80005d0:	18ba      	adds	r2, r7, r2
 80005d2:	f109 31ff 	add.w	r1, r9, #4294967295
 80005d6:	d2c4      	bcs.n	8000562 <__udivmoddi4+0x222>
 80005d8:	4542      	cmp	r2, r8
 80005da:	d2c2      	bcs.n	8000562 <__udivmoddi4+0x222>
 80005dc:	f1a9 0102 	sub.w	r1, r9, #2
 80005e0:	443a      	add	r2, r7
 80005e2:	e7be      	b.n	8000562 <__udivmoddi4+0x222>
 80005e4:	45f0      	cmp	r8, lr
 80005e6:	d29d      	bcs.n	8000524 <__udivmoddi4+0x1e4>
 80005e8:	ebbe 0302 	subs.w	r3, lr, r2
 80005ec:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005f0:	3801      	subs	r0, #1
 80005f2:	46e1      	mov	r9, ip
 80005f4:	e796      	b.n	8000524 <__udivmoddi4+0x1e4>
 80005f6:	eba7 0909 	sub.w	r9, r7, r9
 80005fa:	4449      	add	r1, r9
 80005fc:	f1a8 0c02 	sub.w	ip, r8, #2
 8000600:	fbb1 f9fe 	udiv	r9, r1, lr
 8000604:	fb09 f804 	mul.w	r8, r9, r4
 8000608:	e7db      	b.n	80005c2 <__udivmoddi4+0x282>
 800060a:	4673      	mov	r3, lr
 800060c:	e77f      	b.n	800050e <__udivmoddi4+0x1ce>
 800060e:	4650      	mov	r0, sl
 8000610:	e766      	b.n	80004e0 <__udivmoddi4+0x1a0>
 8000612:	4608      	mov	r0, r1
 8000614:	e6fd      	b.n	8000412 <__udivmoddi4+0xd2>
 8000616:	443b      	add	r3, r7
 8000618:	3a02      	subs	r2, #2
 800061a:	e733      	b.n	8000484 <__udivmoddi4+0x144>
 800061c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000620:	443b      	add	r3, r7
 8000622:	e71c      	b.n	800045e <__udivmoddi4+0x11e>
 8000624:	4649      	mov	r1, r9
 8000626:	e79c      	b.n	8000562 <__udivmoddi4+0x222>
 8000628:	eba1 0109 	sub.w	r1, r1, r9
 800062c:	46c4      	mov	ip, r8
 800062e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000632:	fb09 f804 	mul.w	r8, r9, r4
 8000636:	e7c4      	b.n	80005c2 <__udivmoddi4+0x282>

08000638 <__aeabi_idiv0>:
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop

0800063c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b088      	sub	sp, #32
 8000640:	af02      	add	r7, sp, #8

	/* USER CODE BEGIN 1 */
	TaskHandle_t task_1_handel=NULL;
 8000642:	2300      	movs	r3, #0
 8000644:	60bb      	str	r3, [r7, #8]
	TaskHandle_t task_2_handel=NULL;
 8000646:	2300      	movs	r3, #0
 8000648:	607b      	str	r3, [r7, #4]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800064a:	f000 fa6b 	bl	8000b24 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800064e:	f000 f863 	bl	8000718 <SystemClock_Config>

	/* Initialize all configured peripherals */
	/* USER CODE BEGIN 2 */

	/* USER CODE BEGIN 2 */
	DWT_CTRL |=(1<<0);
 8000652:	4b27      	ldr	r3, [pc, #156]	@ (80006f0 <main+0xb4>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	4a26      	ldr	r2, [pc, #152]	@ (80006f0 <main+0xb4>)
 8000658:	f043 0301 	orr.w	r3, r3, #1
 800065c:	6013      	str	r3, [r2, #0]

	SEGGER_SYSVIEW_Conf();
 800065e:	f004 f921 	bl	80048a4 <SEGGER_SYSVIEW_Conf>
	SEGGER_SYSVIEW_Start();
 8000662:	f005 fbff 	bl	8005e64 <SEGGER_SYSVIEW_Start>


	status=xTaskCreate(task_1_Handler, "Task_1", 200, "Hello world from task 1", 2, &task_1_handel);
 8000666:	f107 0308 	add.w	r3, r7, #8
 800066a:	9301      	str	r3, [sp, #4]
 800066c:	2302      	movs	r3, #2
 800066e:	9300      	str	r3, [sp, #0]
 8000670:	4b20      	ldr	r3, [pc, #128]	@ (80006f4 <main+0xb8>)
 8000672:	22c8      	movs	r2, #200	@ 0xc8
 8000674:	4920      	ldr	r1, [pc, #128]	@ (80006f8 <main+0xbc>)
 8000676:	4821      	ldr	r0, [pc, #132]	@ (80006fc <main+0xc0>)
 8000678:	f002 fa52 	bl	8002b20 <xTaskCreate>
 800067c:	6178      	str	r0, [r7, #20]
	configASSERT(status==pdPASS);//if task creat fail then code will hang here
 800067e:	697b      	ldr	r3, [r7, #20]
 8000680:	2b01      	cmp	r3, #1
 8000682:	d00b      	beq.n	800069c <main+0x60>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000684:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000688:	f383 8811 	msr	BASEPRI, r3
 800068c:	f3bf 8f6f 	isb	sy
 8000690:	f3bf 8f4f 	dsb	sy
 8000694:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000696:	bf00      	nop
 8000698:	bf00      	nop
 800069a:	e7fd      	b.n	8000698 <main+0x5c>

	status=xTaskCreate(task_2_Handler, "Task_2", 200, "Hello world from task 2", 2, &task_2_handel);
 800069c:	1d3b      	adds	r3, r7, #4
 800069e:	9301      	str	r3, [sp, #4]
 80006a0:	2302      	movs	r3, #2
 80006a2:	9300      	str	r3, [sp, #0]
 80006a4:	4b16      	ldr	r3, [pc, #88]	@ (8000700 <main+0xc4>)
 80006a6:	22c8      	movs	r2, #200	@ 0xc8
 80006a8:	4916      	ldr	r1, [pc, #88]	@ (8000704 <main+0xc8>)
 80006aa:	4817      	ldr	r0, [pc, #92]	@ (8000708 <main+0xcc>)
 80006ac:	f002 fa38 	bl	8002b20 <xTaskCreate>
 80006b0:	6178      	str	r0, [r7, #20]

	configASSERT(status==pdPASS);//if task creation fails, then the code will hang here
 80006b2:	697b      	ldr	r3, [r7, #20]
 80006b4:	2b01      	cmp	r3, #1
 80006b6:	d00b      	beq.n	80006d0 <main+0x94>
	__asm volatile
 80006b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80006bc:	f383 8811 	msr	BASEPRI, r3
 80006c0:	f3bf 8f6f 	isb	sy
 80006c4:	f3bf 8f4f 	dsb	sy
 80006c8:	60fb      	str	r3, [r7, #12]
}
 80006ca:	bf00      	nop
 80006cc:	bf00      	nop
 80006ce:	e7fd      	b.n	80006cc <main+0x90>

	vTaskStartScheduler();//start the freeRTOS scheduler
 80006d0:	f002 fbcc 	bl	8002e6c <vTaskStartScheduler>


	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 80006d4:	f001 faa0 	bl	8001c18 <osKernelInitialize>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of defaultTask */
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80006d8:	4a0c      	ldr	r2, [pc, #48]	@ (800070c <main+0xd0>)
 80006da:	2100      	movs	r1, #0
 80006dc:	480c      	ldr	r0, [pc, #48]	@ (8000710 <main+0xd4>)
 80006de:	f001 fae5 	bl	8001cac <osThreadNew>
 80006e2:	4603      	mov	r3, r0
 80006e4:	4a0b      	ldr	r2, [pc, #44]	@ (8000714 <main+0xd8>)
 80006e6:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 80006e8:	f001 faba 	bl	8001c60 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 80006ec:	bf00      	nop
 80006ee:	e7fd      	b.n	80006ec <main+0xb0>
 80006f0:	e0001000 	.word	0xe0001000
 80006f4:	080072d8 	.word	0x080072d8
 80006f8:	080072f0 	.word	0x080072f0
 80006fc:	080007ed 	.word	0x080007ed
 8000700:	080072f8 	.word	0x080072f8
 8000704:	08007310 	.word	0x08007310
 8000708:	08000829 	.word	0x08000829
 800070c:	080073ec 	.word	0x080073ec
 8000710:	08000865 	.word	0x08000865
 8000714:	2000007c 	.word	0x2000007c

08000718 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b094      	sub	sp, #80	@ 0x50
 800071c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800071e:	f107 0320 	add.w	r3, r7, #32
 8000722:	2230      	movs	r2, #48	@ 0x30
 8000724:	2100      	movs	r1, #0
 8000726:	4618      	mov	r0, r3
 8000728:	f006 f8e8 	bl	80068fc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800072c:	f107 030c 	add.w	r3, r7, #12
 8000730:	2200      	movs	r2, #0
 8000732:	601a      	str	r2, [r3, #0]
 8000734:	605a      	str	r2, [r3, #4]
 8000736:	609a      	str	r2, [r3, #8]
 8000738:	60da      	str	r2, [r3, #12]
 800073a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800073c:	2300      	movs	r3, #0
 800073e:	60bb      	str	r3, [r7, #8]
 8000740:	4b28      	ldr	r3, [pc, #160]	@ (80007e4 <SystemClock_Config+0xcc>)
 8000742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000744:	4a27      	ldr	r2, [pc, #156]	@ (80007e4 <SystemClock_Config+0xcc>)
 8000746:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800074a:	6413      	str	r3, [r2, #64]	@ 0x40
 800074c:	4b25      	ldr	r3, [pc, #148]	@ (80007e4 <SystemClock_Config+0xcc>)
 800074e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000750:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000754:	60bb      	str	r3, [r7, #8]
 8000756:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000758:	2300      	movs	r3, #0
 800075a:	607b      	str	r3, [r7, #4]
 800075c:	4b22      	ldr	r3, [pc, #136]	@ (80007e8 <SystemClock_Config+0xd0>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	4a21      	ldr	r2, [pc, #132]	@ (80007e8 <SystemClock_Config+0xd0>)
 8000762:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000766:	6013      	str	r3, [r2, #0]
 8000768:	4b1f      	ldr	r3, [pc, #124]	@ (80007e8 <SystemClock_Config+0xd0>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000770:	607b      	str	r3, [r7, #4]
 8000772:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000774:	2302      	movs	r3, #2
 8000776:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000778:	2301      	movs	r3, #1
 800077a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800077c:	2310      	movs	r3, #16
 800077e:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000780:	2302      	movs	r3, #2
 8000782:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000784:	2300      	movs	r3, #0
 8000786:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000788:	2308      	movs	r3, #8
 800078a:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 50;
 800078c:	2332      	movs	r3, #50	@ 0x32
 800078e:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000790:	2304      	movs	r3, #4
 8000792:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8000794:	2304      	movs	r3, #4
 8000796:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000798:	f107 0320 	add.w	r3, r7, #32
 800079c:	4618      	mov	r0, r3
 800079e:	f000 fae5 	bl	8000d6c <HAL_RCC_OscConfig>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <SystemClock_Config+0x94>
	{
		Error_Handler();
 80007a8:	f000 f876 	bl	8000898 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ac:	230f      	movs	r3, #15
 80007ae:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007b0:	2302      	movs	r3, #2
 80007b2:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007b4:	2300      	movs	r3, #0
 80007b6:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007b8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80007bc:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007be:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007c2:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007c4:	f107 030c 	add.w	r3, r7, #12
 80007c8:	2100      	movs	r1, #0
 80007ca:	4618      	mov	r0, r3
 80007cc:	f000 fd46 	bl	800125c <HAL_RCC_ClockConfig>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <SystemClock_Config+0xc2>
	{
		Error_Handler();
 80007d6:	f000 f85f 	bl	8000898 <Error_Handler>
	}
}
 80007da:	bf00      	nop
 80007dc:	3750      	adds	r7, #80	@ 0x50
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	40023800 	.word	0x40023800
 80007e8:	40007000 	.word	0x40007000

080007ec <task_1_Handler>:

/* USER CODE BEGIN 4 */

static void task_1_Handler (void* arg){
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b09c      	sub	sp, #112	@ 0x70
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]

	while(1){

//		printf("%s\n",(char*)arg);

		sniprintf(msg,100,"%s\n",(char*)arg);
 80007f4:	f107 000c 	add.w	r0, r7, #12
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	4a09      	ldr	r2, [pc, #36]	@ (8000820 <task_1_Handler+0x34>)
 80007fc:	2164      	movs	r1, #100	@ 0x64
 80007fe:	f006 f837 	bl	8006870 <sniprintf>
		SEGGER_SYSVIEW_PrintfTarget(msg);
 8000802:	f107 030c 	add.w	r3, r7, #12
 8000806:	4618      	mov	r0, r3
 8000808:	f005 ffc2 	bl	8006790 <SEGGER_SYSVIEW_PrintfTarget>

		taskYIELD();
 800080c:	4b05      	ldr	r3, [pc, #20]	@ (8000824 <task_1_Handler+0x38>)
 800080e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000812:	601a      	str	r2, [r3, #0]
 8000814:	f3bf 8f4f 	dsb	sy
 8000818:	f3bf 8f6f 	isb	sy
		sniprintf(msg,100,"%s\n",(char*)arg);
 800081c:	bf00      	nop
 800081e:	e7e9      	b.n	80007f4 <task_1_Handler+0x8>
 8000820:	08007318 	.word	0x08007318
 8000824:	e000ed04 	.word	0xe000ed04

08000828 <task_2_Handler>:


	}
}

static void task_2_Handler (void* arg){
 8000828:	b580      	push	{r7, lr}
 800082a:	b09c      	sub	sp, #112	@ 0x70
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]

	while(1){

//		printf("%s\n",(char*)arg);

		sniprintf(msg,100,"%s\n",(char*)arg);
 8000830:	f107 000c 	add.w	r0, r7, #12
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	4a09      	ldr	r2, [pc, #36]	@ (800085c <task_2_Handler+0x34>)
 8000838:	2164      	movs	r1, #100	@ 0x64
 800083a:	f006 f819 	bl	8006870 <sniprintf>
		SEGGER_SYSVIEW_PrintfTarget(msg);
 800083e:	f107 030c 	add.w	r3, r7, #12
 8000842:	4618      	mov	r0, r3
 8000844:	f005 ffa4 	bl	8006790 <SEGGER_SYSVIEW_PrintfTarget>

		taskYIELD();
 8000848:	4b05      	ldr	r3, [pc, #20]	@ (8000860 <task_2_Handler+0x38>)
 800084a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800084e:	601a      	str	r2, [r3, #0]
 8000850:	f3bf 8f4f 	dsb	sy
 8000854:	f3bf 8f6f 	isb	sy
		sniprintf(msg,100,"%s\n",(char*)arg);
 8000858:	bf00      	nop
 800085a:	e7e9      	b.n	8000830 <task_2_Handler+0x8>
 800085c:	08007318 	.word	0x08007318
 8000860:	e000ed04 	.word	0xe000ed04

08000864 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for(;;)
	{
		osDelay(1);
 800086c:	2001      	movs	r0, #1
 800086e:	f001 faaf 	bl	8001dd0 <osDelay>
 8000872:	e7fb      	b.n	800086c <StartDefaultTask+0x8>

08000874 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a04      	ldr	r2, [pc, #16]	@ (8000894 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000882:	4293      	cmp	r3, r2
 8000884:	d101      	bne.n	800088a <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		HAL_IncTick();
 8000886:	f000 f96f 	bl	8000b68 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 800088a:	bf00      	nop
 800088c:	3708      	adds	r7, #8
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	40001000 	.word	0x40001000

08000898 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800089c:	b672      	cpsid	i
}
 800089e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80008a0:	bf00      	nop
 80008a2:	e7fd      	b.n	80008a0 <Error_Handler+0x8>

080008a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	607b      	str	r3, [r7, #4]
 80008ae:	4b12      	ldr	r3, [pc, #72]	@ (80008f8 <HAL_MspInit+0x54>)
 80008b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008b2:	4a11      	ldr	r2, [pc, #68]	@ (80008f8 <HAL_MspInit+0x54>)
 80008b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80008ba:	4b0f      	ldr	r3, [pc, #60]	@ (80008f8 <HAL_MspInit+0x54>)
 80008bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008c2:	607b      	str	r3, [r7, #4]
 80008c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	603b      	str	r3, [r7, #0]
 80008ca:	4b0b      	ldr	r3, [pc, #44]	@ (80008f8 <HAL_MspInit+0x54>)
 80008cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008ce:	4a0a      	ldr	r2, [pc, #40]	@ (80008f8 <HAL_MspInit+0x54>)
 80008d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80008d6:	4b08      	ldr	r3, [pc, #32]	@ (80008f8 <HAL_MspInit+0x54>)
 80008d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008de:	603b      	str	r3, [r7, #0]
 80008e0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008e2:	2200      	movs	r2, #0
 80008e4:	210f      	movs	r1, #15
 80008e6:	f06f 0001 	mvn.w	r0, #1
 80008ea:	f000 fa15 	bl	8000d18 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

//  vInitPrioGroupValue();
  /* USER CODE END MspInit 1 */
}
 80008ee:	bf00      	nop
 80008f0:	3708      	adds	r7, #8
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	40023800 	.word	0x40023800

080008fc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b08e      	sub	sp, #56	@ 0x38
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000904:	2300      	movs	r3, #0
 8000906:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000908:	2300      	movs	r3, #0
 800090a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800090c:	2300      	movs	r3, #0
 800090e:	60fb      	str	r3, [r7, #12]
 8000910:	4b33      	ldr	r3, [pc, #204]	@ (80009e0 <HAL_InitTick+0xe4>)
 8000912:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000914:	4a32      	ldr	r2, [pc, #200]	@ (80009e0 <HAL_InitTick+0xe4>)
 8000916:	f043 0310 	orr.w	r3, r3, #16
 800091a:	6413      	str	r3, [r2, #64]	@ 0x40
 800091c:	4b30      	ldr	r3, [pc, #192]	@ (80009e0 <HAL_InitTick+0xe4>)
 800091e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000920:	f003 0310 	and.w	r3, r3, #16
 8000924:	60fb      	str	r3, [r7, #12]
 8000926:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000928:	f107 0210 	add.w	r2, r7, #16
 800092c:	f107 0314 	add.w	r3, r7, #20
 8000930:	4611      	mov	r1, r2
 8000932:	4618      	mov	r0, r3
 8000934:	f000 fe5e 	bl	80015f4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000938:	6a3b      	ldr	r3, [r7, #32]
 800093a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800093c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800093e:	2b00      	cmp	r3, #0
 8000940:	d103      	bne.n	800094a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000942:	f000 fe43 	bl	80015cc <HAL_RCC_GetPCLK1Freq>
 8000946:	6378      	str	r0, [r7, #52]	@ 0x34
 8000948:	e004      	b.n	8000954 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800094a:	f000 fe3f 	bl	80015cc <HAL_RCC_GetPCLK1Freq>
 800094e:	4603      	mov	r3, r0
 8000950:	005b      	lsls	r3, r3, #1
 8000952:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000954:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000956:	4a23      	ldr	r2, [pc, #140]	@ (80009e4 <HAL_InitTick+0xe8>)
 8000958:	fba2 2303 	umull	r2, r3, r2, r3
 800095c:	0c9b      	lsrs	r3, r3, #18
 800095e:	3b01      	subs	r3, #1
 8000960:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000962:	4b21      	ldr	r3, [pc, #132]	@ (80009e8 <HAL_InitTick+0xec>)
 8000964:	4a21      	ldr	r2, [pc, #132]	@ (80009ec <HAL_InitTick+0xf0>)
 8000966:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000968:	4b1f      	ldr	r3, [pc, #124]	@ (80009e8 <HAL_InitTick+0xec>)
 800096a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800096e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000970:	4a1d      	ldr	r2, [pc, #116]	@ (80009e8 <HAL_InitTick+0xec>)
 8000972:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000974:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000976:	4b1c      	ldr	r3, [pc, #112]	@ (80009e8 <HAL_InitTick+0xec>)
 8000978:	2200      	movs	r2, #0
 800097a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800097c:	4b1a      	ldr	r3, [pc, #104]	@ (80009e8 <HAL_InitTick+0xec>)
 800097e:	2200      	movs	r2, #0
 8000980:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000982:	4b19      	ldr	r3, [pc, #100]	@ (80009e8 <HAL_InitTick+0xec>)
 8000984:	2200      	movs	r2, #0
 8000986:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000988:	4817      	ldr	r0, [pc, #92]	@ (80009e8 <HAL_InitTick+0xec>)
 800098a:	f000 fe65 	bl	8001658 <HAL_TIM_Base_Init>
 800098e:	4603      	mov	r3, r0
 8000990:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000994:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000998:	2b00      	cmp	r3, #0
 800099a:	d11b      	bne.n	80009d4 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800099c:	4812      	ldr	r0, [pc, #72]	@ (80009e8 <HAL_InitTick+0xec>)
 800099e:	f000 feb5 	bl	800170c <HAL_TIM_Base_Start_IT>
 80009a2:	4603      	mov	r3, r0
 80009a4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80009a8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d111      	bne.n	80009d4 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80009b0:	2036      	movs	r0, #54	@ 0x36
 80009b2:	f000 f9cd 	bl	8000d50 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	2b0f      	cmp	r3, #15
 80009ba:	d808      	bhi.n	80009ce <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80009bc:	2200      	movs	r2, #0
 80009be:	6879      	ldr	r1, [r7, #4]
 80009c0:	2036      	movs	r0, #54	@ 0x36
 80009c2:	f000 f9a9 	bl	8000d18 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009c6:	4a0a      	ldr	r2, [pc, #40]	@ (80009f0 <HAL_InitTick+0xf4>)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	6013      	str	r3, [r2, #0]
 80009cc:	e002      	b.n	80009d4 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80009ce:	2301      	movs	r3, #1
 80009d0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80009d4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80009d8:	4618      	mov	r0, r3
 80009da:	3738      	adds	r7, #56	@ 0x38
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	40023800 	.word	0x40023800
 80009e4:	431bde83 	.word	0x431bde83
 80009e8:	20000080 	.word	0x20000080
 80009ec:	40001000 	.word	0x40001000
 80009f0:	20000004 	.word	0x20000004

080009f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009f8:	bf00      	nop
 80009fa:	e7fd      	b.n	80009f8 <NMI_Handler+0x4>

080009fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a00:	bf00      	nop
 8000a02:	e7fd      	b.n	8000a00 <HardFault_Handler+0x4>

08000a04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a08:	bf00      	nop
 8000a0a:	e7fd      	b.n	8000a08 <MemManage_Handler+0x4>

08000a0c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a10:	bf00      	nop
 8000a12:	e7fd      	b.n	8000a10 <BusFault_Handler+0x4>

08000a14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a18:	bf00      	nop
 8000a1a:	e7fd      	b.n	8000a18 <UsageFault_Handler+0x4>

08000a1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a20:	bf00      	nop
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
	...

08000a2c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000a30:	4802      	ldr	r0, [pc, #8]	@ (8000a3c <TIM6_DAC_IRQHandler+0x10>)
 8000a32:	f000 fedb 	bl	80017ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000a36:	bf00      	nop
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	20000080 	.word	0x20000080

08000a40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b086      	sub	sp, #24
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a48:	4a14      	ldr	r2, [pc, #80]	@ (8000a9c <_sbrk+0x5c>)
 8000a4a:	4b15      	ldr	r3, [pc, #84]	@ (8000aa0 <_sbrk+0x60>)
 8000a4c:	1ad3      	subs	r3, r2, r3
 8000a4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a50:	697b      	ldr	r3, [r7, #20]
 8000a52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a54:	4b13      	ldr	r3, [pc, #76]	@ (8000aa4 <_sbrk+0x64>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d102      	bne.n	8000a62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a5c:	4b11      	ldr	r3, [pc, #68]	@ (8000aa4 <_sbrk+0x64>)
 8000a5e:	4a12      	ldr	r2, [pc, #72]	@ (8000aa8 <_sbrk+0x68>)
 8000a60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a62:	4b10      	ldr	r3, [pc, #64]	@ (8000aa4 <_sbrk+0x64>)
 8000a64:	681a      	ldr	r2, [r3, #0]
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	4413      	add	r3, r2
 8000a6a:	693a      	ldr	r2, [r7, #16]
 8000a6c:	429a      	cmp	r2, r3
 8000a6e:	d207      	bcs.n	8000a80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a70:	f005 ffaa 	bl	80069c8 <__errno>
 8000a74:	4603      	mov	r3, r0
 8000a76:	220c      	movs	r2, #12
 8000a78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a7e:	e009      	b.n	8000a94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a80:	4b08      	ldr	r3, [pc, #32]	@ (8000aa4 <_sbrk+0x64>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a86:	4b07      	ldr	r3, [pc, #28]	@ (8000aa4 <_sbrk+0x64>)
 8000a88:	681a      	ldr	r2, [r3, #0]
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	4413      	add	r3, r2
 8000a8e:	4a05      	ldr	r2, [pc, #20]	@ (8000aa4 <_sbrk+0x64>)
 8000a90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a92:	68fb      	ldr	r3, [r7, #12]
}
 8000a94:	4618      	mov	r0, r3
 8000a96:	3718      	adds	r7, #24
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	20020000 	.word	0x20020000
 8000aa0:	00000400 	.word	0x00000400
 8000aa4:	200000c8 	.word	0x200000c8
 8000aa8:	20006278 	.word	0x20006278

08000aac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ab0:	4b06      	ldr	r3, [pc, #24]	@ (8000acc <SystemInit+0x20>)
 8000ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ab6:	4a05      	ldr	r2, [pc, #20]	@ (8000acc <SystemInit+0x20>)
 8000ab8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000abc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ac0:	bf00      	nop
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	e000ed00 	.word	0xe000ed00

08000ad0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ad0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b08 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000ad4:	f7ff ffea 	bl	8000aac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ad8:	480c      	ldr	r0, [pc, #48]	@ (8000b0c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ada:	490d      	ldr	r1, [pc, #52]	@ (8000b10 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000adc:	4a0d      	ldr	r2, [pc, #52]	@ (8000b14 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ade:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ae0:	e002      	b.n	8000ae8 <LoopCopyDataInit>

08000ae2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ae2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ae4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ae6:	3304      	adds	r3, #4

08000ae8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ae8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000aec:	d3f9      	bcc.n	8000ae2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aee:	4a0a      	ldr	r2, [pc, #40]	@ (8000b18 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000af0:	4c0a      	ldr	r4, [pc, #40]	@ (8000b1c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000af2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000af4:	e001      	b.n	8000afa <LoopFillZerobss>

08000af6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000af6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000af8:	3204      	adds	r2, #4

08000afa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000afa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000afc:	d3fb      	bcc.n	8000af6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000afe:	f005 ff69 	bl	80069d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b02:	f7ff fd9b 	bl	800063c <main>
  bx  lr    
 8000b06:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000b08:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b10:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000b14:	08007490 	.word	0x08007490
  ldr r2, =_sbss
 8000b18:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000b1c:	20006278 	.word	0x20006278

08000b20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b20:	e7fe      	b.n	8000b20 <ADC_IRQHandler>
	...

08000b24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b28:	4b0e      	ldr	r3, [pc, #56]	@ (8000b64 <HAL_Init+0x40>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a0d      	ldr	r2, [pc, #52]	@ (8000b64 <HAL_Init+0x40>)
 8000b2e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b34:	4b0b      	ldr	r3, [pc, #44]	@ (8000b64 <HAL_Init+0x40>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a0a      	ldr	r2, [pc, #40]	@ (8000b64 <HAL_Init+0x40>)
 8000b3a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b40:	4b08      	ldr	r3, [pc, #32]	@ (8000b64 <HAL_Init+0x40>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a07      	ldr	r2, [pc, #28]	@ (8000b64 <HAL_Init+0x40>)
 8000b46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b4c:	2003      	movs	r0, #3
 8000b4e:	f000 f8d8 	bl	8000d02 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b52:	200f      	movs	r0, #15
 8000b54:	f7ff fed2 	bl	80008fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b58:	f7ff fea4 	bl	80008a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b5c:	2300      	movs	r3, #0
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	40023c00 	.word	0x40023c00

08000b68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b6c:	4b06      	ldr	r3, [pc, #24]	@ (8000b88 <HAL_IncTick+0x20>)
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	461a      	mov	r2, r3
 8000b72:	4b06      	ldr	r3, [pc, #24]	@ (8000b8c <HAL_IncTick+0x24>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	4413      	add	r3, r2
 8000b78:	4a04      	ldr	r2, [pc, #16]	@ (8000b8c <HAL_IncTick+0x24>)
 8000b7a:	6013      	str	r3, [r2, #0]
}
 8000b7c:	bf00      	nop
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	20000008 	.word	0x20000008
 8000b8c:	200000cc 	.word	0x200000cc

08000b90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  return uwTick;
 8000b94:	4b03      	ldr	r3, [pc, #12]	@ (8000ba4 <HAL_GetTick+0x14>)
 8000b96:	681b      	ldr	r3, [r3, #0]
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	200000cc 	.word	0x200000cc

08000ba8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b085      	sub	sp, #20
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	f003 0307 	and.w	r3, r3, #7
 8000bb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bb8:	4b0c      	ldr	r3, [pc, #48]	@ (8000bec <__NVIC_SetPriorityGrouping+0x44>)
 8000bba:	68db      	ldr	r3, [r3, #12]
 8000bbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bbe:	68ba      	ldr	r2, [r7, #8]
 8000bc0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bcc:	68bb      	ldr	r3, [r7, #8]
 8000bce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bd0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000bd4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bda:	4a04      	ldr	r2, [pc, #16]	@ (8000bec <__NVIC_SetPriorityGrouping+0x44>)
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	60d3      	str	r3, [r2, #12]
}
 8000be0:	bf00      	nop
 8000be2:	3714      	adds	r7, #20
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr
 8000bec:	e000ed00 	.word	0xe000ed00

08000bf0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bf4:	4b04      	ldr	r3, [pc, #16]	@ (8000c08 <__NVIC_GetPriorityGrouping+0x18>)
 8000bf6:	68db      	ldr	r3, [r3, #12]
 8000bf8:	0a1b      	lsrs	r3, r3, #8
 8000bfa:	f003 0307 	and.w	r3, r3, #7
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr
 8000c08:	e000ed00 	.word	0xe000ed00

08000c0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	4603      	mov	r3, r0
 8000c14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	db0b      	blt.n	8000c36 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c1e:	79fb      	ldrb	r3, [r7, #7]
 8000c20:	f003 021f 	and.w	r2, r3, #31
 8000c24:	4907      	ldr	r1, [pc, #28]	@ (8000c44 <__NVIC_EnableIRQ+0x38>)
 8000c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2a:	095b      	lsrs	r3, r3, #5
 8000c2c:	2001      	movs	r0, #1
 8000c2e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c36:	bf00      	nop
 8000c38:	370c      	adds	r7, #12
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	e000e100 	.word	0xe000e100

08000c48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	4603      	mov	r3, r0
 8000c50:	6039      	str	r1, [r7, #0]
 8000c52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	db0a      	blt.n	8000c72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	b2da      	uxtb	r2, r3
 8000c60:	490c      	ldr	r1, [pc, #48]	@ (8000c94 <__NVIC_SetPriority+0x4c>)
 8000c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c66:	0112      	lsls	r2, r2, #4
 8000c68:	b2d2      	uxtb	r2, r2
 8000c6a:	440b      	add	r3, r1
 8000c6c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c70:	e00a      	b.n	8000c88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	b2da      	uxtb	r2, r3
 8000c76:	4908      	ldr	r1, [pc, #32]	@ (8000c98 <__NVIC_SetPriority+0x50>)
 8000c78:	79fb      	ldrb	r3, [r7, #7]
 8000c7a:	f003 030f 	and.w	r3, r3, #15
 8000c7e:	3b04      	subs	r3, #4
 8000c80:	0112      	lsls	r2, r2, #4
 8000c82:	b2d2      	uxtb	r2, r2
 8000c84:	440b      	add	r3, r1
 8000c86:	761a      	strb	r2, [r3, #24]
}
 8000c88:	bf00      	nop
 8000c8a:	370c      	adds	r7, #12
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr
 8000c94:	e000e100 	.word	0xe000e100
 8000c98:	e000ed00 	.word	0xe000ed00

08000c9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b089      	sub	sp, #36	@ 0x24
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	60f8      	str	r0, [r7, #12]
 8000ca4:	60b9      	str	r1, [r7, #8]
 8000ca6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	f003 0307 	and.w	r3, r3, #7
 8000cae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cb0:	69fb      	ldr	r3, [r7, #28]
 8000cb2:	f1c3 0307 	rsb	r3, r3, #7
 8000cb6:	2b04      	cmp	r3, #4
 8000cb8:	bf28      	it	cs
 8000cba:	2304      	movcs	r3, #4
 8000cbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cbe:	69fb      	ldr	r3, [r7, #28]
 8000cc0:	3304      	adds	r3, #4
 8000cc2:	2b06      	cmp	r3, #6
 8000cc4:	d902      	bls.n	8000ccc <NVIC_EncodePriority+0x30>
 8000cc6:	69fb      	ldr	r3, [r7, #28]
 8000cc8:	3b03      	subs	r3, #3
 8000cca:	e000      	b.n	8000cce <NVIC_EncodePriority+0x32>
 8000ccc:	2300      	movs	r3, #0
 8000cce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cd0:	f04f 32ff 	mov.w	r2, #4294967295
 8000cd4:	69bb      	ldr	r3, [r7, #24]
 8000cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cda:	43da      	mvns	r2, r3
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	401a      	ands	r2, r3
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ce4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	fa01 f303 	lsl.w	r3, r1, r3
 8000cee:	43d9      	mvns	r1, r3
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cf4:	4313      	orrs	r3, r2
         );
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	3724      	adds	r7, #36	@ 0x24
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr

08000d02 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d02:	b580      	push	{r7, lr}
 8000d04:	b082      	sub	sp, #8
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d0a:	6878      	ldr	r0, [r7, #4]
 8000d0c:	f7ff ff4c 	bl	8000ba8 <__NVIC_SetPriorityGrouping>
}
 8000d10:	bf00      	nop
 8000d12:	3708      	adds	r7, #8
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}

08000d18 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b086      	sub	sp, #24
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	4603      	mov	r3, r0
 8000d20:	60b9      	str	r1, [r7, #8]
 8000d22:	607a      	str	r2, [r7, #4]
 8000d24:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d26:	2300      	movs	r3, #0
 8000d28:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d2a:	f7ff ff61 	bl	8000bf0 <__NVIC_GetPriorityGrouping>
 8000d2e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d30:	687a      	ldr	r2, [r7, #4]
 8000d32:	68b9      	ldr	r1, [r7, #8]
 8000d34:	6978      	ldr	r0, [r7, #20]
 8000d36:	f7ff ffb1 	bl	8000c9c <NVIC_EncodePriority>
 8000d3a:	4602      	mov	r2, r0
 8000d3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d40:	4611      	mov	r1, r2
 8000d42:	4618      	mov	r0, r3
 8000d44:	f7ff ff80 	bl	8000c48 <__NVIC_SetPriority>
}
 8000d48:	bf00      	nop
 8000d4a:	3718      	adds	r7, #24
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}

08000d50 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	4603      	mov	r3, r0
 8000d58:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f7ff ff54 	bl	8000c0c <__NVIC_EnableIRQ>
}
 8000d64:	bf00      	nop
 8000d66:	3708      	adds	r7, #8
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}

08000d6c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b086      	sub	sp, #24
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d101      	bne.n	8000d7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	e267      	b.n	800124e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f003 0301 	and.w	r3, r3, #1
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d075      	beq.n	8000e76 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000d8a:	4b88      	ldr	r3, [pc, #544]	@ (8000fac <HAL_RCC_OscConfig+0x240>)
 8000d8c:	689b      	ldr	r3, [r3, #8]
 8000d8e:	f003 030c 	and.w	r3, r3, #12
 8000d92:	2b04      	cmp	r3, #4
 8000d94:	d00c      	beq.n	8000db0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000d96:	4b85      	ldr	r3, [pc, #532]	@ (8000fac <HAL_RCC_OscConfig+0x240>)
 8000d98:	689b      	ldr	r3, [r3, #8]
 8000d9a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000d9e:	2b08      	cmp	r3, #8
 8000da0:	d112      	bne.n	8000dc8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000da2:	4b82      	ldr	r3, [pc, #520]	@ (8000fac <HAL_RCC_OscConfig+0x240>)
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000daa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8000dae:	d10b      	bne.n	8000dc8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000db0:	4b7e      	ldr	r3, [pc, #504]	@ (8000fac <HAL_RCC_OscConfig+0x240>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d05b      	beq.n	8000e74 <HAL_RCC_OscConfig+0x108>
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d157      	bne.n	8000e74 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	e242      	b.n	800124e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000dd0:	d106      	bne.n	8000de0 <HAL_RCC_OscConfig+0x74>
 8000dd2:	4b76      	ldr	r3, [pc, #472]	@ (8000fac <HAL_RCC_OscConfig+0x240>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4a75      	ldr	r2, [pc, #468]	@ (8000fac <HAL_RCC_OscConfig+0x240>)
 8000dd8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ddc:	6013      	str	r3, [r2, #0]
 8000dde:	e01d      	b.n	8000e1c <HAL_RCC_OscConfig+0xb0>
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000de8:	d10c      	bne.n	8000e04 <HAL_RCC_OscConfig+0x98>
 8000dea:	4b70      	ldr	r3, [pc, #448]	@ (8000fac <HAL_RCC_OscConfig+0x240>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4a6f      	ldr	r2, [pc, #444]	@ (8000fac <HAL_RCC_OscConfig+0x240>)
 8000df0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000df4:	6013      	str	r3, [r2, #0]
 8000df6:	4b6d      	ldr	r3, [pc, #436]	@ (8000fac <HAL_RCC_OscConfig+0x240>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4a6c      	ldr	r2, [pc, #432]	@ (8000fac <HAL_RCC_OscConfig+0x240>)
 8000dfc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e00:	6013      	str	r3, [r2, #0]
 8000e02:	e00b      	b.n	8000e1c <HAL_RCC_OscConfig+0xb0>
 8000e04:	4b69      	ldr	r3, [pc, #420]	@ (8000fac <HAL_RCC_OscConfig+0x240>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a68      	ldr	r2, [pc, #416]	@ (8000fac <HAL_RCC_OscConfig+0x240>)
 8000e0a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000e0e:	6013      	str	r3, [r2, #0]
 8000e10:	4b66      	ldr	r3, [pc, #408]	@ (8000fac <HAL_RCC_OscConfig+0x240>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a65      	ldr	r2, [pc, #404]	@ (8000fac <HAL_RCC_OscConfig+0x240>)
 8000e16:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d013      	beq.n	8000e4c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e24:	f7ff feb4 	bl	8000b90 <HAL_GetTick>
 8000e28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e2a:	e008      	b.n	8000e3e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e2c:	f7ff feb0 	bl	8000b90 <HAL_GetTick>
 8000e30:	4602      	mov	r2, r0
 8000e32:	693b      	ldr	r3, [r7, #16]
 8000e34:	1ad3      	subs	r3, r2, r3
 8000e36:	2b64      	cmp	r3, #100	@ 0x64
 8000e38:	d901      	bls.n	8000e3e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000e3a:	2303      	movs	r3, #3
 8000e3c:	e207      	b.n	800124e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e3e:	4b5b      	ldr	r3, [pc, #364]	@ (8000fac <HAL_RCC_OscConfig+0x240>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d0f0      	beq.n	8000e2c <HAL_RCC_OscConfig+0xc0>
 8000e4a:	e014      	b.n	8000e76 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e4c:	f7ff fea0 	bl	8000b90 <HAL_GetTick>
 8000e50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e52:	e008      	b.n	8000e66 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e54:	f7ff fe9c 	bl	8000b90 <HAL_GetTick>
 8000e58:	4602      	mov	r2, r0
 8000e5a:	693b      	ldr	r3, [r7, #16]
 8000e5c:	1ad3      	subs	r3, r2, r3
 8000e5e:	2b64      	cmp	r3, #100	@ 0x64
 8000e60:	d901      	bls.n	8000e66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000e62:	2303      	movs	r3, #3
 8000e64:	e1f3      	b.n	800124e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e66:	4b51      	ldr	r3, [pc, #324]	@ (8000fac <HAL_RCC_OscConfig+0x240>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d1f0      	bne.n	8000e54 <HAL_RCC_OscConfig+0xe8>
 8000e72:	e000      	b.n	8000e76 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f003 0302 	and.w	r3, r3, #2
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d063      	beq.n	8000f4a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8000e82:	4b4a      	ldr	r3, [pc, #296]	@ (8000fac <HAL_RCC_OscConfig+0x240>)
 8000e84:	689b      	ldr	r3, [r3, #8]
 8000e86:	f003 030c 	and.w	r3, r3, #12
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d00b      	beq.n	8000ea6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000e8e:	4b47      	ldr	r3, [pc, #284]	@ (8000fac <HAL_RCC_OscConfig+0x240>)
 8000e90:	689b      	ldr	r3, [r3, #8]
 8000e92:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8000e96:	2b08      	cmp	r3, #8
 8000e98:	d11c      	bne.n	8000ed4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000e9a:	4b44      	ldr	r3, [pc, #272]	@ (8000fac <HAL_RCC_OscConfig+0x240>)
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d116      	bne.n	8000ed4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ea6:	4b41      	ldr	r3, [pc, #260]	@ (8000fac <HAL_RCC_OscConfig+0x240>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f003 0302 	and.w	r3, r3, #2
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d005      	beq.n	8000ebe <HAL_RCC_OscConfig+0x152>
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	68db      	ldr	r3, [r3, #12]
 8000eb6:	2b01      	cmp	r3, #1
 8000eb8:	d001      	beq.n	8000ebe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	e1c7      	b.n	800124e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ebe:	4b3b      	ldr	r3, [pc, #236]	@ (8000fac <HAL_RCC_OscConfig+0x240>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	691b      	ldr	r3, [r3, #16]
 8000eca:	00db      	lsls	r3, r3, #3
 8000ecc:	4937      	ldr	r1, [pc, #220]	@ (8000fac <HAL_RCC_OscConfig+0x240>)
 8000ece:	4313      	orrs	r3, r2
 8000ed0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ed2:	e03a      	b.n	8000f4a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	68db      	ldr	r3, [r3, #12]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d020      	beq.n	8000f1e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000edc:	4b34      	ldr	r3, [pc, #208]	@ (8000fb0 <HAL_RCC_OscConfig+0x244>)
 8000ede:	2201      	movs	r2, #1
 8000ee0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ee2:	f7ff fe55 	bl	8000b90 <HAL_GetTick>
 8000ee6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ee8:	e008      	b.n	8000efc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000eea:	f7ff fe51 	bl	8000b90 <HAL_GetTick>
 8000eee:	4602      	mov	r2, r0
 8000ef0:	693b      	ldr	r3, [r7, #16]
 8000ef2:	1ad3      	subs	r3, r2, r3
 8000ef4:	2b02      	cmp	r3, #2
 8000ef6:	d901      	bls.n	8000efc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000ef8:	2303      	movs	r3, #3
 8000efa:	e1a8      	b.n	800124e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000efc:	4b2b      	ldr	r3, [pc, #172]	@ (8000fac <HAL_RCC_OscConfig+0x240>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f003 0302 	and.w	r3, r3, #2
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d0f0      	beq.n	8000eea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f08:	4b28      	ldr	r3, [pc, #160]	@ (8000fac <HAL_RCC_OscConfig+0x240>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	691b      	ldr	r3, [r3, #16]
 8000f14:	00db      	lsls	r3, r3, #3
 8000f16:	4925      	ldr	r1, [pc, #148]	@ (8000fac <HAL_RCC_OscConfig+0x240>)
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	600b      	str	r3, [r1, #0]
 8000f1c:	e015      	b.n	8000f4a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f1e:	4b24      	ldr	r3, [pc, #144]	@ (8000fb0 <HAL_RCC_OscConfig+0x244>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f24:	f7ff fe34 	bl	8000b90 <HAL_GetTick>
 8000f28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f2a:	e008      	b.n	8000f3e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f2c:	f7ff fe30 	bl	8000b90 <HAL_GetTick>
 8000f30:	4602      	mov	r2, r0
 8000f32:	693b      	ldr	r3, [r7, #16]
 8000f34:	1ad3      	subs	r3, r2, r3
 8000f36:	2b02      	cmp	r3, #2
 8000f38:	d901      	bls.n	8000f3e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000f3a:	2303      	movs	r3, #3
 8000f3c:	e187      	b.n	800124e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f3e:	4b1b      	ldr	r3, [pc, #108]	@ (8000fac <HAL_RCC_OscConfig+0x240>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f003 0302 	and.w	r3, r3, #2
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d1f0      	bne.n	8000f2c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f003 0308 	and.w	r3, r3, #8
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d036      	beq.n	8000fc4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	695b      	ldr	r3, [r3, #20]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d016      	beq.n	8000f8c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f5e:	4b15      	ldr	r3, [pc, #84]	@ (8000fb4 <HAL_RCC_OscConfig+0x248>)
 8000f60:	2201      	movs	r2, #1
 8000f62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f64:	f7ff fe14 	bl	8000b90 <HAL_GetTick>
 8000f68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f6a:	e008      	b.n	8000f7e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f6c:	f7ff fe10 	bl	8000b90 <HAL_GetTick>
 8000f70:	4602      	mov	r2, r0
 8000f72:	693b      	ldr	r3, [r7, #16]
 8000f74:	1ad3      	subs	r3, r2, r3
 8000f76:	2b02      	cmp	r3, #2
 8000f78:	d901      	bls.n	8000f7e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000f7a:	2303      	movs	r3, #3
 8000f7c:	e167      	b.n	800124e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f7e:	4b0b      	ldr	r3, [pc, #44]	@ (8000fac <HAL_RCC_OscConfig+0x240>)
 8000f80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000f82:	f003 0302 	and.w	r3, r3, #2
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d0f0      	beq.n	8000f6c <HAL_RCC_OscConfig+0x200>
 8000f8a:	e01b      	b.n	8000fc4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f8c:	4b09      	ldr	r3, [pc, #36]	@ (8000fb4 <HAL_RCC_OscConfig+0x248>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f92:	f7ff fdfd 	bl	8000b90 <HAL_GetTick>
 8000f96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f98:	e00e      	b.n	8000fb8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f9a:	f7ff fdf9 	bl	8000b90 <HAL_GetTick>
 8000f9e:	4602      	mov	r2, r0
 8000fa0:	693b      	ldr	r3, [r7, #16]
 8000fa2:	1ad3      	subs	r3, r2, r3
 8000fa4:	2b02      	cmp	r3, #2
 8000fa6:	d907      	bls.n	8000fb8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8000fa8:	2303      	movs	r3, #3
 8000faa:	e150      	b.n	800124e <HAL_RCC_OscConfig+0x4e2>
 8000fac:	40023800 	.word	0x40023800
 8000fb0:	42470000 	.word	0x42470000
 8000fb4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fb8:	4b88      	ldr	r3, [pc, #544]	@ (80011dc <HAL_RCC_OscConfig+0x470>)
 8000fba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000fbc:	f003 0302 	and.w	r3, r3, #2
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d1ea      	bne.n	8000f9a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f003 0304 	and.w	r3, r3, #4
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	f000 8097 	beq.w	8001100 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000fd6:	4b81      	ldr	r3, [pc, #516]	@ (80011dc <HAL_RCC_OscConfig+0x470>)
 8000fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d10f      	bne.n	8001002 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	60bb      	str	r3, [r7, #8]
 8000fe6:	4b7d      	ldr	r3, [pc, #500]	@ (80011dc <HAL_RCC_OscConfig+0x470>)
 8000fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fea:	4a7c      	ldr	r2, [pc, #496]	@ (80011dc <HAL_RCC_OscConfig+0x470>)
 8000fec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ff0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ff2:	4b7a      	ldr	r3, [pc, #488]	@ (80011dc <HAL_RCC_OscConfig+0x470>)
 8000ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ff6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ffa:	60bb      	str	r3, [r7, #8]
 8000ffc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000ffe:	2301      	movs	r3, #1
 8001000:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001002:	4b77      	ldr	r3, [pc, #476]	@ (80011e0 <HAL_RCC_OscConfig+0x474>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800100a:	2b00      	cmp	r3, #0
 800100c:	d118      	bne.n	8001040 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800100e:	4b74      	ldr	r3, [pc, #464]	@ (80011e0 <HAL_RCC_OscConfig+0x474>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4a73      	ldr	r2, [pc, #460]	@ (80011e0 <HAL_RCC_OscConfig+0x474>)
 8001014:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001018:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800101a:	f7ff fdb9 	bl	8000b90 <HAL_GetTick>
 800101e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001020:	e008      	b.n	8001034 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001022:	f7ff fdb5 	bl	8000b90 <HAL_GetTick>
 8001026:	4602      	mov	r2, r0
 8001028:	693b      	ldr	r3, [r7, #16]
 800102a:	1ad3      	subs	r3, r2, r3
 800102c:	2b02      	cmp	r3, #2
 800102e:	d901      	bls.n	8001034 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001030:	2303      	movs	r3, #3
 8001032:	e10c      	b.n	800124e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001034:	4b6a      	ldr	r3, [pc, #424]	@ (80011e0 <HAL_RCC_OscConfig+0x474>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800103c:	2b00      	cmp	r3, #0
 800103e:	d0f0      	beq.n	8001022 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	689b      	ldr	r3, [r3, #8]
 8001044:	2b01      	cmp	r3, #1
 8001046:	d106      	bne.n	8001056 <HAL_RCC_OscConfig+0x2ea>
 8001048:	4b64      	ldr	r3, [pc, #400]	@ (80011dc <HAL_RCC_OscConfig+0x470>)
 800104a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800104c:	4a63      	ldr	r2, [pc, #396]	@ (80011dc <HAL_RCC_OscConfig+0x470>)
 800104e:	f043 0301 	orr.w	r3, r3, #1
 8001052:	6713      	str	r3, [r2, #112]	@ 0x70
 8001054:	e01c      	b.n	8001090 <HAL_RCC_OscConfig+0x324>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	689b      	ldr	r3, [r3, #8]
 800105a:	2b05      	cmp	r3, #5
 800105c:	d10c      	bne.n	8001078 <HAL_RCC_OscConfig+0x30c>
 800105e:	4b5f      	ldr	r3, [pc, #380]	@ (80011dc <HAL_RCC_OscConfig+0x470>)
 8001060:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001062:	4a5e      	ldr	r2, [pc, #376]	@ (80011dc <HAL_RCC_OscConfig+0x470>)
 8001064:	f043 0304 	orr.w	r3, r3, #4
 8001068:	6713      	str	r3, [r2, #112]	@ 0x70
 800106a:	4b5c      	ldr	r3, [pc, #368]	@ (80011dc <HAL_RCC_OscConfig+0x470>)
 800106c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800106e:	4a5b      	ldr	r2, [pc, #364]	@ (80011dc <HAL_RCC_OscConfig+0x470>)
 8001070:	f043 0301 	orr.w	r3, r3, #1
 8001074:	6713      	str	r3, [r2, #112]	@ 0x70
 8001076:	e00b      	b.n	8001090 <HAL_RCC_OscConfig+0x324>
 8001078:	4b58      	ldr	r3, [pc, #352]	@ (80011dc <HAL_RCC_OscConfig+0x470>)
 800107a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800107c:	4a57      	ldr	r2, [pc, #348]	@ (80011dc <HAL_RCC_OscConfig+0x470>)
 800107e:	f023 0301 	bic.w	r3, r3, #1
 8001082:	6713      	str	r3, [r2, #112]	@ 0x70
 8001084:	4b55      	ldr	r3, [pc, #340]	@ (80011dc <HAL_RCC_OscConfig+0x470>)
 8001086:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001088:	4a54      	ldr	r2, [pc, #336]	@ (80011dc <HAL_RCC_OscConfig+0x470>)
 800108a:	f023 0304 	bic.w	r3, r3, #4
 800108e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	689b      	ldr	r3, [r3, #8]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d015      	beq.n	80010c4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001098:	f7ff fd7a 	bl	8000b90 <HAL_GetTick>
 800109c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800109e:	e00a      	b.n	80010b6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010a0:	f7ff fd76 	bl	8000b90 <HAL_GetTick>
 80010a4:	4602      	mov	r2, r0
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	1ad3      	subs	r3, r2, r3
 80010aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d901      	bls.n	80010b6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80010b2:	2303      	movs	r3, #3
 80010b4:	e0cb      	b.n	800124e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010b6:	4b49      	ldr	r3, [pc, #292]	@ (80011dc <HAL_RCC_OscConfig+0x470>)
 80010b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80010ba:	f003 0302 	and.w	r3, r3, #2
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d0ee      	beq.n	80010a0 <HAL_RCC_OscConfig+0x334>
 80010c2:	e014      	b.n	80010ee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010c4:	f7ff fd64 	bl	8000b90 <HAL_GetTick>
 80010c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010ca:	e00a      	b.n	80010e2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010cc:	f7ff fd60 	bl	8000b90 <HAL_GetTick>
 80010d0:	4602      	mov	r2, r0
 80010d2:	693b      	ldr	r3, [r7, #16]
 80010d4:	1ad3      	subs	r3, r2, r3
 80010d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80010da:	4293      	cmp	r3, r2
 80010dc:	d901      	bls.n	80010e2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80010de:	2303      	movs	r3, #3
 80010e0:	e0b5      	b.n	800124e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010e2:	4b3e      	ldr	r3, [pc, #248]	@ (80011dc <HAL_RCC_OscConfig+0x470>)
 80010e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80010e6:	f003 0302 	and.w	r3, r3, #2
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d1ee      	bne.n	80010cc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80010ee:	7dfb      	ldrb	r3, [r7, #23]
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	d105      	bne.n	8001100 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80010f4:	4b39      	ldr	r3, [pc, #228]	@ (80011dc <HAL_RCC_OscConfig+0x470>)
 80010f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010f8:	4a38      	ldr	r2, [pc, #224]	@ (80011dc <HAL_RCC_OscConfig+0x470>)
 80010fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80010fe:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	699b      	ldr	r3, [r3, #24]
 8001104:	2b00      	cmp	r3, #0
 8001106:	f000 80a1 	beq.w	800124c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800110a:	4b34      	ldr	r3, [pc, #208]	@ (80011dc <HAL_RCC_OscConfig+0x470>)
 800110c:	689b      	ldr	r3, [r3, #8]
 800110e:	f003 030c 	and.w	r3, r3, #12
 8001112:	2b08      	cmp	r3, #8
 8001114:	d05c      	beq.n	80011d0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	699b      	ldr	r3, [r3, #24]
 800111a:	2b02      	cmp	r3, #2
 800111c:	d141      	bne.n	80011a2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800111e:	4b31      	ldr	r3, [pc, #196]	@ (80011e4 <HAL_RCC_OscConfig+0x478>)
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001124:	f7ff fd34 	bl	8000b90 <HAL_GetTick>
 8001128:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800112a:	e008      	b.n	800113e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800112c:	f7ff fd30 	bl	8000b90 <HAL_GetTick>
 8001130:	4602      	mov	r2, r0
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	1ad3      	subs	r3, r2, r3
 8001136:	2b02      	cmp	r3, #2
 8001138:	d901      	bls.n	800113e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800113a:	2303      	movs	r3, #3
 800113c:	e087      	b.n	800124e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800113e:	4b27      	ldr	r3, [pc, #156]	@ (80011dc <HAL_RCC_OscConfig+0x470>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001146:	2b00      	cmp	r3, #0
 8001148:	d1f0      	bne.n	800112c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	69da      	ldr	r2, [r3, #28]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6a1b      	ldr	r3, [r3, #32]
 8001152:	431a      	orrs	r2, r3
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001158:	019b      	lsls	r3, r3, #6
 800115a:	431a      	orrs	r2, r3
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001160:	085b      	lsrs	r3, r3, #1
 8001162:	3b01      	subs	r3, #1
 8001164:	041b      	lsls	r3, r3, #16
 8001166:	431a      	orrs	r2, r3
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800116c:	061b      	lsls	r3, r3, #24
 800116e:	491b      	ldr	r1, [pc, #108]	@ (80011dc <HAL_RCC_OscConfig+0x470>)
 8001170:	4313      	orrs	r3, r2
 8001172:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001174:	4b1b      	ldr	r3, [pc, #108]	@ (80011e4 <HAL_RCC_OscConfig+0x478>)
 8001176:	2201      	movs	r2, #1
 8001178:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800117a:	f7ff fd09 	bl	8000b90 <HAL_GetTick>
 800117e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001180:	e008      	b.n	8001194 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001182:	f7ff fd05 	bl	8000b90 <HAL_GetTick>
 8001186:	4602      	mov	r2, r0
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	1ad3      	subs	r3, r2, r3
 800118c:	2b02      	cmp	r3, #2
 800118e:	d901      	bls.n	8001194 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001190:	2303      	movs	r3, #3
 8001192:	e05c      	b.n	800124e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001194:	4b11      	ldr	r3, [pc, #68]	@ (80011dc <HAL_RCC_OscConfig+0x470>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800119c:	2b00      	cmp	r3, #0
 800119e:	d0f0      	beq.n	8001182 <HAL_RCC_OscConfig+0x416>
 80011a0:	e054      	b.n	800124c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011a2:	4b10      	ldr	r3, [pc, #64]	@ (80011e4 <HAL_RCC_OscConfig+0x478>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011a8:	f7ff fcf2 	bl	8000b90 <HAL_GetTick>
 80011ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80011ae:	e008      	b.n	80011c2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011b0:	f7ff fcee 	bl	8000b90 <HAL_GetTick>
 80011b4:	4602      	mov	r2, r0
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	1ad3      	subs	r3, r2, r3
 80011ba:	2b02      	cmp	r3, #2
 80011bc:	d901      	bls.n	80011c2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80011be:	2303      	movs	r3, #3
 80011c0:	e045      	b.n	800124e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80011c2:	4b06      	ldr	r3, [pc, #24]	@ (80011dc <HAL_RCC_OscConfig+0x470>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d1f0      	bne.n	80011b0 <HAL_RCC_OscConfig+0x444>
 80011ce:	e03d      	b.n	800124c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	699b      	ldr	r3, [r3, #24]
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d107      	bne.n	80011e8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80011d8:	2301      	movs	r3, #1
 80011da:	e038      	b.n	800124e <HAL_RCC_OscConfig+0x4e2>
 80011dc:	40023800 	.word	0x40023800
 80011e0:	40007000 	.word	0x40007000
 80011e4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80011e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001258 <HAL_RCC_OscConfig+0x4ec>)
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	699b      	ldr	r3, [r3, #24]
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	d028      	beq.n	8001248 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001200:	429a      	cmp	r2, r3
 8001202:	d121      	bne.n	8001248 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800120e:	429a      	cmp	r2, r3
 8001210:	d11a      	bne.n	8001248 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001212:	68fa      	ldr	r2, [r7, #12]
 8001214:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001218:	4013      	ands	r3, r2
 800121a:	687a      	ldr	r2, [r7, #4]
 800121c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800121e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001220:	4293      	cmp	r3, r2
 8001222:	d111      	bne.n	8001248 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800122e:	085b      	lsrs	r3, r3, #1
 8001230:	3b01      	subs	r3, #1
 8001232:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001234:	429a      	cmp	r2, r3
 8001236:	d107      	bne.n	8001248 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001242:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001244:	429a      	cmp	r2, r3
 8001246:	d001      	beq.n	800124c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001248:	2301      	movs	r3, #1
 800124a:	e000      	b.n	800124e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800124c:	2300      	movs	r3, #0
}
 800124e:	4618      	mov	r0, r3
 8001250:	3718      	adds	r7, #24
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	40023800 	.word	0x40023800

0800125c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d101      	bne.n	8001270 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800126c:	2301      	movs	r3, #1
 800126e:	e0cc      	b.n	800140a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001270:	4b68      	ldr	r3, [pc, #416]	@ (8001414 <HAL_RCC_ClockConfig+0x1b8>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f003 0307 	and.w	r3, r3, #7
 8001278:	683a      	ldr	r2, [r7, #0]
 800127a:	429a      	cmp	r2, r3
 800127c:	d90c      	bls.n	8001298 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800127e:	4b65      	ldr	r3, [pc, #404]	@ (8001414 <HAL_RCC_ClockConfig+0x1b8>)
 8001280:	683a      	ldr	r2, [r7, #0]
 8001282:	b2d2      	uxtb	r2, r2
 8001284:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001286:	4b63      	ldr	r3, [pc, #396]	@ (8001414 <HAL_RCC_ClockConfig+0x1b8>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f003 0307 	and.w	r3, r3, #7
 800128e:	683a      	ldr	r2, [r7, #0]
 8001290:	429a      	cmp	r2, r3
 8001292:	d001      	beq.n	8001298 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001294:	2301      	movs	r3, #1
 8001296:	e0b8      	b.n	800140a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f003 0302 	and.w	r3, r3, #2
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d020      	beq.n	80012e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f003 0304 	and.w	r3, r3, #4
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d005      	beq.n	80012bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80012b0:	4b59      	ldr	r3, [pc, #356]	@ (8001418 <HAL_RCC_ClockConfig+0x1bc>)
 80012b2:	689b      	ldr	r3, [r3, #8]
 80012b4:	4a58      	ldr	r2, [pc, #352]	@ (8001418 <HAL_RCC_ClockConfig+0x1bc>)
 80012b6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80012ba:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f003 0308 	and.w	r3, r3, #8
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d005      	beq.n	80012d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80012c8:	4b53      	ldr	r3, [pc, #332]	@ (8001418 <HAL_RCC_ClockConfig+0x1bc>)
 80012ca:	689b      	ldr	r3, [r3, #8]
 80012cc:	4a52      	ldr	r2, [pc, #328]	@ (8001418 <HAL_RCC_ClockConfig+0x1bc>)
 80012ce:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80012d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012d4:	4b50      	ldr	r3, [pc, #320]	@ (8001418 <HAL_RCC_ClockConfig+0x1bc>)
 80012d6:	689b      	ldr	r3, [r3, #8]
 80012d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	689b      	ldr	r3, [r3, #8]
 80012e0:	494d      	ldr	r1, [pc, #308]	@ (8001418 <HAL_RCC_ClockConfig+0x1bc>)
 80012e2:	4313      	orrs	r3, r2
 80012e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f003 0301 	and.w	r3, r3, #1
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d044      	beq.n	800137c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	2b01      	cmp	r3, #1
 80012f8:	d107      	bne.n	800130a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012fa:	4b47      	ldr	r3, [pc, #284]	@ (8001418 <HAL_RCC_ClockConfig+0x1bc>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001302:	2b00      	cmp	r3, #0
 8001304:	d119      	bne.n	800133a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	e07f      	b.n	800140a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	2b02      	cmp	r3, #2
 8001310:	d003      	beq.n	800131a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001316:	2b03      	cmp	r3, #3
 8001318:	d107      	bne.n	800132a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800131a:	4b3f      	ldr	r3, [pc, #252]	@ (8001418 <HAL_RCC_ClockConfig+0x1bc>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001322:	2b00      	cmp	r3, #0
 8001324:	d109      	bne.n	800133a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	e06f      	b.n	800140a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800132a:	4b3b      	ldr	r3, [pc, #236]	@ (8001418 <HAL_RCC_ClockConfig+0x1bc>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f003 0302 	and.w	r3, r3, #2
 8001332:	2b00      	cmp	r3, #0
 8001334:	d101      	bne.n	800133a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	e067      	b.n	800140a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800133a:	4b37      	ldr	r3, [pc, #220]	@ (8001418 <HAL_RCC_ClockConfig+0x1bc>)
 800133c:	689b      	ldr	r3, [r3, #8]
 800133e:	f023 0203 	bic.w	r2, r3, #3
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	4934      	ldr	r1, [pc, #208]	@ (8001418 <HAL_RCC_ClockConfig+0x1bc>)
 8001348:	4313      	orrs	r3, r2
 800134a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800134c:	f7ff fc20 	bl	8000b90 <HAL_GetTick>
 8001350:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001352:	e00a      	b.n	800136a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001354:	f7ff fc1c 	bl	8000b90 <HAL_GetTick>
 8001358:	4602      	mov	r2, r0
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001362:	4293      	cmp	r3, r2
 8001364:	d901      	bls.n	800136a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001366:	2303      	movs	r3, #3
 8001368:	e04f      	b.n	800140a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800136a:	4b2b      	ldr	r3, [pc, #172]	@ (8001418 <HAL_RCC_ClockConfig+0x1bc>)
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	f003 020c 	and.w	r2, r3, #12
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	429a      	cmp	r2, r3
 800137a:	d1eb      	bne.n	8001354 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800137c:	4b25      	ldr	r3, [pc, #148]	@ (8001414 <HAL_RCC_ClockConfig+0x1b8>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f003 0307 	and.w	r3, r3, #7
 8001384:	683a      	ldr	r2, [r7, #0]
 8001386:	429a      	cmp	r2, r3
 8001388:	d20c      	bcs.n	80013a4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800138a:	4b22      	ldr	r3, [pc, #136]	@ (8001414 <HAL_RCC_ClockConfig+0x1b8>)
 800138c:	683a      	ldr	r2, [r7, #0]
 800138e:	b2d2      	uxtb	r2, r2
 8001390:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001392:	4b20      	ldr	r3, [pc, #128]	@ (8001414 <HAL_RCC_ClockConfig+0x1b8>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f003 0307 	and.w	r3, r3, #7
 800139a:	683a      	ldr	r2, [r7, #0]
 800139c:	429a      	cmp	r2, r3
 800139e:	d001      	beq.n	80013a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80013a0:	2301      	movs	r3, #1
 80013a2:	e032      	b.n	800140a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f003 0304 	and.w	r3, r3, #4
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d008      	beq.n	80013c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013b0:	4b19      	ldr	r3, [pc, #100]	@ (8001418 <HAL_RCC_ClockConfig+0x1bc>)
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	4916      	ldr	r1, [pc, #88]	@ (8001418 <HAL_RCC_ClockConfig+0x1bc>)
 80013be:	4313      	orrs	r3, r2
 80013c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 0308 	and.w	r3, r3, #8
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d009      	beq.n	80013e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80013ce:	4b12      	ldr	r3, [pc, #72]	@ (8001418 <HAL_RCC_ClockConfig+0x1bc>)
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	691b      	ldr	r3, [r3, #16]
 80013da:	00db      	lsls	r3, r3, #3
 80013dc:	490e      	ldr	r1, [pc, #56]	@ (8001418 <HAL_RCC_ClockConfig+0x1bc>)
 80013de:	4313      	orrs	r3, r2
 80013e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80013e2:	f000 f821 	bl	8001428 <HAL_RCC_GetSysClockFreq>
 80013e6:	4602      	mov	r2, r0
 80013e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001418 <HAL_RCC_ClockConfig+0x1bc>)
 80013ea:	689b      	ldr	r3, [r3, #8]
 80013ec:	091b      	lsrs	r3, r3, #4
 80013ee:	f003 030f 	and.w	r3, r3, #15
 80013f2:	490a      	ldr	r1, [pc, #40]	@ (800141c <HAL_RCC_ClockConfig+0x1c0>)
 80013f4:	5ccb      	ldrb	r3, [r1, r3]
 80013f6:	fa22 f303 	lsr.w	r3, r2, r3
 80013fa:	4a09      	ldr	r2, [pc, #36]	@ (8001420 <HAL_RCC_ClockConfig+0x1c4>)
 80013fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80013fe:	4b09      	ldr	r3, [pc, #36]	@ (8001424 <HAL_RCC_ClockConfig+0x1c8>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4618      	mov	r0, r3
 8001404:	f7ff fa7a 	bl	80008fc <HAL_InitTick>

  return HAL_OK;
 8001408:	2300      	movs	r3, #0
}
 800140a:	4618      	mov	r0, r3
 800140c:	3710      	adds	r7, #16
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	40023c00 	.word	0x40023c00
 8001418:	40023800 	.word	0x40023800
 800141c:	08007410 	.word	0x08007410
 8001420:	20000000 	.word	0x20000000
 8001424:	20000004 	.word	0x20000004

08001428 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001428:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800142c:	b090      	sub	sp, #64	@ 0x40
 800142e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001430:	2300      	movs	r3, #0
 8001432:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8001434:	2300      	movs	r3, #0
 8001436:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8001438:	2300      	movs	r3, #0
 800143a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800143c:	2300      	movs	r3, #0
 800143e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001440:	4b59      	ldr	r3, [pc, #356]	@ (80015a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001442:	689b      	ldr	r3, [r3, #8]
 8001444:	f003 030c 	and.w	r3, r3, #12
 8001448:	2b08      	cmp	r3, #8
 800144a:	d00d      	beq.n	8001468 <HAL_RCC_GetSysClockFreq+0x40>
 800144c:	2b08      	cmp	r3, #8
 800144e:	f200 80a1 	bhi.w	8001594 <HAL_RCC_GetSysClockFreq+0x16c>
 8001452:	2b00      	cmp	r3, #0
 8001454:	d002      	beq.n	800145c <HAL_RCC_GetSysClockFreq+0x34>
 8001456:	2b04      	cmp	r3, #4
 8001458:	d003      	beq.n	8001462 <HAL_RCC_GetSysClockFreq+0x3a>
 800145a:	e09b      	b.n	8001594 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800145c:	4b53      	ldr	r3, [pc, #332]	@ (80015ac <HAL_RCC_GetSysClockFreq+0x184>)
 800145e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001460:	e09b      	b.n	800159a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001462:	4b53      	ldr	r3, [pc, #332]	@ (80015b0 <HAL_RCC_GetSysClockFreq+0x188>)
 8001464:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001466:	e098      	b.n	800159a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001468:	4b4f      	ldr	r3, [pc, #316]	@ (80015a8 <HAL_RCC_GetSysClockFreq+0x180>)
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001470:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001472:	4b4d      	ldr	r3, [pc, #308]	@ (80015a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800147a:	2b00      	cmp	r3, #0
 800147c:	d028      	beq.n	80014d0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800147e:	4b4a      	ldr	r3, [pc, #296]	@ (80015a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	099b      	lsrs	r3, r3, #6
 8001484:	2200      	movs	r2, #0
 8001486:	623b      	str	r3, [r7, #32]
 8001488:	627a      	str	r2, [r7, #36]	@ 0x24
 800148a:	6a3b      	ldr	r3, [r7, #32]
 800148c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001490:	2100      	movs	r1, #0
 8001492:	4b47      	ldr	r3, [pc, #284]	@ (80015b0 <HAL_RCC_GetSysClockFreq+0x188>)
 8001494:	fb03 f201 	mul.w	r2, r3, r1
 8001498:	2300      	movs	r3, #0
 800149a:	fb00 f303 	mul.w	r3, r0, r3
 800149e:	4413      	add	r3, r2
 80014a0:	4a43      	ldr	r2, [pc, #268]	@ (80015b0 <HAL_RCC_GetSysClockFreq+0x188>)
 80014a2:	fba0 1202 	umull	r1, r2, r0, r2
 80014a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80014a8:	460a      	mov	r2, r1
 80014aa:	62ba      	str	r2, [r7, #40]	@ 0x28
 80014ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80014ae:	4413      	add	r3, r2
 80014b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80014b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80014b4:	2200      	movs	r2, #0
 80014b6:	61bb      	str	r3, [r7, #24]
 80014b8:	61fa      	str	r2, [r7, #28]
 80014ba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80014be:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80014c2:	f7fe ff25 	bl	8000310 <__aeabi_uldivmod>
 80014c6:	4602      	mov	r2, r0
 80014c8:	460b      	mov	r3, r1
 80014ca:	4613      	mov	r3, r2
 80014cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80014ce:	e053      	b.n	8001578 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014d0:	4b35      	ldr	r3, [pc, #212]	@ (80015a8 <HAL_RCC_GetSysClockFreq+0x180>)
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	099b      	lsrs	r3, r3, #6
 80014d6:	2200      	movs	r2, #0
 80014d8:	613b      	str	r3, [r7, #16]
 80014da:	617a      	str	r2, [r7, #20]
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80014e2:	f04f 0b00 	mov.w	fp, #0
 80014e6:	4652      	mov	r2, sl
 80014e8:	465b      	mov	r3, fp
 80014ea:	f04f 0000 	mov.w	r0, #0
 80014ee:	f04f 0100 	mov.w	r1, #0
 80014f2:	0159      	lsls	r1, r3, #5
 80014f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80014f8:	0150      	lsls	r0, r2, #5
 80014fa:	4602      	mov	r2, r0
 80014fc:	460b      	mov	r3, r1
 80014fe:	ebb2 080a 	subs.w	r8, r2, sl
 8001502:	eb63 090b 	sbc.w	r9, r3, fp
 8001506:	f04f 0200 	mov.w	r2, #0
 800150a:	f04f 0300 	mov.w	r3, #0
 800150e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001512:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001516:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800151a:	ebb2 0408 	subs.w	r4, r2, r8
 800151e:	eb63 0509 	sbc.w	r5, r3, r9
 8001522:	f04f 0200 	mov.w	r2, #0
 8001526:	f04f 0300 	mov.w	r3, #0
 800152a:	00eb      	lsls	r3, r5, #3
 800152c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001530:	00e2      	lsls	r2, r4, #3
 8001532:	4614      	mov	r4, r2
 8001534:	461d      	mov	r5, r3
 8001536:	eb14 030a 	adds.w	r3, r4, sl
 800153a:	603b      	str	r3, [r7, #0]
 800153c:	eb45 030b 	adc.w	r3, r5, fp
 8001540:	607b      	str	r3, [r7, #4]
 8001542:	f04f 0200 	mov.w	r2, #0
 8001546:	f04f 0300 	mov.w	r3, #0
 800154a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800154e:	4629      	mov	r1, r5
 8001550:	028b      	lsls	r3, r1, #10
 8001552:	4621      	mov	r1, r4
 8001554:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001558:	4621      	mov	r1, r4
 800155a:	028a      	lsls	r2, r1, #10
 800155c:	4610      	mov	r0, r2
 800155e:	4619      	mov	r1, r3
 8001560:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001562:	2200      	movs	r2, #0
 8001564:	60bb      	str	r3, [r7, #8]
 8001566:	60fa      	str	r2, [r7, #12]
 8001568:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800156c:	f7fe fed0 	bl	8000310 <__aeabi_uldivmod>
 8001570:	4602      	mov	r2, r0
 8001572:	460b      	mov	r3, r1
 8001574:	4613      	mov	r3, r2
 8001576:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001578:	4b0b      	ldr	r3, [pc, #44]	@ (80015a8 <HAL_RCC_GetSysClockFreq+0x180>)
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	0c1b      	lsrs	r3, r3, #16
 800157e:	f003 0303 	and.w	r3, r3, #3
 8001582:	3301      	adds	r3, #1
 8001584:	005b      	lsls	r3, r3, #1
 8001586:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001588:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800158a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800158c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001590:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001592:	e002      	b.n	800159a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001594:	4b05      	ldr	r3, [pc, #20]	@ (80015ac <HAL_RCC_GetSysClockFreq+0x184>)
 8001596:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001598:	bf00      	nop
    }
  }
  return sysclockfreq;
 800159a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800159c:	4618      	mov	r0, r3
 800159e:	3740      	adds	r7, #64	@ 0x40
 80015a0:	46bd      	mov	sp, r7
 80015a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80015a6:	bf00      	nop
 80015a8:	40023800 	.word	0x40023800
 80015ac:	00f42400 	.word	0x00f42400
 80015b0:	017d7840 	.word	0x017d7840

080015b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80015b8:	4b03      	ldr	r3, [pc, #12]	@ (80015c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80015ba:	681b      	ldr	r3, [r3, #0]
}
 80015bc:	4618      	mov	r0, r3
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	20000000 	.word	0x20000000

080015cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80015d0:	f7ff fff0 	bl	80015b4 <HAL_RCC_GetHCLKFreq>
 80015d4:	4602      	mov	r2, r0
 80015d6:	4b05      	ldr	r3, [pc, #20]	@ (80015ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	0a9b      	lsrs	r3, r3, #10
 80015dc:	f003 0307 	and.w	r3, r3, #7
 80015e0:	4903      	ldr	r1, [pc, #12]	@ (80015f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80015e2:	5ccb      	ldrb	r3, [r1, r3]
 80015e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	40023800 	.word	0x40023800
 80015f0:	08007420 	.word	0x08007420

080015f4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	220f      	movs	r2, #15
 8001602:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001604:	4b12      	ldr	r3, [pc, #72]	@ (8001650 <HAL_RCC_GetClockConfig+0x5c>)
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	f003 0203 	and.w	r2, r3, #3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001610:	4b0f      	ldr	r3, [pc, #60]	@ (8001650 <HAL_RCC_GetClockConfig+0x5c>)
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800161c:	4b0c      	ldr	r3, [pc, #48]	@ (8001650 <HAL_RCC_GetClockConfig+0x5c>)
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001628:	4b09      	ldr	r3, [pc, #36]	@ (8001650 <HAL_RCC_GetClockConfig+0x5c>)
 800162a:	689b      	ldr	r3, [r3, #8]
 800162c:	08db      	lsrs	r3, r3, #3
 800162e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001636:	4b07      	ldr	r3, [pc, #28]	@ (8001654 <HAL_RCC_GetClockConfig+0x60>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 0207 	and.w	r2, r3, #7
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	601a      	str	r2, [r3, #0]
}
 8001642:	bf00      	nop
 8001644:	370c      	adds	r7, #12
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	40023800 	.word	0x40023800
 8001654:	40023c00 	.word	0x40023c00

08001658 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d101      	bne.n	800166a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	e041      	b.n	80016ee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001670:	b2db      	uxtb	r3, r3
 8001672:	2b00      	cmp	r3, #0
 8001674:	d106      	bne.n	8001684 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2200      	movs	r2, #0
 800167a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	f000 f839 	bl	80016f6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2202      	movs	r2, #2
 8001688:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	3304      	adds	r3, #4
 8001694:	4619      	mov	r1, r3
 8001696:	4610      	mov	r0, r2
 8001698:	f000 f9c0 	bl	8001a1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2201      	movs	r2, #1
 80016a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2201      	movs	r2, #1
 80016a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2201      	movs	r2, #1
 80016b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2201      	movs	r2, #1
 80016b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2201      	movs	r2, #1
 80016c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2201      	movs	r2, #1
 80016c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2201      	movs	r2, #1
 80016d0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2201      	movs	r2, #1
 80016d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2201      	movs	r2, #1
 80016e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2201      	movs	r2, #1
 80016e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80016ec:	2300      	movs	r3, #0
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}

080016f6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80016f6:	b480      	push	{r7}
 80016f8:	b083      	sub	sp, #12
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80016fe:	bf00      	nop
 8001700:	370c      	adds	r7, #12
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
	...

0800170c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800170c:	b480      	push	{r7}
 800170e:	b085      	sub	sp, #20
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800171a:	b2db      	uxtb	r3, r3
 800171c:	2b01      	cmp	r3, #1
 800171e:	d001      	beq.n	8001724 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	e04e      	b.n	80017c2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2202      	movs	r2, #2
 8001728:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	68da      	ldr	r2, [r3, #12]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f042 0201 	orr.w	r2, r2, #1
 800173a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a23      	ldr	r2, [pc, #140]	@ (80017d0 <HAL_TIM_Base_Start_IT+0xc4>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d022      	beq.n	800178c <HAL_TIM_Base_Start_IT+0x80>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800174e:	d01d      	beq.n	800178c <HAL_TIM_Base_Start_IT+0x80>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a1f      	ldr	r2, [pc, #124]	@ (80017d4 <HAL_TIM_Base_Start_IT+0xc8>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d018      	beq.n	800178c <HAL_TIM_Base_Start_IT+0x80>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a1e      	ldr	r2, [pc, #120]	@ (80017d8 <HAL_TIM_Base_Start_IT+0xcc>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d013      	beq.n	800178c <HAL_TIM_Base_Start_IT+0x80>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a1c      	ldr	r2, [pc, #112]	@ (80017dc <HAL_TIM_Base_Start_IT+0xd0>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d00e      	beq.n	800178c <HAL_TIM_Base_Start_IT+0x80>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a1b      	ldr	r2, [pc, #108]	@ (80017e0 <HAL_TIM_Base_Start_IT+0xd4>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d009      	beq.n	800178c <HAL_TIM_Base_Start_IT+0x80>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a19      	ldr	r2, [pc, #100]	@ (80017e4 <HAL_TIM_Base_Start_IT+0xd8>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d004      	beq.n	800178c <HAL_TIM_Base_Start_IT+0x80>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a18      	ldr	r2, [pc, #96]	@ (80017e8 <HAL_TIM_Base_Start_IT+0xdc>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d111      	bne.n	80017b0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	f003 0307 	and.w	r3, r3, #7
 8001796:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	2b06      	cmp	r3, #6
 800179c:	d010      	beq.n	80017c0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f042 0201 	orr.w	r2, r2, #1
 80017ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80017ae:	e007      	b.n	80017c0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f042 0201 	orr.w	r2, r2, #1
 80017be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80017c0:	2300      	movs	r3, #0
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3714      	adds	r7, #20
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	40010000 	.word	0x40010000
 80017d4:	40000400 	.word	0x40000400
 80017d8:	40000800 	.word	0x40000800
 80017dc:	40000c00 	.word	0x40000c00
 80017e0:	40010400 	.word	0x40010400
 80017e4:	40014000 	.word	0x40014000
 80017e8:	40001800 	.word	0x40001800

080017ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b084      	sub	sp, #16
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	68db      	ldr	r3, [r3, #12]
 80017fa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	691b      	ldr	r3, [r3, #16]
 8001802:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	f003 0302 	and.w	r3, r3, #2
 800180a:	2b00      	cmp	r3, #0
 800180c:	d020      	beq.n	8001850 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	f003 0302 	and.w	r3, r3, #2
 8001814:	2b00      	cmp	r3, #0
 8001816:	d01b      	beq.n	8001850 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f06f 0202 	mvn.w	r2, #2
 8001820:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2201      	movs	r2, #1
 8001826:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	699b      	ldr	r3, [r3, #24]
 800182e:	f003 0303 	and.w	r3, r3, #3
 8001832:	2b00      	cmp	r3, #0
 8001834:	d003      	beq.n	800183e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001836:	6878      	ldr	r0, [r7, #4]
 8001838:	f000 f8d2 	bl	80019e0 <HAL_TIM_IC_CaptureCallback>
 800183c:	e005      	b.n	800184a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f000 f8c4 	bl	80019cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f000 f8d5 	bl	80019f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2200      	movs	r2, #0
 800184e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	f003 0304 	and.w	r3, r3, #4
 8001856:	2b00      	cmp	r3, #0
 8001858:	d020      	beq.n	800189c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	f003 0304 	and.w	r3, r3, #4
 8001860:	2b00      	cmp	r3, #0
 8001862:	d01b      	beq.n	800189c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f06f 0204 	mvn.w	r2, #4
 800186c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2202      	movs	r2, #2
 8001872:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	699b      	ldr	r3, [r3, #24]
 800187a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800187e:	2b00      	cmp	r3, #0
 8001880:	d003      	beq.n	800188a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f000 f8ac 	bl	80019e0 <HAL_TIM_IC_CaptureCallback>
 8001888:	e005      	b.n	8001896 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f000 f89e 	bl	80019cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	f000 f8af 	bl	80019f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2200      	movs	r2, #0
 800189a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	f003 0308 	and.w	r3, r3, #8
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d020      	beq.n	80018e8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	f003 0308 	and.w	r3, r3, #8
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d01b      	beq.n	80018e8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f06f 0208 	mvn.w	r2, #8
 80018b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2204      	movs	r2, #4
 80018be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	69db      	ldr	r3, [r3, #28]
 80018c6:	f003 0303 	and.w	r3, r3, #3
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d003      	beq.n	80018d6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	f000 f886 	bl	80019e0 <HAL_TIM_IC_CaptureCallback>
 80018d4:	e005      	b.n	80018e2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	f000 f878 	bl	80019cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018dc:	6878      	ldr	r0, [r7, #4]
 80018de:	f000 f889 	bl	80019f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2200      	movs	r2, #0
 80018e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	f003 0310 	and.w	r3, r3, #16
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d020      	beq.n	8001934 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	f003 0310 	and.w	r3, r3, #16
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d01b      	beq.n	8001934 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f06f 0210 	mvn.w	r2, #16
 8001904:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2208      	movs	r2, #8
 800190a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	69db      	ldr	r3, [r3, #28]
 8001912:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001916:	2b00      	cmp	r3, #0
 8001918:	d003      	beq.n	8001922 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	f000 f860 	bl	80019e0 <HAL_TIM_IC_CaptureCallback>
 8001920:	e005      	b.n	800192e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f000 f852 	bl	80019cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001928:	6878      	ldr	r0, [r7, #4]
 800192a:	f000 f863 	bl	80019f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2200      	movs	r2, #0
 8001932:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	f003 0301 	and.w	r3, r3, #1
 800193a:	2b00      	cmp	r3, #0
 800193c:	d00c      	beq.n	8001958 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	f003 0301 	and.w	r3, r3, #1
 8001944:	2b00      	cmp	r3, #0
 8001946:	d007      	beq.n	8001958 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f06f 0201 	mvn.w	r2, #1
 8001950:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	f7fe ff8e 	bl	8000874 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800195e:	2b00      	cmp	r3, #0
 8001960:	d00c      	beq.n	800197c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001968:	2b00      	cmp	r3, #0
 800196a:	d007      	beq.n	800197c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001974:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	f000 f900 	bl	8001b7c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001982:	2b00      	cmp	r3, #0
 8001984:	d00c      	beq.n	80019a0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800198c:	2b00      	cmp	r3, #0
 800198e:	d007      	beq.n	80019a0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001998:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	f000 f834 	bl	8001a08 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	f003 0320 	and.w	r3, r3, #32
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d00c      	beq.n	80019c4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	f003 0320 	and.w	r3, r3, #32
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d007      	beq.n	80019c4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f06f 0220 	mvn.w	r2, #32
 80019bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	f000 f8d2 	bl	8001b68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80019c4:	bf00      	nop
 80019c6:	3710      	adds	r7, #16
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}

080019cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80019d4:	bf00      	nop
 80019d6:	370c      	adds	r7, #12
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr

080019e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80019e8:	bf00      	nop
 80019ea:	370c      	adds	r7, #12
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr

080019f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80019fc:	bf00      	nop
 80019fe:	370c      	adds	r7, #12
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr

08001a08 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001a10:	bf00      	nop
 8001a12:	370c      	adds	r7, #12
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr

08001a1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b085      	sub	sp, #20
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	4a43      	ldr	r2, [pc, #268]	@ (8001b3c <TIM_Base_SetConfig+0x120>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d013      	beq.n	8001a5c <TIM_Base_SetConfig+0x40>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a3a:	d00f      	beq.n	8001a5c <TIM_Base_SetConfig+0x40>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	4a40      	ldr	r2, [pc, #256]	@ (8001b40 <TIM_Base_SetConfig+0x124>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d00b      	beq.n	8001a5c <TIM_Base_SetConfig+0x40>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	4a3f      	ldr	r2, [pc, #252]	@ (8001b44 <TIM_Base_SetConfig+0x128>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d007      	beq.n	8001a5c <TIM_Base_SetConfig+0x40>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	4a3e      	ldr	r2, [pc, #248]	@ (8001b48 <TIM_Base_SetConfig+0x12c>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d003      	beq.n	8001a5c <TIM_Base_SetConfig+0x40>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	4a3d      	ldr	r2, [pc, #244]	@ (8001b4c <TIM_Base_SetConfig+0x130>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d108      	bne.n	8001a6e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001a62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	68fa      	ldr	r2, [r7, #12]
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4a32      	ldr	r2, [pc, #200]	@ (8001b3c <TIM_Base_SetConfig+0x120>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d02b      	beq.n	8001ace <TIM_Base_SetConfig+0xb2>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a7c:	d027      	beq.n	8001ace <TIM_Base_SetConfig+0xb2>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4a2f      	ldr	r2, [pc, #188]	@ (8001b40 <TIM_Base_SetConfig+0x124>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d023      	beq.n	8001ace <TIM_Base_SetConfig+0xb2>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4a2e      	ldr	r2, [pc, #184]	@ (8001b44 <TIM_Base_SetConfig+0x128>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d01f      	beq.n	8001ace <TIM_Base_SetConfig+0xb2>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4a2d      	ldr	r2, [pc, #180]	@ (8001b48 <TIM_Base_SetConfig+0x12c>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d01b      	beq.n	8001ace <TIM_Base_SetConfig+0xb2>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4a2c      	ldr	r2, [pc, #176]	@ (8001b4c <TIM_Base_SetConfig+0x130>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d017      	beq.n	8001ace <TIM_Base_SetConfig+0xb2>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4a2b      	ldr	r2, [pc, #172]	@ (8001b50 <TIM_Base_SetConfig+0x134>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d013      	beq.n	8001ace <TIM_Base_SetConfig+0xb2>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	4a2a      	ldr	r2, [pc, #168]	@ (8001b54 <TIM_Base_SetConfig+0x138>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d00f      	beq.n	8001ace <TIM_Base_SetConfig+0xb2>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4a29      	ldr	r2, [pc, #164]	@ (8001b58 <TIM_Base_SetConfig+0x13c>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d00b      	beq.n	8001ace <TIM_Base_SetConfig+0xb2>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4a28      	ldr	r2, [pc, #160]	@ (8001b5c <TIM_Base_SetConfig+0x140>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d007      	beq.n	8001ace <TIM_Base_SetConfig+0xb2>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4a27      	ldr	r2, [pc, #156]	@ (8001b60 <TIM_Base_SetConfig+0x144>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d003      	beq.n	8001ace <TIM_Base_SetConfig+0xb2>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	4a26      	ldr	r2, [pc, #152]	@ (8001b64 <TIM_Base_SetConfig+0x148>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d108      	bne.n	8001ae0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001ad4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	68db      	ldr	r3, [r3, #12]
 8001ada:	68fa      	ldr	r2, [r7, #12]
 8001adc:	4313      	orrs	r3, r2
 8001ade:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	695b      	ldr	r3, [r3, #20]
 8001aea:	4313      	orrs	r3, r2
 8001aec:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	689a      	ldr	r2, [r3, #8]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4a0e      	ldr	r2, [pc, #56]	@ (8001b3c <TIM_Base_SetConfig+0x120>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d003      	beq.n	8001b0e <TIM_Base_SetConfig+0xf2>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4a10      	ldr	r2, [pc, #64]	@ (8001b4c <TIM_Base_SetConfig+0x130>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d103      	bne.n	8001b16 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	691a      	ldr	r2, [r3, #16]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f043 0204 	orr.w	r2, r3, #4
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2201      	movs	r2, #1
 8001b26:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	68fa      	ldr	r2, [r7, #12]
 8001b2c:	601a      	str	r2, [r3, #0]
}
 8001b2e:	bf00      	nop
 8001b30:	3714      	adds	r7, #20
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr
 8001b3a:	bf00      	nop
 8001b3c:	40010000 	.word	0x40010000
 8001b40:	40000400 	.word	0x40000400
 8001b44:	40000800 	.word	0x40000800
 8001b48:	40000c00 	.word	0x40000c00
 8001b4c:	40010400 	.word	0x40010400
 8001b50:	40014000 	.word	0x40014000
 8001b54:	40014400 	.word	0x40014400
 8001b58:	40014800 	.word	0x40014800
 8001b5c:	40001800 	.word	0x40001800
 8001b60:	40001c00 	.word	0x40001c00
 8001b64:	40002000 	.word	0x40002000

08001b68 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001b70:	bf00      	nop
 8001b72:	370c      	adds	r7, #12
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr

08001b7c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001b84:	bf00      	nop
 8001b86:	370c      	adds	r7, #12
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr

08001b90 <__NVIC_SetPriority>:
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	4603      	mov	r3, r0
 8001b98:	6039      	str	r1, [r7, #0]
 8001b9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	db0a      	blt.n	8001bba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	b2da      	uxtb	r2, r3
 8001ba8:	490c      	ldr	r1, [pc, #48]	@ (8001bdc <__NVIC_SetPriority+0x4c>)
 8001baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bae:	0112      	lsls	r2, r2, #4
 8001bb0:	b2d2      	uxtb	r2, r2
 8001bb2:	440b      	add	r3, r1
 8001bb4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001bb8:	e00a      	b.n	8001bd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	b2da      	uxtb	r2, r3
 8001bbe:	4908      	ldr	r1, [pc, #32]	@ (8001be0 <__NVIC_SetPriority+0x50>)
 8001bc0:	79fb      	ldrb	r3, [r7, #7]
 8001bc2:	f003 030f 	and.w	r3, r3, #15
 8001bc6:	3b04      	subs	r3, #4
 8001bc8:	0112      	lsls	r2, r2, #4
 8001bca:	b2d2      	uxtb	r2, r2
 8001bcc:	440b      	add	r3, r1
 8001bce:	761a      	strb	r2, [r3, #24]
}
 8001bd0:	bf00      	nop
 8001bd2:	370c      	adds	r7, #12
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr
 8001bdc:	e000e100 	.word	0xe000e100
 8001be0:	e000ed00 	.word	0xe000ed00

08001be4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8001be8:	4b05      	ldr	r3, [pc, #20]	@ (8001c00 <SysTick_Handler+0x1c>)
 8001bea:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8001bec:	f001 fde2 	bl	80037b4 <xTaskGetSchedulerState>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d001      	beq.n	8001bfa <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8001bf6:	f002 fbdf 	bl	80043b8 <xPortSysTickHandler>
  }
}
 8001bfa:	bf00      	nop
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	e000e010 	.word	0xe000e010

08001c04 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8001c08:	2100      	movs	r1, #0
 8001c0a:	f06f 0004 	mvn.w	r0, #4
 8001c0e:	f7ff ffbf 	bl	8001b90 <__NVIC_SetPriority>
#endif
}
 8001c12:	bf00      	nop
 8001c14:	bd80      	pop	{r7, pc}
	...

08001c18 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001c1e:	f3ef 8305 	mrs	r3, IPSR
 8001c22:	603b      	str	r3, [r7, #0]
  return(result);
 8001c24:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d003      	beq.n	8001c32 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8001c2a:	f06f 0305 	mvn.w	r3, #5
 8001c2e:	607b      	str	r3, [r7, #4]
 8001c30:	e00c      	b.n	8001c4c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001c32:	4b0a      	ldr	r3, [pc, #40]	@ (8001c5c <osKernelInitialize+0x44>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d105      	bne.n	8001c46 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8001c3a:	4b08      	ldr	r3, [pc, #32]	@ (8001c5c <osKernelInitialize+0x44>)
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001c40:	2300      	movs	r3, #0
 8001c42:	607b      	str	r3, [r7, #4]
 8001c44:	e002      	b.n	8001c4c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8001c46:	f04f 33ff 	mov.w	r3, #4294967295
 8001c4a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001c4c:	687b      	ldr	r3, [r7, #4]
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	370c      	adds	r7, #12
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	200000d0 	.word	0x200000d0

08001c60 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001c66:	f3ef 8305 	mrs	r3, IPSR
 8001c6a:	603b      	str	r3, [r7, #0]
  return(result);
 8001c6c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d003      	beq.n	8001c7a <osKernelStart+0x1a>
    stat = osErrorISR;
 8001c72:	f06f 0305 	mvn.w	r3, #5
 8001c76:	607b      	str	r3, [r7, #4]
 8001c78:	e010      	b.n	8001c9c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8001c7a:	4b0b      	ldr	r3, [pc, #44]	@ (8001ca8 <osKernelStart+0x48>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d109      	bne.n	8001c96 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8001c82:	f7ff ffbf 	bl	8001c04 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8001c86:	4b08      	ldr	r3, [pc, #32]	@ (8001ca8 <osKernelStart+0x48>)
 8001c88:	2202      	movs	r2, #2
 8001c8a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8001c8c:	f001 f8ee 	bl	8002e6c <vTaskStartScheduler>
      stat = osOK;
 8001c90:	2300      	movs	r3, #0
 8001c92:	607b      	str	r3, [r7, #4]
 8001c94:	e002      	b.n	8001c9c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8001c96:	f04f 33ff 	mov.w	r3, #4294967295
 8001c9a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001c9c:	687b      	ldr	r3, [r7, #4]
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3708      	adds	r7, #8
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	200000d0 	.word	0x200000d0

08001cac <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b08e      	sub	sp, #56	@ 0x38
 8001cb0:	af04      	add	r7, sp, #16
 8001cb2:	60f8      	str	r0, [r7, #12]
 8001cb4:	60b9      	str	r1, [r7, #8]
 8001cb6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001cbc:	f3ef 8305 	mrs	r3, IPSR
 8001cc0:	617b      	str	r3, [r7, #20]
  return(result);
 8001cc2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d17e      	bne.n	8001dc6 <osThreadNew+0x11a>
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d07b      	beq.n	8001dc6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8001cce:	2380      	movs	r3, #128	@ 0x80
 8001cd0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8001cd2:	2318      	movs	r3, #24
 8001cd4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8001cda:	f04f 33ff 	mov.w	r3, #4294967295
 8001cde:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d045      	beq.n	8001d72 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d002      	beq.n	8001cf4 <osThreadNew+0x48>
        name = attr->name;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	699b      	ldr	r3, [r3, #24]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d002      	beq.n	8001d02 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	699b      	ldr	r3, [r3, #24]
 8001d00:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d008      	beq.n	8001d1a <osThreadNew+0x6e>
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	2b38      	cmp	r3, #56	@ 0x38
 8001d0c:	d805      	bhi.n	8001d1a <osThreadNew+0x6e>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f003 0301 	and.w	r3, r3, #1
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d001      	beq.n	8001d1e <osThreadNew+0x72>
        return (NULL);
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	e054      	b.n	8001dc8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	695b      	ldr	r3, [r3, #20]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d003      	beq.n	8001d2e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	695b      	ldr	r3, [r3, #20]
 8001d2a:	089b      	lsrs	r3, r3, #2
 8001d2c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d00e      	beq.n	8001d54 <osThreadNew+0xa8>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	68db      	ldr	r3, [r3, #12]
 8001d3a:	2ba7      	cmp	r3, #167	@ 0xa7
 8001d3c:	d90a      	bls.n	8001d54 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d006      	beq.n	8001d54 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	695b      	ldr	r3, [r3, #20]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d002      	beq.n	8001d54 <osThreadNew+0xa8>
        mem = 1;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	61bb      	str	r3, [r7, #24]
 8001d52:	e010      	b.n	8001d76 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d10c      	bne.n	8001d76 <osThreadNew+0xca>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d108      	bne.n	8001d76 <osThreadNew+0xca>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	691b      	ldr	r3, [r3, #16]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d104      	bne.n	8001d76 <osThreadNew+0xca>
          mem = 0;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	61bb      	str	r3, [r7, #24]
 8001d70:	e001      	b.n	8001d76 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8001d72:	2300      	movs	r3, #0
 8001d74:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d110      	bne.n	8001d9e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8001d80:	687a      	ldr	r2, [r7, #4]
 8001d82:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001d84:	9202      	str	r2, [sp, #8]
 8001d86:	9301      	str	r3, [sp, #4]
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	9300      	str	r3, [sp, #0]
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	6a3a      	ldr	r2, [r7, #32]
 8001d90:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001d92:	68f8      	ldr	r0, [r7, #12]
 8001d94:	f000 fe64 	bl	8002a60 <xTaskCreateStatic>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	613b      	str	r3, [r7, #16]
 8001d9c:	e013      	b.n	8001dc6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8001d9e:	69bb      	ldr	r3, [r7, #24]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d110      	bne.n	8001dc6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8001da4:	6a3b      	ldr	r3, [r7, #32]
 8001da6:	b29a      	uxth	r2, r3
 8001da8:	f107 0310 	add.w	r3, r7, #16
 8001dac:	9301      	str	r3, [sp, #4]
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	9300      	str	r3, [sp, #0]
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001db6:	68f8      	ldr	r0, [r7, #12]
 8001db8:	f000 feb2 	bl	8002b20 <xTaskCreate>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d001      	beq.n	8001dc6 <osThreadNew+0x11a>
            hTask = NULL;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8001dc6:	693b      	ldr	r3, [r7, #16]
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3728      	adds	r7, #40	@ 0x28
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}

08001dd0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b084      	sub	sp, #16
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001dd8:	f3ef 8305 	mrs	r3, IPSR
 8001ddc:	60bb      	str	r3, [r7, #8]
  return(result);
 8001dde:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d003      	beq.n	8001dec <osDelay+0x1c>
    stat = osErrorISR;
 8001de4:	f06f 0305 	mvn.w	r3, #5
 8001de8:	60fb      	str	r3, [r7, #12]
 8001dea:	e007      	b.n	8001dfc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8001dec:	2300      	movs	r3, #0
 8001dee:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d002      	beq.n	8001dfc <osDelay+0x2c>
      vTaskDelay(ticks);
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f000 fffe 	bl	8002df8 <vTaskDelay>
    }
  }

  return (stat);
 8001dfc:	68fb      	ldr	r3, [r7, #12]
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3710      	adds	r7, #16
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
	...

08001e08 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8001e08:	b480      	push	{r7}
 8001e0a:	b085      	sub	sp, #20
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	60f8      	str	r0, [r7, #12]
 8001e10:	60b9      	str	r1, [r7, #8]
 8001e12:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	4a07      	ldr	r2, [pc, #28]	@ (8001e34 <vApplicationGetIdleTaskMemory+0x2c>)
 8001e18:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	4a06      	ldr	r2, [pc, #24]	@ (8001e38 <vApplicationGetIdleTaskMemory+0x30>)
 8001e1e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2280      	movs	r2, #128	@ 0x80
 8001e24:	601a      	str	r2, [r3, #0]
}
 8001e26:	bf00      	nop
 8001e28:	3714      	adds	r7, #20
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	200000d4 	.word	0x200000d4
 8001e38:	2000017c 	.word	0x2000017c

08001e3c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8001e3c:	b480      	push	{r7}
 8001e3e:	b085      	sub	sp, #20
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	60f8      	str	r0, [r7, #12]
 8001e44:	60b9      	str	r1, [r7, #8]
 8001e46:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	4a07      	ldr	r2, [pc, #28]	@ (8001e68 <vApplicationGetTimerTaskMemory+0x2c>)
 8001e4c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	4a06      	ldr	r2, [pc, #24]	@ (8001e6c <vApplicationGetTimerTaskMemory+0x30>)
 8001e52:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001e5a:	601a      	str	r2, [r3, #0]
}
 8001e5c:	bf00      	nop
 8001e5e:	3714      	adds	r7, #20
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr
 8001e68:	2000037c 	.word	0x2000037c
 8001e6c:	20000424 	.word	0x20000424

08001e70 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	f103 0208 	add.w	r2, r3, #8
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	f04f 32ff 	mov.w	r2, #4294967295
 8001e88:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	f103 0208 	add.w	r2, r3, #8
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	f103 0208 	add.w	r2, r3, #8
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001ea4:	bf00      	nop
 8001ea6:	370c      	adds	r7, #12
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr

08001eb0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001ebe:	bf00      	nop
 8001ec0:	370c      	adds	r7, #12
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr

08001eca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001eca:	b480      	push	{r7}
 8001ecc:	b085      	sub	sp, #20
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	6078      	str	r0, [r7, #4]
 8001ed2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	68fa      	ldr	r2, [r7, #12]
 8001ede:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	689a      	ldr	r2, [r3, #8]
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	683a      	ldr	r2, [r7, #0]
 8001eee:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	683a      	ldr	r2, [r7, #0]
 8001ef4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	687a      	ldr	r2, [r7, #4]
 8001efa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	1c5a      	adds	r2, r3, #1
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	601a      	str	r2, [r3, #0]
}
 8001f06:	bf00      	nop
 8001f08:	3714      	adds	r7, #20
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr

08001f12 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001f12:	b480      	push	{r7}
 8001f14:	b085      	sub	sp, #20
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6078      	str	r0, [r7, #4]
 8001f1a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f28:	d103      	bne.n	8001f32 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	691b      	ldr	r3, [r3, #16]
 8001f2e:	60fb      	str	r3, [r7, #12]
 8001f30:	e00c      	b.n	8001f4c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	3308      	adds	r3, #8
 8001f36:	60fb      	str	r3, [r7, #12]
 8001f38:	e002      	b.n	8001f40 <vListInsert+0x2e>
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	60fb      	str	r3, [r7, #12]
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	68ba      	ldr	r2, [r7, #8]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d2f6      	bcs.n	8001f3a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	685a      	ldr	r2, [r3, #4]
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	683a      	ldr	r2, [r7, #0]
 8001f5a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	68fa      	ldr	r2, [r7, #12]
 8001f60:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	683a      	ldr	r2, [r7, #0]
 8001f66:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	1c5a      	adds	r2, r3, #1
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	601a      	str	r2, [r3, #0]
}
 8001f78:	bf00      	nop
 8001f7a:	3714      	adds	r7, #20
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr

08001f84 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001f84:	b480      	push	{r7}
 8001f86:	b085      	sub	sp, #20
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	691b      	ldr	r3, [r3, #16]
 8001f90:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	687a      	ldr	r2, [r7, #4]
 8001f98:	6892      	ldr	r2, [r2, #8]
 8001f9a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	687a      	ldr	r2, [r7, #4]
 8001fa2:	6852      	ldr	r2, [r2, #4]
 8001fa4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d103      	bne.n	8001fb8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	689a      	ldr	r2, [r3, #8]
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	1e5a      	subs	r2, r3, #1
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3714      	adds	r7, #20
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr

08001fd8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d10b      	bne.n	8002004 <xQueueGenericReset+0x2c>
	__asm volatile
 8001fec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001ff0:	f383 8811 	msr	BASEPRI, r3
 8001ff4:	f3bf 8f6f 	isb	sy
 8001ff8:	f3bf 8f4f 	dsb	sy
 8001ffc:	60bb      	str	r3, [r7, #8]
}
 8001ffe:	bf00      	nop
 8002000:	bf00      	nop
 8002002:	e7fd      	b.n	8002000 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002004:	f002 f948 	bl	8004298 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002010:	68f9      	ldr	r1, [r7, #12]
 8002012:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002014:	fb01 f303 	mul.w	r3, r1, r3
 8002018:	441a      	add	r2, r3
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2200      	movs	r2, #0
 8002022:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002034:	3b01      	subs	r3, #1
 8002036:	68f9      	ldr	r1, [r7, #12]
 8002038:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800203a:	fb01 f303 	mul.w	r3, r1, r3
 800203e:	441a      	add	r2, r3
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	22ff      	movs	r2, #255	@ 0xff
 8002048:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	22ff      	movs	r2, #255	@ 0xff
 8002050:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d109      	bne.n	800206e <xQueueGenericReset+0x96>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	691b      	ldr	r3, [r3, #16]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d00f      	beq.n	8002082 <xQueueGenericReset+0xaa>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	3310      	adds	r3, #16
 8002066:	4618      	mov	r0, r3
 8002068:	f001 f9a8 	bl	80033bc <xTaskRemoveFromEventList>
 800206c:	e009      	b.n	8002082 <xQueueGenericReset+0xaa>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	3310      	adds	r3, #16
 8002072:	4618      	mov	r0, r3
 8002074:	f7ff fefc 	bl	8001e70 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	3324      	adds	r3, #36	@ 0x24
 800207c:	4618      	mov	r0, r3
 800207e:	f7ff fef7 	bl	8001e70 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002082:	f002 f93b 	bl	80042fc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002086:	2301      	movs	r3, #1
}
 8002088:	4618      	mov	r0, r3
 800208a:	3710      	adds	r7, #16
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}

08002090 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002090:	b580      	push	{r7, lr}
 8002092:	b08e      	sub	sp, #56	@ 0x38
 8002094:	af02      	add	r7, sp, #8
 8002096:	60f8      	str	r0, [r7, #12]
 8002098:	60b9      	str	r1, [r7, #8]
 800209a:	607a      	str	r2, [r7, #4]
 800209c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d10b      	bne.n	80020bc <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80020a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80020a8:	f383 8811 	msr	BASEPRI, r3
 80020ac:	f3bf 8f6f 	isb	sy
 80020b0:	f3bf 8f4f 	dsb	sy
 80020b4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80020b6:	bf00      	nop
 80020b8:	bf00      	nop
 80020ba:	e7fd      	b.n	80020b8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d10b      	bne.n	80020da <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80020c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80020c6:	f383 8811 	msr	BASEPRI, r3
 80020ca:	f3bf 8f6f 	isb	sy
 80020ce:	f3bf 8f4f 	dsb	sy
 80020d2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80020d4:	bf00      	nop
 80020d6:	bf00      	nop
 80020d8:	e7fd      	b.n	80020d6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d002      	beq.n	80020e6 <xQueueGenericCreateStatic+0x56>
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d001      	beq.n	80020ea <xQueueGenericCreateStatic+0x5a>
 80020e6:	2301      	movs	r3, #1
 80020e8:	e000      	b.n	80020ec <xQueueGenericCreateStatic+0x5c>
 80020ea:	2300      	movs	r3, #0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d10b      	bne.n	8002108 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80020f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80020f4:	f383 8811 	msr	BASEPRI, r3
 80020f8:	f3bf 8f6f 	isb	sy
 80020fc:	f3bf 8f4f 	dsb	sy
 8002100:	623b      	str	r3, [r7, #32]
}
 8002102:	bf00      	nop
 8002104:	bf00      	nop
 8002106:	e7fd      	b.n	8002104 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d102      	bne.n	8002114 <xQueueGenericCreateStatic+0x84>
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d101      	bne.n	8002118 <xQueueGenericCreateStatic+0x88>
 8002114:	2301      	movs	r3, #1
 8002116:	e000      	b.n	800211a <xQueueGenericCreateStatic+0x8a>
 8002118:	2300      	movs	r3, #0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d10b      	bne.n	8002136 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800211e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002122:	f383 8811 	msr	BASEPRI, r3
 8002126:	f3bf 8f6f 	isb	sy
 800212a:	f3bf 8f4f 	dsb	sy
 800212e:	61fb      	str	r3, [r7, #28]
}
 8002130:	bf00      	nop
 8002132:	bf00      	nop
 8002134:	e7fd      	b.n	8002132 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002136:	2350      	movs	r3, #80	@ 0x50
 8002138:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	2b50      	cmp	r3, #80	@ 0x50
 800213e:	d00b      	beq.n	8002158 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8002140:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002144:	f383 8811 	msr	BASEPRI, r3
 8002148:	f3bf 8f6f 	isb	sy
 800214c:	f3bf 8f4f 	dsb	sy
 8002150:	61bb      	str	r3, [r7, #24]
}
 8002152:	bf00      	nop
 8002154:	bf00      	nop
 8002156:	e7fd      	b.n	8002154 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002158:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800215e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002160:	2b00      	cmp	r3, #0
 8002162:	d00d      	beq.n	8002180 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002164:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002166:	2201      	movs	r2, #1
 8002168:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800216c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8002170:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002172:	9300      	str	r3, [sp, #0]
 8002174:	4613      	mov	r3, r2
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	68b9      	ldr	r1, [r7, #8]
 800217a:	68f8      	ldr	r0, [r7, #12]
 800217c:	f000 f805 	bl	800218a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002180:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8002182:	4618      	mov	r0, r3
 8002184:	3730      	adds	r7, #48	@ 0x30
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}

0800218a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800218a:	b580      	push	{r7, lr}
 800218c:	b084      	sub	sp, #16
 800218e:	af00      	add	r7, sp, #0
 8002190:	60f8      	str	r0, [r7, #12]
 8002192:	60b9      	str	r1, [r7, #8]
 8002194:	607a      	str	r2, [r7, #4]
 8002196:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d103      	bne.n	80021a6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800219e:	69bb      	ldr	r3, [r7, #24]
 80021a0:	69ba      	ldr	r2, [r7, #24]
 80021a2:	601a      	str	r2, [r3, #0]
 80021a4:	e002      	b.n	80021ac <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80021a6:	69bb      	ldr	r3, [r7, #24]
 80021a8:	687a      	ldr	r2, [r7, #4]
 80021aa:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80021ac:	69bb      	ldr	r3, [r7, #24]
 80021ae:	68fa      	ldr	r2, [r7, #12]
 80021b0:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80021b2:	69bb      	ldr	r3, [r7, #24]
 80021b4:	68ba      	ldr	r2, [r7, #8]
 80021b6:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80021b8:	2101      	movs	r1, #1
 80021ba:	69b8      	ldr	r0, [r7, #24]
 80021bc:	f7ff ff0c 	bl	8001fd8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80021c0:	69bb      	ldr	r3, [r7, #24]
 80021c2:	78fa      	ldrb	r2, [r7, #3]
 80021c4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
	{
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
 80021c8:	78fb      	ldrb	r3, [r7, #3]
 80021ca:	68ba      	ldr	r2, [r7, #8]
 80021cc:	68f9      	ldr	r1, [r7, #12]
 80021ce:	2073      	movs	r0, #115	@ 0x73
 80021d0:	f003 fd40 	bl	8005c54 <SEGGER_SYSVIEW_RecordU32x3>
}
 80021d4:	bf00      	nop
 80021d6:	3710      	adds	r7, #16
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}

080021dc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b090      	sub	sp, #64	@ 0x40
 80021e0:	af02      	add	r7, sp, #8
 80021e2:	60f8      	str	r0, [r7, #12]
 80021e4:	60b9      	str	r1, [r7, #8]
 80021e6:	607a      	str	r2, [r7, #4]
 80021e8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80021ea:	2300      	movs	r3, #0
 80021ec:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80021f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d10b      	bne.n	8002210 <xQueueGenericSend+0x34>
	__asm volatile
 80021f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021fc:	f383 8811 	msr	BASEPRI, r3
 8002200:	f3bf 8f6f 	isb	sy
 8002204:	f3bf 8f4f 	dsb	sy
 8002208:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800220a:	bf00      	nop
 800220c:	bf00      	nop
 800220e:	e7fd      	b.n	800220c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d103      	bne.n	800221e <xQueueGenericSend+0x42>
 8002216:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800221a:	2b00      	cmp	r3, #0
 800221c:	d101      	bne.n	8002222 <xQueueGenericSend+0x46>
 800221e:	2301      	movs	r3, #1
 8002220:	e000      	b.n	8002224 <xQueueGenericSend+0x48>
 8002222:	2300      	movs	r3, #0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d10b      	bne.n	8002240 <xQueueGenericSend+0x64>
	__asm volatile
 8002228:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800222c:	f383 8811 	msr	BASEPRI, r3
 8002230:	f3bf 8f6f 	isb	sy
 8002234:	f3bf 8f4f 	dsb	sy
 8002238:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800223a:	bf00      	nop
 800223c:	bf00      	nop
 800223e:	e7fd      	b.n	800223c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	2b02      	cmp	r3, #2
 8002244:	d103      	bne.n	800224e <xQueueGenericSend+0x72>
 8002246:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002248:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800224a:	2b01      	cmp	r3, #1
 800224c:	d101      	bne.n	8002252 <xQueueGenericSend+0x76>
 800224e:	2301      	movs	r3, #1
 8002250:	e000      	b.n	8002254 <xQueueGenericSend+0x78>
 8002252:	2300      	movs	r3, #0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d10b      	bne.n	8002270 <xQueueGenericSend+0x94>
	__asm volatile
 8002258:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800225c:	f383 8811 	msr	BASEPRI, r3
 8002260:	f3bf 8f6f 	isb	sy
 8002264:	f3bf 8f4f 	dsb	sy
 8002268:	623b      	str	r3, [r7, #32]
}
 800226a:	bf00      	nop
 800226c:	bf00      	nop
 800226e:	e7fd      	b.n	800226c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002270:	f001 faa0 	bl	80037b4 <xTaskGetSchedulerState>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d102      	bne.n	8002280 <xQueueGenericSend+0xa4>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d101      	bne.n	8002284 <xQueueGenericSend+0xa8>
 8002280:	2301      	movs	r3, #1
 8002282:	e000      	b.n	8002286 <xQueueGenericSend+0xaa>
 8002284:	2300      	movs	r3, #0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d10b      	bne.n	80022a2 <xQueueGenericSend+0xc6>
	__asm volatile
 800228a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800228e:	f383 8811 	msr	BASEPRI, r3
 8002292:	f3bf 8f6f 	isb	sy
 8002296:	f3bf 8f4f 	dsb	sy
 800229a:	61fb      	str	r3, [r7, #28]
}
 800229c:	bf00      	nop
 800229e:	bf00      	nop
 80022a0:	e7fd      	b.n	800229e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80022a2:	f001 fff9 	bl	8004298 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80022a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80022aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022ae:	429a      	cmp	r2, r3
 80022b0:	d302      	bcc.n	80022b8 <xQueueGenericSend+0xdc>
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	2b02      	cmp	r3, #2
 80022b6:	d11f      	bne.n	80022f8 <xQueueGenericSend+0x11c>
			{
				traceQUEUE_SEND( pxQueue );
 80022b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022ba:	4618      	mov	r0, r3
 80022bc:	f004 f97c 	bl	80065b8 <SEGGER_SYSVIEW_ShrinkId>
 80022c0:	68ba      	ldr	r2, [r7, #8]
 80022c2:	6879      	ldr	r1, [r7, #4]
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	9300      	str	r3, [sp, #0]
 80022c8:	460b      	mov	r3, r1
 80022ca:	4601      	mov	r1, r0
 80022cc:	205a      	movs	r0, #90	@ 0x5a
 80022ce:	f003 fd37 	bl	8005d40 <SEGGER_SYSVIEW_RecordU32x4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80022d2:	683a      	ldr	r2, [r7, #0]
 80022d4:	68b9      	ldr	r1, [r7, #8]
 80022d6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80022d8:	f000 fa4c 	bl	8002774 <prvCopyDataToQueue>
 80022dc:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80022de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d004      	beq.n	80022f0 <xQueueGenericSend+0x114>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80022e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022e8:	3324      	adds	r3, #36	@ 0x24
 80022ea:	4618      	mov	r0, r3
 80022ec:	f001 f866 	bl	80033bc <xTaskRemoveFromEventList>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80022f0:	f002 f804 	bl	80042fc <vPortExitCritical>
				return pdPASS;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e07d      	b.n	80023f4 <xQueueGenericSend+0x218>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d110      	bne.n	8002320 <xQueueGenericSend+0x144>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80022fe:	f001 fffd 	bl	80042fc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
 8002302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002304:	4618      	mov	r0, r3
 8002306:	f004 f957 	bl	80065b8 <SEGGER_SYSVIEW_ShrinkId>
 800230a:	68ba      	ldr	r2, [r7, #8]
 800230c:	6879      	ldr	r1, [r7, #4]
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	9300      	str	r3, [sp, #0]
 8002312:	460b      	mov	r3, r1
 8002314:	4601      	mov	r1, r0
 8002316:	205a      	movs	r0, #90	@ 0x5a
 8002318:	f003 fd12 	bl	8005d40 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_FULL;
 800231c:	2300      	movs	r3, #0
 800231e:	e069      	b.n	80023f4 <xQueueGenericSend+0x218>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002320:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002322:	2b00      	cmp	r3, #0
 8002324:	d106      	bne.n	8002334 <xQueueGenericSend+0x158>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002326:	f107 0314 	add.w	r3, r7, #20
 800232a:	4618      	mov	r0, r3
 800232c:	f001 f8ae 	bl	800348c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002330:	2301      	movs	r3, #1
 8002332:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002334:	f001 ffe2 	bl	80042fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002338:	f000 fe16 	bl	8002f68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800233c:	f001 ffac 	bl	8004298 <vPortEnterCritical>
 8002340:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002342:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002346:	b25b      	sxtb	r3, r3
 8002348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800234c:	d103      	bne.n	8002356 <xQueueGenericSend+0x17a>
 800234e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002350:	2200      	movs	r2, #0
 8002352:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002358:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800235c:	b25b      	sxtb	r3, r3
 800235e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002362:	d103      	bne.n	800236c <xQueueGenericSend+0x190>
 8002364:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002366:	2200      	movs	r2, #0
 8002368:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800236c:	f001 ffc6 	bl	80042fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002370:	1d3a      	adds	r2, r7, #4
 8002372:	f107 0314 	add.w	r3, r7, #20
 8002376:	4611      	mov	r1, r2
 8002378:	4618      	mov	r0, r3
 800237a:	f001 f89d 	bl	80034b8 <xTaskCheckForTimeOut>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d124      	bne.n	80023ce <xQueueGenericSend+0x1f2>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002384:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002386:	f000 faed 	bl	8002964 <prvIsQueueFull>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d018      	beq.n	80023c2 <xQueueGenericSend+0x1e6>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002392:	3310      	adds	r3, #16
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	4611      	mov	r1, r2
 8002398:	4618      	mov	r0, r3
 800239a:	f000 ffb9 	bl	8003310 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800239e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80023a0:	f000 fa78 	bl	8002894 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80023a4:	f000 fdee 	bl	8002f84 <xTaskResumeAll>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	f47f af79 	bne.w	80022a2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80023b0:	4b12      	ldr	r3, [pc, #72]	@ (80023fc <xQueueGenericSend+0x220>)
 80023b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80023b6:	601a      	str	r2, [r3, #0]
 80023b8:	f3bf 8f4f 	dsb	sy
 80023bc:	f3bf 8f6f 	isb	sy
 80023c0:	e76f      	b.n	80022a2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80023c2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80023c4:	f000 fa66 	bl	8002894 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80023c8:	f000 fddc 	bl	8002f84 <xTaskResumeAll>
 80023cc:	e769      	b.n	80022a2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80023ce:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80023d0:	f000 fa60 	bl	8002894 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80023d4:	f000 fdd6 	bl	8002f84 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
 80023d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023da:	4618      	mov	r0, r3
 80023dc:	f004 f8ec 	bl	80065b8 <SEGGER_SYSVIEW_ShrinkId>
 80023e0:	68ba      	ldr	r2, [r7, #8]
 80023e2:	6879      	ldr	r1, [r7, #4]
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	9300      	str	r3, [sp, #0]
 80023e8:	460b      	mov	r3, r1
 80023ea:	4601      	mov	r1, r0
 80023ec:	205a      	movs	r0, #90	@ 0x5a
 80023ee:	f003 fca7 	bl	8005d40 <SEGGER_SYSVIEW_RecordU32x4>
			return errQUEUE_FULL;
 80023f2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3738      	adds	r7, #56	@ 0x38
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	e000ed04 	.word	0xe000ed04

08002400 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b090      	sub	sp, #64	@ 0x40
 8002404:	af00      	add	r7, sp, #0
 8002406:	60f8      	str	r0, [r7, #12]
 8002408:	60b9      	str	r1, [r7, #8]
 800240a:	607a      	str	r2, [r7, #4]
 800240c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8002412:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002414:	2b00      	cmp	r3, #0
 8002416:	d10b      	bne.n	8002430 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8002418:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800241c:	f383 8811 	msr	BASEPRI, r3
 8002420:	f3bf 8f6f 	isb	sy
 8002424:	f3bf 8f4f 	dsb	sy
 8002428:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800242a:	bf00      	nop
 800242c:	bf00      	nop
 800242e:	e7fd      	b.n	800242c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d103      	bne.n	800243e <xQueueGenericSendFromISR+0x3e>
 8002436:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800243a:	2b00      	cmp	r3, #0
 800243c:	d101      	bne.n	8002442 <xQueueGenericSendFromISR+0x42>
 800243e:	2301      	movs	r3, #1
 8002440:	e000      	b.n	8002444 <xQueueGenericSendFromISR+0x44>
 8002442:	2300      	movs	r3, #0
 8002444:	2b00      	cmp	r3, #0
 8002446:	d10b      	bne.n	8002460 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8002448:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800244c:	f383 8811 	msr	BASEPRI, r3
 8002450:	f3bf 8f6f 	isb	sy
 8002454:	f3bf 8f4f 	dsb	sy
 8002458:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800245a:	bf00      	nop
 800245c:	bf00      	nop
 800245e:	e7fd      	b.n	800245c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	2b02      	cmp	r3, #2
 8002464:	d103      	bne.n	800246e <xQueueGenericSendFromISR+0x6e>
 8002466:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002468:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800246a:	2b01      	cmp	r3, #1
 800246c:	d101      	bne.n	8002472 <xQueueGenericSendFromISR+0x72>
 800246e:	2301      	movs	r3, #1
 8002470:	e000      	b.n	8002474 <xQueueGenericSendFromISR+0x74>
 8002472:	2300      	movs	r3, #0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d10b      	bne.n	8002490 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8002478:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800247c:	f383 8811 	msr	BASEPRI, r3
 8002480:	f3bf 8f6f 	isb	sy
 8002484:	f3bf 8f4f 	dsb	sy
 8002488:	623b      	str	r3, [r7, #32]
}
 800248a:	bf00      	nop
 800248c:	bf00      	nop
 800248e:	e7fd      	b.n	800248c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002490:	f001 ffe2 	bl	8004458 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002494:	f3ef 8211 	mrs	r2, BASEPRI
 8002498:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800249c:	f383 8811 	msr	BASEPRI, r3
 80024a0:	f3bf 8f6f 	isb	sy
 80024a4:	f3bf 8f4f 	dsb	sy
 80024a8:	61fa      	str	r2, [r7, #28]
 80024aa:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80024ac:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80024ae:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80024b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80024b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d302      	bcc.n	80024c2 <xQueueGenericSendFromISR+0xc2>
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	2b02      	cmp	r3, #2
 80024c0:	d139      	bne.n	8002536 <xQueueGenericSendFromISR+0x136>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80024c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024c4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80024c8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80024cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024d0:	62fb      	str	r3, [r7, #44]	@ 0x2c

			traceQUEUE_SEND_FROM_ISR( pxQueue );
 80024d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024d4:	4618      	mov	r0, r3
 80024d6:	f004 f86f 	bl	80065b8 <SEGGER_SYSVIEW_ShrinkId>
 80024da:	4601      	mov	r1, r0
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	461a      	mov	r2, r3
 80024e0:	2060      	movs	r0, #96	@ 0x60
 80024e2:	f003 fb5d 	bl	8005ba0 <SEGGER_SYSVIEW_RecordU32x2>
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80024e6:	683a      	ldr	r2, [r7, #0]
 80024e8:	68b9      	ldr	r1, [r7, #8]
 80024ea:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80024ec:	f000 f942 	bl	8002774 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80024f0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80024f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024f8:	d112      	bne.n	8002520 <xQueueGenericSendFromISR+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80024fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d016      	beq.n	8002530 <xQueueGenericSendFromISR+0x130>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002502:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002504:	3324      	adds	r3, #36	@ 0x24
 8002506:	4618      	mov	r0, r3
 8002508:	f000 ff58 	bl	80033bc <xTaskRemoveFromEventList>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d00e      	beq.n	8002530 <xQueueGenericSendFromISR+0x130>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d00b      	beq.n	8002530 <xQueueGenericSendFromISR+0x130>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2201      	movs	r2, #1
 800251c:	601a      	str	r2, [r3, #0]
 800251e:	e007      	b.n	8002530 <xQueueGenericSendFromISR+0x130>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002520:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002524:	3301      	adds	r3, #1
 8002526:	b2db      	uxtb	r3, r3
 8002528:	b25a      	sxtb	r2, r3
 800252a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800252c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8002530:	2301      	movs	r3, #1
 8002532:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8002534:	e00b      	b.n	800254e <xQueueGenericSendFromISR+0x14e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8002536:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002538:	4618      	mov	r0, r3
 800253a:	f004 f83d 	bl	80065b8 <SEGGER_SYSVIEW_ShrinkId>
 800253e:	4601      	mov	r1, r0
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	461a      	mov	r2, r3
 8002544:	2060      	movs	r0, #96	@ 0x60
 8002546:	f003 fb2b 	bl	8005ba0 <SEGGER_SYSVIEW_RecordU32x2>
			xReturn = errQUEUE_FULL;
 800254a:	2300      	movs	r3, #0
 800254c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800254e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002550:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002558:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800255a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800255c:	4618      	mov	r0, r3
 800255e:	3740      	adds	r7, #64	@ 0x40
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}

08002564 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002564:	b590      	push	{r4, r7, lr}
 8002566:	b08f      	sub	sp, #60	@ 0x3c
 8002568:	af02      	add	r7, sp, #8
 800256a:	60f8      	str	r0, [r7, #12]
 800256c:	60b9      	str	r1, [r7, #8]
 800256e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002570:	2300      	movs	r3, #0
 8002572:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002578:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800257a:	2b00      	cmp	r3, #0
 800257c:	d10b      	bne.n	8002596 <xQueueReceive+0x32>
	__asm volatile
 800257e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002582:	f383 8811 	msr	BASEPRI, r3
 8002586:	f3bf 8f6f 	isb	sy
 800258a:	f3bf 8f4f 	dsb	sy
 800258e:	623b      	str	r3, [r7, #32]
}
 8002590:	bf00      	nop
 8002592:	bf00      	nop
 8002594:	e7fd      	b.n	8002592 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d103      	bne.n	80025a4 <xQueueReceive+0x40>
 800259c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800259e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d101      	bne.n	80025a8 <xQueueReceive+0x44>
 80025a4:	2301      	movs	r3, #1
 80025a6:	e000      	b.n	80025aa <xQueueReceive+0x46>
 80025a8:	2300      	movs	r3, #0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d10b      	bne.n	80025c6 <xQueueReceive+0x62>
	__asm volatile
 80025ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025b2:	f383 8811 	msr	BASEPRI, r3
 80025b6:	f3bf 8f6f 	isb	sy
 80025ba:	f3bf 8f4f 	dsb	sy
 80025be:	61fb      	str	r3, [r7, #28]
}
 80025c0:	bf00      	nop
 80025c2:	bf00      	nop
 80025c4:	e7fd      	b.n	80025c2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80025c6:	f001 f8f5 	bl	80037b4 <xTaskGetSchedulerState>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d102      	bne.n	80025d6 <xQueueReceive+0x72>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d101      	bne.n	80025da <xQueueReceive+0x76>
 80025d6:	2301      	movs	r3, #1
 80025d8:	e000      	b.n	80025dc <xQueueReceive+0x78>
 80025da:	2300      	movs	r3, #0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d10b      	bne.n	80025f8 <xQueueReceive+0x94>
	__asm volatile
 80025e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025e4:	f383 8811 	msr	BASEPRI, r3
 80025e8:	f3bf 8f6f 	isb	sy
 80025ec:	f3bf 8f4f 	dsb	sy
 80025f0:	61bb      	str	r3, [r7, #24]
}
 80025f2:	bf00      	nop
 80025f4:	bf00      	nop
 80025f6:	e7fd      	b.n	80025f4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80025f8:	f001 fe4e 	bl	8004298 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80025fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002600:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002604:	2b00      	cmp	r3, #0
 8002606:	d024      	beq.n	8002652 <xQueueReceive+0xee>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002608:	68b9      	ldr	r1, [r7, #8]
 800260a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800260c:	f000 f91c 	bl	8002848 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
 8002610:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002612:	4618      	mov	r0, r3
 8002614:	f003 ffd0 	bl	80065b8 <SEGGER_SYSVIEW_ShrinkId>
 8002618:	4604      	mov	r4, r0
 800261a:	2000      	movs	r0, #0
 800261c:	f003 ffcc 	bl	80065b8 <SEGGER_SYSVIEW_ShrinkId>
 8002620:	4602      	mov	r2, r0
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2101      	movs	r1, #1
 8002626:	9100      	str	r1, [sp, #0]
 8002628:	4621      	mov	r1, r4
 800262a:	205c      	movs	r0, #92	@ 0x5c
 800262c:	f003 fb88 	bl	8005d40 <SEGGER_SYSVIEW_RecordU32x4>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002632:	1e5a      	subs	r2, r3, #1
 8002634:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002636:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002638:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800263a:	691b      	ldr	r3, [r3, #16]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d004      	beq.n	800264a <xQueueReceive+0xe6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002640:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002642:	3310      	adds	r3, #16
 8002644:	4618      	mov	r0, r3
 8002646:	f000 feb9 	bl	80033bc <xTaskRemoveFromEventList>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800264a:	f001 fe57 	bl	80042fc <vPortExitCritical>
				return pdPASS;
 800264e:	2301      	movs	r3, #1
 8002650:	e08a      	b.n	8002768 <xQueueReceive+0x204>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d113      	bne.n	8002680 <xQueueReceive+0x11c>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002658:	f001 fe50 	bl	80042fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 800265c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800265e:	4618      	mov	r0, r3
 8002660:	f003 ffaa 	bl	80065b8 <SEGGER_SYSVIEW_ShrinkId>
 8002664:	4604      	mov	r4, r0
 8002666:	2000      	movs	r0, #0
 8002668:	f003 ffa6 	bl	80065b8 <SEGGER_SYSVIEW_ShrinkId>
 800266c:	4602      	mov	r2, r0
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2101      	movs	r1, #1
 8002672:	9100      	str	r1, [sp, #0]
 8002674:	4621      	mov	r1, r4
 8002676:	205c      	movs	r0, #92	@ 0x5c
 8002678:	f003 fb62 	bl	8005d40 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_EMPTY;
 800267c:	2300      	movs	r3, #0
 800267e:	e073      	b.n	8002768 <xQueueReceive+0x204>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002680:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002682:	2b00      	cmp	r3, #0
 8002684:	d106      	bne.n	8002694 <xQueueReceive+0x130>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002686:	f107 0310 	add.w	r3, r7, #16
 800268a:	4618      	mov	r0, r3
 800268c:	f000 fefe 	bl	800348c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002690:	2301      	movs	r3, #1
 8002692:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002694:	f001 fe32 	bl	80042fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002698:	f000 fc66 	bl	8002f68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800269c:	f001 fdfc 	bl	8004298 <vPortEnterCritical>
 80026a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026a2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80026a6:	b25b      	sxtb	r3, r3
 80026a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026ac:	d103      	bne.n	80026b6 <xQueueReceive+0x152>
 80026ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026b0:	2200      	movs	r2, #0
 80026b2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80026b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026b8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80026bc:	b25b      	sxtb	r3, r3
 80026be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026c2:	d103      	bne.n	80026cc <xQueueReceive+0x168>
 80026c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026c6:	2200      	movs	r2, #0
 80026c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80026cc:	f001 fe16 	bl	80042fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80026d0:	1d3a      	adds	r2, r7, #4
 80026d2:	f107 0310 	add.w	r3, r7, #16
 80026d6:	4611      	mov	r1, r2
 80026d8:	4618      	mov	r0, r3
 80026da:	f000 feed 	bl	80034b8 <xTaskCheckForTimeOut>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d124      	bne.n	800272e <xQueueReceive+0x1ca>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80026e4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80026e6:	f000 f927 	bl	8002938 <prvIsQueueEmpty>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d018      	beq.n	8002722 <xQueueReceive+0x1be>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80026f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026f2:	3324      	adds	r3, #36	@ 0x24
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	4611      	mov	r1, r2
 80026f8:	4618      	mov	r0, r3
 80026fa:	f000 fe09 	bl	8003310 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80026fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002700:	f000 f8c8 	bl	8002894 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002704:	f000 fc3e 	bl	8002f84 <xTaskResumeAll>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	f47f af74 	bne.w	80025f8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8002710:	4b17      	ldr	r3, [pc, #92]	@ (8002770 <xQueueReceive+0x20c>)
 8002712:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002716:	601a      	str	r2, [r3, #0]
 8002718:	f3bf 8f4f 	dsb	sy
 800271c:	f3bf 8f6f 	isb	sy
 8002720:	e76a      	b.n	80025f8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002722:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002724:	f000 f8b6 	bl	8002894 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002728:	f000 fc2c 	bl	8002f84 <xTaskResumeAll>
 800272c:	e764      	b.n	80025f8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800272e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002730:	f000 f8b0 	bl	8002894 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002734:	f000 fc26 	bl	8002f84 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002738:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800273a:	f000 f8fd 	bl	8002938 <prvIsQueueEmpty>
 800273e:	4603      	mov	r3, r0
 8002740:	2b00      	cmp	r3, #0
 8002742:	f43f af59 	beq.w	80025f8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002746:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002748:	4618      	mov	r0, r3
 800274a:	f003 ff35 	bl	80065b8 <SEGGER_SYSVIEW_ShrinkId>
 800274e:	4604      	mov	r4, r0
 8002750:	2000      	movs	r0, #0
 8002752:	f003 ff31 	bl	80065b8 <SEGGER_SYSVIEW_ShrinkId>
 8002756:	4602      	mov	r2, r0
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2101      	movs	r1, #1
 800275c:	9100      	str	r1, [sp, #0]
 800275e:	4621      	mov	r1, r4
 8002760:	205c      	movs	r0, #92	@ 0x5c
 8002762:	f003 faed 	bl	8005d40 <SEGGER_SYSVIEW_RecordU32x4>
				return errQUEUE_EMPTY;
 8002766:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002768:	4618      	mov	r0, r3
 800276a:	3734      	adds	r7, #52	@ 0x34
 800276c:	46bd      	mov	sp, r7
 800276e:	bd90      	pop	{r4, r7, pc}
 8002770:	e000ed04 	.word	0xe000ed04

08002774 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b086      	sub	sp, #24
 8002778:	af00      	add	r7, sp, #0
 800277a:	60f8      	str	r0, [r7, #12]
 800277c:	60b9      	str	r1, [r7, #8]
 800277e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002780:	2300      	movs	r3, #0
 8002782:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002788:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800278e:	2b00      	cmp	r3, #0
 8002790:	d10d      	bne.n	80027ae <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d14d      	bne.n	8002836 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	4618      	mov	r0, r3
 80027a0:	f001 f826 	bl	80037f0 <xTaskPriorityDisinherit>
 80027a4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2200      	movs	r2, #0
 80027aa:	609a      	str	r2, [r3, #8]
 80027ac:	e043      	b.n	8002836 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d119      	bne.n	80027e8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	6858      	ldr	r0, [r3, #4]
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027bc:	461a      	mov	r2, r3
 80027be:	68b9      	ldr	r1, [r7, #8]
 80027c0:	f004 f92e 	bl	8006a20 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	685a      	ldr	r2, [r3, #4]
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027cc:	441a      	add	r2, r3
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	685a      	ldr	r2, [r3, #4]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	429a      	cmp	r2, r3
 80027dc:	d32b      	bcc.n	8002836 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	605a      	str	r2, [r3, #4]
 80027e6:	e026      	b.n	8002836 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	68d8      	ldr	r0, [r3, #12]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027f0:	461a      	mov	r2, r3
 80027f2:	68b9      	ldr	r1, [r7, #8]
 80027f4:	f004 f914 	bl	8006a20 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	68da      	ldr	r2, [r3, #12]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002800:	425b      	negs	r3, r3
 8002802:	441a      	add	r2, r3
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	68da      	ldr	r2, [r3, #12]
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	429a      	cmp	r2, r3
 8002812:	d207      	bcs.n	8002824 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	689a      	ldr	r2, [r3, #8]
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800281c:	425b      	negs	r3, r3
 800281e:	441a      	add	r2, r3
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2b02      	cmp	r3, #2
 8002828:	d105      	bne.n	8002836 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d002      	beq.n	8002836 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	3b01      	subs	r3, #1
 8002834:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	1c5a      	adds	r2, r3, #1
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800283e:	697b      	ldr	r3, [r7, #20]
}
 8002840:	4618      	mov	r0, r3
 8002842:	3718      	adds	r7, #24
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}

08002848 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b082      	sub	sp, #8
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002856:	2b00      	cmp	r3, #0
 8002858:	d018      	beq.n	800288c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	68da      	ldr	r2, [r3, #12]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002862:	441a      	add	r2, r3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	68da      	ldr	r2, [r3, #12]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	429a      	cmp	r2, r3
 8002872:	d303      	bcc.n	800287c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	68d9      	ldr	r1, [r3, #12]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002884:	461a      	mov	r2, r3
 8002886:	6838      	ldr	r0, [r7, #0]
 8002888:	f004 f8ca 	bl	8006a20 <memcpy>
	}
}
 800288c:	bf00      	nop
 800288e:	3708      	adds	r7, #8
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}

08002894 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b084      	sub	sp, #16
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800289c:	f001 fcfc 	bl	8004298 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80028a6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80028a8:	e011      	b.n	80028ce <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d012      	beq.n	80028d8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	3324      	adds	r3, #36	@ 0x24
 80028b6:	4618      	mov	r0, r3
 80028b8:	f000 fd80 	bl	80033bc <xTaskRemoveFromEventList>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d001      	beq.n	80028c6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80028c2:	f000 fe5d 	bl	8003580 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80028c6:	7bfb      	ldrb	r3, [r7, #15]
 80028c8:	3b01      	subs	r3, #1
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80028ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	dce9      	bgt.n	80028aa <prvUnlockQueue+0x16>
 80028d6:	e000      	b.n	80028da <prvUnlockQueue+0x46>
					break;
 80028d8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	22ff      	movs	r2, #255	@ 0xff
 80028de:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80028e2:	f001 fd0b 	bl	80042fc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80028e6:	f001 fcd7 	bl	8004298 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80028f0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80028f2:	e011      	b.n	8002918 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	691b      	ldr	r3, [r3, #16]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d012      	beq.n	8002922 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	3310      	adds	r3, #16
 8002900:	4618      	mov	r0, r3
 8002902:	f000 fd5b 	bl	80033bc <xTaskRemoveFromEventList>
 8002906:	4603      	mov	r3, r0
 8002908:	2b00      	cmp	r3, #0
 800290a:	d001      	beq.n	8002910 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800290c:	f000 fe38 	bl	8003580 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002910:	7bbb      	ldrb	r3, [r7, #14]
 8002912:	3b01      	subs	r3, #1
 8002914:	b2db      	uxtb	r3, r3
 8002916:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002918:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800291c:	2b00      	cmp	r3, #0
 800291e:	dce9      	bgt.n	80028f4 <prvUnlockQueue+0x60>
 8002920:	e000      	b.n	8002924 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002922:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	22ff      	movs	r2, #255	@ 0xff
 8002928:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800292c:	f001 fce6 	bl	80042fc <vPortExitCritical>
}
 8002930:	bf00      	nop
 8002932:	3710      	adds	r7, #16
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}

08002938 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b084      	sub	sp, #16
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002940:	f001 fcaa 	bl	8004298 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002948:	2b00      	cmp	r3, #0
 800294a:	d102      	bne.n	8002952 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800294c:	2301      	movs	r3, #1
 800294e:	60fb      	str	r3, [r7, #12]
 8002950:	e001      	b.n	8002956 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002952:	2300      	movs	r3, #0
 8002954:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002956:	f001 fcd1 	bl	80042fc <vPortExitCritical>

	return xReturn;
 800295a:	68fb      	ldr	r3, [r7, #12]
}
 800295c:	4618      	mov	r0, r3
 800295e:	3710      	adds	r7, #16
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}

08002964 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b084      	sub	sp, #16
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800296c:	f001 fc94 	bl	8004298 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002978:	429a      	cmp	r2, r3
 800297a:	d102      	bne.n	8002982 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800297c:	2301      	movs	r3, #1
 800297e:	60fb      	str	r3, [r7, #12]
 8002980:	e001      	b.n	8002986 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002982:	2300      	movs	r3, #0
 8002984:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002986:	f001 fcb9 	bl	80042fc <vPortExitCritical>

	return xReturn;
 800298a:	68fb      	ldr	r3, [r7, #12]
}
 800298c:	4618      	mov	r0, r3
 800298e:	3710      	adds	r7, #16
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}

08002994 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002994:	b580      	push	{r7, lr}
 8002996:	b084      	sub	sp, #16
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800299e:	2300      	movs	r3, #0
 80029a0:	60fb      	str	r3, [r7, #12]
 80029a2:	e01e      	b.n	80029e2 <vQueueAddToRegistry+0x4e>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80029a4:	4a13      	ldr	r2, [pc, #76]	@ (80029f4 <vQueueAddToRegistry+0x60>)
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d115      	bne.n	80029dc <vQueueAddToRegistry+0x48>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80029b0:	4910      	ldr	r1, [pc, #64]	@ (80029f4 <vQueueAddToRegistry+0x60>)
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	683a      	ldr	r2, [r7, #0]
 80029b6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80029ba:	4a0e      	ldr	r2, [pc, #56]	@ (80029f4 <vQueueAddToRegistry+0x60>)
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	00db      	lsls	r3, r3, #3
 80029c0:	4413      	add	r3, r2
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4618      	mov	r0, r3
 80029ca:	f003 fdf5 	bl	80065b8 <SEGGER_SYSVIEW_ShrinkId>
 80029ce:	4601      	mov	r1, r0
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	461a      	mov	r2, r3
 80029d4:	2071      	movs	r0, #113	@ 0x71
 80029d6:	f003 f8e3 	bl	8005ba0 <SEGGER_SYSVIEW_RecordU32x2>
				break;
 80029da:	e006      	b.n	80029ea <vQueueAddToRegistry+0x56>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	3301      	adds	r3, #1
 80029e0:	60fb      	str	r3, [r7, #12]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2b07      	cmp	r3, #7
 80029e6:	d9dd      	bls.n	80029a4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80029e8:	bf00      	nop
 80029ea:	bf00      	nop
 80029ec:	3710      	adds	r7, #16
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	20000824 	.word	0x20000824

080029f8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b086      	sub	sp, #24
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	60f8      	str	r0, [r7, #12]
 8002a00:	60b9      	str	r1, [r7, #8]
 8002a02:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002a08:	f001 fc46 	bl	8004298 <vPortEnterCritical>
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002a12:	b25b      	sxtb	r3, r3
 8002a14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a18:	d103      	bne.n	8002a22 <vQueueWaitForMessageRestricted+0x2a>
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002a28:	b25b      	sxtb	r3, r3
 8002a2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a2e:	d103      	bne.n	8002a38 <vQueueWaitForMessageRestricted+0x40>
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	2200      	movs	r2, #0
 8002a34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002a38:	f001 fc60 	bl	80042fc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d106      	bne.n	8002a52 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	3324      	adds	r3, #36	@ 0x24
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	68b9      	ldr	r1, [r7, #8]
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f000 fc85 	bl	800335c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002a52:	6978      	ldr	r0, [r7, #20]
 8002a54:	f7ff ff1e 	bl	8002894 <prvUnlockQueue>
	}
 8002a58:	bf00      	nop
 8002a5a:	3718      	adds	r7, #24
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}

08002a60 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b08e      	sub	sp, #56	@ 0x38
 8002a64:	af04      	add	r7, sp, #16
 8002a66:	60f8      	str	r0, [r7, #12]
 8002a68:	60b9      	str	r1, [r7, #8]
 8002a6a:	607a      	str	r2, [r7, #4]
 8002a6c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002a6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d10b      	bne.n	8002a8c <xTaskCreateStatic+0x2c>
	__asm volatile
 8002a74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a78:	f383 8811 	msr	BASEPRI, r3
 8002a7c:	f3bf 8f6f 	isb	sy
 8002a80:	f3bf 8f4f 	dsb	sy
 8002a84:	623b      	str	r3, [r7, #32]
}
 8002a86:	bf00      	nop
 8002a88:	bf00      	nop
 8002a8a:	e7fd      	b.n	8002a88 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002a8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d10b      	bne.n	8002aaa <xTaskCreateStatic+0x4a>
	__asm volatile
 8002a92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a96:	f383 8811 	msr	BASEPRI, r3
 8002a9a:	f3bf 8f6f 	isb	sy
 8002a9e:	f3bf 8f4f 	dsb	sy
 8002aa2:	61fb      	str	r3, [r7, #28]
}
 8002aa4:	bf00      	nop
 8002aa6:	bf00      	nop
 8002aa8:	e7fd      	b.n	8002aa6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002aaa:	23a8      	movs	r3, #168	@ 0xa8
 8002aac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	2ba8      	cmp	r3, #168	@ 0xa8
 8002ab2:	d00b      	beq.n	8002acc <xTaskCreateStatic+0x6c>
	__asm volatile
 8002ab4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ab8:	f383 8811 	msr	BASEPRI, r3
 8002abc:	f3bf 8f6f 	isb	sy
 8002ac0:	f3bf 8f4f 	dsb	sy
 8002ac4:	61bb      	str	r3, [r7, #24]
}
 8002ac6:	bf00      	nop
 8002ac8:	bf00      	nop
 8002aca:	e7fd      	b.n	8002ac8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002acc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002ace:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d01e      	beq.n	8002b12 <xTaskCreateStatic+0xb2>
 8002ad4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d01b      	beq.n	8002b12 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002ada:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002adc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ae0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002ae2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ae6:	2202      	movs	r2, #2
 8002ae8:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002aec:	2300      	movs	r3, #0
 8002aee:	9303      	str	r3, [sp, #12]
 8002af0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002af2:	9302      	str	r3, [sp, #8]
 8002af4:	f107 0314 	add.w	r3, r7, #20
 8002af8:	9301      	str	r3, [sp, #4]
 8002afa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002afc:	9300      	str	r3, [sp, #0]
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	68b9      	ldr	r1, [r7, #8]
 8002b04:	68f8      	ldr	r0, [r7, #12]
 8002b06:	f000 f851 	bl	8002bac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002b0a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002b0c:	f000 f8f6 	bl	8002cfc <prvAddNewTaskToReadyList>
 8002b10:	e001      	b.n	8002b16 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8002b12:	2300      	movs	r3, #0
 8002b14:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002b16:	697b      	ldr	r3, [r7, #20]
	}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3728      	adds	r7, #40	@ 0x28
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}

08002b20 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b08c      	sub	sp, #48	@ 0x30
 8002b24:	af04      	add	r7, sp, #16
 8002b26:	60f8      	str	r0, [r7, #12]
 8002b28:	60b9      	str	r1, [r7, #8]
 8002b2a:	603b      	str	r3, [r7, #0]
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002b30:	88fb      	ldrh	r3, [r7, #6]
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	4618      	mov	r0, r3
 8002b36:	f001 fcb9 	bl	80044ac <pvPortMalloc>
 8002b3a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d00e      	beq.n	8002b60 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002b42:	20a8      	movs	r0, #168	@ 0xa8
 8002b44:	f001 fcb2 	bl	80044ac <pvPortMalloc>
 8002b48:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d003      	beq.n	8002b58 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	697a      	ldr	r2, [r7, #20]
 8002b54:	631a      	str	r2, [r3, #48]	@ 0x30
 8002b56:	e005      	b.n	8002b64 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002b58:	6978      	ldr	r0, [r7, #20]
 8002b5a:	f001 fd75 	bl	8004648 <vPortFree>
 8002b5e:	e001      	b.n	8002b64 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002b60:	2300      	movs	r3, #0
 8002b62:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d017      	beq.n	8002b9a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002b72:	88fa      	ldrh	r2, [r7, #6]
 8002b74:	2300      	movs	r3, #0
 8002b76:	9303      	str	r3, [sp, #12]
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	9302      	str	r3, [sp, #8]
 8002b7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b7e:	9301      	str	r3, [sp, #4]
 8002b80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b82:	9300      	str	r3, [sp, #0]
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	68b9      	ldr	r1, [r7, #8]
 8002b88:	68f8      	ldr	r0, [r7, #12]
 8002b8a:	f000 f80f 	bl	8002bac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002b8e:	69f8      	ldr	r0, [r7, #28]
 8002b90:	f000 f8b4 	bl	8002cfc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002b94:	2301      	movs	r3, #1
 8002b96:	61bb      	str	r3, [r7, #24]
 8002b98:	e002      	b.n	8002ba0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002b9a:	f04f 33ff 	mov.w	r3, #4294967295
 8002b9e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002ba0:	69bb      	ldr	r3, [r7, #24]
	}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3720      	adds	r7, #32
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
	...

08002bac <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b088      	sub	sp, #32
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	60f8      	str	r0, [r7, #12]
 8002bb4:	60b9      	str	r1, [r7, #8]
 8002bb6:	607a      	str	r2, [r7, #4]
 8002bb8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002bba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bbc:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	21a5      	movs	r1, #165	@ 0xa5
 8002bc6:	f003 fe99 	bl	80068fc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002bca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bcc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002bd4:	3b01      	subs	r3, #1
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	4413      	add	r3, r2
 8002bda:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002bdc:	69bb      	ldr	r3, [r7, #24]
 8002bde:	f023 0307 	bic.w	r3, r3, #7
 8002be2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002be4:	69bb      	ldr	r3, [r7, #24]
 8002be6:	f003 0307 	and.w	r3, r3, #7
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d00b      	beq.n	8002c06 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8002bee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bf2:	f383 8811 	msr	BASEPRI, r3
 8002bf6:	f3bf 8f6f 	isb	sy
 8002bfa:	f3bf 8f4f 	dsb	sy
 8002bfe:	617b      	str	r3, [r7, #20]
}
 8002c00:	bf00      	nop
 8002c02:	bf00      	nop
 8002c04:	e7fd      	b.n	8002c02 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d01f      	beq.n	8002c4c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	61fb      	str	r3, [r7, #28]
 8002c10:	e012      	b.n	8002c38 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002c12:	68ba      	ldr	r2, [r7, #8]
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	4413      	add	r3, r2
 8002c18:	7819      	ldrb	r1, [r3, #0]
 8002c1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002c1c:	69fb      	ldr	r3, [r7, #28]
 8002c1e:	4413      	add	r3, r2
 8002c20:	3334      	adds	r3, #52	@ 0x34
 8002c22:	460a      	mov	r2, r1
 8002c24:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002c26:	68ba      	ldr	r2, [r7, #8]
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	4413      	add	r3, r2
 8002c2c:	781b      	ldrb	r3, [r3, #0]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d006      	beq.n	8002c40 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	3301      	adds	r3, #1
 8002c36:	61fb      	str	r3, [r7, #28]
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	2b0f      	cmp	r3, #15
 8002c3c:	d9e9      	bls.n	8002c12 <prvInitialiseNewTask+0x66>
 8002c3e:	e000      	b.n	8002c42 <prvInitialiseNewTask+0x96>
			{
				break;
 8002c40:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002c42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c44:	2200      	movs	r2, #0
 8002c46:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002c4a:	e003      	b.n	8002c54 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002c4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c4e:	2200      	movs	r2, #0
 8002c50:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002c54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c56:	2b37      	cmp	r3, #55	@ 0x37
 8002c58:	d901      	bls.n	8002c5e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002c5a:	2337      	movs	r3, #55	@ 0x37
 8002c5c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002c5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c60:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002c62:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002c64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c66:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002c68:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002c6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002c70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c72:	3304      	adds	r3, #4
 8002c74:	4618      	mov	r0, r3
 8002c76:	f7ff f91b 	bl	8001eb0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002c7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c7c:	3318      	adds	r3, #24
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f7ff f916 	bl	8001eb0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002c84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002c88:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c8c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8002c90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c92:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002c94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002c98:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002c9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002ca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8002caa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cac:	3354      	adds	r3, #84	@ 0x54
 8002cae:	224c      	movs	r2, #76	@ 0x4c
 8002cb0:	2100      	movs	r1, #0
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f003 fe22 	bl	80068fc <memset>
 8002cb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cba:	4a0d      	ldr	r2, [pc, #52]	@ (8002cf0 <prvInitialiseNewTask+0x144>)
 8002cbc:	659a      	str	r2, [r3, #88]	@ 0x58
 8002cbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cc0:	4a0c      	ldr	r2, [pc, #48]	@ (8002cf4 <prvInitialiseNewTask+0x148>)
 8002cc2:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002cc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cc6:	4a0c      	ldr	r2, [pc, #48]	@ (8002cf8 <prvInitialiseNewTask+0x14c>)
 8002cc8:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002cca:	683a      	ldr	r2, [r7, #0]
 8002ccc:	68f9      	ldr	r1, [r7, #12]
 8002cce:	69b8      	ldr	r0, [r7, #24]
 8002cd0:	f001 f9b4 	bl	800403c <pxPortInitialiseStack>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cd8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002cda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d002      	beq.n	8002ce6 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002ce0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ce2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ce4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002ce6:	bf00      	nop
 8002ce8:	3720      	adds	r7, #32
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	20006130 	.word	0x20006130
 8002cf4:	20006198 	.word	0x20006198
 8002cf8:	20006200 	.word	0x20006200

08002cfc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002cfc:	b5b0      	push	{r4, r5, r7, lr}
 8002cfe:	b084      	sub	sp, #16
 8002d00:	af02      	add	r7, sp, #8
 8002d02:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002d04:	f001 fac8 	bl	8004298 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002d08:	4b35      	ldr	r3, [pc, #212]	@ (8002de0 <prvAddNewTaskToReadyList+0xe4>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	3301      	adds	r3, #1
 8002d0e:	4a34      	ldr	r2, [pc, #208]	@ (8002de0 <prvAddNewTaskToReadyList+0xe4>)
 8002d10:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002d12:	4b34      	ldr	r3, [pc, #208]	@ (8002de4 <prvAddNewTaskToReadyList+0xe8>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d109      	bne.n	8002d2e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002d1a:	4a32      	ldr	r2, [pc, #200]	@ (8002de4 <prvAddNewTaskToReadyList+0xe8>)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002d20:	4b2f      	ldr	r3, [pc, #188]	@ (8002de0 <prvAddNewTaskToReadyList+0xe4>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d110      	bne.n	8002d4a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002d28:	f000 fc48 	bl	80035bc <prvInitialiseTaskLists>
 8002d2c:	e00d      	b.n	8002d4a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002d2e:	4b2e      	ldr	r3, [pc, #184]	@ (8002de8 <prvAddNewTaskToReadyList+0xec>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d109      	bne.n	8002d4a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002d36:	4b2b      	ldr	r3, [pc, #172]	@ (8002de4 <prvAddNewTaskToReadyList+0xe8>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d802      	bhi.n	8002d4a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002d44:	4a27      	ldr	r2, [pc, #156]	@ (8002de4 <prvAddNewTaskToReadyList+0xe8>)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002d4a:	4b28      	ldr	r3, [pc, #160]	@ (8002dec <prvAddNewTaskToReadyList+0xf0>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	3301      	adds	r3, #1
 8002d50:	4a26      	ldr	r2, [pc, #152]	@ (8002dec <prvAddNewTaskToReadyList+0xf0>)
 8002d52:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002d54:	4b25      	ldr	r3, [pc, #148]	@ (8002dec <prvAddNewTaskToReadyList+0xf0>)
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d016      	beq.n	8002d90 <prvAddNewTaskToReadyList+0x94>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4618      	mov	r0, r3
 8002d66:	f003 fb61 	bl	800642c <SEGGER_SYSVIEW_OnTaskCreate>
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d7a:	461d      	mov	r5, r3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	461c      	mov	r4, r3
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d86:	1ae3      	subs	r3, r4, r3
 8002d88:	9300      	str	r3, [sp, #0]
 8002d8a:	462b      	mov	r3, r5
 8002d8c:	f001 fe42 	bl	8004a14 <SYSVIEW_AddTask>

		prvAddTaskToReadyList( pxNewTCB );
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	4618      	mov	r0, r3
 8002d94:	f003 fbce 	bl	8006534 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d9c:	4b14      	ldr	r3, [pc, #80]	@ (8002df0 <prvAddNewTaskToReadyList+0xf4>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d903      	bls.n	8002dac <prvAddNewTaskToReadyList+0xb0>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002da8:	4a11      	ldr	r2, [pc, #68]	@ (8002df0 <prvAddNewTaskToReadyList+0xf4>)
 8002daa:	6013      	str	r3, [r2, #0]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002db0:	4613      	mov	r3, r2
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	4413      	add	r3, r2
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	4a0e      	ldr	r2, [pc, #56]	@ (8002df4 <prvAddNewTaskToReadyList+0xf8>)
 8002dba:	441a      	add	r2, r3
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	3304      	adds	r3, #4
 8002dc0:	4619      	mov	r1, r3
 8002dc2:	4610      	mov	r0, r2
 8002dc4:	f7ff f881 	bl	8001eca <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002dc8:	f001 fa98 	bl	80042fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002dcc:	4b06      	ldr	r3, [pc, #24]	@ (8002de8 <prvAddNewTaskToReadyList+0xec>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d001      	beq.n	8002dd8 <prvAddNewTaskToReadyList+0xdc>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002dd4:	4b03      	ldr	r3, [pc, #12]	@ (8002de4 <prvAddNewTaskToReadyList+0xe8>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002dd8:	bf00      	nop
 8002dda:	3708      	adds	r7, #8
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bdb0      	pop	{r4, r5, r7, pc}
 8002de0:	20000d38 	.word	0x20000d38
 8002de4:	20000864 	.word	0x20000864
 8002de8:	20000d44 	.word	0x20000d44
 8002dec:	20000d54 	.word	0x20000d54
 8002df0:	20000d40 	.word	0x20000d40
 8002df4:	20000868 	.word	0x20000868

08002df8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b084      	sub	sp, #16
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002e00:	2300      	movs	r3, #0
 8002e02:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d01c      	beq.n	8002e44 <vTaskDelay+0x4c>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002e0a:	4b16      	ldr	r3, [pc, #88]	@ (8002e64 <vTaskDelay+0x6c>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d00b      	beq.n	8002e2a <vTaskDelay+0x32>
	__asm volatile
 8002e12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e16:	f383 8811 	msr	BASEPRI, r3
 8002e1a:	f3bf 8f6f 	isb	sy
 8002e1e:	f3bf 8f4f 	dsb	sy
 8002e22:	60bb      	str	r3, [r7, #8]
}
 8002e24:	bf00      	nop
 8002e26:	bf00      	nop
 8002e28:	e7fd      	b.n	8002e26 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002e2a:	f000 f89d 	bl	8002f68 <vTaskSuspendAll>
			{
				traceTASK_DELAY();
 8002e2e:	6879      	ldr	r1, [r7, #4]
 8002e30:	2023      	movs	r0, #35	@ 0x23
 8002e32:	f002 fe79 	bl	8005b28 <SEGGER_SYSVIEW_RecordU32>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002e36:	2100      	movs	r1, #0
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	f000 fd51 	bl	80038e0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002e3e:	f000 f8a1 	bl	8002f84 <xTaskResumeAll>
 8002e42:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d107      	bne.n	8002e5a <vTaskDelay+0x62>
		{
			portYIELD_WITHIN_API();
 8002e4a:	4b07      	ldr	r3, [pc, #28]	@ (8002e68 <vTaskDelay+0x70>)
 8002e4c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e50:	601a      	str	r2, [r3, #0]
 8002e52:	f3bf 8f4f 	dsb	sy
 8002e56:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002e5a:	bf00      	nop
 8002e5c:	3710      	adds	r7, #16
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	20000d60 	.word	0x20000d60
 8002e68:	e000ed04 	.word	0xe000ed04

08002e6c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b08a      	sub	sp, #40	@ 0x28
 8002e70:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002e72:	2300      	movs	r3, #0
 8002e74:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002e76:	2300      	movs	r3, #0
 8002e78:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002e7a:	463a      	mov	r2, r7
 8002e7c:	1d39      	adds	r1, r7, #4
 8002e7e:	f107 0308 	add.w	r3, r7, #8
 8002e82:	4618      	mov	r0, r3
 8002e84:	f7fe ffc0 	bl	8001e08 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002e88:	6839      	ldr	r1, [r7, #0]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	68ba      	ldr	r2, [r7, #8]
 8002e8e:	9202      	str	r2, [sp, #8]
 8002e90:	9301      	str	r3, [sp, #4]
 8002e92:	2300      	movs	r3, #0
 8002e94:	9300      	str	r3, [sp, #0]
 8002e96:	2300      	movs	r3, #0
 8002e98:	460a      	mov	r2, r1
 8002e9a:	492b      	ldr	r1, [pc, #172]	@ (8002f48 <vTaskStartScheduler+0xdc>)
 8002e9c:	482b      	ldr	r0, [pc, #172]	@ (8002f4c <vTaskStartScheduler+0xe0>)
 8002e9e:	f7ff fddf 	bl	8002a60 <xTaskCreateStatic>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	4a2a      	ldr	r2, [pc, #168]	@ (8002f50 <vTaskStartScheduler+0xe4>)
 8002ea6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002ea8:	4b29      	ldr	r3, [pc, #164]	@ (8002f50 <vTaskStartScheduler+0xe4>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d002      	beq.n	8002eb6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	617b      	str	r3, [r7, #20]
 8002eb4:	e001      	b.n	8002eba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d102      	bne.n	8002ec6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8002ec0:	f000 fd62 	bl	8003988 <xTimerCreateTimerTask>
 8002ec4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d129      	bne.n	8002f20 <vTaskStartScheduler+0xb4>
	__asm volatile
 8002ecc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ed0:	f383 8811 	msr	BASEPRI, r3
 8002ed4:	f3bf 8f6f 	isb	sy
 8002ed8:	f3bf 8f4f 	dsb	sy
 8002edc:	613b      	str	r3, [r7, #16]
}
 8002ede:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002ee0:	4b1c      	ldr	r3, [pc, #112]	@ (8002f54 <vTaskStartScheduler+0xe8>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	3354      	adds	r3, #84	@ 0x54
 8002ee6:	4a1c      	ldr	r2, [pc, #112]	@ (8002f58 <vTaskStartScheduler+0xec>)
 8002ee8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002eea:	4b1c      	ldr	r3, [pc, #112]	@ (8002f5c <vTaskStartScheduler+0xf0>)
 8002eec:	f04f 32ff 	mov.w	r2, #4294967295
 8002ef0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002ef2:	4b1b      	ldr	r3, [pc, #108]	@ (8002f60 <vTaskStartScheduler+0xf4>)
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002ef8:	4b1a      	ldr	r3, [pc, #104]	@ (8002f64 <vTaskStartScheduler+0xf8>)
 8002efa:	2200      	movs	r2, #0
 8002efc:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 8002efe:	4b15      	ldr	r3, [pc, #84]	@ (8002f54 <vTaskStartScheduler+0xe8>)
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	4b13      	ldr	r3, [pc, #76]	@ (8002f50 <vTaskStartScheduler+0xe4>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	429a      	cmp	r2, r3
 8002f08:	d102      	bne.n	8002f10 <vTaskStartScheduler+0xa4>
 8002f0a:	f003 fa73 	bl	80063f4 <SEGGER_SYSVIEW_OnIdle>
 8002f0e:	e004      	b.n	8002f1a <vTaskStartScheduler+0xae>
 8002f10:	4b10      	ldr	r3, [pc, #64]	@ (8002f54 <vTaskStartScheduler+0xe8>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4618      	mov	r0, r3
 8002f16:	f003 facb 	bl	80064b0 <SEGGER_SYSVIEW_OnTaskStartExec>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002f1a:	f001 f919 	bl	8004150 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002f1e:	e00f      	b.n	8002f40 <vTaskStartScheduler+0xd4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f26:	d10b      	bne.n	8002f40 <vTaskStartScheduler+0xd4>
	__asm volatile
 8002f28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f2c:	f383 8811 	msr	BASEPRI, r3
 8002f30:	f3bf 8f6f 	isb	sy
 8002f34:	f3bf 8f4f 	dsb	sy
 8002f38:	60fb      	str	r3, [r7, #12]
}
 8002f3a:	bf00      	nop
 8002f3c:	bf00      	nop
 8002f3e:	e7fd      	b.n	8002f3c <vTaskStartScheduler+0xd0>
}
 8002f40:	bf00      	nop
 8002f42:	3718      	adds	r7, #24
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	0800731c 	.word	0x0800731c
 8002f4c:	08003599 	.word	0x08003599
 8002f50:	20000d5c 	.word	0x20000d5c
 8002f54:	20000864 	.word	0x20000864
 8002f58:	20000010 	.word	0x20000010
 8002f5c:	20000d58 	.word	0x20000d58
 8002f60:	20000d44 	.word	0x20000d44
 8002f64:	20000d3c 	.word	0x20000d3c

08002f68 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002f68:	b480      	push	{r7}
 8002f6a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8002f6c:	4b04      	ldr	r3, [pc, #16]	@ (8002f80 <vTaskSuspendAll+0x18>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	3301      	adds	r3, #1
 8002f72:	4a03      	ldr	r2, [pc, #12]	@ (8002f80 <vTaskSuspendAll+0x18>)
 8002f74:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8002f76:	bf00      	nop
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr
 8002f80:	20000d60 	.word	0x20000d60

08002f84 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b084      	sub	sp, #16
 8002f88:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002f92:	4b3e      	ldr	r3, [pc, #248]	@ (800308c <xTaskResumeAll+0x108>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d10b      	bne.n	8002fb2 <xTaskResumeAll+0x2e>
	__asm volatile
 8002f9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f9e:	f383 8811 	msr	BASEPRI, r3
 8002fa2:	f3bf 8f6f 	isb	sy
 8002fa6:	f3bf 8f4f 	dsb	sy
 8002faa:	603b      	str	r3, [r7, #0]
}
 8002fac:	bf00      	nop
 8002fae:	bf00      	nop
 8002fb0:	e7fd      	b.n	8002fae <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002fb2:	f001 f971 	bl	8004298 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002fb6:	4b35      	ldr	r3, [pc, #212]	@ (800308c <xTaskResumeAll+0x108>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	3b01      	subs	r3, #1
 8002fbc:	4a33      	ldr	r2, [pc, #204]	@ (800308c <xTaskResumeAll+0x108>)
 8002fbe:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002fc0:	4b32      	ldr	r3, [pc, #200]	@ (800308c <xTaskResumeAll+0x108>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d15a      	bne.n	800307e <xTaskResumeAll+0xfa>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002fc8:	4b31      	ldr	r3, [pc, #196]	@ (8003090 <xTaskResumeAll+0x10c>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d056      	beq.n	800307e <xTaskResumeAll+0xfa>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002fd0:	e033      	b.n	800303a <xTaskResumeAll+0xb6>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002fd2:	4b30      	ldr	r3, [pc, #192]	@ (8003094 <xTaskResumeAll+0x110>)
 8002fd4:	68db      	ldr	r3, [r3, #12]
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	3318      	adds	r3, #24
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f7fe ffd0 	bl	8001f84 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	3304      	adds	r3, #4
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f7fe ffcb 	bl	8001f84 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f003 fa9f 	bl	8006534 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ffa:	4b27      	ldr	r3, [pc, #156]	@ (8003098 <xTaskResumeAll+0x114>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	429a      	cmp	r2, r3
 8003000:	d903      	bls.n	800300a <xTaskResumeAll+0x86>
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003006:	4a24      	ldr	r2, [pc, #144]	@ (8003098 <xTaskResumeAll+0x114>)
 8003008:	6013      	str	r3, [r2, #0]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800300e:	4613      	mov	r3, r2
 8003010:	009b      	lsls	r3, r3, #2
 8003012:	4413      	add	r3, r2
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	4a21      	ldr	r2, [pc, #132]	@ (800309c <xTaskResumeAll+0x118>)
 8003018:	441a      	add	r2, r3
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	3304      	adds	r3, #4
 800301e:	4619      	mov	r1, r3
 8003020:	4610      	mov	r0, r2
 8003022:	f7fe ff52 	bl	8001eca <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800302a:	4b1d      	ldr	r3, [pc, #116]	@ (80030a0 <xTaskResumeAll+0x11c>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003030:	429a      	cmp	r2, r3
 8003032:	d302      	bcc.n	800303a <xTaskResumeAll+0xb6>
					{
						xYieldPending = pdTRUE;
 8003034:	4b1b      	ldr	r3, [pc, #108]	@ (80030a4 <xTaskResumeAll+0x120>)
 8003036:	2201      	movs	r2, #1
 8003038:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800303a:	4b16      	ldr	r3, [pc, #88]	@ (8003094 <xTaskResumeAll+0x110>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d1c7      	bne.n	8002fd2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d001      	beq.n	800304c <xTaskResumeAll+0xc8>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003048:	f000 fb94 	bl	8003774 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800304c:	4b16      	ldr	r3, [pc, #88]	@ (80030a8 <xTaskResumeAll+0x124>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	60bb      	str	r3, [r7, #8]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d010      	beq.n	800307a <xTaskResumeAll+0xf6>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003058:	f000 f84a 	bl	80030f0 <xTaskIncrementTick>
 800305c:	4603      	mov	r3, r0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d002      	beq.n	8003068 <xTaskResumeAll+0xe4>
							{
								xYieldPending = pdTRUE;
 8003062:	4b10      	ldr	r3, [pc, #64]	@ (80030a4 <xTaskResumeAll+0x120>)
 8003064:	2201      	movs	r2, #1
 8003066:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	3b01      	subs	r3, #1
 800306c:	60bb      	str	r3, [r7, #8]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d1f1      	bne.n	8003058 <xTaskResumeAll+0xd4>

						xPendedTicks = 0;
 8003074:	4b0c      	ldr	r3, [pc, #48]	@ (80030a8 <xTaskResumeAll+0x124>)
 8003076:	2200      	movs	r2, #0
 8003078:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800307a:	4b0a      	ldr	r3, [pc, #40]	@ (80030a4 <xTaskResumeAll+0x120>)
 800307c:	681b      	ldr	r3, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800307e:	f001 f93d 	bl	80042fc <vPortExitCritical>

	return xAlreadyYielded;
 8003082:	687b      	ldr	r3, [r7, #4]
}
 8003084:	4618      	mov	r0, r3
 8003086:	3710      	adds	r7, #16
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}
 800308c:	20000d60 	.word	0x20000d60
 8003090:	20000d38 	.word	0x20000d38
 8003094:	20000cf8 	.word	0x20000cf8
 8003098:	20000d40 	.word	0x20000d40
 800309c:	20000868 	.word	0x20000868
 80030a0:	20000864 	.word	0x20000864
 80030a4:	20000d4c 	.word	0x20000d4c
 80030a8:	20000d48 	.word	0x20000d48

080030ac <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80030b2:	4b05      	ldr	r3, [pc, #20]	@ (80030c8 <xTaskGetTickCount+0x1c>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80030b8:	687b      	ldr	r3, [r7, #4]
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	370c      	adds	r7, #12
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr
 80030c6:	bf00      	nop
 80030c8:	20000d3c 	.word	0x20000d3c

080030cc <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b082      	sub	sp, #8
 80030d0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80030d2:	f001 f9c1 	bl	8004458 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80030d6:	2300      	movs	r3, #0
 80030d8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80030da:	4b04      	ldr	r3, [pc, #16]	@ (80030ec <xTaskGetTickCountFromISR+0x20>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80030e0:	683b      	ldr	r3, [r7, #0]
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3708      	adds	r7, #8
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	20000d3c 	.word	0x20000d3c

080030f0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b086      	sub	sp, #24
 80030f4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80030f6:	2300      	movs	r3, #0
 80030f8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80030fa:	4b42      	ldr	r3, [pc, #264]	@ (8003204 <xTaskIncrementTick+0x114>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d175      	bne.n	80031ee <xTaskIncrementTick+0xfe>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003102:	4b41      	ldr	r3, [pc, #260]	@ (8003208 <xTaskIncrementTick+0x118>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	3301      	adds	r3, #1
 8003108:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800310a:	4a3f      	ldr	r2, [pc, #252]	@ (8003208 <xTaskIncrementTick+0x118>)
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d121      	bne.n	800315a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003116:	4b3d      	ldr	r3, [pc, #244]	@ (800320c <xTaskIncrementTick+0x11c>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d00b      	beq.n	8003138 <xTaskIncrementTick+0x48>
	__asm volatile
 8003120:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003124:	f383 8811 	msr	BASEPRI, r3
 8003128:	f3bf 8f6f 	isb	sy
 800312c:	f3bf 8f4f 	dsb	sy
 8003130:	603b      	str	r3, [r7, #0]
}
 8003132:	bf00      	nop
 8003134:	bf00      	nop
 8003136:	e7fd      	b.n	8003134 <xTaskIncrementTick+0x44>
 8003138:	4b34      	ldr	r3, [pc, #208]	@ (800320c <xTaskIncrementTick+0x11c>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	60fb      	str	r3, [r7, #12]
 800313e:	4b34      	ldr	r3, [pc, #208]	@ (8003210 <xTaskIncrementTick+0x120>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a32      	ldr	r2, [pc, #200]	@ (800320c <xTaskIncrementTick+0x11c>)
 8003144:	6013      	str	r3, [r2, #0]
 8003146:	4a32      	ldr	r2, [pc, #200]	@ (8003210 <xTaskIncrementTick+0x120>)
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	6013      	str	r3, [r2, #0]
 800314c:	4b31      	ldr	r3, [pc, #196]	@ (8003214 <xTaskIncrementTick+0x124>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	3301      	adds	r3, #1
 8003152:	4a30      	ldr	r2, [pc, #192]	@ (8003214 <xTaskIncrementTick+0x124>)
 8003154:	6013      	str	r3, [r2, #0]
 8003156:	f000 fb0d 	bl	8003774 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800315a:	4b2f      	ldr	r3, [pc, #188]	@ (8003218 <xTaskIncrementTick+0x128>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	693a      	ldr	r2, [r7, #16]
 8003160:	429a      	cmp	r2, r3
 8003162:	d349      	bcc.n	80031f8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003164:	4b29      	ldr	r3, [pc, #164]	@ (800320c <xTaskIncrementTick+0x11c>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d104      	bne.n	8003178 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800316e:	4b2a      	ldr	r3, [pc, #168]	@ (8003218 <xTaskIncrementTick+0x128>)
 8003170:	f04f 32ff 	mov.w	r2, #4294967295
 8003174:	601a      	str	r2, [r3, #0]
					break;
 8003176:	e03f      	b.n	80031f8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003178:	4b24      	ldr	r3, [pc, #144]	@ (800320c <xTaskIncrementTick+0x11c>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	68db      	ldr	r3, [r3, #12]
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003188:	693a      	ldr	r2, [r7, #16]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	429a      	cmp	r2, r3
 800318e:	d203      	bcs.n	8003198 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003190:	4a21      	ldr	r2, [pc, #132]	@ (8003218 <xTaskIncrementTick+0x128>)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003196:	e02f      	b.n	80031f8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	3304      	adds	r3, #4
 800319c:	4618      	mov	r0, r3
 800319e:	f7fe fef1 	bl	8001f84 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d004      	beq.n	80031b4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	3318      	adds	r3, #24
 80031ae:	4618      	mov	r0, r3
 80031b0:	f7fe fee8 	bl	8001f84 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	4618      	mov	r0, r3
 80031b8:	f003 f9bc 	bl	8006534 <SEGGER_SYSVIEW_OnTaskStartReady>
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031c0:	4b16      	ldr	r3, [pc, #88]	@ (800321c <xTaskIncrementTick+0x12c>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d903      	bls.n	80031d0 <xTaskIncrementTick+0xe0>
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031cc:	4a13      	ldr	r2, [pc, #76]	@ (800321c <xTaskIncrementTick+0x12c>)
 80031ce:	6013      	str	r3, [r2, #0]
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031d4:	4613      	mov	r3, r2
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	4413      	add	r3, r2
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	4a10      	ldr	r2, [pc, #64]	@ (8003220 <xTaskIncrementTick+0x130>)
 80031de:	441a      	add	r2, r3
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	3304      	adds	r3, #4
 80031e4:	4619      	mov	r1, r3
 80031e6:	4610      	mov	r0, r2
 80031e8:	f7fe fe6f 	bl	8001eca <vListInsertEnd>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80031ec:	e7ba      	b.n	8003164 <xTaskIncrementTick+0x74>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80031ee:	4b0d      	ldr	r3, [pc, #52]	@ (8003224 <xTaskIncrementTick+0x134>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	3301      	adds	r3, #1
 80031f4:	4a0b      	ldr	r2, [pc, #44]	@ (8003224 <xTaskIncrementTick+0x134>)
 80031f6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80031f8:	697b      	ldr	r3, [r7, #20]
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3718      	adds	r7, #24
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	20000d60 	.word	0x20000d60
 8003208:	20000d3c 	.word	0x20000d3c
 800320c:	20000cf0 	.word	0x20000cf0
 8003210:	20000cf4 	.word	0x20000cf4
 8003214:	20000d50 	.word	0x20000d50
 8003218:	20000d58 	.word	0x20000d58
 800321c:	20000d40 	.word	0x20000d40
 8003220:	20000868 	.word	0x20000868
 8003224:	20000d48 	.word	0x20000d48

08003228 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b084      	sub	sp, #16
 800322c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800322e:	4b31      	ldr	r3, [pc, #196]	@ (80032f4 <vTaskSwitchContext+0xcc>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d003      	beq.n	800323e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003236:	4b30      	ldr	r3, [pc, #192]	@ (80032f8 <vTaskSwitchContext+0xd0>)
 8003238:	2201      	movs	r2, #1
 800323a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800323c:	e055      	b.n	80032ea <vTaskSwitchContext+0xc2>
		xYieldPending = pdFALSE;
 800323e:	4b2e      	ldr	r3, [pc, #184]	@ (80032f8 <vTaskSwitchContext+0xd0>)
 8003240:	2200      	movs	r2, #0
 8003242:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003244:	4b2d      	ldr	r3, [pc, #180]	@ (80032fc <vTaskSwitchContext+0xd4>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	60fb      	str	r3, [r7, #12]
 800324a:	e011      	b.n	8003270 <vTaskSwitchContext+0x48>
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d10b      	bne.n	800326a <vTaskSwitchContext+0x42>
	__asm volatile
 8003252:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003256:	f383 8811 	msr	BASEPRI, r3
 800325a:	f3bf 8f6f 	isb	sy
 800325e:	f3bf 8f4f 	dsb	sy
 8003262:	607b      	str	r3, [r7, #4]
}
 8003264:	bf00      	nop
 8003266:	bf00      	nop
 8003268:	e7fd      	b.n	8003266 <vTaskSwitchContext+0x3e>
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	3b01      	subs	r3, #1
 800326e:	60fb      	str	r3, [r7, #12]
 8003270:	4923      	ldr	r1, [pc, #140]	@ (8003300 <vTaskSwitchContext+0xd8>)
 8003272:	68fa      	ldr	r2, [r7, #12]
 8003274:	4613      	mov	r3, r2
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	4413      	add	r3, r2
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	440b      	add	r3, r1
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d0e3      	beq.n	800324c <vTaskSwitchContext+0x24>
 8003284:	68fa      	ldr	r2, [r7, #12]
 8003286:	4613      	mov	r3, r2
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	4413      	add	r3, r2
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	4a1c      	ldr	r2, [pc, #112]	@ (8003300 <vTaskSwitchContext+0xd8>)
 8003290:	4413      	add	r3, r2
 8003292:	60bb      	str	r3, [r7, #8]
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	685a      	ldr	r2, [r3, #4]
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	605a      	str	r2, [r3, #4]
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	685a      	ldr	r2, [r3, #4]
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	3308      	adds	r3, #8
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d104      	bne.n	80032b4 <vTaskSwitchContext+0x8c>
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	685a      	ldr	r2, [r3, #4]
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	605a      	str	r2, [r3, #4]
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	68db      	ldr	r3, [r3, #12]
 80032ba:	4a12      	ldr	r2, [pc, #72]	@ (8003304 <vTaskSwitchContext+0xdc>)
 80032bc:	6013      	str	r3, [r2, #0]
 80032be:	4a0f      	ldr	r2, [pc, #60]	@ (80032fc <vTaskSwitchContext+0xd4>)
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 80032c4:	4b0f      	ldr	r3, [pc, #60]	@ (8003304 <vTaskSwitchContext+0xdc>)
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	4b0f      	ldr	r3, [pc, #60]	@ (8003308 <vTaskSwitchContext+0xe0>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d102      	bne.n	80032d6 <vTaskSwitchContext+0xae>
 80032d0:	f003 f890 	bl	80063f4 <SEGGER_SYSVIEW_OnIdle>
 80032d4:	e004      	b.n	80032e0 <vTaskSwitchContext+0xb8>
 80032d6:	4b0b      	ldr	r3, [pc, #44]	@ (8003304 <vTaskSwitchContext+0xdc>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4618      	mov	r0, r3
 80032dc:	f003 f8e8 	bl	80064b0 <SEGGER_SYSVIEW_OnTaskStartExec>
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80032e0:	4b08      	ldr	r3, [pc, #32]	@ (8003304 <vTaskSwitchContext+0xdc>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	3354      	adds	r3, #84	@ 0x54
 80032e6:	4a09      	ldr	r2, [pc, #36]	@ (800330c <vTaskSwitchContext+0xe4>)
 80032e8:	6013      	str	r3, [r2, #0]
}
 80032ea:	bf00      	nop
 80032ec:	3710      	adds	r7, #16
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	bf00      	nop
 80032f4:	20000d60 	.word	0x20000d60
 80032f8:	20000d4c 	.word	0x20000d4c
 80032fc:	20000d40 	.word	0x20000d40
 8003300:	20000868 	.word	0x20000868
 8003304:	20000864 	.word	0x20000864
 8003308:	20000d5c 	.word	0x20000d5c
 800330c:	20000010 	.word	0x20000010

08003310 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b084      	sub	sp, #16
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
 8003318:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d10b      	bne.n	8003338 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8003320:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003324:	f383 8811 	msr	BASEPRI, r3
 8003328:	f3bf 8f6f 	isb	sy
 800332c:	f3bf 8f4f 	dsb	sy
 8003330:	60fb      	str	r3, [r7, #12]
}
 8003332:	bf00      	nop
 8003334:	bf00      	nop
 8003336:	e7fd      	b.n	8003334 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003338:	4b07      	ldr	r3, [pc, #28]	@ (8003358 <vTaskPlaceOnEventList+0x48>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	3318      	adds	r3, #24
 800333e:	4619      	mov	r1, r3
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	f7fe fde6 	bl	8001f12 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003346:	2101      	movs	r1, #1
 8003348:	6838      	ldr	r0, [r7, #0]
 800334a:	f000 fac9 	bl	80038e0 <prvAddCurrentTaskToDelayedList>
}
 800334e:	bf00      	nop
 8003350:	3710      	adds	r7, #16
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}
 8003356:	bf00      	nop
 8003358:	20000864 	.word	0x20000864

0800335c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800335c:	b580      	push	{r7, lr}
 800335e:	b086      	sub	sp, #24
 8003360:	af00      	add	r7, sp, #0
 8003362:	60f8      	str	r0, [r7, #12]
 8003364:	60b9      	str	r1, [r7, #8]
 8003366:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d10b      	bne.n	8003386 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800336e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003372:	f383 8811 	msr	BASEPRI, r3
 8003376:	f3bf 8f6f 	isb	sy
 800337a:	f3bf 8f4f 	dsb	sy
 800337e:	617b      	str	r3, [r7, #20]
}
 8003380:	bf00      	nop
 8003382:	bf00      	nop
 8003384:	e7fd      	b.n	8003382 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003386:	4b0c      	ldr	r3, [pc, #48]	@ (80033b8 <vTaskPlaceOnEventListRestricted+0x5c>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	3318      	adds	r3, #24
 800338c:	4619      	mov	r1, r3
 800338e:	68f8      	ldr	r0, [r7, #12]
 8003390:	f7fe fd9b 	bl	8001eca <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d002      	beq.n	80033a0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800339a:	f04f 33ff 	mov.w	r3, #4294967295
 800339e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 80033a0:	2024      	movs	r0, #36	@ 0x24
 80033a2:	f002 fba3 	bl	8005aec <SEGGER_SYSVIEW_RecordVoid>
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80033a6:	6879      	ldr	r1, [r7, #4]
 80033a8:	68b8      	ldr	r0, [r7, #8]
 80033aa:	f000 fa99 	bl	80038e0 <prvAddCurrentTaskToDelayedList>
	}
 80033ae:	bf00      	nop
 80033b0:	3718      	adds	r7, #24
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	20000864 	.word	0x20000864

080033bc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b086      	sub	sp, #24
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	68db      	ldr	r3, [r3, #12]
 80033ca:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d10b      	bne.n	80033ea <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80033d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033d6:	f383 8811 	msr	BASEPRI, r3
 80033da:	f3bf 8f6f 	isb	sy
 80033de:	f3bf 8f4f 	dsb	sy
 80033e2:	60fb      	str	r3, [r7, #12]
}
 80033e4:	bf00      	nop
 80033e6:	bf00      	nop
 80033e8:	e7fd      	b.n	80033e6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	3318      	adds	r3, #24
 80033ee:	4618      	mov	r0, r3
 80033f0:	f7fe fdc8 	bl	8001f84 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80033f4:	4b1f      	ldr	r3, [pc, #124]	@ (8003474 <xTaskRemoveFromEventList+0xb8>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d121      	bne.n	8003440 <xTaskRemoveFromEventList+0x84>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	3304      	adds	r3, #4
 8003400:	4618      	mov	r0, r3
 8003402:	f7fe fdbf 	bl	8001f84 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	4618      	mov	r0, r3
 800340a:	f003 f893 	bl	8006534 <SEGGER_SYSVIEW_OnTaskStartReady>
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003412:	4b19      	ldr	r3, [pc, #100]	@ (8003478 <xTaskRemoveFromEventList+0xbc>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	429a      	cmp	r2, r3
 8003418:	d903      	bls.n	8003422 <xTaskRemoveFromEventList+0x66>
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800341e:	4a16      	ldr	r2, [pc, #88]	@ (8003478 <xTaskRemoveFromEventList+0xbc>)
 8003420:	6013      	str	r3, [r2, #0]
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003426:	4613      	mov	r3, r2
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	4413      	add	r3, r2
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	4a13      	ldr	r2, [pc, #76]	@ (800347c <xTaskRemoveFromEventList+0xc0>)
 8003430:	441a      	add	r2, r3
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	3304      	adds	r3, #4
 8003436:	4619      	mov	r1, r3
 8003438:	4610      	mov	r0, r2
 800343a:	f7fe fd46 	bl	8001eca <vListInsertEnd>
 800343e:	e005      	b.n	800344c <xTaskRemoveFromEventList+0x90>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	3318      	adds	r3, #24
 8003444:	4619      	mov	r1, r3
 8003446:	480e      	ldr	r0, [pc, #56]	@ (8003480 <xTaskRemoveFromEventList+0xc4>)
 8003448:	f7fe fd3f 	bl	8001eca <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003450:	4b0c      	ldr	r3, [pc, #48]	@ (8003484 <xTaskRemoveFromEventList+0xc8>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003456:	429a      	cmp	r2, r3
 8003458:	d905      	bls.n	8003466 <xTaskRemoveFromEventList+0xaa>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800345a:	2301      	movs	r3, #1
 800345c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800345e:	4b0a      	ldr	r3, [pc, #40]	@ (8003488 <xTaskRemoveFromEventList+0xcc>)
 8003460:	2201      	movs	r2, #1
 8003462:	601a      	str	r2, [r3, #0]
 8003464:	e001      	b.n	800346a <xTaskRemoveFromEventList+0xae>
	}
	else
	{
		xReturn = pdFALSE;
 8003466:	2300      	movs	r3, #0
 8003468:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800346a:	697b      	ldr	r3, [r7, #20]
}
 800346c:	4618      	mov	r0, r3
 800346e:	3718      	adds	r7, #24
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}
 8003474:	20000d60 	.word	0x20000d60
 8003478:	20000d40 	.word	0x20000d40
 800347c:	20000868 	.word	0x20000868
 8003480:	20000cf8 	.word	0x20000cf8
 8003484:	20000864 	.word	0x20000864
 8003488:	20000d4c 	.word	0x20000d4c

0800348c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800348c:	b480      	push	{r7}
 800348e:	b083      	sub	sp, #12
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003494:	4b06      	ldr	r3, [pc, #24]	@ (80034b0 <vTaskInternalSetTimeOutState+0x24>)
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800349c:	4b05      	ldr	r3, [pc, #20]	@ (80034b4 <vTaskInternalSetTimeOutState+0x28>)
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	605a      	str	r2, [r3, #4]
}
 80034a4:	bf00      	nop
 80034a6:	370c      	adds	r7, #12
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr
 80034b0:	20000d50 	.word	0x20000d50
 80034b4:	20000d3c 	.word	0x20000d3c

080034b8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b088      	sub	sp, #32
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d10b      	bne.n	80034e0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80034c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034cc:	f383 8811 	msr	BASEPRI, r3
 80034d0:	f3bf 8f6f 	isb	sy
 80034d4:	f3bf 8f4f 	dsb	sy
 80034d8:	613b      	str	r3, [r7, #16]
}
 80034da:	bf00      	nop
 80034dc:	bf00      	nop
 80034de:	e7fd      	b.n	80034dc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d10b      	bne.n	80034fe <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80034e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034ea:	f383 8811 	msr	BASEPRI, r3
 80034ee:	f3bf 8f6f 	isb	sy
 80034f2:	f3bf 8f4f 	dsb	sy
 80034f6:	60fb      	str	r3, [r7, #12]
}
 80034f8:	bf00      	nop
 80034fa:	bf00      	nop
 80034fc:	e7fd      	b.n	80034fa <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80034fe:	f000 fecb 	bl	8004298 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003502:	4b1d      	ldr	r3, [pc, #116]	@ (8003578 <xTaskCheckForTimeOut+0xc0>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	69ba      	ldr	r2, [r7, #24]
 800350e:	1ad3      	subs	r3, r2, r3
 8003510:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800351a:	d102      	bne.n	8003522 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800351c:	2300      	movs	r3, #0
 800351e:	61fb      	str	r3, [r7, #28]
 8003520:	e023      	b.n	800356a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	4b15      	ldr	r3, [pc, #84]	@ (800357c <xTaskCheckForTimeOut+0xc4>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	429a      	cmp	r2, r3
 800352c:	d007      	beq.n	800353e <xTaskCheckForTimeOut+0x86>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	69ba      	ldr	r2, [r7, #24]
 8003534:	429a      	cmp	r2, r3
 8003536:	d302      	bcc.n	800353e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003538:	2301      	movs	r3, #1
 800353a:	61fb      	str	r3, [r7, #28]
 800353c:	e015      	b.n	800356a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	697a      	ldr	r2, [r7, #20]
 8003544:	429a      	cmp	r2, r3
 8003546:	d20b      	bcs.n	8003560 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	1ad2      	subs	r2, r2, r3
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	f7ff ff99 	bl	800348c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800355a:	2300      	movs	r3, #0
 800355c:	61fb      	str	r3, [r7, #28]
 800355e:	e004      	b.n	800356a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	2200      	movs	r2, #0
 8003564:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003566:	2301      	movs	r3, #1
 8003568:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800356a:	f000 fec7 	bl	80042fc <vPortExitCritical>

	return xReturn;
 800356e:	69fb      	ldr	r3, [r7, #28]
}
 8003570:	4618      	mov	r0, r3
 8003572:	3720      	adds	r7, #32
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}
 8003578:	20000d3c 	.word	0x20000d3c
 800357c:	20000d50 	.word	0x20000d50

08003580 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003580:	b480      	push	{r7}
 8003582:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003584:	4b03      	ldr	r3, [pc, #12]	@ (8003594 <vTaskMissedYield+0x14>)
 8003586:	2201      	movs	r2, #1
 8003588:	601a      	str	r2, [r3, #0]
}
 800358a:	bf00      	nop
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr
 8003594:	20000d4c 	.word	0x20000d4c

08003598 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b082      	sub	sp, #8
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80035a0:	f000 f84c 	bl	800363c <prvCheckTasksWaitingTermination>
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
 80035a4:	4b04      	ldr	r3, [pc, #16]	@ (80035b8 <prvIdleTask+0x20>)
 80035a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80035aa:	601a      	str	r2, [r3, #0]
 80035ac:	f3bf 8f4f 	dsb	sy
 80035b0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80035b4:	bf00      	nop
 80035b6:	e7f3      	b.n	80035a0 <prvIdleTask+0x8>
 80035b8:	e000ed04 	.word	0xe000ed04

080035bc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b082      	sub	sp, #8
 80035c0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80035c2:	2300      	movs	r3, #0
 80035c4:	607b      	str	r3, [r7, #4]
 80035c6:	e00c      	b.n	80035e2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80035c8:	687a      	ldr	r2, [r7, #4]
 80035ca:	4613      	mov	r3, r2
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	4413      	add	r3, r2
 80035d0:	009b      	lsls	r3, r3, #2
 80035d2:	4a12      	ldr	r2, [pc, #72]	@ (800361c <prvInitialiseTaskLists+0x60>)
 80035d4:	4413      	add	r3, r2
 80035d6:	4618      	mov	r0, r3
 80035d8:	f7fe fc4a 	bl	8001e70 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	3301      	adds	r3, #1
 80035e0:	607b      	str	r3, [r7, #4]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2b37      	cmp	r3, #55	@ 0x37
 80035e6:	d9ef      	bls.n	80035c8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80035e8:	480d      	ldr	r0, [pc, #52]	@ (8003620 <prvInitialiseTaskLists+0x64>)
 80035ea:	f7fe fc41 	bl	8001e70 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80035ee:	480d      	ldr	r0, [pc, #52]	@ (8003624 <prvInitialiseTaskLists+0x68>)
 80035f0:	f7fe fc3e 	bl	8001e70 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80035f4:	480c      	ldr	r0, [pc, #48]	@ (8003628 <prvInitialiseTaskLists+0x6c>)
 80035f6:	f7fe fc3b 	bl	8001e70 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80035fa:	480c      	ldr	r0, [pc, #48]	@ (800362c <prvInitialiseTaskLists+0x70>)
 80035fc:	f7fe fc38 	bl	8001e70 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003600:	480b      	ldr	r0, [pc, #44]	@ (8003630 <prvInitialiseTaskLists+0x74>)
 8003602:	f7fe fc35 	bl	8001e70 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003606:	4b0b      	ldr	r3, [pc, #44]	@ (8003634 <prvInitialiseTaskLists+0x78>)
 8003608:	4a05      	ldr	r2, [pc, #20]	@ (8003620 <prvInitialiseTaskLists+0x64>)
 800360a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800360c:	4b0a      	ldr	r3, [pc, #40]	@ (8003638 <prvInitialiseTaskLists+0x7c>)
 800360e:	4a05      	ldr	r2, [pc, #20]	@ (8003624 <prvInitialiseTaskLists+0x68>)
 8003610:	601a      	str	r2, [r3, #0]
}
 8003612:	bf00      	nop
 8003614:	3708      	adds	r7, #8
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}
 800361a:	bf00      	nop
 800361c:	20000868 	.word	0x20000868
 8003620:	20000cc8 	.word	0x20000cc8
 8003624:	20000cdc 	.word	0x20000cdc
 8003628:	20000cf8 	.word	0x20000cf8
 800362c:	20000d0c 	.word	0x20000d0c
 8003630:	20000d24 	.word	0x20000d24
 8003634:	20000cf0 	.word	0x20000cf0
 8003638:	20000cf4 	.word	0x20000cf4

0800363c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b082      	sub	sp, #8
 8003640:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003642:	e019      	b.n	8003678 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003644:	f000 fe28 	bl	8004298 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003648:	4b10      	ldr	r3, [pc, #64]	@ (800368c <prvCheckTasksWaitingTermination+0x50>)
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	68db      	ldr	r3, [r3, #12]
 800364e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	3304      	adds	r3, #4
 8003654:	4618      	mov	r0, r3
 8003656:	f7fe fc95 	bl	8001f84 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800365a:	4b0d      	ldr	r3, [pc, #52]	@ (8003690 <prvCheckTasksWaitingTermination+0x54>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	3b01      	subs	r3, #1
 8003660:	4a0b      	ldr	r2, [pc, #44]	@ (8003690 <prvCheckTasksWaitingTermination+0x54>)
 8003662:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003664:	4b0b      	ldr	r3, [pc, #44]	@ (8003694 <prvCheckTasksWaitingTermination+0x58>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	3b01      	subs	r3, #1
 800366a:	4a0a      	ldr	r2, [pc, #40]	@ (8003694 <prvCheckTasksWaitingTermination+0x58>)
 800366c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800366e:	f000 fe45 	bl	80042fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f000 f848 	bl	8003708 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003678:	4b06      	ldr	r3, [pc, #24]	@ (8003694 <prvCheckTasksWaitingTermination+0x58>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d1e1      	bne.n	8003644 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003680:	bf00      	nop
 8003682:	bf00      	nop
 8003684:	3708      	adds	r7, #8
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}
 800368a:	bf00      	nop
 800368c:	20000d0c 	.word	0x20000d0c
 8003690:	20000d38 	.word	0x20000d38
 8003694:	20000d20 	.word	0x20000d20

08003698 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8003698:	b480      	push	{r7}
 800369a:	b085      	sub	sp, #20
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 80036a0:	2300      	movs	r3, #0
 80036a2:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 80036a4:	e005      	b.n	80036b2 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	3301      	adds	r3, #1
 80036aa:	607b      	str	r3, [r7, #4]
			ulCount++;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	3301      	adds	r3, #1
 80036b0:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	781b      	ldrb	r3, [r3, #0]
 80036b6:	2ba5      	cmp	r3, #165	@ 0xa5
 80036b8:	d0f5      	beq.n	80036a6 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	089b      	lsrs	r3, r3, #2
 80036be:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	b29b      	uxth	r3, r3
	}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3714      	adds	r7, #20
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr

080036d0 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b086      	sub	sp, #24
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d102      	bne.n	80036e4 <uxTaskGetStackHighWaterMark+0x14>
 80036de:	4b09      	ldr	r3, [pc, #36]	@ (8003704 <uxTaskGetStackHighWaterMark+0x34>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	e000      	b.n	80036e6 <uxTaskGetStackHighWaterMark+0x16>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036ec:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 80036ee:	6938      	ldr	r0, [r7, #16]
 80036f0:	f7ff ffd2 	bl	8003698 <prvTaskCheckFreeStackSpace>
 80036f4:	4603      	mov	r3, r0
 80036f6:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 80036f8:	68fb      	ldr	r3, [r7, #12]
	}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3718      	adds	r7, #24
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	20000864 	.word	0x20000864

08003708 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003708:	b580      	push	{r7, lr}
 800370a:	b084      	sub	sp, #16
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	3354      	adds	r3, #84	@ 0x54
 8003714:	4618      	mov	r0, r3
 8003716:	f003 f8f9 	bl	800690c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8003720:	2b00      	cmp	r3, #0
 8003722:	d108      	bne.n	8003736 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003728:	4618      	mov	r0, r3
 800372a:	f000 ff8d 	bl	8004648 <vPortFree>
				vPortFree( pxTCB );
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f000 ff8a 	bl	8004648 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003734:	e019      	b.n	800376a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800373c:	2b01      	cmp	r3, #1
 800373e:	d103      	bne.n	8003748 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f000 ff81 	bl	8004648 <vPortFree>
	}
 8003746:	e010      	b.n	800376a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800374e:	2b02      	cmp	r3, #2
 8003750:	d00b      	beq.n	800376a <prvDeleteTCB+0x62>
	__asm volatile
 8003752:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003756:	f383 8811 	msr	BASEPRI, r3
 800375a:	f3bf 8f6f 	isb	sy
 800375e:	f3bf 8f4f 	dsb	sy
 8003762:	60fb      	str	r3, [r7, #12]
}
 8003764:	bf00      	nop
 8003766:	bf00      	nop
 8003768:	e7fd      	b.n	8003766 <prvDeleteTCB+0x5e>
	}
 800376a:	bf00      	nop
 800376c:	3710      	adds	r7, #16
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}
	...

08003774 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003774:	b480      	push	{r7}
 8003776:	b083      	sub	sp, #12
 8003778:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800377a:	4b0c      	ldr	r3, [pc, #48]	@ (80037ac <prvResetNextTaskUnblockTime+0x38>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d104      	bne.n	800378e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003784:	4b0a      	ldr	r3, [pc, #40]	@ (80037b0 <prvResetNextTaskUnblockTime+0x3c>)
 8003786:	f04f 32ff 	mov.w	r2, #4294967295
 800378a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800378c:	e008      	b.n	80037a0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800378e:	4b07      	ldr	r3, [pc, #28]	@ (80037ac <prvResetNextTaskUnblockTime+0x38>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	68db      	ldr	r3, [r3, #12]
 8003796:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	4a04      	ldr	r2, [pc, #16]	@ (80037b0 <prvResetNextTaskUnblockTime+0x3c>)
 800379e:	6013      	str	r3, [r2, #0]
}
 80037a0:	bf00      	nop
 80037a2:	370c      	adds	r7, #12
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr
 80037ac:	20000cf0 	.word	0x20000cf0
 80037b0:	20000d58 	.word	0x20000d58

080037b4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80037b4:	b480      	push	{r7}
 80037b6:	b083      	sub	sp, #12
 80037b8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80037ba:	4b0b      	ldr	r3, [pc, #44]	@ (80037e8 <xTaskGetSchedulerState+0x34>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d102      	bne.n	80037c8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80037c2:	2301      	movs	r3, #1
 80037c4:	607b      	str	r3, [r7, #4]
 80037c6:	e008      	b.n	80037da <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80037c8:	4b08      	ldr	r3, [pc, #32]	@ (80037ec <xTaskGetSchedulerState+0x38>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d102      	bne.n	80037d6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80037d0:	2302      	movs	r3, #2
 80037d2:	607b      	str	r3, [r7, #4]
 80037d4:	e001      	b.n	80037da <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80037d6:	2300      	movs	r3, #0
 80037d8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80037da:	687b      	ldr	r3, [r7, #4]
	}
 80037dc:	4618      	mov	r0, r3
 80037de:	370c      	adds	r7, #12
 80037e0:	46bd      	mov	sp, r7
 80037e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e6:	4770      	bx	lr
 80037e8:	20000d44 	.word	0x20000d44
 80037ec:	20000d60 	.word	0x20000d60

080037f0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b086      	sub	sp, #24
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80037fc:	2300      	movs	r3, #0
 80037fe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d061      	beq.n	80038ca <xTaskPriorityDisinherit+0xda>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003806:	4b33      	ldr	r3, [pc, #204]	@ (80038d4 <xTaskPriorityDisinherit+0xe4>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	693a      	ldr	r2, [r7, #16]
 800380c:	429a      	cmp	r2, r3
 800380e:	d00b      	beq.n	8003828 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8003810:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003814:	f383 8811 	msr	BASEPRI, r3
 8003818:	f3bf 8f6f 	isb	sy
 800381c:	f3bf 8f4f 	dsb	sy
 8003820:	60fb      	str	r3, [r7, #12]
}
 8003822:	bf00      	nop
 8003824:	bf00      	nop
 8003826:	e7fd      	b.n	8003824 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800382c:	2b00      	cmp	r3, #0
 800382e:	d10b      	bne.n	8003848 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8003830:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003834:	f383 8811 	msr	BASEPRI, r3
 8003838:	f3bf 8f6f 	isb	sy
 800383c:	f3bf 8f4f 	dsb	sy
 8003840:	60bb      	str	r3, [r7, #8]
}
 8003842:	bf00      	nop
 8003844:	bf00      	nop
 8003846:	e7fd      	b.n	8003844 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800384c:	1e5a      	subs	r2, r3, #1
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800385a:	429a      	cmp	r2, r3
 800385c:	d035      	beq.n	80038ca <xTaskPriorityDisinherit+0xda>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003862:	2b00      	cmp	r3, #0
 8003864:	d131      	bne.n	80038ca <xTaskPriorityDisinherit+0xda>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	3304      	adds	r3, #4
 800386a:	4618      	mov	r0, r3
 800386c:	f7fe fb8a 	bl	8001f84 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	4619      	mov	r1, r3
 8003874:	204a      	movs	r0, #74	@ 0x4a
 8003876:	f002 f957 	bl	8005b28 <SEGGER_SYSVIEW_RecordU32>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003886:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	4618      	mov	r0, r3
 8003892:	f002 fe4f 	bl	8006534 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800389a:	4b0f      	ldr	r3, [pc, #60]	@ (80038d8 <xTaskPriorityDisinherit+0xe8>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	429a      	cmp	r2, r3
 80038a0:	d903      	bls.n	80038aa <xTaskPriorityDisinherit+0xba>
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038a6:	4a0c      	ldr	r2, [pc, #48]	@ (80038d8 <xTaskPriorityDisinherit+0xe8>)
 80038a8:	6013      	str	r3, [r2, #0]
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038ae:	4613      	mov	r3, r2
 80038b0:	009b      	lsls	r3, r3, #2
 80038b2:	4413      	add	r3, r2
 80038b4:	009b      	lsls	r3, r3, #2
 80038b6:	4a09      	ldr	r2, [pc, #36]	@ (80038dc <xTaskPriorityDisinherit+0xec>)
 80038b8:	441a      	add	r2, r3
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	3304      	adds	r3, #4
 80038be:	4619      	mov	r1, r3
 80038c0:	4610      	mov	r0, r2
 80038c2:	f7fe fb02 	bl	8001eca <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80038c6:	2301      	movs	r3, #1
 80038c8:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80038ca:	697b      	ldr	r3, [r7, #20]
	}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3718      	adds	r7, #24
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}
 80038d4:	20000864 	.word	0x20000864
 80038d8:	20000d40 	.word	0x20000d40
 80038dc:	20000868 	.word	0x20000868

080038e0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b084      	sub	sp, #16
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80038ea:	4b21      	ldr	r3, [pc, #132]	@ (8003970 <prvAddCurrentTaskToDelayedList+0x90>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80038f0:	4b20      	ldr	r3, [pc, #128]	@ (8003974 <prvAddCurrentTaskToDelayedList+0x94>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	3304      	adds	r3, #4
 80038f6:	4618      	mov	r0, r3
 80038f8:	f7fe fb44 	bl	8001f84 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003902:	d10a      	bne.n	800391a <prvAddCurrentTaskToDelayedList+0x3a>
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d007      	beq.n	800391a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800390a:	4b1a      	ldr	r3, [pc, #104]	@ (8003974 <prvAddCurrentTaskToDelayedList+0x94>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	3304      	adds	r3, #4
 8003910:	4619      	mov	r1, r3
 8003912:	4819      	ldr	r0, [pc, #100]	@ (8003978 <prvAddCurrentTaskToDelayedList+0x98>)
 8003914:	f7fe fad9 	bl	8001eca <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003918:	e026      	b.n	8003968 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800391a:	68fa      	ldr	r2, [r7, #12]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	4413      	add	r3, r2
 8003920:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003922:	4b14      	ldr	r3, [pc, #80]	@ (8003974 <prvAddCurrentTaskToDelayedList+0x94>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	68ba      	ldr	r2, [r7, #8]
 8003928:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800392a:	68ba      	ldr	r2, [r7, #8]
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	429a      	cmp	r2, r3
 8003930:	d209      	bcs.n	8003946 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003932:	4b12      	ldr	r3, [pc, #72]	@ (800397c <prvAddCurrentTaskToDelayedList+0x9c>)
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	4b0f      	ldr	r3, [pc, #60]	@ (8003974 <prvAddCurrentTaskToDelayedList+0x94>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	3304      	adds	r3, #4
 800393c:	4619      	mov	r1, r3
 800393e:	4610      	mov	r0, r2
 8003940:	f7fe fae7 	bl	8001f12 <vListInsert>
}
 8003944:	e010      	b.n	8003968 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003946:	4b0e      	ldr	r3, [pc, #56]	@ (8003980 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	4b0a      	ldr	r3, [pc, #40]	@ (8003974 <prvAddCurrentTaskToDelayedList+0x94>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	3304      	adds	r3, #4
 8003950:	4619      	mov	r1, r3
 8003952:	4610      	mov	r0, r2
 8003954:	f7fe fadd 	bl	8001f12 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003958:	4b0a      	ldr	r3, [pc, #40]	@ (8003984 <prvAddCurrentTaskToDelayedList+0xa4>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	68ba      	ldr	r2, [r7, #8]
 800395e:	429a      	cmp	r2, r3
 8003960:	d202      	bcs.n	8003968 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003962:	4a08      	ldr	r2, [pc, #32]	@ (8003984 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	6013      	str	r3, [r2, #0]
}
 8003968:	bf00      	nop
 800396a:	3710      	adds	r7, #16
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}
 8003970:	20000d3c 	.word	0x20000d3c
 8003974:	20000864 	.word	0x20000864
 8003978:	20000d24 	.word	0x20000d24
 800397c:	20000cf4 	.word	0x20000cf4
 8003980:	20000cf0 	.word	0x20000cf0
 8003984:	20000d58 	.word	0x20000d58

08003988 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b08a      	sub	sp, #40	@ 0x28
 800398c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800398e:	2300      	movs	r3, #0
 8003990:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003992:	f000 fb13 	bl	8003fbc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003996:	4b1d      	ldr	r3, [pc, #116]	@ (8003a0c <xTimerCreateTimerTask+0x84>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d021      	beq.n	80039e2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800399e:	2300      	movs	r3, #0
 80039a0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80039a2:	2300      	movs	r3, #0
 80039a4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80039a6:	1d3a      	adds	r2, r7, #4
 80039a8:	f107 0108 	add.w	r1, r7, #8
 80039ac:	f107 030c 	add.w	r3, r7, #12
 80039b0:	4618      	mov	r0, r3
 80039b2:	f7fe fa43 	bl	8001e3c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80039b6:	6879      	ldr	r1, [r7, #4]
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	68fa      	ldr	r2, [r7, #12]
 80039bc:	9202      	str	r2, [sp, #8]
 80039be:	9301      	str	r3, [sp, #4]
 80039c0:	2302      	movs	r3, #2
 80039c2:	9300      	str	r3, [sp, #0]
 80039c4:	2300      	movs	r3, #0
 80039c6:	460a      	mov	r2, r1
 80039c8:	4911      	ldr	r1, [pc, #68]	@ (8003a10 <xTimerCreateTimerTask+0x88>)
 80039ca:	4812      	ldr	r0, [pc, #72]	@ (8003a14 <xTimerCreateTimerTask+0x8c>)
 80039cc:	f7ff f848 	bl	8002a60 <xTaskCreateStatic>
 80039d0:	4603      	mov	r3, r0
 80039d2:	4a11      	ldr	r2, [pc, #68]	@ (8003a18 <xTimerCreateTimerTask+0x90>)
 80039d4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80039d6:	4b10      	ldr	r3, [pc, #64]	@ (8003a18 <xTimerCreateTimerTask+0x90>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d001      	beq.n	80039e2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80039de:	2301      	movs	r3, #1
 80039e0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d10b      	bne.n	8003a00 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80039e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039ec:	f383 8811 	msr	BASEPRI, r3
 80039f0:	f3bf 8f6f 	isb	sy
 80039f4:	f3bf 8f4f 	dsb	sy
 80039f8:	613b      	str	r3, [r7, #16]
}
 80039fa:	bf00      	nop
 80039fc:	bf00      	nop
 80039fe:	e7fd      	b.n	80039fc <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003a00:	697b      	ldr	r3, [r7, #20]
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3718      	adds	r7, #24
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	20000d94 	.word	0x20000d94
 8003a10:	08007324 	.word	0x08007324
 8003a14:	08003b55 	.word	0x08003b55
 8003a18:	20000d98 	.word	0x20000d98

08003a1c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b08a      	sub	sp, #40	@ 0x28
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	60f8      	str	r0, [r7, #12]
 8003a24:	60b9      	str	r1, [r7, #8]
 8003a26:	607a      	str	r2, [r7, #4]
 8003a28:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d10b      	bne.n	8003a4c <xTimerGenericCommand+0x30>
	__asm volatile
 8003a34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a38:	f383 8811 	msr	BASEPRI, r3
 8003a3c:	f3bf 8f6f 	isb	sy
 8003a40:	f3bf 8f4f 	dsb	sy
 8003a44:	623b      	str	r3, [r7, #32]
}
 8003a46:	bf00      	nop
 8003a48:	bf00      	nop
 8003a4a:	e7fd      	b.n	8003a48 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003a4c:	4b19      	ldr	r3, [pc, #100]	@ (8003ab4 <xTimerGenericCommand+0x98>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d02a      	beq.n	8003aaa <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	2b05      	cmp	r3, #5
 8003a64:	dc18      	bgt.n	8003a98 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003a66:	f7ff fea5 	bl	80037b4 <xTaskGetSchedulerState>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	2b02      	cmp	r3, #2
 8003a6e:	d109      	bne.n	8003a84 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003a70:	4b10      	ldr	r3, [pc, #64]	@ (8003ab4 <xTimerGenericCommand+0x98>)
 8003a72:	6818      	ldr	r0, [r3, #0]
 8003a74:	f107 0110 	add.w	r1, r7, #16
 8003a78:	2300      	movs	r3, #0
 8003a7a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a7c:	f7fe fbae 	bl	80021dc <xQueueGenericSend>
 8003a80:	6278      	str	r0, [r7, #36]	@ 0x24
 8003a82:	e012      	b.n	8003aaa <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003a84:	4b0b      	ldr	r3, [pc, #44]	@ (8003ab4 <xTimerGenericCommand+0x98>)
 8003a86:	6818      	ldr	r0, [r3, #0]
 8003a88:	f107 0110 	add.w	r1, r7, #16
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	2200      	movs	r2, #0
 8003a90:	f7fe fba4 	bl	80021dc <xQueueGenericSend>
 8003a94:	6278      	str	r0, [r7, #36]	@ 0x24
 8003a96:	e008      	b.n	8003aaa <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003a98:	4b06      	ldr	r3, [pc, #24]	@ (8003ab4 <xTimerGenericCommand+0x98>)
 8003a9a:	6818      	ldr	r0, [r3, #0]
 8003a9c:	f107 0110 	add.w	r1, r7, #16
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	683a      	ldr	r2, [r7, #0]
 8003aa4:	f7fe fcac 	bl	8002400 <xQueueGenericSendFromISR>
 8003aa8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	3728      	adds	r7, #40	@ 0x28
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}
 8003ab4:	20000d94 	.word	0x20000d94

08003ab8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b088      	sub	sp, #32
 8003abc:	af02      	add	r7, sp, #8
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ac2:	4b23      	ldr	r3, [pc, #140]	@ (8003b50 <prvProcessExpiredTimer+0x98>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	68db      	ldr	r3, [r3, #12]
 8003aca:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	3304      	adds	r3, #4
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f7fe fa57 	bl	8001f84 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003adc:	f003 0304 	and.w	r3, r3, #4
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d023      	beq.n	8003b2c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	699a      	ldr	r2, [r3, #24]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	18d1      	adds	r1, r2, r3
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	683a      	ldr	r2, [r7, #0]
 8003af0:	6978      	ldr	r0, [r7, #20]
 8003af2:	f000 f8d5 	bl	8003ca0 <prvInsertTimerInActiveList>
 8003af6:	4603      	mov	r3, r0
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d020      	beq.n	8003b3e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003afc:	2300      	movs	r3, #0
 8003afe:	9300      	str	r3, [sp, #0]
 8003b00:	2300      	movs	r3, #0
 8003b02:	687a      	ldr	r2, [r7, #4]
 8003b04:	2100      	movs	r1, #0
 8003b06:	6978      	ldr	r0, [r7, #20]
 8003b08:	f7ff ff88 	bl	8003a1c <xTimerGenericCommand>
 8003b0c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d114      	bne.n	8003b3e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8003b14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b18:	f383 8811 	msr	BASEPRI, r3
 8003b1c:	f3bf 8f6f 	isb	sy
 8003b20:	f3bf 8f4f 	dsb	sy
 8003b24:	60fb      	str	r3, [r7, #12]
}
 8003b26:	bf00      	nop
 8003b28:	bf00      	nop
 8003b2a:	e7fd      	b.n	8003b28 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003b32:	f023 0301 	bic.w	r3, r3, #1
 8003b36:	b2da      	uxtb	r2, r3
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	6a1b      	ldr	r3, [r3, #32]
 8003b42:	6978      	ldr	r0, [r7, #20]
 8003b44:	4798      	blx	r3
}
 8003b46:	bf00      	nop
 8003b48:	3718      	adds	r7, #24
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	bf00      	nop
 8003b50:	20000d8c 	.word	0x20000d8c

08003b54 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b084      	sub	sp, #16
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003b5c:	f107 0308 	add.w	r3, r7, #8
 8003b60:	4618      	mov	r0, r3
 8003b62:	f000 f859 	bl	8003c18 <prvGetNextExpireTime>
 8003b66:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	4619      	mov	r1, r3
 8003b6c:	68f8      	ldr	r0, [r7, #12]
 8003b6e:	f000 f805 	bl	8003b7c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003b72:	f000 f8d7 	bl	8003d24 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003b76:	bf00      	nop
 8003b78:	e7f0      	b.n	8003b5c <prvTimerTask+0x8>
	...

08003b7c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b084      	sub	sp, #16
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
 8003b84:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003b86:	f7ff f9ef 	bl	8002f68 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003b8a:	f107 0308 	add.w	r3, r7, #8
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f000 f866 	bl	8003c60 <prvSampleTimeNow>
 8003b94:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d130      	bne.n	8003bfe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d10a      	bne.n	8003bb8 <prvProcessTimerOrBlockTask+0x3c>
 8003ba2:	687a      	ldr	r2, [r7, #4]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d806      	bhi.n	8003bb8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003baa:	f7ff f9eb 	bl	8002f84 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003bae:	68f9      	ldr	r1, [r7, #12]
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f7ff ff81 	bl	8003ab8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003bb6:	e024      	b.n	8003c02 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d008      	beq.n	8003bd0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003bbe:	4b13      	ldr	r3, [pc, #76]	@ (8003c0c <prvProcessTimerOrBlockTask+0x90>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d101      	bne.n	8003bcc <prvProcessTimerOrBlockTask+0x50>
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e000      	b.n	8003bce <prvProcessTimerOrBlockTask+0x52>
 8003bcc:	2300      	movs	r3, #0
 8003bce:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003bd0:	4b0f      	ldr	r3, [pc, #60]	@ (8003c10 <prvProcessTimerOrBlockTask+0x94>)
 8003bd2:	6818      	ldr	r0, [r3, #0]
 8003bd4:	687a      	ldr	r2, [r7, #4]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	683a      	ldr	r2, [r7, #0]
 8003bdc:	4619      	mov	r1, r3
 8003bde:	f7fe ff0b 	bl	80029f8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003be2:	f7ff f9cf 	bl	8002f84 <xTaskResumeAll>
 8003be6:	4603      	mov	r3, r0
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d10a      	bne.n	8003c02 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003bec:	4b09      	ldr	r3, [pc, #36]	@ (8003c14 <prvProcessTimerOrBlockTask+0x98>)
 8003bee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003bf2:	601a      	str	r2, [r3, #0]
 8003bf4:	f3bf 8f4f 	dsb	sy
 8003bf8:	f3bf 8f6f 	isb	sy
}
 8003bfc:	e001      	b.n	8003c02 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003bfe:	f7ff f9c1 	bl	8002f84 <xTaskResumeAll>
}
 8003c02:	bf00      	nop
 8003c04:	3710      	adds	r7, #16
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	20000d90 	.word	0x20000d90
 8003c10:	20000d94 	.word	0x20000d94
 8003c14:	e000ed04 	.word	0xe000ed04

08003c18 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b085      	sub	sp, #20
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003c20:	4b0e      	ldr	r3, [pc, #56]	@ (8003c5c <prvGetNextExpireTime+0x44>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d101      	bne.n	8003c2e <prvGetNextExpireTime+0x16>
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	e000      	b.n	8003c30 <prvGetNextExpireTime+0x18>
 8003c2e:	2200      	movs	r2, #0
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d105      	bne.n	8003c48 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003c3c:	4b07      	ldr	r3, [pc, #28]	@ (8003c5c <prvGetNextExpireTime+0x44>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	68db      	ldr	r3, [r3, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	60fb      	str	r3, [r7, #12]
 8003c46:	e001      	b.n	8003c4c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3714      	adds	r7, #20
 8003c52:	46bd      	mov	sp, r7
 8003c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c58:	4770      	bx	lr
 8003c5a:	bf00      	nop
 8003c5c:	20000d8c 	.word	0x20000d8c

08003c60 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b084      	sub	sp, #16
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003c68:	f7ff fa20 	bl	80030ac <xTaskGetTickCount>
 8003c6c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003c6e:	4b0b      	ldr	r3, [pc, #44]	@ (8003c9c <prvSampleTimeNow+0x3c>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	68fa      	ldr	r2, [r7, #12]
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d205      	bcs.n	8003c84 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003c78:	f000 f93a 	bl	8003ef0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	601a      	str	r2, [r3, #0]
 8003c82:	e002      	b.n	8003c8a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2200      	movs	r2, #0
 8003c88:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003c8a:	4a04      	ldr	r2, [pc, #16]	@ (8003c9c <prvSampleTimeNow+0x3c>)
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003c90:	68fb      	ldr	r3, [r7, #12]
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3710      	adds	r7, #16
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}
 8003c9a:	bf00      	nop
 8003c9c:	20000d9c 	.word	0x20000d9c

08003ca0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b086      	sub	sp, #24
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	60f8      	str	r0, [r7, #12]
 8003ca8:	60b9      	str	r1, [r7, #8]
 8003caa:	607a      	str	r2, [r7, #4]
 8003cac:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	68ba      	ldr	r2, [r7, #8]
 8003cb6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	68fa      	ldr	r2, [r7, #12]
 8003cbc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003cbe:	68ba      	ldr	r2, [r7, #8]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d812      	bhi.n	8003cec <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003cc6:	687a      	ldr	r2, [r7, #4]
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	1ad2      	subs	r2, r2, r3
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	699b      	ldr	r3, [r3, #24]
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d302      	bcc.n	8003cda <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	617b      	str	r3, [r7, #20]
 8003cd8:	e01b      	b.n	8003d12 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003cda:	4b10      	ldr	r3, [pc, #64]	@ (8003d1c <prvInsertTimerInActiveList+0x7c>)
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	3304      	adds	r3, #4
 8003ce2:	4619      	mov	r1, r3
 8003ce4:	4610      	mov	r0, r2
 8003ce6:	f7fe f914 	bl	8001f12 <vListInsert>
 8003cea:	e012      	b.n	8003d12 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d206      	bcs.n	8003d02 <prvInsertTimerInActiveList+0x62>
 8003cf4:	68ba      	ldr	r2, [r7, #8]
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d302      	bcc.n	8003d02 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	617b      	str	r3, [r7, #20]
 8003d00:	e007      	b.n	8003d12 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003d02:	4b07      	ldr	r3, [pc, #28]	@ (8003d20 <prvInsertTimerInActiveList+0x80>)
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	3304      	adds	r3, #4
 8003d0a:	4619      	mov	r1, r3
 8003d0c:	4610      	mov	r0, r2
 8003d0e:	f7fe f900 	bl	8001f12 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003d12:	697b      	ldr	r3, [r7, #20]
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	3718      	adds	r7, #24
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}
 8003d1c:	20000d90 	.word	0x20000d90
 8003d20:	20000d8c 	.word	0x20000d8c

08003d24 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b08e      	sub	sp, #56	@ 0x38
 8003d28:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003d2a:	e0ce      	b.n	8003eca <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	da19      	bge.n	8003d66 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003d32:	1d3b      	adds	r3, r7, #4
 8003d34:	3304      	adds	r3, #4
 8003d36:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8003d38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d10b      	bne.n	8003d56 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8003d3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d42:	f383 8811 	msr	BASEPRI, r3
 8003d46:	f3bf 8f6f 	isb	sy
 8003d4a:	f3bf 8f4f 	dsb	sy
 8003d4e:	61fb      	str	r3, [r7, #28]
}
 8003d50:	bf00      	nop
 8003d52:	bf00      	nop
 8003d54:	e7fd      	b.n	8003d52 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003d56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d5c:	6850      	ldr	r0, [r2, #4]
 8003d5e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d60:	6892      	ldr	r2, [r2, #8]
 8003d62:	4611      	mov	r1, r2
 8003d64:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	f2c0 80ae 	blt.w	8003eca <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003d72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d74:	695b      	ldr	r3, [r3, #20]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d004      	beq.n	8003d84 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003d7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d7c:	3304      	adds	r3, #4
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f7fe f900 	bl	8001f84 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003d84:	463b      	mov	r3, r7
 8003d86:	4618      	mov	r0, r3
 8003d88:	f7ff ff6a 	bl	8003c60 <prvSampleTimeNow>
 8003d8c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2b09      	cmp	r3, #9
 8003d92:	f200 8097 	bhi.w	8003ec4 <prvProcessReceivedCommands+0x1a0>
 8003d96:	a201      	add	r2, pc, #4	@ (adr r2, 8003d9c <prvProcessReceivedCommands+0x78>)
 8003d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d9c:	08003dc5 	.word	0x08003dc5
 8003da0:	08003dc5 	.word	0x08003dc5
 8003da4:	08003dc5 	.word	0x08003dc5
 8003da8:	08003e3b 	.word	0x08003e3b
 8003dac:	08003e4f 	.word	0x08003e4f
 8003db0:	08003e9b 	.word	0x08003e9b
 8003db4:	08003dc5 	.word	0x08003dc5
 8003db8:	08003dc5 	.word	0x08003dc5
 8003dbc:	08003e3b 	.word	0x08003e3b
 8003dc0:	08003e4f 	.word	0x08003e4f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003dc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dc6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003dca:	f043 0301 	orr.w	r3, r3, #1
 8003dce:	b2da      	uxtb	r2, r3
 8003dd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dd2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003dd6:	68ba      	ldr	r2, [r7, #8]
 8003dd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dda:	699b      	ldr	r3, [r3, #24]
 8003ddc:	18d1      	adds	r1, r2, r3
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003de2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003de4:	f7ff ff5c 	bl	8003ca0 <prvInsertTimerInActiveList>
 8003de8:	4603      	mov	r3, r0
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d06c      	beq.n	8003ec8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003dee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003df0:	6a1b      	ldr	r3, [r3, #32]
 8003df2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003df4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003df6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003df8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003dfc:	f003 0304 	and.w	r3, r3, #4
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d061      	beq.n	8003ec8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003e04:	68ba      	ldr	r2, [r7, #8]
 8003e06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e08:	699b      	ldr	r3, [r3, #24]
 8003e0a:	441a      	add	r2, r3
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	9300      	str	r3, [sp, #0]
 8003e10:	2300      	movs	r3, #0
 8003e12:	2100      	movs	r1, #0
 8003e14:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003e16:	f7ff fe01 	bl	8003a1c <xTimerGenericCommand>
 8003e1a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8003e1c:	6a3b      	ldr	r3, [r7, #32]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d152      	bne.n	8003ec8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8003e22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e26:	f383 8811 	msr	BASEPRI, r3
 8003e2a:	f3bf 8f6f 	isb	sy
 8003e2e:	f3bf 8f4f 	dsb	sy
 8003e32:	61bb      	str	r3, [r7, #24]
}
 8003e34:	bf00      	nop
 8003e36:	bf00      	nop
 8003e38:	e7fd      	b.n	8003e36 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003e3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e3c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003e40:	f023 0301 	bic.w	r3, r3, #1
 8003e44:	b2da      	uxtb	r2, r3
 8003e46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e48:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8003e4c:	e03d      	b.n	8003eca <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003e4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e50:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003e54:	f043 0301 	orr.w	r3, r3, #1
 8003e58:	b2da      	uxtb	r2, r3
 8003e5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e5c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003e60:	68ba      	ldr	r2, [r7, #8]
 8003e62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e64:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003e66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e68:	699b      	ldr	r3, [r3, #24]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d10b      	bne.n	8003e86 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8003e6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e72:	f383 8811 	msr	BASEPRI, r3
 8003e76:	f3bf 8f6f 	isb	sy
 8003e7a:	f3bf 8f4f 	dsb	sy
 8003e7e:	617b      	str	r3, [r7, #20]
}
 8003e80:	bf00      	nop
 8003e82:	bf00      	nop
 8003e84:	e7fd      	b.n	8003e82 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003e86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e88:	699a      	ldr	r2, [r3, #24]
 8003e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e8c:	18d1      	adds	r1, r2, r3
 8003e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e92:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003e94:	f7ff ff04 	bl	8003ca0 <prvInsertTimerInActiveList>
					break;
 8003e98:	e017      	b.n	8003eca <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003e9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e9c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003ea0:	f003 0302 	and.w	r3, r3, #2
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d103      	bne.n	8003eb0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8003ea8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003eaa:	f000 fbcd 	bl	8004648 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003eae:	e00c      	b.n	8003eca <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003eb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003eb2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003eb6:	f023 0301 	bic.w	r3, r3, #1
 8003eba:	b2da      	uxtb	r2, r3
 8003ebc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ebe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8003ec2:	e002      	b.n	8003eca <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8003ec4:	bf00      	nop
 8003ec6:	e000      	b.n	8003eca <prvProcessReceivedCommands+0x1a6>
					break;
 8003ec8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003eca:	4b08      	ldr	r3, [pc, #32]	@ (8003eec <prvProcessReceivedCommands+0x1c8>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	1d39      	adds	r1, r7, #4
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f7fe fb46 	bl	8002564 <xQueueReceive>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	f47f af26 	bne.w	8003d2c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8003ee0:	bf00      	nop
 8003ee2:	bf00      	nop
 8003ee4:	3730      	adds	r7, #48	@ 0x30
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}
 8003eea:	bf00      	nop
 8003eec:	20000d94 	.word	0x20000d94

08003ef0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b088      	sub	sp, #32
 8003ef4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003ef6:	e049      	b.n	8003f8c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003ef8:	4b2e      	ldr	r3, [pc, #184]	@ (8003fb4 <prvSwitchTimerLists+0xc4>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	68db      	ldr	r3, [r3, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f02:	4b2c      	ldr	r3, [pc, #176]	@ (8003fb4 <prvSwitchTimerLists+0xc4>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	3304      	adds	r3, #4
 8003f10:	4618      	mov	r0, r3
 8003f12:	f7fe f837 	bl	8001f84 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	6a1b      	ldr	r3, [r3, #32]
 8003f1a:	68f8      	ldr	r0, [r7, #12]
 8003f1c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003f24:	f003 0304 	and.w	r3, r3, #4
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d02f      	beq.n	8003f8c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	699b      	ldr	r3, [r3, #24]
 8003f30:	693a      	ldr	r2, [r7, #16]
 8003f32:	4413      	add	r3, r2
 8003f34:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8003f36:	68ba      	ldr	r2, [r7, #8]
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	d90e      	bls.n	8003f5c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	68ba      	ldr	r2, [r7, #8]
 8003f42:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	68fa      	ldr	r2, [r7, #12]
 8003f48:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003f4a:	4b1a      	ldr	r3, [pc, #104]	@ (8003fb4 <prvSwitchTimerLists+0xc4>)
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	3304      	adds	r3, #4
 8003f52:	4619      	mov	r1, r3
 8003f54:	4610      	mov	r0, r2
 8003f56:	f7fd ffdc 	bl	8001f12 <vListInsert>
 8003f5a:	e017      	b.n	8003f8c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	9300      	str	r3, [sp, #0]
 8003f60:	2300      	movs	r3, #0
 8003f62:	693a      	ldr	r2, [r7, #16]
 8003f64:	2100      	movs	r1, #0
 8003f66:	68f8      	ldr	r0, [r7, #12]
 8003f68:	f7ff fd58 	bl	8003a1c <xTimerGenericCommand>
 8003f6c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d10b      	bne.n	8003f8c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8003f74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f78:	f383 8811 	msr	BASEPRI, r3
 8003f7c:	f3bf 8f6f 	isb	sy
 8003f80:	f3bf 8f4f 	dsb	sy
 8003f84:	603b      	str	r3, [r7, #0]
}
 8003f86:	bf00      	nop
 8003f88:	bf00      	nop
 8003f8a:	e7fd      	b.n	8003f88 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003f8c:	4b09      	ldr	r3, [pc, #36]	@ (8003fb4 <prvSwitchTimerLists+0xc4>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d1b0      	bne.n	8003ef8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8003f96:	4b07      	ldr	r3, [pc, #28]	@ (8003fb4 <prvSwitchTimerLists+0xc4>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8003f9c:	4b06      	ldr	r3, [pc, #24]	@ (8003fb8 <prvSwitchTimerLists+0xc8>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a04      	ldr	r2, [pc, #16]	@ (8003fb4 <prvSwitchTimerLists+0xc4>)
 8003fa2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8003fa4:	4a04      	ldr	r2, [pc, #16]	@ (8003fb8 <prvSwitchTimerLists+0xc8>)
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	6013      	str	r3, [r2, #0]
}
 8003faa:	bf00      	nop
 8003fac:	3718      	adds	r7, #24
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}
 8003fb2:	bf00      	nop
 8003fb4:	20000d8c 	.word	0x20000d8c
 8003fb8:	20000d90 	.word	0x20000d90

08003fbc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b082      	sub	sp, #8
 8003fc0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8003fc2:	f000 f969 	bl	8004298 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8003fc6:	4b15      	ldr	r3, [pc, #84]	@ (800401c <prvCheckForValidListAndQueue+0x60>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d120      	bne.n	8004010 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8003fce:	4814      	ldr	r0, [pc, #80]	@ (8004020 <prvCheckForValidListAndQueue+0x64>)
 8003fd0:	f7fd ff4e 	bl	8001e70 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003fd4:	4813      	ldr	r0, [pc, #76]	@ (8004024 <prvCheckForValidListAndQueue+0x68>)
 8003fd6:	f7fd ff4b 	bl	8001e70 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8003fda:	4b13      	ldr	r3, [pc, #76]	@ (8004028 <prvCheckForValidListAndQueue+0x6c>)
 8003fdc:	4a10      	ldr	r2, [pc, #64]	@ (8004020 <prvCheckForValidListAndQueue+0x64>)
 8003fde:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003fe0:	4b12      	ldr	r3, [pc, #72]	@ (800402c <prvCheckForValidListAndQueue+0x70>)
 8003fe2:	4a10      	ldr	r2, [pc, #64]	@ (8004024 <prvCheckForValidListAndQueue+0x68>)
 8003fe4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	9300      	str	r3, [sp, #0]
 8003fea:	4b11      	ldr	r3, [pc, #68]	@ (8004030 <prvCheckForValidListAndQueue+0x74>)
 8003fec:	4a11      	ldr	r2, [pc, #68]	@ (8004034 <prvCheckForValidListAndQueue+0x78>)
 8003fee:	2110      	movs	r1, #16
 8003ff0:	200a      	movs	r0, #10
 8003ff2:	f7fe f84d 	bl	8002090 <xQueueGenericCreateStatic>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	4a08      	ldr	r2, [pc, #32]	@ (800401c <prvCheckForValidListAndQueue+0x60>)
 8003ffa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8003ffc:	4b07      	ldr	r3, [pc, #28]	@ (800401c <prvCheckForValidListAndQueue+0x60>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d005      	beq.n	8004010 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004004:	4b05      	ldr	r3, [pc, #20]	@ (800401c <prvCheckForValidListAndQueue+0x60>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	490b      	ldr	r1, [pc, #44]	@ (8004038 <prvCheckForValidListAndQueue+0x7c>)
 800400a:	4618      	mov	r0, r3
 800400c:	f7fe fcc2 	bl	8002994 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004010:	f000 f974 	bl	80042fc <vPortExitCritical>
}
 8004014:	bf00      	nop
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}
 800401a:	bf00      	nop
 800401c:	20000d94 	.word	0x20000d94
 8004020:	20000d64 	.word	0x20000d64
 8004024:	20000d78 	.word	0x20000d78
 8004028:	20000d8c 	.word	0x20000d8c
 800402c:	20000d90 	.word	0x20000d90
 8004030:	20000e40 	.word	0x20000e40
 8004034:	20000da0 	.word	0x20000da0
 8004038:	0800732c 	.word	0x0800732c

0800403c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800403c:	b480      	push	{r7}
 800403e:	b085      	sub	sp, #20
 8004040:	af00      	add	r7, sp, #0
 8004042:	60f8      	str	r0, [r7, #12]
 8004044:	60b9      	str	r1, [r7, #8]
 8004046:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	3b04      	subs	r3, #4
 800404c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004054:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	3b04      	subs	r3, #4
 800405a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	f023 0201 	bic.w	r2, r3, #1
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	3b04      	subs	r3, #4
 800406a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800406c:	4a0c      	ldr	r2, [pc, #48]	@ (80040a0 <pxPortInitialiseStack+0x64>)
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	3b14      	subs	r3, #20
 8004076:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004078:	687a      	ldr	r2, [r7, #4]
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	3b04      	subs	r3, #4
 8004082:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f06f 0202 	mvn.w	r2, #2
 800408a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	3b20      	subs	r3, #32
 8004090:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004092:	68fb      	ldr	r3, [r7, #12]
}
 8004094:	4618      	mov	r0, r3
 8004096:	3714      	adds	r7, #20
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr
 80040a0:	080040a5 	.word	0x080040a5

080040a4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80040a4:	b480      	push	{r7}
 80040a6:	b085      	sub	sp, #20
 80040a8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80040aa:	2300      	movs	r3, #0
 80040ac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80040ae:	4b13      	ldr	r3, [pc, #76]	@ (80040fc <prvTaskExitError+0x58>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040b6:	d00b      	beq.n	80040d0 <prvTaskExitError+0x2c>
	__asm volatile
 80040b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040bc:	f383 8811 	msr	BASEPRI, r3
 80040c0:	f3bf 8f6f 	isb	sy
 80040c4:	f3bf 8f4f 	dsb	sy
 80040c8:	60fb      	str	r3, [r7, #12]
}
 80040ca:	bf00      	nop
 80040cc:	bf00      	nop
 80040ce:	e7fd      	b.n	80040cc <prvTaskExitError+0x28>
	__asm volatile
 80040d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040d4:	f383 8811 	msr	BASEPRI, r3
 80040d8:	f3bf 8f6f 	isb	sy
 80040dc:	f3bf 8f4f 	dsb	sy
 80040e0:	60bb      	str	r3, [r7, #8]
}
 80040e2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80040e4:	bf00      	nop
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d0fc      	beq.n	80040e6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80040ec:	bf00      	nop
 80040ee:	bf00      	nop
 80040f0:	3714      	adds	r7, #20
 80040f2:	46bd      	mov	sp, r7
 80040f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f8:	4770      	bx	lr
 80040fa:	bf00      	nop
 80040fc:	2000000c 	.word	0x2000000c

08004100 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004100:	4b07      	ldr	r3, [pc, #28]	@ (8004120 <pxCurrentTCBConst2>)
 8004102:	6819      	ldr	r1, [r3, #0]
 8004104:	6808      	ldr	r0, [r1, #0]
 8004106:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800410a:	f380 8809 	msr	PSP, r0
 800410e:	f3bf 8f6f 	isb	sy
 8004112:	f04f 0000 	mov.w	r0, #0
 8004116:	f380 8811 	msr	BASEPRI, r0
 800411a:	4770      	bx	lr
 800411c:	f3af 8000 	nop.w

08004120 <pxCurrentTCBConst2>:
 8004120:	20000864 	.word	0x20000864
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004124:	bf00      	nop
 8004126:	bf00      	nop

08004128 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004128:	4808      	ldr	r0, [pc, #32]	@ (800414c <prvPortStartFirstTask+0x24>)
 800412a:	6800      	ldr	r0, [r0, #0]
 800412c:	6800      	ldr	r0, [r0, #0]
 800412e:	f380 8808 	msr	MSP, r0
 8004132:	f04f 0000 	mov.w	r0, #0
 8004136:	f380 8814 	msr	CONTROL, r0
 800413a:	b662      	cpsie	i
 800413c:	b661      	cpsie	f
 800413e:	f3bf 8f4f 	dsb	sy
 8004142:	f3bf 8f6f 	isb	sy
 8004146:	df00      	svc	0
 8004148:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800414a:	bf00      	nop
 800414c:	e000ed08 	.word	0xe000ed08

08004150 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b086      	sub	sp, #24
 8004154:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004156:	4b47      	ldr	r3, [pc, #284]	@ (8004274 <xPortStartScheduler+0x124>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a47      	ldr	r2, [pc, #284]	@ (8004278 <xPortStartScheduler+0x128>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d10b      	bne.n	8004178 <xPortStartScheduler+0x28>
	__asm volatile
 8004160:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004164:	f383 8811 	msr	BASEPRI, r3
 8004168:	f3bf 8f6f 	isb	sy
 800416c:	f3bf 8f4f 	dsb	sy
 8004170:	60fb      	str	r3, [r7, #12]
}
 8004172:	bf00      	nop
 8004174:	bf00      	nop
 8004176:	e7fd      	b.n	8004174 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004178:	4b3e      	ldr	r3, [pc, #248]	@ (8004274 <xPortStartScheduler+0x124>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a3f      	ldr	r2, [pc, #252]	@ (800427c <xPortStartScheduler+0x12c>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d10b      	bne.n	800419a <xPortStartScheduler+0x4a>
	__asm volatile
 8004182:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004186:	f383 8811 	msr	BASEPRI, r3
 800418a:	f3bf 8f6f 	isb	sy
 800418e:	f3bf 8f4f 	dsb	sy
 8004192:	613b      	str	r3, [r7, #16]
}
 8004194:	bf00      	nop
 8004196:	bf00      	nop
 8004198:	e7fd      	b.n	8004196 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800419a:	4b39      	ldr	r3, [pc, #228]	@ (8004280 <xPortStartScheduler+0x130>)
 800419c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	781b      	ldrb	r3, [r3, #0]
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	22ff      	movs	r2, #255	@ 0xff
 80041aa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	781b      	ldrb	r3, [r3, #0]
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80041b4:	78fb      	ldrb	r3, [r7, #3]
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80041bc:	b2da      	uxtb	r2, r3
 80041be:	4b31      	ldr	r3, [pc, #196]	@ (8004284 <xPortStartScheduler+0x134>)
 80041c0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80041c2:	4b31      	ldr	r3, [pc, #196]	@ (8004288 <xPortStartScheduler+0x138>)
 80041c4:	2207      	movs	r2, #7
 80041c6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80041c8:	e009      	b.n	80041de <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80041ca:	4b2f      	ldr	r3, [pc, #188]	@ (8004288 <xPortStartScheduler+0x138>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	3b01      	subs	r3, #1
 80041d0:	4a2d      	ldr	r2, [pc, #180]	@ (8004288 <xPortStartScheduler+0x138>)
 80041d2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80041d4:	78fb      	ldrb	r3, [r7, #3]
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	005b      	lsls	r3, r3, #1
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80041de:	78fb      	ldrb	r3, [r7, #3]
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041e6:	2b80      	cmp	r3, #128	@ 0x80
 80041e8:	d0ef      	beq.n	80041ca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80041ea:	4b27      	ldr	r3, [pc, #156]	@ (8004288 <xPortStartScheduler+0x138>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f1c3 0307 	rsb	r3, r3, #7
 80041f2:	2b04      	cmp	r3, #4
 80041f4:	d00b      	beq.n	800420e <xPortStartScheduler+0xbe>
	__asm volatile
 80041f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041fa:	f383 8811 	msr	BASEPRI, r3
 80041fe:	f3bf 8f6f 	isb	sy
 8004202:	f3bf 8f4f 	dsb	sy
 8004206:	60bb      	str	r3, [r7, #8]
}
 8004208:	bf00      	nop
 800420a:	bf00      	nop
 800420c:	e7fd      	b.n	800420a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800420e:	4b1e      	ldr	r3, [pc, #120]	@ (8004288 <xPortStartScheduler+0x138>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	021b      	lsls	r3, r3, #8
 8004214:	4a1c      	ldr	r2, [pc, #112]	@ (8004288 <xPortStartScheduler+0x138>)
 8004216:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004218:	4b1b      	ldr	r3, [pc, #108]	@ (8004288 <xPortStartScheduler+0x138>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004220:	4a19      	ldr	r2, [pc, #100]	@ (8004288 <xPortStartScheduler+0x138>)
 8004222:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	b2da      	uxtb	r2, r3
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800422c:	4b17      	ldr	r3, [pc, #92]	@ (800428c <xPortStartScheduler+0x13c>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a16      	ldr	r2, [pc, #88]	@ (800428c <xPortStartScheduler+0x13c>)
 8004232:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004236:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004238:	4b14      	ldr	r3, [pc, #80]	@ (800428c <xPortStartScheduler+0x13c>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a13      	ldr	r2, [pc, #76]	@ (800428c <xPortStartScheduler+0x13c>)
 800423e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004242:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004244:	f000 f8da 	bl	80043fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004248:	4b11      	ldr	r3, [pc, #68]	@ (8004290 <xPortStartScheduler+0x140>)
 800424a:	2200      	movs	r2, #0
 800424c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800424e:	f000 f8f9 	bl	8004444 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004252:	4b10      	ldr	r3, [pc, #64]	@ (8004294 <xPortStartScheduler+0x144>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a0f      	ldr	r2, [pc, #60]	@ (8004294 <xPortStartScheduler+0x144>)
 8004258:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800425c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800425e:	f7ff ff63 	bl	8004128 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004262:	f7fe ffe1 	bl	8003228 <vTaskSwitchContext>
	prvTaskExitError();
 8004266:	f7ff ff1d 	bl	80040a4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800426a:	2300      	movs	r3, #0
}
 800426c:	4618      	mov	r0, r3
 800426e:	3718      	adds	r7, #24
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}
 8004274:	e000ed00 	.word	0xe000ed00
 8004278:	410fc271 	.word	0x410fc271
 800427c:	410fc270 	.word	0x410fc270
 8004280:	e000e400 	.word	0xe000e400
 8004284:	20000e90 	.word	0x20000e90
 8004288:	20000e94 	.word	0x20000e94
 800428c:	e000ed20 	.word	0xe000ed20
 8004290:	2000000c 	.word	0x2000000c
 8004294:	e000ef34 	.word	0xe000ef34

08004298 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004298:	b480      	push	{r7}
 800429a:	b083      	sub	sp, #12
 800429c:	af00      	add	r7, sp, #0
	__asm volatile
 800429e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042a2:	f383 8811 	msr	BASEPRI, r3
 80042a6:	f3bf 8f6f 	isb	sy
 80042aa:	f3bf 8f4f 	dsb	sy
 80042ae:	607b      	str	r3, [r7, #4]
}
 80042b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80042b2:	4b10      	ldr	r3, [pc, #64]	@ (80042f4 <vPortEnterCritical+0x5c>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	3301      	adds	r3, #1
 80042b8:	4a0e      	ldr	r2, [pc, #56]	@ (80042f4 <vPortEnterCritical+0x5c>)
 80042ba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80042bc:	4b0d      	ldr	r3, [pc, #52]	@ (80042f4 <vPortEnterCritical+0x5c>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d110      	bne.n	80042e6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80042c4:	4b0c      	ldr	r3, [pc, #48]	@ (80042f8 <vPortEnterCritical+0x60>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d00b      	beq.n	80042e6 <vPortEnterCritical+0x4e>
	__asm volatile
 80042ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042d2:	f383 8811 	msr	BASEPRI, r3
 80042d6:	f3bf 8f6f 	isb	sy
 80042da:	f3bf 8f4f 	dsb	sy
 80042de:	603b      	str	r3, [r7, #0]
}
 80042e0:	bf00      	nop
 80042e2:	bf00      	nop
 80042e4:	e7fd      	b.n	80042e2 <vPortEnterCritical+0x4a>
	}
}
 80042e6:	bf00      	nop
 80042e8:	370c      	adds	r7, #12
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr
 80042f2:	bf00      	nop
 80042f4:	2000000c 	.word	0x2000000c
 80042f8:	e000ed04 	.word	0xe000ed04

080042fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80042fc:	b480      	push	{r7}
 80042fe:	b083      	sub	sp, #12
 8004300:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004302:	4b12      	ldr	r3, [pc, #72]	@ (800434c <vPortExitCritical+0x50>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d10b      	bne.n	8004322 <vPortExitCritical+0x26>
	__asm volatile
 800430a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800430e:	f383 8811 	msr	BASEPRI, r3
 8004312:	f3bf 8f6f 	isb	sy
 8004316:	f3bf 8f4f 	dsb	sy
 800431a:	607b      	str	r3, [r7, #4]
}
 800431c:	bf00      	nop
 800431e:	bf00      	nop
 8004320:	e7fd      	b.n	800431e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004322:	4b0a      	ldr	r3, [pc, #40]	@ (800434c <vPortExitCritical+0x50>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	3b01      	subs	r3, #1
 8004328:	4a08      	ldr	r2, [pc, #32]	@ (800434c <vPortExitCritical+0x50>)
 800432a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800432c:	4b07      	ldr	r3, [pc, #28]	@ (800434c <vPortExitCritical+0x50>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d105      	bne.n	8004340 <vPortExitCritical+0x44>
 8004334:	2300      	movs	r3, #0
 8004336:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	f383 8811 	msr	BASEPRI, r3
}
 800433e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004340:	bf00      	nop
 8004342:	370c      	adds	r7, #12
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr
 800434c:	2000000c 	.word	0x2000000c

08004350 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004350:	f3ef 8009 	mrs	r0, PSP
 8004354:	f3bf 8f6f 	isb	sy
 8004358:	4b15      	ldr	r3, [pc, #84]	@ (80043b0 <pxCurrentTCBConst>)
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	f01e 0f10 	tst.w	lr, #16
 8004360:	bf08      	it	eq
 8004362:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004366:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800436a:	6010      	str	r0, [r2, #0]
 800436c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004370:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004374:	f380 8811 	msr	BASEPRI, r0
 8004378:	f3bf 8f4f 	dsb	sy
 800437c:	f3bf 8f6f 	isb	sy
 8004380:	f7fe ff52 	bl	8003228 <vTaskSwitchContext>
 8004384:	f04f 0000 	mov.w	r0, #0
 8004388:	f380 8811 	msr	BASEPRI, r0
 800438c:	bc09      	pop	{r0, r3}
 800438e:	6819      	ldr	r1, [r3, #0]
 8004390:	6808      	ldr	r0, [r1, #0]
 8004392:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004396:	f01e 0f10 	tst.w	lr, #16
 800439a:	bf08      	it	eq
 800439c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80043a0:	f380 8809 	msr	PSP, r0
 80043a4:	f3bf 8f6f 	isb	sy
 80043a8:	4770      	bx	lr
 80043aa:	bf00      	nop
 80043ac:	f3af 8000 	nop.w

080043b0 <pxCurrentTCBConst>:
 80043b0:	20000864 	.word	0x20000864
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80043b4:	bf00      	nop
 80043b6:	bf00      	nop

080043b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b082      	sub	sp, #8
 80043bc:	af00      	add	r7, sp, #0
	__asm volatile
 80043be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043c2:	f383 8811 	msr	BASEPRI, r3
 80043c6:	f3bf 8f6f 	isb	sy
 80043ca:	f3bf 8f4f 	dsb	sy
 80043ce:	607b      	str	r3, [r7, #4]
}
 80043d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80043d2:	f7fe fe8d 	bl	80030f0 <xTaskIncrementTick>
 80043d6:	4603      	mov	r3, r0
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d003      	beq.n	80043e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80043dc:	4b06      	ldr	r3, [pc, #24]	@ (80043f8 <xPortSysTickHandler+0x40>)
 80043de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80043e2:	601a      	str	r2, [r3, #0]
 80043e4:	2300      	movs	r3, #0
 80043e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	f383 8811 	msr	BASEPRI, r3
}
 80043ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80043f0:	bf00      	nop
 80043f2:	3708      	adds	r7, #8
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}
 80043f8:	e000ed04 	.word	0xe000ed04

080043fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80043fc:	b480      	push	{r7}
 80043fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004400:	4b0b      	ldr	r3, [pc, #44]	@ (8004430 <vPortSetupTimerInterrupt+0x34>)
 8004402:	2200      	movs	r2, #0
 8004404:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004406:	4b0b      	ldr	r3, [pc, #44]	@ (8004434 <vPortSetupTimerInterrupt+0x38>)
 8004408:	2200      	movs	r2, #0
 800440a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800440c:	4b0a      	ldr	r3, [pc, #40]	@ (8004438 <vPortSetupTimerInterrupt+0x3c>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a0a      	ldr	r2, [pc, #40]	@ (800443c <vPortSetupTimerInterrupt+0x40>)
 8004412:	fba2 2303 	umull	r2, r3, r2, r3
 8004416:	099b      	lsrs	r3, r3, #6
 8004418:	4a09      	ldr	r2, [pc, #36]	@ (8004440 <vPortSetupTimerInterrupt+0x44>)
 800441a:	3b01      	subs	r3, #1
 800441c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800441e:	4b04      	ldr	r3, [pc, #16]	@ (8004430 <vPortSetupTimerInterrupt+0x34>)
 8004420:	2207      	movs	r2, #7
 8004422:	601a      	str	r2, [r3, #0]
}
 8004424:	bf00      	nop
 8004426:	46bd      	mov	sp, r7
 8004428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442c:	4770      	bx	lr
 800442e:	bf00      	nop
 8004430:	e000e010 	.word	0xe000e010
 8004434:	e000e018 	.word	0xe000e018
 8004438:	20000000 	.word	0x20000000
 800443c:	10624dd3 	.word	0x10624dd3
 8004440:	e000e014 	.word	0xe000e014

08004444 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004444:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004454 <vPortEnableVFP+0x10>
 8004448:	6801      	ldr	r1, [r0, #0]
 800444a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800444e:	6001      	str	r1, [r0, #0]
 8004450:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004452:	bf00      	nop
 8004454:	e000ed88 	.word	0xe000ed88

08004458 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004458:	b480      	push	{r7}
 800445a:	b085      	sub	sp, #20
 800445c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800445e:	f3ef 8305 	mrs	r3, IPSR
 8004462:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2b0f      	cmp	r3, #15
 8004468:	d915      	bls.n	8004496 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800446a:	4a0e      	ldr	r2, [pc, #56]	@ (80044a4 <vPortValidateInterruptPriority+0x4c>)
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	4413      	add	r3, r2
 8004470:	781b      	ldrb	r3, [r3, #0]
 8004472:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004474:	4b0c      	ldr	r3, [pc, #48]	@ (80044a8 <vPortValidateInterruptPriority+0x50>)
 8004476:	781b      	ldrb	r3, [r3, #0]
 8004478:	7afa      	ldrb	r2, [r7, #11]
 800447a:	429a      	cmp	r2, r3
 800447c:	d20b      	bcs.n	8004496 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800447e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004482:	f383 8811 	msr	BASEPRI, r3
 8004486:	f3bf 8f6f 	isb	sy
 800448a:	f3bf 8f4f 	dsb	sy
 800448e:	607b      	str	r3, [r7, #4]
}
 8004490:	bf00      	nop
 8004492:	bf00      	nop
 8004494:	e7fd      	b.n	8004492 <vPortValidateInterruptPriority+0x3a>
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		//configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
	}
 8004496:	bf00      	nop
 8004498:	3714      	adds	r7, #20
 800449a:	46bd      	mov	sp, r7
 800449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a0:	4770      	bx	lr
 80044a2:	bf00      	nop
 80044a4:	e000e3f0 	.word	0xe000e3f0
 80044a8:	20000e90 	.word	0x20000e90

080044ac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b08a      	sub	sp, #40	@ 0x28
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80044b4:	2300      	movs	r3, #0
 80044b6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80044b8:	f7fe fd56 	bl	8002f68 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80044bc:	4b5c      	ldr	r3, [pc, #368]	@ (8004630 <pvPortMalloc+0x184>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d101      	bne.n	80044c8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80044c4:	f000 f924 	bl	8004710 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80044c8:	4b5a      	ldr	r3, [pc, #360]	@ (8004634 <pvPortMalloc+0x188>)
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	4013      	ands	r3, r2
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	f040 8095 	bne.w	8004600 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d01e      	beq.n	800451a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80044dc:	2208      	movs	r2, #8
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	4413      	add	r3, r2
 80044e2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	f003 0307 	and.w	r3, r3, #7
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d015      	beq.n	800451a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	f023 0307 	bic.w	r3, r3, #7
 80044f4:	3308      	adds	r3, #8
 80044f6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	f003 0307 	and.w	r3, r3, #7
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d00b      	beq.n	800451a <pvPortMalloc+0x6e>
	__asm volatile
 8004502:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004506:	f383 8811 	msr	BASEPRI, r3
 800450a:	f3bf 8f6f 	isb	sy
 800450e:	f3bf 8f4f 	dsb	sy
 8004512:	617b      	str	r3, [r7, #20]
}
 8004514:	bf00      	nop
 8004516:	bf00      	nop
 8004518:	e7fd      	b.n	8004516 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d06f      	beq.n	8004600 <pvPortMalloc+0x154>
 8004520:	4b45      	ldr	r3, [pc, #276]	@ (8004638 <pvPortMalloc+0x18c>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	687a      	ldr	r2, [r7, #4]
 8004526:	429a      	cmp	r2, r3
 8004528:	d86a      	bhi.n	8004600 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800452a:	4b44      	ldr	r3, [pc, #272]	@ (800463c <pvPortMalloc+0x190>)
 800452c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800452e:	4b43      	ldr	r3, [pc, #268]	@ (800463c <pvPortMalloc+0x190>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004534:	e004      	b.n	8004540 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004538:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800453a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	687a      	ldr	r2, [r7, #4]
 8004546:	429a      	cmp	r2, r3
 8004548:	d903      	bls.n	8004552 <pvPortMalloc+0xa6>
 800454a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d1f1      	bne.n	8004536 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004552:	4b37      	ldr	r3, [pc, #220]	@ (8004630 <pvPortMalloc+0x184>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004558:	429a      	cmp	r2, r3
 800455a:	d051      	beq.n	8004600 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800455c:	6a3b      	ldr	r3, [r7, #32]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	2208      	movs	r2, #8
 8004562:	4413      	add	r3, r2
 8004564:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	6a3b      	ldr	r3, [r7, #32]
 800456c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800456e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004570:	685a      	ldr	r2, [r3, #4]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	1ad2      	subs	r2, r2, r3
 8004576:	2308      	movs	r3, #8
 8004578:	005b      	lsls	r3, r3, #1
 800457a:	429a      	cmp	r2, r3
 800457c:	d920      	bls.n	80045c0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800457e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	4413      	add	r3, r2
 8004584:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004586:	69bb      	ldr	r3, [r7, #24]
 8004588:	f003 0307 	and.w	r3, r3, #7
 800458c:	2b00      	cmp	r3, #0
 800458e:	d00b      	beq.n	80045a8 <pvPortMalloc+0xfc>
	__asm volatile
 8004590:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004594:	f383 8811 	msr	BASEPRI, r3
 8004598:	f3bf 8f6f 	isb	sy
 800459c:	f3bf 8f4f 	dsb	sy
 80045a0:	613b      	str	r3, [r7, #16]
}
 80045a2:	bf00      	nop
 80045a4:	bf00      	nop
 80045a6:	e7fd      	b.n	80045a4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80045a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045aa:	685a      	ldr	r2, [r3, #4]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	1ad2      	subs	r2, r2, r3
 80045b0:	69bb      	ldr	r3, [r7, #24]
 80045b2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80045b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045b6:	687a      	ldr	r2, [r7, #4]
 80045b8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80045ba:	69b8      	ldr	r0, [r7, #24]
 80045bc:	f000 f90a 	bl	80047d4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80045c0:	4b1d      	ldr	r3, [pc, #116]	@ (8004638 <pvPortMalloc+0x18c>)
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	1ad3      	subs	r3, r2, r3
 80045ca:	4a1b      	ldr	r2, [pc, #108]	@ (8004638 <pvPortMalloc+0x18c>)
 80045cc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80045ce:	4b1a      	ldr	r3, [pc, #104]	@ (8004638 <pvPortMalloc+0x18c>)
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	4b1b      	ldr	r3, [pc, #108]	@ (8004640 <pvPortMalloc+0x194>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	429a      	cmp	r2, r3
 80045d8:	d203      	bcs.n	80045e2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80045da:	4b17      	ldr	r3, [pc, #92]	@ (8004638 <pvPortMalloc+0x18c>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a18      	ldr	r2, [pc, #96]	@ (8004640 <pvPortMalloc+0x194>)
 80045e0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80045e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045e4:	685a      	ldr	r2, [r3, #4]
 80045e6:	4b13      	ldr	r3, [pc, #76]	@ (8004634 <pvPortMalloc+0x188>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	431a      	orrs	r2, r3
 80045ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80045f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045f2:	2200      	movs	r2, #0
 80045f4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80045f6:	4b13      	ldr	r3, [pc, #76]	@ (8004644 <pvPortMalloc+0x198>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	3301      	adds	r3, #1
 80045fc:	4a11      	ldr	r2, [pc, #68]	@ (8004644 <pvPortMalloc+0x198>)
 80045fe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004600:	f7fe fcc0 	bl	8002f84 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004604:	69fb      	ldr	r3, [r7, #28]
 8004606:	f003 0307 	and.w	r3, r3, #7
 800460a:	2b00      	cmp	r3, #0
 800460c:	d00b      	beq.n	8004626 <pvPortMalloc+0x17a>
	__asm volatile
 800460e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004612:	f383 8811 	msr	BASEPRI, r3
 8004616:	f3bf 8f6f 	isb	sy
 800461a:	f3bf 8f4f 	dsb	sy
 800461e:	60fb      	str	r3, [r7, #12]
}
 8004620:	bf00      	nop
 8004622:	bf00      	nop
 8004624:	e7fd      	b.n	8004622 <pvPortMalloc+0x176>
	return pvReturn;
 8004626:	69fb      	ldr	r3, [r7, #28]
}
 8004628:	4618      	mov	r0, r3
 800462a:	3728      	adds	r7, #40	@ 0x28
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}
 8004630:	20004aa0 	.word	0x20004aa0
 8004634:	20004ab4 	.word	0x20004ab4
 8004638:	20004aa4 	.word	0x20004aa4
 800463c:	20004a98 	.word	0x20004a98
 8004640:	20004aa8 	.word	0x20004aa8
 8004644:	20004aac 	.word	0x20004aac

08004648 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b086      	sub	sp, #24
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d04f      	beq.n	80046fa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800465a:	2308      	movs	r3, #8
 800465c:	425b      	negs	r3, r3
 800465e:	697a      	ldr	r2, [r7, #20]
 8004660:	4413      	add	r3, r2
 8004662:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	685a      	ldr	r2, [r3, #4]
 800466c:	4b25      	ldr	r3, [pc, #148]	@ (8004704 <vPortFree+0xbc>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4013      	ands	r3, r2
 8004672:	2b00      	cmp	r3, #0
 8004674:	d10b      	bne.n	800468e <vPortFree+0x46>
	__asm volatile
 8004676:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800467a:	f383 8811 	msr	BASEPRI, r3
 800467e:	f3bf 8f6f 	isb	sy
 8004682:	f3bf 8f4f 	dsb	sy
 8004686:	60fb      	str	r3, [r7, #12]
}
 8004688:	bf00      	nop
 800468a:	bf00      	nop
 800468c:	e7fd      	b.n	800468a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d00b      	beq.n	80046ae <vPortFree+0x66>
	__asm volatile
 8004696:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800469a:	f383 8811 	msr	BASEPRI, r3
 800469e:	f3bf 8f6f 	isb	sy
 80046a2:	f3bf 8f4f 	dsb	sy
 80046a6:	60bb      	str	r3, [r7, #8]
}
 80046a8:	bf00      	nop
 80046aa:	bf00      	nop
 80046ac:	e7fd      	b.n	80046aa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	685a      	ldr	r2, [r3, #4]
 80046b2:	4b14      	ldr	r3, [pc, #80]	@ (8004704 <vPortFree+0xbc>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4013      	ands	r3, r2
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d01e      	beq.n	80046fa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d11a      	bne.n	80046fa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	685a      	ldr	r2, [r3, #4]
 80046c8:	4b0e      	ldr	r3, [pc, #56]	@ (8004704 <vPortFree+0xbc>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	43db      	mvns	r3, r3
 80046ce:	401a      	ands	r2, r3
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80046d4:	f7fe fc48 	bl	8002f68 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	685a      	ldr	r2, [r3, #4]
 80046dc:	4b0a      	ldr	r3, [pc, #40]	@ (8004708 <vPortFree+0xc0>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4413      	add	r3, r2
 80046e2:	4a09      	ldr	r2, [pc, #36]	@ (8004708 <vPortFree+0xc0>)
 80046e4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80046e6:	6938      	ldr	r0, [r7, #16]
 80046e8:	f000 f874 	bl	80047d4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80046ec:	4b07      	ldr	r3, [pc, #28]	@ (800470c <vPortFree+0xc4>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	3301      	adds	r3, #1
 80046f2:	4a06      	ldr	r2, [pc, #24]	@ (800470c <vPortFree+0xc4>)
 80046f4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80046f6:	f7fe fc45 	bl	8002f84 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80046fa:	bf00      	nop
 80046fc:	3718      	adds	r7, #24
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}
 8004702:	bf00      	nop
 8004704:	20004ab4 	.word	0x20004ab4
 8004708:	20004aa4 	.word	0x20004aa4
 800470c:	20004ab0 	.word	0x20004ab0

08004710 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004710:	b480      	push	{r7}
 8004712:	b085      	sub	sp, #20
 8004714:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004716:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800471a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800471c:	4b27      	ldr	r3, [pc, #156]	@ (80047bc <prvHeapInit+0xac>)
 800471e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	f003 0307 	and.w	r3, r3, #7
 8004726:	2b00      	cmp	r3, #0
 8004728:	d00c      	beq.n	8004744 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	3307      	adds	r3, #7
 800472e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	f023 0307 	bic.w	r3, r3, #7
 8004736:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004738:	68ba      	ldr	r2, [r7, #8]
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	1ad3      	subs	r3, r2, r3
 800473e:	4a1f      	ldr	r2, [pc, #124]	@ (80047bc <prvHeapInit+0xac>)
 8004740:	4413      	add	r3, r2
 8004742:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004748:	4a1d      	ldr	r2, [pc, #116]	@ (80047c0 <prvHeapInit+0xb0>)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800474e:	4b1c      	ldr	r3, [pc, #112]	@ (80047c0 <prvHeapInit+0xb0>)
 8004750:	2200      	movs	r2, #0
 8004752:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	68ba      	ldr	r2, [r7, #8]
 8004758:	4413      	add	r3, r2
 800475a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800475c:	2208      	movs	r2, #8
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	1a9b      	subs	r3, r3, r2
 8004762:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	f023 0307 	bic.w	r3, r3, #7
 800476a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	4a15      	ldr	r2, [pc, #84]	@ (80047c4 <prvHeapInit+0xb4>)
 8004770:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004772:	4b14      	ldr	r3, [pc, #80]	@ (80047c4 <prvHeapInit+0xb4>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	2200      	movs	r2, #0
 8004778:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800477a:	4b12      	ldr	r3, [pc, #72]	@ (80047c4 <prvHeapInit+0xb4>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	2200      	movs	r2, #0
 8004780:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	68fa      	ldr	r2, [r7, #12]
 800478a:	1ad2      	subs	r2, r2, r3
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004790:	4b0c      	ldr	r3, [pc, #48]	@ (80047c4 <prvHeapInit+0xb4>)
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	4a0a      	ldr	r2, [pc, #40]	@ (80047c8 <prvHeapInit+0xb8>)
 800479e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	4a09      	ldr	r2, [pc, #36]	@ (80047cc <prvHeapInit+0xbc>)
 80047a6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80047a8:	4b09      	ldr	r3, [pc, #36]	@ (80047d0 <prvHeapInit+0xc0>)
 80047aa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80047ae:	601a      	str	r2, [r3, #0]
}
 80047b0:	bf00      	nop
 80047b2:	3714      	adds	r7, #20
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr
 80047bc:	20000e98 	.word	0x20000e98
 80047c0:	20004a98 	.word	0x20004a98
 80047c4:	20004aa0 	.word	0x20004aa0
 80047c8:	20004aa8 	.word	0x20004aa8
 80047cc:	20004aa4 	.word	0x20004aa4
 80047d0:	20004ab4 	.word	0x20004ab4

080047d4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80047d4:	b480      	push	{r7}
 80047d6:	b085      	sub	sp, #20
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80047dc:	4b28      	ldr	r3, [pc, #160]	@ (8004880 <prvInsertBlockIntoFreeList+0xac>)
 80047de:	60fb      	str	r3, [r7, #12]
 80047e0:	e002      	b.n	80047e8 <prvInsertBlockIntoFreeList+0x14>
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	60fb      	str	r3, [r7, #12]
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	687a      	ldr	r2, [r7, #4]
 80047ee:	429a      	cmp	r2, r3
 80047f0:	d8f7      	bhi.n	80047e2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	68ba      	ldr	r2, [r7, #8]
 80047fc:	4413      	add	r3, r2
 80047fe:	687a      	ldr	r2, [r7, #4]
 8004800:	429a      	cmp	r2, r3
 8004802:	d108      	bne.n	8004816 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	685a      	ldr	r2, [r3, #4]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	441a      	add	r2, r3
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	68ba      	ldr	r2, [r7, #8]
 8004820:	441a      	add	r2, r3
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	429a      	cmp	r2, r3
 8004828:	d118      	bne.n	800485c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	4b15      	ldr	r3, [pc, #84]	@ (8004884 <prvInsertBlockIntoFreeList+0xb0>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	429a      	cmp	r2, r3
 8004834:	d00d      	beq.n	8004852 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	685a      	ldr	r2, [r3, #4]
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	441a      	add	r2, r3
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	601a      	str	r2, [r3, #0]
 8004850:	e008      	b.n	8004864 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004852:	4b0c      	ldr	r3, [pc, #48]	@ (8004884 <prvInsertBlockIntoFreeList+0xb0>)
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	601a      	str	r2, [r3, #0]
 800485a:	e003      	b.n	8004864 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681a      	ldr	r2, [r3, #0]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004864:	68fa      	ldr	r2, [r7, #12]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	429a      	cmp	r2, r3
 800486a:	d002      	beq.n	8004872 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	687a      	ldr	r2, [r7, #4]
 8004870:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004872:	bf00      	nop
 8004874:	3714      	adds	r7, #20
 8004876:	46bd      	mov	sp, r7
 8004878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487c:	4770      	bx	lr
 800487e:	bf00      	nop
 8004880:	20004a98 	.word	0x20004a98
 8004884:	20004aa0 	.word	0x20004aa0

08004888 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004888:	b580      	push	{r7, lr}
 800488a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 800488c:	4803      	ldr	r0, [pc, #12]	@ (800489c <_cbSendSystemDesc+0x14>)
 800488e:	f001 fd5b 	bl	8006348 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8004892:	4803      	ldr	r0, [pc, #12]	@ (80048a0 <_cbSendSystemDesc+0x18>)
 8004894:	f001 fd58 	bl	8006348 <SEGGER_SYSVIEW_SendSysDesc>
}
 8004898:	bf00      	nop
 800489a:	bd80      	pop	{r7, pc}
 800489c:	08007334 	.word	0x08007334
 80048a0:	08007364 	.word	0x08007364

080048a4 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 80048a4:	b580      	push	{r7, lr}
 80048a6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 80048a8:	4b06      	ldr	r3, [pc, #24]	@ (80048c4 <SEGGER_SYSVIEW_Conf+0x20>)
 80048aa:	6818      	ldr	r0, [r3, #0]
 80048ac:	4b05      	ldr	r3, [pc, #20]	@ (80048c4 <SEGGER_SYSVIEW_Conf+0x20>)
 80048ae:	6819      	ldr	r1, [r3, #0]
 80048b0:	4b05      	ldr	r3, [pc, #20]	@ (80048c8 <SEGGER_SYSVIEW_Conf+0x24>)
 80048b2:	4a06      	ldr	r2, [pc, #24]	@ (80048cc <SEGGER_SYSVIEW_Conf+0x28>)
 80048b4:	f001 f8c6 	bl	8005a44 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 80048b8:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 80048bc:	f001 f906 	bl	8005acc <SEGGER_SYSVIEW_SetRAMBase>
}
 80048c0:	bf00      	nop
 80048c2:	bd80      	pop	{r7, pc}
 80048c4:	20000000 	.word	0x20000000
 80048c8:	08004889 	.word	0x08004889
 80048cc:	08007428 	.word	0x08007428

080048d0 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 80048d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048d2:	b085      	sub	sp, #20
 80048d4:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 80048d6:	2300      	movs	r3, #0
 80048d8:	607b      	str	r3, [r7, #4]
 80048da:	e048      	b.n	800496e <_cbSendTaskList+0x9e>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
 80048dc:	4929      	ldr	r1, [pc, #164]	@ (8004984 <_cbSendTaskList+0xb4>)
 80048de:	687a      	ldr	r2, [r7, #4]
 80048e0:	4613      	mov	r3, r2
 80048e2:	009b      	lsls	r3, r3, #2
 80048e4:	4413      	add	r3, r2
 80048e6:	009b      	lsls	r3, r3, #2
 80048e8:	440b      	add	r3, r1
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4618      	mov	r0, r3
 80048ee:	f7fe feef 	bl	80036d0 <uxTaskGetStackHighWaterMark>
 80048f2:	4601      	mov	r1, r0
 80048f4:	4823      	ldr	r0, [pc, #140]	@ (8004984 <_cbSendTaskList+0xb4>)
 80048f6:	687a      	ldr	r2, [r7, #4]
 80048f8:	4613      	mov	r3, r2
 80048fa:	009b      	lsls	r3, r3, #2
 80048fc:	4413      	add	r3, r2
 80048fe:	009b      	lsls	r3, r3, #2
 8004900:	4403      	add	r3, r0
 8004902:	3310      	adds	r3, #16
 8004904:	6019      	str	r1, [r3, #0]
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004906:	491f      	ldr	r1, [pc, #124]	@ (8004984 <_cbSendTaskList+0xb4>)
 8004908:	687a      	ldr	r2, [r7, #4]
 800490a:	4613      	mov	r3, r2
 800490c:	009b      	lsls	r3, r3, #2
 800490e:	4413      	add	r3, r2
 8004910:	009b      	lsls	r3, r3, #2
 8004912:	440b      	add	r3, r1
 8004914:	6818      	ldr	r0, [r3, #0]
 8004916:	491b      	ldr	r1, [pc, #108]	@ (8004984 <_cbSendTaskList+0xb4>)
 8004918:	687a      	ldr	r2, [r7, #4]
 800491a:	4613      	mov	r3, r2
 800491c:	009b      	lsls	r3, r3, #2
 800491e:	4413      	add	r3, r2
 8004920:	009b      	lsls	r3, r3, #2
 8004922:	440b      	add	r3, r1
 8004924:	3304      	adds	r3, #4
 8004926:	6819      	ldr	r1, [r3, #0]
 8004928:	4c16      	ldr	r4, [pc, #88]	@ (8004984 <_cbSendTaskList+0xb4>)
 800492a:	687a      	ldr	r2, [r7, #4]
 800492c:	4613      	mov	r3, r2
 800492e:	009b      	lsls	r3, r3, #2
 8004930:	4413      	add	r3, r2
 8004932:	009b      	lsls	r3, r3, #2
 8004934:	4423      	add	r3, r4
 8004936:	3308      	adds	r3, #8
 8004938:	681c      	ldr	r4, [r3, #0]
 800493a:	4d12      	ldr	r5, [pc, #72]	@ (8004984 <_cbSendTaskList+0xb4>)
 800493c:	687a      	ldr	r2, [r7, #4]
 800493e:	4613      	mov	r3, r2
 8004940:	009b      	lsls	r3, r3, #2
 8004942:	4413      	add	r3, r2
 8004944:	009b      	lsls	r3, r3, #2
 8004946:	442b      	add	r3, r5
 8004948:	330c      	adds	r3, #12
 800494a:	681d      	ldr	r5, [r3, #0]
 800494c:	4e0d      	ldr	r6, [pc, #52]	@ (8004984 <_cbSendTaskList+0xb4>)
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	4613      	mov	r3, r2
 8004952:	009b      	lsls	r3, r3, #2
 8004954:	4413      	add	r3, r2
 8004956:	009b      	lsls	r3, r3, #2
 8004958:	4433      	add	r3, r6
 800495a:	3310      	adds	r3, #16
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	9300      	str	r3, [sp, #0]
 8004960:	462b      	mov	r3, r5
 8004962:	4622      	mov	r2, r4
 8004964:	f000 f8be 	bl	8004ae4 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	3301      	adds	r3, #1
 800496c:	607b      	str	r3, [r7, #4]
 800496e:	4b06      	ldr	r3, [pc, #24]	@ (8004988 <_cbSendTaskList+0xb8>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	687a      	ldr	r2, [r7, #4]
 8004974:	429a      	cmp	r2, r3
 8004976:	d3b1      	bcc.n	80048dc <_cbSendTaskList+0xc>
  }
}
 8004978:	bf00      	nop
 800497a:	bf00      	nop
 800497c:	370c      	adds	r7, #12
 800497e:	46bd      	mov	sp, r7
 8004980:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004982:	bf00      	nop
 8004984:	20004ab8 	.word	0x20004ab8
 8004988:	20004b58 	.word	0x20004b58

0800498c <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 800498c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004990:	b082      	sub	sp, #8
 8004992:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004994:	f7fe fb9a 	bl	80030cc <xTaskGetTickCountFromISR>
 8004998:	4603      	mov	r3, r0
 800499a:	2200      	movs	r2, #0
 800499c:	469a      	mov	sl, r3
 800499e:	4693      	mov	fp, r2
 80049a0:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 80049a4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80049a8:	4602      	mov	r2, r0
 80049aa:	460b      	mov	r3, r1
 80049ac:	f04f 0a00 	mov.w	sl, #0
 80049b0:	f04f 0b00 	mov.w	fp, #0
 80049b4:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 80049b8:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 80049bc:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 80049c0:	4652      	mov	r2, sl
 80049c2:	465b      	mov	r3, fp
 80049c4:	1a14      	subs	r4, r2, r0
 80049c6:	eb63 0501 	sbc.w	r5, r3, r1
 80049ca:	f04f 0200 	mov.w	r2, #0
 80049ce:	f04f 0300 	mov.w	r3, #0
 80049d2:	00ab      	lsls	r3, r5, #2
 80049d4:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 80049d8:	00a2      	lsls	r2, r4, #2
 80049da:	4614      	mov	r4, r2
 80049dc:	461d      	mov	r5, r3
 80049de:	eb14 0800 	adds.w	r8, r4, r0
 80049e2:	eb45 0901 	adc.w	r9, r5, r1
 80049e6:	f04f 0200 	mov.w	r2, #0
 80049ea:	f04f 0300 	mov.w	r3, #0
 80049ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80049f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80049f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80049fa:	4690      	mov	r8, r2
 80049fc:	4699      	mov	r9, r3
 80049fe:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8004a02:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004a06:	4610      	mov	r0, r2
 8004a08:	4619      	mov	r1, r3
 8004a0a:	3708      	adds	r7, #8
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08004a14 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b086      	sub	sp, #24
 8004a18:	af02      	add	r7, sp, #8
 8004a1a:	60f8      	str	r0, [r7, #12]
 8004a1c:	60b9      	str	r1, [r7, #8]
 8004a1e:	607a      	str	r2, [r7, #4]
 8004a20:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004a22:	2205      	movs	r2, #5
 8004a24:	492b      	ldr	r1, [pc, #172]	@ (8004ad4 <SYSVIEW_AddTask+0xc0>)
 8004a26:	68b8      	ldr	r0, [r7, #8]
 8004a28:	f001 ff58 	bl	80068dc <memcmp>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d04b      	beq.n	8004aca <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004a32:	4b29      	ldr	r3, [pc, #164]	@ (8004ad8 <SYSVIEW_AddTask+0xc4>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	2b07      	cmp	r3, #7
 8004a38:	d903      	bls.n	8004a42 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004a3a:	4828      	ldr	r0, [pc, #160]	@ (8004adc <SYSVIEW_AddTask+0xc8>)
 8004a3c:	f001 febc 	bl	80067b8 <SEGGER_SYSVIEW_Warn>
    return;
 8004a40:	e044      	b.n	8004acc <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004a42:	4b25      	ldr	r3, [pc, #148]	@ (8004ad8 <SYSVIEW_AddTask+0xc4>)
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	4926      	ldr	r1, [pc, #152]	@ (8004ae0 <SYSVIEW_AddTask+0xcc>)
 8004a48:	4613      	mov	r3, r2
 8004a4a:	009b      	lsls	r3, r3, #2
 8004a4c:	4413      	add	r3, r2
 8004a4e:	009b      	lsls	r3, r3, #2
 8004a50:	440b      	add	r3, r1
 8004a52:	68fa      	ldr	r2, [r7, #12]
 8004a54:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004a56:	4b20      	ldr	r3, [pc, #128]	@ (8004ad8 <SYSVIEW_AddTask+0xc4>)
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	4921      	ldr	r1, [pc, #132]	@ (8004ae0 <SYSVIEW_AddTask+0xcc>)
 8004a5c:	4613      	mov	r3, r2
 8004a5e:	009b      	lsls	r3, r3, #2
 8004a60:	4413      	add	r3, r2
 8004a62:	009b      	lsls	r3, r3, #2
 8004a64:	440b      	add	r3, r1
 8004a66:	3304      	adds	r3, #4
 8004a68:	68ba      	ldr	r2, [r7, #8]
 8004a6a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004a6c:	4b1a      	ldr	r3, [pc, #104]	@ (8004ad8 <SYSVIEW_AddTask+0xc4>)
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	491b      	ldr	r1, [pc, #108]	@ (8004ae0 <SYSVIEW_AddTask+0xcc>)
 8004a72:	4613      	mov	r3, r2
 8004a74:	009b      	lsls	r3, r3, #2
 8004a76:	4413      	add	r3, r2
 8004a78:	009b      	lsls	r3, r3, #2
 8004a7a:	440b      	add	r3, r1
 8004a7c:	3308      	adds	r3, #8
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004a82:	4b15      	ldr	r3, [pc, #84]	@ (8004ad8 <SYSVIEW_AddTask+0xc4>)
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	4916      	ldr	r1, [pc, #88]	@ (8004ae0 <SYSVIEW_AddTask+0xcc>)
 8004a88:	4613      	mov	r3, r2
 8004a8a:	009b      	lsls	r3, r3, #2
 8004a8c:	4413      	add	r3, r2
 8004a8e:	009b      	lsls	r3, r3, #2
 8004a90:	440b      	add	r3, r1
 8004a92:	330c      	adds	r3, #12
 8004a94:	683a      	ldr	r2, [r7, #0]
 8004a96:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004a98:	4b0f      	ldr	r3, [pc, #60]	@ (8004ad8 <SYSVIEW_AddTask+0xc4>)
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	4910      	ldr	r1, [pc, #64]	@ (8004ae0 <SYSVIEW_AddTask+0xcc>)
 8004a9e:	4613      	mov	r3, r2
 8004aa0:	009b      	lsls	r3, r3, #2
 8004aa2:	4413      	add	r3, r2
 8004aa4:	009b      	lsls	r3, r3, #2
 8004aa6:	440b      	add	r3, r1
 8004aa8:	3310      	adds	r3, #16
 8004aaa:	69ba      	ldr	r2, [r7, #24]
 8004aac:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004aae:	4b0a      	ldr	r3, [pc, #40]	@ (8004ad8 <SYSVIEW_AddTask+0xc4>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	3301      	adds	r3, #1
 8004ab4:	4a08      	ldr	r2, [pc, #32]	@ (8004ad8 <SYSVIEW_AddTask+0xc4>)
 8004ab6:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004ab8:	69bb      	ldr	r3, [r7, #24]
 8004aba:	9300      	str	r3, [sp, #0]
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	68b9      	ldr	r1, [r7, #8]
 8004ac2:	68f8      	ldr	r0, [r7, #12]
 8004ac4:	f000 f80e 	bl	8004ae4 <SYSVIEW_SendTaskInfo>
 8004ac8:	e000      	b.n	8004acc <SYSVIEW_AddTask+0xb8>
    return;
 8004aca:	bf00      	nop

}
 8004acc:	3710      	adds	r7, #16
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}
 8004ad2:	bf00      	nop
 8004ad4:	08007374 	.word	0x08007374
 8004ad8:	20004b58 	.word	0x20004b58
 8004adc:	0800737c 	.word	0x0800737c
 8004ae0:	20004ab8 	.word	0x20004ab8

08004ae4 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b08a      	sub	sp, #40	@ 0x28
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	60f8      	str	r0, [r7, #12]
 8004aec:	60b9      	str	r1, [r7, #8]
 8004aee:	607a      	str	r2, [r7, #4]
 8004af0:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8004af2:	f107 0314 	add.w	r3, r7, #20
 8004af6:	2214      	movs	r2, #20
 8004af8:	2100      	movs	r1, #0
 8004afa:	4618      	mov	r0, r3
 8004afc:	f001 fefe 	bl	80068fc <memset>
  TaskInfo.TaskID     = TaskID;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8004b10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b12:	627b      	str	r3, [r7, #36]	@ 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004b14:	f107 0314 	add.w	r3, r7, #20
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f001 fb1d 	bl	8006158 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8004b1e:	bf00      	nop
 8004b20:	3728      	adds	r7, #40	@ 0x28
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}
	...

08004b28 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8004b28:	b480      	push	{r7}
 8004b2a:	b083      	sub	sp, #12
 8004b2c:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8004b2e:	4b24      	ldr	r3, [pc, #144]	@ (8004bc0 <_DoInit+0x98>)
 8004b30:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2203      	movs	r2, #3
 8004b36:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2203      	movs	r2, #3
 8004b3c:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	4a20      	ldr	r2, [pc, #128]	@ (8004bc4 <_DoInit+0x9c>)
 8004b42:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	4a20      	ldr	r2, [pc, #128]	@ (8004bc8 <_DoInit+0xa0>)
 8004b48:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004b50:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2200      	movs	r2, #0
 8004b56:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2200      	movs	r2, #0
 8004b62:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	4a17      	ldr	r2, [pc, #92]	@ (8004bc4 <_DoInit+0x9c>)
 8004b68:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	4a17      	ldr	r2, [pc, #92]	@ (8004bcc <_DoInit+0xa4>)
 8004b6e:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2210      	movs	r2, #16
 8004b74:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2200      	movs	r2, #0
 8004b86:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	3307      	adds	r3, #7
 8004b8c:	4a10      	ldr	r2, [pc, #64]	@ (8004bd0 <_DoInit+0xa8>)
 8004b8e:	6810      	ldr	r0, [r2, #0]
 8004b90:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004b92:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	4a0e      	ldr	r2, [pc, #56]	@ (8004bd4 <_DoInit+0xac>)
 8004b9a:	6810      	ldr	r0, [r2, #0]
 8004b9c:	6018      	str	r0, [r3, #0]
 8004b9e:	8891      	ldrh	r1, [r2, #4]
 8004ba0:	7992      	ldrb	r2, [r2, #6]
 8004ba2:	8099      	strh	r1, [r3, #4]
 8004ba4:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004ba6:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2220      	movs	r2, #32
 8004bae:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004bb0:	f3bf 8f5f 	dmb	sy
}
 8004bb4:	bf00      	nop
 8004bb6:	370c      	adds	r7, #12
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr
 8004bc0:	20004b5c 	.word	0x20004b5c
 8004bc4:	080073cc 	.word	0x080073cc
 8004bc8:	20004c04 	.word	0x20004c04
 8004bcc:	20005004 	.word	0x20005004
 8004bd0:	080073d8 	.word	0x080073d8
 8004bd4:	080073dc 	.word	0x080073dc

08004bd8 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b08c      	sub	sp, #48	@ 0x30
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	60f8      	str	r0, [r7, #12]
 8004be0:	60b9      	str	r1, [r7, #8]
 8004be2:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8004be4:	4b3e      	ldr	r3, [pc, #248]	@ (8004ce0 <SEGGER_RTT_ReadNoLock+0x108>)
 8004be6:	623b      	str	r3, [r7, #32]
 8004be8:	6a3b      	ldr	r3, [r7, #32]
 8004bea:	781b      	ldrb	r3, [r3, #0]
 8004bec:	b2db      	uxtb	r3, r3
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d101      	bne.n	8004bf6 <SEGGER_RTT_ReadNoLock+0x1e>
 8004bf2:	f7ff ff99 	bl	8004b28 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004bf6:	68fa      	ldr	r2, [r7, #12]
 8004bf8:	4613      	mov	r3, r2
 8004bfa:	005b      	lsls	r3, r3, #1
 8004bfc:	4413      	add	r3, r2
 8004bfe:	00db      	lsls	r3, r3, #3
 8004c00:	3360      	adds	r3, #96	@ 0x60
 8004c02:	4a37      	ldr	r2, [pc, #220]	@ (8004ce0 <SEGGER_RTT_ReadNoLock+0x108>)
 8004c04:	4413      	add	r3, r2
 8004c06:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8004c0c:	69fb      	ldr	r3, [r7, #28]
 8004c0e:	691b      	ldr	r3, [r3, #16]
 8004c10:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 8004c12:	69fb      	ldr	r3, [r7, #28]
 8004c14:	68db      	ldr	r3, [r3, #12]
 8004c16:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004c1c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004c1e:	69bb      	ldr	r3, [r7, #24]
 8004c20:	429a      	cmp	r2, r3
 8004c22:	d92b      	bls.n	8004c7c <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004c24:	69fb      	ldr	r3, [r7, #28]
 8004c26:	689a      	ldr	r2, [r3, #8]
 8004c28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c2a:	1ad3      	subs	r3, r2, r3
 8004c2c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004c2e:	697a      	ldr	r2, [r7, #20]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	4293      	cmp	r3, r2
 8004c34:	bf28      	it	cs
 8004c36:	4613      	movcs	r3, r2
 8004c38:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004c3a:	69fb      	ldr	r3, [r7, #28]
 8004c3c:	685a      	ldr	r2, [r3, #4]
 8004c3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c40:	4413      	add	r3, r2
 8004c42:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004c44:	697a      	ldr	r2, [r7, #20]
 8004c46:	6939      	ldr	r1, [r7, #16]
 8004c48:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004c4a:	f001 fee9 	bl	8006a20 <memcpy>
    NumBytesRead += NumBytesRem;
 8004c4e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	4413      	add	r3, r2
 8004c54:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8004c56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	4413      	add	r3, r2
 8004c5c:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8004c5e:	687a      	ldr	r2, [r7, #4]
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	1ad3      	subs	r3, r2, r3
 8004c64:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004c66:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	4413      	add	r3, r2
 8004c6c:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8004c6e:	69fb      	ldr	r3, [r7, #28]
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004c74:	429a      	cmp	r2, r3
 8004c76:	d101      	bne.n	8004c7c <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004c7c:	69ba      	ldr	r2, [r7, #24]
 8004c7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c80:	1ad3      	subs	r3, r2, r3
 8004c82:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004c84:	697a      	ldr	r2, [r7, #20]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	bf28      	it	cs
 8004c8c:	4613      	movcs	r3, r2
 8004c8e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d019      	beq.n	8004cca <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004c96:	69fb      	ldr	r3, [r7, #28]
 8004c98:	685a      	ldr	r2, [r3, #4]
 8004c9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c9c:	4413      	add	r3, r2
 8004c9e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004ca0:	697a      	ldr	r2, [r7, #20]
 8004ca2:	6939      	ldr	r1, [r7, #16]
 8004ca4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004ca6:	f001 febb 	bl	8006a20 <memcpy>
    NumBytesRead += NumBytesRem;
 8004caa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	4413      	add	r3, r2
 8004cb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8004cb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	4413      	add	r3, r2
 8004cb8:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8004cba:	687a      	ldr	r2, [r7, #4]
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	1ad3      	subs	r3, r2, r3
 8004cc0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004cc2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	4413      	add	r3, r2
 8004cc8:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 8004cca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d002      	beq.n	8004cd6 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004cd0:	69fb      	ldr	r3, [r7, #28]
 8004cd2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004cd4:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004cd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	3730      	adds	r7, #48	@ 0x30
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}
 8004ce0:	20004b5c 	.word	0x20004b5c

08004ce4 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b088      	sub	sp, #32
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	60f8      	str	r0, [r7, #12]
 8004cec:	60b9      	str	r1, [r7, #8]
 8004cee:	607a      	str	r2, [r7, #4]
 8004cf0:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8004cf2:	4b3d      	ldr	r3, [pc, #244]	@ (8004de8 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004cf4:	61bb      	str	r3, [r7, #24]
 8004cf6:	69bb      	ldr	r3, [r7, #24]
 8004cf8:	781b      	ldrb	r3, [r3, #0]
 8004cfa:	b2db      	uxtb	r3, r3
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d101      	bne.n	8004d04 <SEGGER_RTT_AllocUpBuffer+0x20>
 8004d00:	f7ff ff12 	bl	8004b28 <_DoInit>
  SEGGER_RTT_LOCK();
 8004d04:	f3ef 8311 	mrs	r3, BASEPRI
 8004d08:	f04f 0120 	mov.w	r1, #32
 8004d0c:	f381 8811 	msr	BASEPRI, r1
 8004d10:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004d12:	4b35      	ldr	r3, [pc, #212]	@ (8004de8 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004d14:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8004d16:	2300      	movs	r3, #0
 8004d18:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8004d1a:	6939      	ldr	r1, [r7, #16]
 8004d1c:	69fb      	ldr	r3, [r7, #28]
 8004d1e:	1c5a      	adds	r2, r3, #1
 8004d20:	4613      	mov	r3, r2
 8004d22:	005b      	lsls	r3, r3, #1
 8004d24:	4413      	add	r3, r2
 8004d26:	00db      	lsls	r3, r3, #3
 8004d28:	440b      	add	r3, r1
 8004d2a:	3304      	adds	r3, #4
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d008      	beq.n	8004d44 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8004d32:	69fb      	ldr	r3, [r7, #28]
 8004d34:	3301      	adds	r3, #1
 8004d36:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	691b      	ldr	r3, [r3, #16]
 8004d3c:	69fa      	ldr	r2, [r7, #28]
 8004d3e:	429a      	cmp	r2, r3
 8004d40:	dbeb      	blt.n	8004d1a <SEGGER_RTT_AllocUpBuffer+0x36>
 8004d42:	e000      	b.n	8004d46 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8004d44:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	691b      	ldr	r3, [r3, #16]
 8004d4a:	69fa      	ldr	r2, [r7, #28]
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	da3f      	bge.n	8004dd0 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8004d50:	6939      	ldr	r1, [r7, #16]
 8004d52:	69fb      	ldr	r3, [r7, #28]
 8004d54:	1c5a      	adds	r2, r3, #1
 8004d56:	4613      	mov	r3, r2
 8004d58:	005b      	lsls	r3, r3, #1
 8004d5a:	4413      	add	r3, r2
 8004d5c:	00db      	lsls	r3, r3, #3
 8004d5e:	440b      	add	r3, r1
 8004d60:	68fa      	ldr	r2, [r7, #12]
 8004d62:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8004d64:	6939      	ldr	r1, [r7, #16]
 8004d66:	69fb      	ldr	r3, [r7, #28]
 8004d68:	1c5a      	adds	r2, r3, #1
 8004d6a:	4613      	mov	r3, r2
 8004d6c:	005b      	lsls	r3, r3, #1
 8004d6e:	4413      	add	r3, r2
 8004d70:	00db      	lsls	r3, r3, #3
 8004d72:	440b      	add	r3, r1
 8004d74:	3304      	adds	r3, #4
 8004d76:	68ba      	ldr	r2, [r7, #8]
 8004d78:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8004d7a:	6939      	ldr	r1, [r7, #16]
 8004d7c:	69fa      	ldr	r2, [r7, #28]
 8004d7e:	4613      	mov	r3, r2
 8004d80:	005b      	lsls	r3, r3, #1
 8004d82:	4413      	add	r3, r2
 8004d84:	00db      	lsls	r3, r3, #3
 8004d86:	440b      	add	r3, r1
 8004d88:	3320      	adds	r3, #32
 8004d8a:	687a      	ldr	r2, [r7, #4]
 8004d8c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8004d8e:	6939      	ldr	r1, [r7, #16]
 8004d90:	69fa      	ldr	r2, [r7, #28]
 8004d92:	4613      	mov	r3, r2
 8004d94:	005b      	lsls	r3, r3, #1
 8004d96:	4413      	add	r3, r2
 8004d98:	00db      	lsls	r3, r3, #3
 8004d9a:	440b      	add	r3, r1
 8004d9c:	3328      	adds	r3, #40	@ 0x28
 8004d9e:	2200      	movs	r2, #0
 8004da0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8004da2:	6939      	ldr	r1, [r7, #16]
 8004da4:	69fa      	ldr	r2, [r7, #28]
 8004da6:	4613      	mov	r3, r2
 8004da8:	005b      	lsls	r3, r3, #1
 8004daa:	4413      	add	r3, r2
 8004dac:	00db      	lsls	r3, r3, #3
 8004dae:	440b      	add	r3, r1
 8004db0:	3324      	adds	r3, #36	@ 0x24
 8004db2:	2200      	movs	r2, #0
 8004db4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8004db6:	6939      	ldr	r1, [r7, #16]
 8004db8:	69fa      	ldr	r2, [r7, #28]
 8004dba:	4613      	mov	r3, r2
 8004dbc:	005b      	lsls	r3, r3, #1
 8004dbe:	4413      	add	r3, r2
 8004dc0:	00db      	lsls	r3, r3, #3
 8004dc2:	440b      	add	r3, r1
 8004dc4:	332c      	adds	r3, #44	@ 0x2c
 8004dc6:	683a      	ldr	r2, [r7, #0]
 8004dc8:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004dca:	f3bf 8f5f 	dmb	sy
 8004dce:	e002      	b.n	8004dd6 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8004dd0:	f04f 33ff 	mov.w	r3, #4294967295
 8004dd4:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8004ddc:	69fb      	ldr	r3, [r7, #28]
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3720      	adds	r7, #32
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}
 8004de6:	bf00      	nop
 8004de8:	20004b5c 	.word	0x20004b5c

08004dec <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b088      	sub	sp, #32
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	60f8      	str	r0, [r7, #12]
 8004df4:	60b9      	str	r1, [r7, #8]
 8004df6:	607a      	str	r2, [r7, #4]
 8004df8:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8004dfa:	4b33      	ldr	r3, [pc, #204]	@ (8004ec8 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8004dfc:	61bb      	str	r3, [r7, #24]
 8004dfe:	69bb      	ldr	r3, [r7, #24]
 8004e00:	781b      	ldrb	r3, [r3, #0]
 8004e02:	b2db      	uxtb	r3, r3
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d101      	bne.n	8004e0c <SEGGER_RTT_ConfigDownBuffer+0x20>
 8004e08:	f7ff fe8e 	bl	8004b28 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004e0c:	4b2e      	ldr	r3, [pc, #184]	@ (8004ec8 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8004e0e:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	695b      	ldr	r3, [r3, #20]
 8004e14:	461a      	mov	r2, r3
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d24d      	bcs.n	8004eb8 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 8004e1c:	f3ef 8311 	mrs	r3, BASEPRI
 8004e20:	f04f 0120 	mov.w	r1, #32
 8004e24:	f381 8811 	msr	BASEPRI, r1
 8004e28:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d031      	beq.n	8004e94 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 8004e30:	6979      	ldr	r1, [r7, #20]
 8004e32:	68fa      	ldr	r2, [r7, #12]
 8004e34:	4613      	mov	r3, r2
 8004e36:	005b      	lsls	r3, r3, #1
 8004e38:	4413      	add	r3, r2
 8004e3a:	00db      	lsls	r3, r3, #3
 8004e3c:	440b      	add	r3, r1
 8004e3e:	3360      	adds	r3, #96	@ 0x60
 8004e40:	68ba      	ldr	r2, [r7, #8]
 8004e42:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8004e44:	6979      	ldr	r1, [r7, #20]
 8004e46:	68fa      	ldr	r2, [r7, #12]
 8004e48:	4613      	mov	r3, r2
 8004e4a:	005b      	lsls	r3, r3, #1
 8004e4c:	4413      	add	r3, r2
 8004e4e:	00db      	lsls	r3, r3, #3
 8004e50:	440b      	add	r3, r1
 8004e52:	3364      	adds	r3, #100	@ 0x64
 8004e54:	687a      	ldr	r2, [r7, #4]
 8004e56:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8004e58:	6979      	ldr	r1, [r7, #20]
 8004e5a:	68fa      	ldr	r2, [r7, #12]
 8004e5c:	4613      	mov	r3, r2
 8004e5e:	005b      	lsls	r3, r3, #1
 8004e60:	4413      	add	r3, r2
 8004e62:	00db      	lsls	r3, r3, #3
 8004e64:	440b      	add	r3, r1
 8004e66:	3368      	adds	r3, #104	@ 0x68
 8004e68:	683a      	ldr	r2, [r7, #0]
 8004e6a:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 8004e6c:	6979      	ldr	r1, [r7, #20]
 8004e6e:	68fa      	ldr	r2, [r7, #12]
 8004e70:	4613      	mov	r3, r2
 8004e72:	005b      	lsls	r3, r3, #1
 8004e74:	4413      	add	r3, r2
 8004e76:	00db      	lsls	r3, r3, #3
 8004e78:	440b      	add	r3, r1
 8004e7a:	3370      	adds	r3, #112	@ 0x70
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 8004e80:	6979      	ldr	r1, [r7, #20]
 8004e82:	68fa      	ldr	r2, [r7, #12]
 8004e84:	4613      	mov	r3, r2
 8004e86:	005b      	lsls	r3, r3, #1
 8004e88:	4413      	add	r3, r2
 8004e8a:	00db      	lsls	r3, r3, #3
 8004e8c:	440b      	add	r3, r1
 8004e8e:	336c      	adds	r3, #108	@ 0x6c
 8004e90:	2200      	movs	r2, #0
 8004e92:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8004e94:	6979      	ldr	r1, [r7, #20]
 8004e96:	68fa      	ldr	r2, [r7, #12]
 8004e98:	4613      	mov	r3, r2
 8004e9a:	005b      	lsls	r3, r3, #1
 8004e9c:	4413      	add	r3, r2
 8004e9e:	00db      	lsls	r3, r3, #3
 8004ea0:	440b      	add	r3, r1
 8004ea2:	3374      	adds	r3, #116	@ 0x74
 8004ea4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004ea6:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004ea8:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	61fb      	str	r3, [r7, #28]
 8004eb6:	e002      	b.n	8004ebe <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 8004eb8:	f04f 33ff 	mov.w	r3, #4294967295
 8004ebc:	61fb      	str	r3, [r7, #28]
  }
  return r;
 8004ebe:	69fb      	ldr	r3, [r7, #28]
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	3720      	adds	r7, #32
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}
 8004ec8:	20004b5c 	.word	0x20004b5c

08004ecc <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8004ecc:	b480      	push	{r7}
 8004ece:	b087      	sub	sp, #28
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	60f8      	str	r0, [r7, #12]
 8004ed4:	60b9      	str	r1, [r7, #8]
 8004ed6:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8004ed8:	2300      	movs	r3, #0
 8004eda:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8004edc:	e002      	b.n	8004ee4 <_EncodeStr+0x18>
    Len++;
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	3301      	adds	r3, #1
 8004ee2:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8004ee4:	68ba      	ldr	r2, [r7, #8]
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	4413      	add	r3, r2
 8004eea:	781b      	ldrb	r3, [r3, #0]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d1f6      	bne.n	8004ede <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8004ef0:	693a      	ldr	r2, [r7, #16]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	d901      	bls.n	8004efc <_EncodeStr+0x30>
    Len = Limit;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	2bfe      	cmp	r3, #254	@ 0xfe
 8004f00:	d806      	bhi.n	8004f10 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	1c5a      	adds	r2, r3, #1
 8004f06:	60fa      	str	r2, [r7, #12]
 8004f08:	693a      	ldr	r2, [r7, #16]
 8004f0a:	b2d2      	uxtb	r2, r2
 8004f0c:	701a      	strb	r2, [r3, #0]
 8004f0e:	e011      	b.n	8004f34 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	1c5a      	adds	r2, r3, #1
 8004f14:	60fa      	str	r2, [r7, #12]
 8004f16:	22ff      	movs	r2, #255	@ 0xff
 8004f18:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	1c5a      	adds	r2, r3, #1
 8004f1e:	60fa      	str	r2, [r7, #12]
 8004f20:	693a      	ldr	r2, [r7, #16]
 8004f22:	b2d2      	uxtb	r2, r2
 8004f24:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	0a19      	lsrs	r1, r3, #8
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	1c5a      	adds	r2, r3, #1
 8004f2e:	60fa      	str	r2, [r7, #12]
 8004f30:	b2ca      	uxtb	r2, r1
 8004f32:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8004f34:	2300      	movs	r3, #0
 8004f36:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8004f38:	e00a      	b.n	8004f50 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8004f3a:	68ba      	ldr	r2, [r7, #8]
 8004f3c:	1c53      	adds	r3, r2, #1
 8004f3e:	60bb      	str	r3, [r7, #8]
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	1c59      	adds	r1, r3, #1
 8004f44:	60f9      	str	r1, [r7, #12]
 8004f46:	7812      	ldrb	r2, [r2, #0]
 8004f48:	701a      	strb	r2, [r3, #0]
    n++;
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	3301      	adds	r3, #1
 8004f4e:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8004f50:	697a      	ldr	r2, [r7, #20]
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	429a      	cmp	r2, r3
 8004f56:	d3f0      	bcc.n	8004f3a <_EncodeStr+0x6e>
  }
  return pPayload;
 8004f58:	68fb      	ldr	r3, [r7, #12]
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	371c      	adds	r7, #28
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f64:	4770      	bx	lr

08004f66 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8004f66:	b480      	push	{r7}
 8004f68:	b083      	sub	sp, #12
 8004f6a:	af00      	add	r7, sp, #0
 8004f6c:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	3304      	adds	r3, #4
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	370c      	adds	r7, #12
 8004f76:	46bd      	mov	sp, r7
 8004f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7c:	4770      	bx	lr
	...

08004f80 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b082      	sub	sp, #8
 8004f84:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004f86:	4b35      	ldr	r3, [pc, #212]	@ (800505c <_HandleIncomingPacket+0xdc>)
 8004f88:	7e1b      	ldrb	r3, [r3, #24]
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	1cfb      	adds	r3, r7, #3
 8004f8e:	2201      	movs	r2, #1
 8004f90:	4619      	mov	r1, r3
 8004f92:	f7ff fe21 	bl	8004bd8 <SEGGER_RTT_ReadNoLock>
 8004f96:	4603      	mov	r3, r0
 8004f98:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	dd59      	ble.n	8005054 <_HandleIncomingPacket+0xd4>
    switch (Cmd) {
 8004fa0:	78fb      	ldrb	r3, [r7, #3]
 8004fa2:	2b80      	cmp	r3, #128	@ 0x80
 8004fa4:	d032      	beq.n	800500c <_HandleIncomingPacket+0x8c>
 8004fa6:	2b80      	cmp	r3, #128	@ 0x80
 8004fa8:	dc42      	bgt.n	8005030 <_HandleIncomingPacket+0xb0>
 8004faa:	2b07      	cmp	r3, #7
 8004fac:	dc16      	bgt.n	8004fdc <_HandleIncomingPacket+0x5c>
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	dd3e      	ble.n	8005030 <_HandleIncomingPacket+0xb0>
 8004fb2:	3b01      	subs	r3, #1
 8004fb4:	2b06      	cmp	r3, #6
 8004fb6:	d83b      	bhi.n	8005030 <_HandleIncomingPacket+0xb0>
 8004fb8:	a201      	add	r2, pc, #4	@ (adr r2, 8004fc0 <_HandleIncomingPacket+0x40>)
 8004fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fbe:	bf00      	nop
 8004fc0:	08004fe3 	.word	0x08004fe3
 8004fc4:	08004fe9 	.word	0x08004fe9
 8004fc8:	08004fef 	.word	0x08004fef
 8004fcc:	08004ff5 	.word	0x08004ff5
 8004fd0:	08004ffb 	.word	0x08004ffb
 8004fd4:	08005001 	.word	0x08005001
 8004fd8:	08005007 	.word	0x08005007
 8004fdc:	2b7f      	cmp	r3, #127	@ 0x7f
 8004fde:	d034      	beq.n	800504a <_HandleIncomingPacket+0xca>
 8004fe0:	e026      	b.n	8005030 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8004fe2:	f000 ff3f 	bl	8005e64 <SEGGER_SYSVIEW_Start>
      break;
 8004fe6:	e035      	b.n	8005054 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8004fe8:	f000 fff6 	bl	8005fd8 <SEGGER_SYSVIEW_Stop>
      break;
 8004fec:	e032      	b.n	8005054 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8004fee:	f001 f9cf 	bl	8006390 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8004ff2:	e02f      	b.n	8005054 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8004ff4:	f001 f994 	bl	8006320 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8004ff8:	e02c      	b.n	8005054 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8004ffa:	f001 f813 	bl	8006024 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8004ffe:	e029      	b.n	8005054 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005000:	f001 fb88 	bl	8006714 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005004:	e026      	b.n	8005054 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8005006:	f001 fb67 	bl	80066d8 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800500a:	e023      	b.n	8005054 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800500c:	4b13      	ldr	r3, [pc, #76]	@ (800505c <_HandleIncomingPacket+0xdc>)
 800500e:	7e1b      	ldrb	r3, [r3, #24]
 8005010:	4618      	mov	r0, r3
 8005012:	1cfb      	adds	r3, r7, #3
 8005014:	2201      	movs	r2, #1
 8005016:	4619      	mov	r1, r3
 8005018:	f7ff fdde 	bl	8004bd8 <SEGGER_RTT_ReadNoLock>
 800501c:	4603      	mov	r3, r0
 800501e:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2b00      	cmp	r3, #0
 8005024:	dd13      	ble.n	800504e <_HandleIncomingPacket+0xce>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8005026:	78fb      	ldrb	r3, [r7, #3]
 8005028:	4618      	mov	r0, r3
 800502a:	f001 fad5 	bl	80065d8 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800502e:	e00e      	b.n	800504e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005030:	78fb      	ldrb	r3, [r7, #3]
 8005032:	b25b      	sxtb	r3, r3
 8005034:	2b00      	cmp	r3, #0
 8005036:	da0c      	bge.n	8005052 <_HandleIncomingPacket+0xd2>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005038:	4b08      	ldr	r3, [pc, #32]	@ (800505c <_HandleIncomingPacket+0xdc>)
 800503a:	7e1b      	ldrb	r3, [r3, #24]
 800503c:	4618      	mov	r0, r3
 800503e:	1cfb      	adds	r3, r7, #3
 8005040:	2201      	movs	r2, #1
 8005042:	4619      	mov	r1, r3
 8005044:	f7ff fdc8 	bl	8004bd8 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8005048:	e003      	b.n	8005052 <_HandleIncomingPacket+0xd2>
      break;
 800504a:	bf00      	nop
 800504c:	e002      	b.n	8005054 <_HandleIncomingPacket+0xd4>
      break;
 800504e:	bf00      	nop
 8005050:	e000      	b.n	8005054 <_HandleIncomingPacket+0xd4>
      break;
 8005052:	bf00      	nop
    }
  }
}
 8005054:	bf00      	nop
 8005056:	3708      	adds	r7, #8
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}
 800505c:	2000601c 	.word	0x2000601c

08005060 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005060:	b580      	push	{r7, lr}
 8005062:	b08c      	sub	sp, #48	@ 0x30
 8005064:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8005066:	2301      	movs	r3, #1
 8005068:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800506a:	1d3b      	adds	r3, r7, #4
 800506c:	3301      	adds	r3, #1
 800506e:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8005070:	69fb      	ldr	r3, [r7, #28]
 8005072:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005074:	4b31      	ldr	r3, [pc, #196]	@ (800513c <_TrySendOverflowPacket+0xdc>)
 8005076:	695b      	ldr	r3, [r3, #20]
 8005078:	62bb      	str	r3, [r7, #40]	@ 0x28
 800507a:	e00b      	b.n	8005094 <_TrySendOverflowPacket+0x34>
 800507c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800507e:	b2da      	uxtb	r2, r3
 8005080:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005082:	1c59      	adds	r1, r3, #1
 8005084:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005086:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800508a:	b2d2      	uxtb	r2, r2
 800508c:	701a      	strb	r2, [r3, #0]
 800508e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005090:	09db      	lsrs	r3, r3, #7
 8005092:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005094:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005096:	2b7f      	cmp	r3, #127	@ 0x7f
 8005098:	d8f0      	bhi.n	800507c <_TrySendOverflowPacket+0x1c>
 800509a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800509c:	1c5a      	adds	r2, r3, #1
 800509e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80050a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80050a2:	b2d2      	uxtb	r2, r2
 80050a4:	701a      	strb	r2, [r3, #0]
 80050a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050a8:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80050aa:	4b25      	ldr	r3, [pc, #148]	@ (8005140 <_TrySendOverflowPacket+0xe0>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80050b0:	4b22      	ldr	r3, [pc, #136]	@ (800513c <_TrySendOverflowPacket+0xdc>)
 80050b2:	68db      	ldr	r3, [r3, #12]
 80050b4:	69ba      	ldr	r2, [r7, #24]
 80050b6:	1ad3      	subs	r3, r2, r3
 80050b8:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80050ba:	69fb      	ldr	r3, [r7, #28]
 80050bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	623b      	str	r3, [r7, #32]
 80050c2:	e00b      	b.n	80050dc <_TrySendOverflowPacket+0x7c>
 80050c4:	6a3b      	ldr	r3, [r7, #32]
 80050c6:	b2da      	uxtb	r2, r3
 80050c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ca:	1c59      	adds	r1, r3, #1
 80050cc:	6279      	str	r1, [r7, #36]	@ 0x24
 80050ce:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80050d2:	b2d2      	uxtb	r2, r2
 80050d4:	701a      	strb	r2, [r3, #0]
 80050d6:	6a3b      	ldr	r3, [r7, #32]
 80050d8:	09db      	lsrs	r3, r3, #7
 80050da:	623b      	str	r3, [r7, #32]
 80050dc:	6a3b      	ldr	r3, [r7, #32]
 80050de:	2b7f      	cmp	r3, #127	@ 0x7f
 80050e0:	d8f0      	bhi.n	80050c4 <_TrySendOverflowPacket+0x64>
 80050e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050e4:	1c5a      	adds	r2, r3, #1
 80050e6:	627a      	str	r2, [r7, #36]	@ 0x24
 80050e8:	6a3a      	ldr	r2, [r7, #32]
 80050ea:	b2d2      	uxtb	r2, r2
 80050ec:	701a      	strb	r2, [r3, #0]
 80050ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050f0:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 80050f2:	4b12      	ldr	r3, [pc, #72]	@ (800513c <_TrySendOverflowPacket+0xdc>)
 80050f4:	785b      	ldrb	r3, [r3, #1]
 80050f6:	4618      	mov	r0, r3
 80050f8:	1d3b      	adds	r3, r7, #4
 80050fa:	69fa      	ldr	r2, [r7, #28]
 80050fc:	1ad3      	subs	r3, r2, r3
 80050fe:	461a      	mov	r2, r3
 8005100:	1d3b      	adds	r3, r7, #4
 8005102:	4619      	mov	r1, r3
 8005104:	f7fb f864 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005108:	4603      	mov	r3, r0
 800510a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d009      	beq.n	8005126 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005112:	4a0a      	ldr	r2, [pc, #40]	@ (800513c <_TrySendOverflowPacket+0xdc>)
 8005114:	69bb      	ldr	r3, [r7, #24]
 8005116:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005118:	4b08      	ldr	r3, [pc, #32]	@ (800513c <_TrySendOverflowPacket+0xdc>)
 800511a:	781b      	ldrb	r3, [r3, #0]
 800511c:	3b01      	subs	r3, #1
 800511e:	b2da      	uxtb	r2, r3
 8005120:	4b06      	ldr	r3, [pc, #24]	@ (800513c <_TrySendOverflowPacket+0xdc>)
 8005122:	701a      	strb	r2, [r3, #0]
 8005124:	e004      	b.n	8005130 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8005126:	4b05      	ldr	r3, [pc, #20]	@ (800513c <_TrySendOverflowPacket+0xdc>)
 8005128:	695b      	ldr	r3, [r3, #20]
 800512a:	3301      	adds	r3, #1
 800512c:	4a03      	ldr	r2, [pc, #12]	@ (800513c <_TrySendOverflowPacket+0xdc>)
 800512e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005130:	693b      	ldr	r3, [r7, #16]
}
 8005132:	4618      	mov	r0, r3
 8005134:	3730      	adds	r7, #48	@ 0x30
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}
 800513a:	bf00      	nop
 800513c:	2000601c 	.word	0x2000601c
 8005140:	e0001004 	.word	0xe0001004

08005144 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005144:	b580      	push	{r7, lr}
 8005146:	b08a      	sub	sp, #40	@ 0x28
 8005148:	af00      	add	r7, sp, #0
 800514a:	60f8      	str	r0, [r7, #12]
 800514c:	60b9      	str	r1, [r7, #8]
 800514e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005150:	4b6c      	ldr	r3, [pc, #432]	@ (8005304 <_SendPacket+0x1c0>)
 8005152:	781b      	ldrb	r3, [r3, #0]
 8005154:	2b01      	cmp	r3, #1
 8005156:	d010      	beq.n	800517a <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8005158:	4b6a      	ldr	r3, [pc, #424]	@ (8005304 <_SendPacket+0x1c0>)
 800515a:	781b      	ldrb	r3, [r3, #0]
 800515c:	2b00      	cmp	r3, #0
 800515e:	f000 80a3 	beq.w	80052a8 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8005162:	4b68      	ldr	r3, [pc, #416]	@ (8005304 <_SendPacket+0x1c0>)
 8005164:	781b      	ldrb	r3, [r3, #0]
 8005166:	2b02      	cmp	r3, #2
 8005168:	d109      	bne.n	800517e <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800516a:	f7ff ff79 	bl	8005060 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800516e:	4b65      	ldr	r3, [pc, #404]	@ (8005304 <_SendPacket+0x1c0>)
 8005170:	781b      	ldrb	r3, [r3, #0]
 8005172:	2b01      	cmp	r3, #1
 8005174:	f040 809a 	bne.w	80052ac <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 8005178:	e001      	b.n	800517e <_SendPacket+0x3a>
    goto Send;
 800517a:	bf00      	nop
 800517c:	e000      	b.n	8005180 <_SendPacket+0x3c>
Send:
 800517e:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2b1f      	cmp	r3, #31
 8005184:	d809      	bhi.n	800519a <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8005186:	4b5f      	ldr	r3, [pc, #380]	@ (8005304 <_SendPacket+0x1c0>)
 8005188:	69da      	ldr	r2, [r3, #28]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	fa22 f303 	lsr.w	r3, r2, r3
 8005190:	f003 0301 	and.w	r3, r3, #1
 8005194:	2b00      	cmp	r3, #0
 8005196:	f040 808b 	bne.w	80052b0 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2b17      	cmp	r3, #23
 800519e:	d807      	bhi.n	80051b0 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	3b01      	subs	r3, #1
 80051a4:	60fb      	str	r3, [r7, #12]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	b2da      	uxtb	r2, r3
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	701a      	strb	r2, [r3, #0]
 80051ae:	e03d      	b.n	800522c <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 80051b0:	68ba      	ldr	r2, [r7, #8]
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	1ad3      	subs	r3, r2, r3
 80051b6:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 80051b8:	69fb      	ldr	r3, [r7, #28]
 80051ba:	2b7f      	cmp	r3, #127	@ 0x7f
 80051bc:	d912      	bls.n	80051e4 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 80051be:	69fb      	ldr	r3, [r7, #28]
 80051c0:	09da      	lsrs	r2, r3, #7
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	3b01      	subs	r3, #1
 80051c6:	60fb      	str	r3, [r7, #12]
 80051c8:	b2d2      	uxtb	r2, r2
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 80051ce:	69fb      	ldr	r3, [r7, #28]
 80051d0:	b2db      	uxtb	r3, r3
 80051d2:	68fa      	ldr	r2, [r7, #12]
 80051d4:	3a01      	subs	r2, #1
 80051d6:	60fa      	str	r2, [r7, #12]
 80051d8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80051dc:	b2da      	uxtb	r2, r3
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	701a      	strb	r2, [r3, #0]
 80051e2:	e006      	b.n	80051f2 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	3b01      	subs	r3, #1
 80051e8:	60fb      	str	r3, [r7, #12]
 80051ea:	69fb      	ldr	r3, [r7, #28]
 80051ec:	b2da      	uxtb	r2, r3
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2b7f      	cmp	r3, #127	@ 0x7f
 80051f6:	d912      	bls.n	800521e <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	09da      	lsrs	r2, r3, #7
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	3b01      	subs	r3, #1
 8005200:	60fb      	str	r3, [r7, #12]
 8005202:	b2d2      	uxtb	r2, r2
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	b2db      	uxtb	r3, r3
 800520c:	68fa      	ldr	r2, [r7, #12]
 800520e:	3a01      	subs	r2, #1
 8005210:	60fa      	str	r2, [r7, #12]
 8005212:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005216:	b2da      	uxtb	r2, r3
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	701a      	strb	r2, [r3, #0]
 800521c:	e006      	b.n	800522c <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	3b01      	subs	r3, #1
 8005222:	60fb      	str	r3, [r7, #12]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	b2da      	uxtb	r2, r3
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800522c:	4b36      	ldr	r3, [pc, #216]	@ (8005308 <_SendPacket+0x1c4>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005232:	4b34      	ldr	r3, [pc, #208]	@ (8005304 <_SendPacket+0x1c0>)
 8005234:	68db      	ldr	r3, [r3, #12]
 8005236:	69ba      	ldr	r2, [r7, #24]
 8005238:	1ad3      	subs	r3, r2, r3
 800523a:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	623b      	str	r3, [r7, #32]
 8005244:	e00b      	b.n	800525e <_SendPacket+0x11a>
 8005246:	6a3b      	ldr	r3, [r7, #32]
 8005248:	b2da      	uxtb	r2, r3
 800524a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800524c:	1c59      	adds	r1, r3, #1
 800524e:	6279      	str	r1, [r7, #36]	@ 0x24
 8005250:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005254:	b2d2      	uxtb	r2, r2
 8005256:	701a      	strb	r2, [r3, #0]
 8005258:	6a3b      	ldr	r3, [r7, #32]
 800525a:	09db      	lsrs	r3, r3, #7
 800525c:	623b      	str	r3, [r7, #32]
 800525e:	6a3b      	ldr	r3, [r7, #32]
 8005260:	2b7f      	cmp	r3, #127	@ 0x7f
 8005262:	d8f0      	bhi.n	8005246 <_SendPacket+0x102>
 8005264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005266:	1c5a      	adds	r2, r3, #1
 8005268:	627a      	str	r2, [r7, #36]	@ 0x24
 800526a:	6a3a      	ldr	r2, [r7, #32]
 800526c:	b2d2      	uxtb	r2, r2
 800526e:	701a      	strb	r2, [r3, #0]
 8005270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005272:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8005274:	4b23      	ldr	r3, [pc, #140]	@ (8005304 <_SendPacket+0x1c0>)
 8005276:	785b      	ldrb	r3, [r3, #1]
 8005278:	4618      	mov	r0, r3
 800527a:	68ba      	ldr	r2, [r7, #8]
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	1ad3      	subs	r3, r2, r3
 8005280:	461a      	mov	r2, r3
 8005282:	68f9      	ldr	r1, [r7, #12]
 8005284:	f7fa ffa4 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005288:	4603      	mov	r3, r0
 800528a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d003      	beq.n	800529a <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005292:	4a1c      	ldr	r2, [pc, #112]	@ (8005304 <_SendPacket+0x1c0>)
 8005294:	69bb      	ldr	r3, [r7, #24]
 8005296:	60d3      	str	r3, [r2, #12]
 8005298:	e00b      	b.n	80052b2 <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800529a:	4b1a      	ldr	r3, [pc, #104]	@ (8005304 <_SendPacket+0x1c0>)
 800529c:	781b      	ldrb	r3, [r3, #0]
 800529e:	3301      	adds	r3, #1
 80052a0:	b2da      	uxtb	r2, r3
 80052a2:	4b18      	ldr	r3, [pc, #96]	@ (8005304 <_SendPacket+0x1c0>)
 80052a4:	701a      	strb	r2, [r3, #0]
 80052a6:	e004      	b.n	80052b2 <_SendPacket+0x16e>
    goto SendDone;
 80052a8:	bf00      	nop
 80052aa:	e002      	b.n	80052b2 <_SendPacket+0x16e>
      goto SendDone;
 80052ac:	bf00      	nop
 80052ae:	e000      	b.n	80052b2 <_SendPacket+0x16e>
      goto SendDone;
 80052b0:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80052b2:	4b14      	ldr	r3, [pc, #80]	@ (8005304 <_SendPacket+0x1c0>)
 80052b4:	7e1b      	ldrb	r3, [r3, #24]
 80052b6:	4619      	mov	r1, r3
 80052b8:	4a14      	ldr	r2, [pc, #80]	@ (800530c <_SendPacket+0x1c8>)
 80052ba:	460b      	mov	r3, r1
 80052bc:	005b      	lsls	r3, r3, #1
 80052be:	440b      	add	r3, r1
 80052c0:	00db      	lsls	r3, r3, #3
 80052c2:	4413      	add	r3, r2
 80052c4:	336c      	adds	r3, #108	@ 0x6c
 80052c6:	681a      	ldr	r2, [r3, #0]
 80052c8:	4b0e      	ldr	r3, [pc, #56]	@ (8005304 <_SendPacket+0x1c0>)
 80052ca:	7e1b      	ldrb	r3, [r3, #24]
 80052cc:	4618      	mov	r0, r3
 80052ce:	490f      	ldr	r1, [pc, #60]	@ (800530c <_SendPacket+0x1c8>)
 80052d0:	4603      	mov	r3, r0
 80052d2:	005b      	lsls	r3, r3, #1
 80052d4:	4403      	add	r3, r0
 80052d6:	00db      	lsls	r3, r3, #3
 80052d8:	440b      	add	r3, r1
 80052da:	3370      	adds	r3, #112	@ 0x70
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	429a      	cmp	r2, r3
 80052e0:	d00b      	beq.n	80052fa <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80052e2:	4b08      	ldr	r3, [pc, #32]	@ (8005304 <_SendPacket+0x1c0>)
 80052e4:	789b      	ldrb	r3, [r3, #2]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d107      	bne.n	80052fa <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80052ea:	4b06      	ldr	r3, [pc, #24]	@ (8005304 <_SendPacket+0x1c0>)
 80052ec:	2201      	movs	r2, #1
 80052ee:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80052f0:	f7ff fe46 	bl	8004f80 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80052f4:	4b03      	ldr	r3, [pc, #12]	@ (8005304 <_SendPacket+0x1c0>)
 80052f6:	2200      	movs	r2, #0
 80052f8:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80052fa:	bf00      	nop
 80052fc:	3728      	adds	r7, #40	@ 0x28
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}
 8005302:	bf00      	nop
 8005304:	2000601c 	.word	0x2000601c
 8005308:	e0001004 	.word	0xe0001004
 800530c:	20004b5c 	.word	0x20004b5c

08005310 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8005310:	b580      	push	{r7, lr}
 8005312:	b08a      	sub	sp, #40	@ 0x28
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
 8005318:	460b      	mov	r3, r1
 800531a:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	691b      	ldr	r3, [r3, #16]
 8005320:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	3301      	adds	r3, #1
 8005326:	2b80      	cmp	r3, #128	@ 0x80
 8005328:	d80a      	bhi.n	8005340 <_StoreChar+0x30>
    *(p->pPayload++) = c;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	1c59      	adds	r1, r3, #1
 8005330:	687a      	ldr	r2, [r7, #4]
 8005332:	6051      	str	r1, [r2, #4]
 8005334:	78fa      	ldrb	r2, [r7, #3]
 8005336:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	1c5a      	adds	r2, r3, #1
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	691b      	ldr	r3, [r3, #16]
 8005344:	2b80      	cmp	r3, #128	@ 0x80
 8005346:	d15a      	bne.n	80053fe <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	691a      	ldr	r2, [r3, #16]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	b2d2      	uxtb	r2, r2
 8005352:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	68db      	ldr	r3, [r3, #12]
 800535e:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	627b      	str	r3, [r7, #36]	@ 0x24
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	623b      	str	r3, [r7, #32]
 8005368:	e00b      	b.n	8005382 <_StoreChar+0x72>
 800536a:	6a3b      	ldr	r3, [r7, #32]
 800536c:	b2da      	uxtb	r2, r3
 800536e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005370:	1c59      	adds	r1, r3, #1
 8005372:	6279      	str	r1, [r7, #36]	@ 0x24
 8005374:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005378:	b2d2      	uxtb	r2, r2
 800537a:	701a      	strb	r2, [r3, #0]
 800537c:	6a3b      	ldr	r3, [r7, #32]
 800537e:	09db      	lsrs	r3, r3, #7
 8005380:	623b      	str	r3, [r7, #32]
 8005382:	6a3b      	ldr	r3, [r7, #32]
 8005384:	2b7f      	cmp	r3, #127	@ 0x7f
 8005386:	d8f0      	bhi.n	800536a <_StoreChar+0x5a>
 8005388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800538a:	1c5a      	adds	r2, r3, #1
 800538c:	627a      	str	r2, [r7, #36]	@ 0x24
 800538e:	6a3a      	ldr	r2, [r7, #32]
 8005390:	b2d2      	uxtb	r2, r2
 8005392:	701a      	strb	r2, [r3, #0]
 8005394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005396:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	61fb      	str	r3, [r7, #28]
 800539c:	2300      	movs	r3, #0
 800539e:	61bb      	str	r3, [r7, #24]
 80053a0:	e00b      	b.n	80053ba <_StoreChar+0xaa>
 80053a2:	69bb      	ldr	r3, [r7, #24]
 80053a4:	b2da      	uxtb	r2, r3
 80053a6:	69fb      	ldr	r3, [r7, #28]
 80053a8:	1c59      	adds	r1, r3, #1
 80053aa:	61f9      	str	r1, [r7, #28]
 80053ac:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80053b0:	b2d2      	uxtb	r2, r2
 80053b2:	701a      	strb	r2, [r3, #0]
 80053b4:	69bb      	ldr	r3, [r7, #24]
 80053b6:	09db      	lsrs	r3, r3, #7
 80053b8:	61bb      	str	r3, [r7, #24]
 80053ba:	69bb      	ldr	r3, [r7, #24]
 80053bc:	2b7f      	cmp	r3, #127	@ 0x7f
 80053be:	d8f0      	bhi.n	80053a2 <_StoreChar+0x92>
 80053c0:	69fb      	ldr	r3, [r7, #28]
 80053c2:	1c5a      	adds	r2, r3, #1
 80053c4:	61fa      	str	r2, [r7, #28]
 80053c6:	69ba      	ldr	r2, [r7, #24]
 80053c8:	b2d2      	uxtb	r2, r2
 80053ca:	701a      	strb	r2, [r3, #0]
 80053cc:	69fb      	ldr	r3, [r7, #28]
 80053ce:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	689b      	ldr	r3, [r3, #8]
 80053d4:	221a      	movs	r2, #26
 80053d6:	6939      	ldr	r1, [r7, #16]
 80053d8:	4618      	mov	r0, r3
 80053da:	f7ff feb3 	bl	8005144 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4618      	mov	r0, r3
 80053e4:	f7ff fdbf 	bl	8004f66 <_PreparePacket>
 80053e8:	4602      	mov	r2, r0
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	689b      	ldr	r3, [r3, #8]
 80053f2:	1c5a      	adds	r2, r3, #1
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2200      	movs	r2, #0
 80053fc:	611a      	str	r2, [r3, #16]
  }
}
 80053fe:	bf00      	nop
 8005400:	3728      	adds	r7, #40	@ 0x28
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}
	...

08005408 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005408:	b580      	push	{r7, lr}
 800540a:	b08a      	sub	sp, #40	@ 0x28
 800540c:	af00      	add	r7, sp, #0
 800540e:	60f8      	str	r0, [r7, #12]
 8005410:	60b9      	str	r1, [r7, #8]
 8005412:	607a      	str	r2, [r7, #4]
 8005414:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 800541a:	2301      	movs	r3, #1
 800541c:	627b      	str	r3, [r7, #36]	@ 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 800541e:	2301      	movs	r3, #1
 8005420:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005422:	e007      	b.n	8005434 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8005424:	6a3a      	ldr	r2, [r7, #32]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	fbb2 f3f3 	udiv	r3, r2, r3
 800542c:	623b      	str	r3, [r7, #32]
    Width++;
 800542e:	69fb      	ldr	r3, [r7, #28]
 8005430:	3301      	adds	r3, #1
 8005432:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005434:	6a3a      	ldr	r2, [r7, #32]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	429a      	cmp	r2, r3
 800543a:	d2f3      	bcs.n	8005424 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 800543c:	683a      	ldr	r2, [r7, #0]
 800543e:	69fb      	ldr	r3, [r7, #28]
 8005440:	429a      	cmp	r2, r3
 8005442:	d901      	bls.n	8005448 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8005448:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800544a:	f003 0301 	and.w	r3, r3, #1
 800544e:	2b00      	cmp	r3, #0
 8005450:	d000      	beq.n	8005454 <_PrintUnsigned+0x4c>
 8005452:	e01f      	b.n	8005494 <_PrintUnsigned+0x8c>
    if (FieldWidth != 0u) {
 8005454:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005456:	2b00      	cmp	r3, #0
 8005458:	d01c      	beq.n	8005494 <_PrintUnsigned+0x8c>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 800545a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800545c:	f003 0302 	and.w	r3, r3, #2
 8005460:	2b00      	cmp	r3, #0
 8005462:	d005      	beq.n	8005470 <_PrintUnsigned+0x68>
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d102      	bne.n	8005470 <_PrintUnsigned+0x68>
        c = '0';
 800546a:	2330      	movs	r3, #48	@ 0x30
 800546c:	76fb      	strb	r3, [r7, #27]
 800546e:	e001      	b.n	8005474 <_PrintUnsigned+0x6c>
      } else {
        c = ' ';
 8005470:	2320      	movs	r3, #32
 8005472:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005474:	e007      	b.n	8005486 <_PrintUnsigned+0x7e>
        FieldWidth--;
 8005476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005478:	3b01      	subs	r3, #1
 800547a:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, c);
 800547c:	7efb      	ldrb	r3, [r7, #27]
 800547e:	4619      	mov	r1, r3
 8005480:	68f8      	ldr	r0, [r7, #12]
 8005482:	f7ff ff45 	bl	8005310 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005488:	2b00      	cmp	r3, #0
 800548a:	d003      	beq.n	8005494 <_PrintUnsigned+0x8c>
 800548c:	69fa      	ldr	r2, [r7, #28]
 800548e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005490:	429a      	cmp	r2, r3
 8005492:	d3f0      	bcc.n	8005476 <_PrintUnsigned+0x6e>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	2b01      	cmp	r3, #1
 8005498:	d903      	bls.n	80054a2 <_PrintUnsigned+0x9a>
      NumDigits--;
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	3b01      	subs	r3, #1
 800549e:	603b      	str	r3, [r7, #0]
 80054a0:	e009      	b.n	80054b6 <_PrintUnsigned+0xae>
    } else {
      Div = v / Digit;
 80054a2:	68ba      	ldr	r2, [r7, #8]
 80054a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80054aa:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 80054ac:	697a      	ldr	r2, [r7, #20]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	429a      	cmp	r2, r3
 80054b2:	d200      	bcs.n	80054b6 <_PrintUnsigned+0xae>
        break;
 80054b4:	e005      	b.n	80054c2 <_PrintUnsigned+0xba>
      }
    }
    Digit *= Base;
 80054b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054b8:	687a      	ldr	r2, [r7, #4]
 80054ba:	fb02 f303 	mul.w	r3, r2, r3
 80054be:	627b      	str	r3, [r7, #36]	@ 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80054c0:	e7e8      	b.n	8005494 <_PrintUnsigned+0x8c>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 80054c2:	68ba      	ldr	r2, [r7, #8]
 80054c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80054ca:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054d0:	fb02 f303 	mul.w	r3, r2, r3
 80054d4:	68ba      	ldr	r2, [r7, #8]
 80054d6:	1ad3      	subs	r3, r2, r3
 80054d8:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 80054da:	4a15      	ldr	r2, [pc, #84]	@ (8005530 <_PrintUnsigned+0x128>)
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	4413      	add	r3, r2
 80054e0:	781b      	ldrb	r3, [r3, #0]
 80054e2:	4619      	mov	r1, r3
 80054e4:	68f8      	ldr	r0, [r7, #12]
 80054e6:	f7ff ff13 	bl	8005310 <_StoreChar>
    Digit /= Base;
 80054ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80054f2:	627b      	str	r3, [r7, #36]	@ 0x24
  } while (Digit);
 80054f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d1e3      	bne.n	80054c2 <_PrintUnsigned+0xba>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 80054fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054fc:	f003 0301 	and.w	r3, r3, #1
 8005500:	2b00      	cmp	r3, #0
 8005502:	d011      	beq.n	8005528 <_PrintUnsigned+0x120>
    if (FieldWidth != 0u) {
 8005504:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005506:	2b00      	cmp	r3, #0
 8005508:	d00e      	beq.n	8005528 <_PrintUnsigned+0x120>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800550a:	e006      	b.n	800551a <_PrintUnsigned+0x112>
        FieldWidth--;
 800550c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800550e:	3b01      	subs	r3, #1
 8005510:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, ' ');
 8005512:	2120      	movs	r1, #32
 8005514:	68f8      	ldr	r0, [r7, #12]
 8005516:	f7ff fefb 	bl	8005310 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800551a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800551c:	2b00      	cmp	r3, #0
 800551e:	d003      	beq.n	8005528 <_PrintUnsigned+0x120>
 8005520:	69fa      	ldr	r2, [r7, #28]
 8005522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005524:	429a      	cmp	r2, r3
 8005526:	d3f1      	bcc.n	800550c <_PrintUnsigned+0x104>
      }
    }
  }
}
 8005528:	bf00      	nop
 800552a:	3728      	adds	r7, #40	@ 0x28
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}
 8005530:	0800743c 	.word	0x0800743c

08005534 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005534:	b580      	push	{r7, lr}
 8005536:	b088      	sub	sp, #32
 8005538:	af02      	add	r7, sp, #8
 800553a:	60f8      	str	r0, [r7, #12]
 800553c:	60b9      	str	r1, [r7, #8]
 800553e:	607a      	str	r2, [r7, #4]
 8005540:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	2b00      	cmp	r3, #0
 8005546:	bfb8      	it	lt
 8005548:	425b      	neglt	r3, r3
 800554a:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 800554c:	2301      	movs	r3, #1
 800554e:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005550:	e007      	b.n	8005562 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	693a      	ldr	r2, [r7, #16]
 8005556:	fb92 f3f3 	sdiv	r3, r2, r3
 800555a:	613b      	str	r3, [r7, #16]
    Width++;
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	3301      	adds	r3, #1
 8005560:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	693a      	ldr	r2, [r7, #16]
 8005566:	429a      	cmp	r2, r3
 8005568:	daf3      	bge.n	8005552 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 800556a:	683a      	ldr	r2, [r7, #0]
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	429a      	cmp	r2, r3
 8005570:	d901      	bls.n	8005576 <_PrintInt+0x42>
    Width = NumDigits;
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8005576:	6a3b      	ldr	r3, [r7, #32]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d00a      	beq.n	8005592 <_PrintInt+0x5e>
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	2b00      	cmp	r3, #0
 8005580:	db04      	blt.n	800558c <_PrintInt+0x58>
 8005582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005584:	f003 0304 	and.w	r3, r3, #4
 8005588:	2b00      	cmp	r3, #0
 800558a:	d002      	beq.n	8005592 <_PrintInt+0x5e>
    FieldWidth--;
 800558c:	6a3b      	ldr	r3, [r7, #32]
 800558e:	3b01      	subs	r3, #1
 8005590:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8005592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005594:	f003 0302 	and.w	r3, r3, #2
 8005598:	2b00      	cmp	r3, #0
 800559a:	d002      	beq.n	80055a2 <_PrintInt+0x6e>
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d016      	beq.n	80055d0 <_PrintInt+0x9c>
 80055a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055a4:	f003 0301 	and.w	r3, r3, #1
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d111      	bne.n	80055d0 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 80055ac:	6a3b      	ldr	r3, [r7, #32]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d00e      	beq.n	80055d0 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80055b2:	e006      	b.n	80055c2 <_PrintInt+0x8e>
        FieldWidth--;
 80055b4:	6a3b      	ldr	r3, [r7, #32]
 80055b6:	3b01      	subs	r3, #1
 80055b8:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 80055ba:	2120      	movs	r1, #32
 80055bc:	68f8      	ldr	r0, [r7, #12]
 80055be:	f7ff fea7 	bl	8005310 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80055c2:	6a3b      	ldr	r3, [r7, #32]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d003      	beq.n	80055d0 <_PrintInt+0x9c>
 80055c8:	697a      	ldr	r2, [r7, #20]
 80055ca:	6a3b      	ldr	r3, [r7, #32]
 80055cc:	429a      	cmp	r2, r3
 80055ce:	d3f1      	bcc.n	80055b4 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	da07      	bge.n	80055e6 <_PrintInt+0xb2>
    v = -v;
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	425b      	negs	r3, r3
 80055da:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 80055dc:	212d      	movs	r1, #45	@ 0x2d
 80055de:	68f8      	ldr	r0, [r7, #12]
 80055e0:	f7ff fe96 	bl	8005310 <_StoreChar>
 80055e4:	e008      	b.n	80055f8 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 80055e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055e8:	f003 0304 	and.w	r3, r3, #4
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d003      	beq.n	80055f8 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 80055f0:	212b      	movs	r1, #43	@ 0x2b
 80055f2:	68f8      	ldr	r0, [r7, #12]
 80055f4:	f7ff fe8c 	bl	8005310 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 80055f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055fa:	f003 0302 	and.w	r3, r3, #2
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d019      	beq.n	8005636 <_PrintInt+0x102>
 8005602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005604:	f003 0301 	and.w	r3, r3, #1
 8005608:	2b00      	cmp	r3, #0
 800560a:	d114      	bne.n	8005636 <_PrintInt+0x102>
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d111      	bne.n	8005636 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8005612:	6a3b      	ldr	r3, [r7, #32]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d00e      	beq.n	8005636 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005618:	e006      	b.n	8005628 <_PrintInt+0xf4>
        FieldWidth--;
 800561a:	6a3b      	ldr	r3, [r7, #32]
 800561c:	3b01      	subs	r3, #1
 800561e:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8005620:	2130      	movs	r1, #48	@ 0x30
 8005622:	68f8      	ldr	r0, [r7, #12]
 8005624:	f7ff fe74 	bl	8005310 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005628:	6a3b      	ldr	r3, [r7, #32]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d003      	beq.n	8005636 <_PrintInt+0x102>
 800562e:	697a      	ldr	r2, [r7, #20]
 8005630:	6a3b      	ldr	r3, [r7, #32]
 8005632:	429a      	cmp	r2, r3
 8005634:	d3f1      	bcc.n	800561a <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8005636:	68b9      	ldr	r1, [r7, #8]
 8005638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800563a:	9301      	str	r3, [sp, #4]
 800563c:	6a3b      	ldr	r3, [r7, #32]
 800563e:	9300      	str	r3, [sp, #0]
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	687a      	ldr	r2, [r7, #4]
 8005644:	68f8      	ldr	r0, [r7, #12]
 8005646:	f7ff fedf 	bl	8005408 <_PrintUnsigned>
}
 800564a:	bf00      	nop
 800564c:	3718      	adds	r7, #24
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}
	...

08005654 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8005654:	b580      	push	{r7, lr}
 8005656:	b098      	sub	sp, #96	@ 0x60
 8005658:	af02      	add	r7, sp, #8
 800565a:	60f8      	str	r0, [r7, #12]
 800565c:	60b9      	str	r1, [r7, #8]
 800565e:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005660:	f3ef 8311 	mrs	r3, BASEPRI
 8005664:	f04f 0120 	mov.w	r1, #32
 8005668:	f381 8811 	msr	BASEPRI, r1
 800566c:	633b      	str	r3, [r7, #48]	@ 0x30
 800566e:	48b7      	ldr	r0, [pc, #732]	@ (800594c <_VPrintTarget+0x2f8>)
 8005670:	f7ff fc79 	bl	8004f66 <_PreparePacket>
 8005674:	62f8      	str	r0, [r7, #44]	@ 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8005676:	4bb5      	ldr	r3, [pc, #724]	@ (800594c <_VPrintTarget+0x2f8>)
 8005678:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 800567a:	2300      	movs	r3, #0
 800567c:	627b      	str	r3, [r7, #36]	@ 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 800567e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005680:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8005682:	69fb      	ldr	r3, [r7, #28]
 8005684:	3301      	adds	r3, #1
 8005686:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	781b      	ldrb	r3, [r3, #0]
 8005690:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    sFormat++;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	3301      	adds	r3, #1
 8005698:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 800569a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800569e:	2b00      	cmp	r3, #0
 80056a0:	f000 8183 	beq.w	80059aa <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 80056a4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80056a8:	2b25      	cmp	r3, #37	@ 0x25
 80056aa:	f040 8170 	bne.w	800598e <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 80056ae:	2300      	movs	r3, #0
 80056b0:	64bb      	str	r3, [r7, #72]	@ 0x48
      v = 1;
 80056b2:	2301      	movs	r3, #1
 80056b4:	653b      	str	r3, [r7, #80]	@ 0x50
      do {
        c = *sFormat;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	781b      	ldrb	r3, [r3, #0]
 80056ba:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        switch (c) {
 80056be:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80056c2:	3b23      	subs	r3, #35	@ 0x23
 80056c4:	2b0d      	cmp	r3, #13
 80056c6:	d83f      	bhi.n	8005748 <_VPrintTarget+0xf4>
 80056c8:	a201      	add	r2, pc, #4	@ (adr r2, 80056d0 <_VPrintTarget+0x7c>)
 80056ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056ce:	bf00      	nop
 80056d0:	08005739 	.word	0x08005739
 80056d4:	08005749 	.word	0x08005749
 80056d8:	08005749 	.word	0x08005749
 80056dc:	08005749 	.word	0x08005749
 80056e0:	08005749 	.word	0x08005749
 80056e4:	08005749 	.word	0x08005749
 80056e8:	08005749 	.word	0x08005749
 80056ec:	08005749 	.word	0x08005749
 80056f0:	08005729 	.word	0x08005729
 80056f4:	08005749 	.word	0x08005749
 80056f8:	08005709 	.word	0x08005709
 80056fc:	08005749 	.word	0x08005749
 8005700:	08005749 	.word	0x08005749
 8005704:	08005719 	.word	0x08005719
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8005708:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800570a:	f043 0301 	orr.w	r3, r3, #1
 800570e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	3301      	adds	r3, #1
 8005714:	60fb      	str	r3, [r7, #12]
 8005716:	e01a      	b.n	800574e <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8005718:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800571a:	f043 0302 	orr.w	r3, r3, #2
 800571e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	3301      	adds	r3, #1
 8005724:	60fb      	str	r3, [r7, #12]
 8005726:	e012      	b.n	800574e <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8005728:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800572a:	f043 0304 	orr.w	r3, r3, #4
 800572e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	3301      	adds	r3, #1
 8005734:	60fb      	str	r3, [r7, #12]
 8005736:	e00a      	b.n	800574e <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8005738:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800573a:	f043 0308 	orr.w	r3, r3, #8
 800573e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	3301      	adds	r3, #1
 8005744:	60fb      	str	r3, [r7, #12]
 8005746:	e002      	b.n	800574e <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8005748:	2300      	movs	r3, #0
 800574a:	653b      	str	r3, [r7, #80]	@ 0x50
 800574c:	bf00      	nop
        }
      } while (v);
 800574e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005750:	2b00      	cmp	r3, #0
 8005752:	d1b0      	bne.n	80056b6 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8005754:	2300      	movs	r3, #0
 8005756:	647b      	str	r3, [r7, #68]	@ 0x44
      do {
        c = *sFormat;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	781b      	ldrb	r3, [r3, #0]
 800575c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        if ((c < '0') || (c > '9')) {
 8005760:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005764:	2b2f      	cmp	r3, #47	@ 0x2f
 8005766:	d912      	bls.n	800578e <_VPrintTarget+0x13a>
 8005768:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800576c:	2b39      	cmp	r3, #57	@ 0x39
 800576e:	d80e      	bhi.n	800578e <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	3301      	adds	r3, #1
 8005774:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8005776:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005778:	4613      	mov	r3, r2
 800577a:	009b      	lsls	r3, r3, #2
 800577c:	4413      	add	r3, r2
 800577e:	005b      	lsls	r3, r3, #1
 8005780:	461a      	mov	r2, r3
 8005782:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005786:	4413      	add	r3, r2
 8005788:	3b30      	subs	r3, #48	@ 0x30
 800578a:	647b      	str	r3, [r7, #68]	@ 0x44
        c = *sFormat;
 800578c:	e7e4      	b.n	8005758 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 800578e:	2300      	movs	r3, #0
 8005790:	64fb      	str	r3, [r7, #76]	@ 0x4c
      c = *sFormat;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	781b      	ldrb	r3, [r3, #0]
 8005796:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      if (c == '.') {
 800579a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800579e:	2b2e      	cmp	r3, #46	@ 0x2e
 80057a0:	d11d      	bne.n	80057de <_VPrintTarget+0x18a>
        sFormat++;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	3301      	adds	r3, #1
 80057a6:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	781b      	ldrb	r3, [r3, #0]
 80057ac:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          if ((c < '0') || (c > '9')) {
 80057b0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80057b4:	2b2f      	cmp	r3, #47	@ 0x2f
 80057b6:	d912      	bls.n	80057de <_VPrintTarget+0x18a>
 80057b8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80057bc:	2b39      	cmp	r3, #57	@ 0x39
 80057be:	d80e      	bhi.n	80057de <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	3301      	adds	r3, #1
 80057c4:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 80057c6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80057c8:	4613      	mov	r3, r2
 80057ca:	009b      	lsls	r3, r3, #2
 80057cc:	4413      	add	r3, r2
 80057ce:	005b      	lsls	r3, r3, #1
 80057d0:	461a      	mov	r2, r3
 80057d2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80057d6:	4413      	add	r3, r2
 80057d8:	3b30      	subs	r3, #48	@ 0x30
 80057da:	64fb      	str	r3, [r7, #76]	@ 0x4c
          c = *sFormat;
 80057dc:	e7e4      	b.n	80057a8 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	781b      	ldrb	r3, [r3, #0]
 80057e2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 80057e6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80057ea:	2b6c      	cmp	r3, #108	@ 0x6c
 80057ec:	d003      	beq.n	80057f6 <_VPrintTarget+0x1a2>
 80057ee:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80057f2:	2b68      	cmp	r3, #104	@ 0x68
 80057f4:	d107      	bne.n	8005806 <_VPrintTarget+0x1b2>
          c = *sFormat;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	781b      	ldrb	r3, [r3, #0]
 80057fa:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          sFormat++;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	3301      	adds	r3, #1
 8005802:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8005804:	e7ef      	b.n	80057e6 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8005806:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800580a:	2b25      	cmp	r3, #37	@ 0x25
 800580c:	f000 80b3 	beq.w	8005976 <_VPrintTarget+0x322>
 8005810:	2b25      	cmp	r3, #37	@ 0x25
 8005812:	f2c0 80b7 	blt.w	8005984 <_VPrintTarget+0x330>
 8005816:	2b78      	cmp	r3, #120	@ 0x78
 8005818:	f300 80b4 	bgt.w	8005984 <_VPrintTarget+0x330>
 800581c:	2b58      	cmp	r3, #88	@ 0x58
 800581e:	f2c0 80b1 	blt.w	8005984 <_VPrintTarget+0x330>
 8005822:	3b58      	subs	r3, #88	@ 0x58
 8005824:	2b20      	cmp	r3, #32
 8005826:	f200 80ad 	bhi.w	8005984 <_VPrintTarget+0x330>
 800582a:	a201      	add	r2, pc, #4	@ (adr r2, 8005830 <_VPrintTarget+0x1dc>)
 800582c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005830:	08005927 	.word	0x08005927
 8005834:	08005985 	.word	0x08005985
 8005838:	08005985 	.word	0x08005985
 800583c:	08005985 	.word	0x08005985
 8005840:	08005985 	.word	0x08005985
 8005844:	08005985 	.word	0x08005985
 8005848:	08005985 	.word	0x08005985
 800584c:	08005985 	.word	0x08005985
 8005850:	08005985 	.word	0x08005985
 8005854:	08005985 	.word	0x08005985
 8005858:	08005985 	.word	0x08005985
 800585c:	080058b5 	.word	0x080058b5
 8005860:	080058db 	.word	0x080058db
 8005864:	08005985 	.word	0x08005985
 8005868:	08005985 	.word	0x08005985
 800586c:	08005985 	.word	0x08005985
 8005870:	08005985 	.word	0x08005985
 8005874:	08005985 	.word	0x08005985
 8005878:	08005985 	.word	0x08005985
 800587c:	08005985 	.word	0x08005985
 8005880:	08005985 	.word	0x08005985
 8005884:	08005985 	.word	0x08005985
 8005888:	08005985 	.word	0x08005985
 800588c:	08005985 	.word	0x08005985
 8005890:	08005951 	.word	0x08005951
 8005894:	08005985 	.word	0x08005985
 8005898:	08005985 	.word	0x08005985
 800589c:	08005985 	.word	0x08005985
 80058a0:	08005985 	.word	0x08005985
 80058a4:	08005901 	.word	0x08005901
 80058a8:	08005985 	.word	0x08005985
 80058ac:	08005985 	.word	0x08005985
 80058b0:	08005927 	.word	0x08005927
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	1d19      	adds	r1, r3, #4
 80058ba:	687a      	ldr	r2, [r7, #4]
 80058bc:	6011      	str	r1, [r2, #0]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	653b      	str	r3, [r7, #80]	@ 0x50
        c0 = (char)v;
 80058c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80058c4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        _StoreChar(&BufferDesc, c0);
 80058c8:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 80058cc:	f107 0314 	add.w	r3, r7, #20
 80058d0:	4611      	mov	r1, r2
 80058d2:	4618      	mov	r0, r3
 80058d4:	f7ff fd1c 	bl	8005310 <_StoreChar>
        break;
 80058d8:	e055      	b.n	8005986 <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	1d19      	adds	r1, r3, #4
 80058e0:	687a      	ldr	r2, [r7, #4]
 80058e2:	6011      	str	r1, [r2, #0]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 80058e8:	f107 0014 	add.w	r0, r7, #20
 80058ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80058ee:	9301      	str	r3, [sp, #4]
 80058f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80058f2:	9300      	str	r3, [sp, #0]
 80058f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80058f6:	220a      	movs	r2, #10
 80058f8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80058fa:	f7ff fe1b 	bl	8005534 <_PrintInt>
        break;
 80058fe:	e042      	b.n	8005986 <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	1d19      	adds	r1, r3, #4
 8005906:	687a      	ldr	r2, [r7, #4]
 8005908:	6011      	str	r1, [r2, #0]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 800590e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005910:	f107 0014 	add.w	r0, r7, #20
 8005914:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005916:	9301      	str	r3, [sp, #4]
 8005918:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800591a:	9300      	str	r3, [sp, #0]
 800591c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800591e:	220a      	movs	r2, #10
 8005920:	f7ff fd72 	bl	8005408 <_PrintUnsigned>
        break;
 8005924:	e02f      	b.n	8005986 <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	1d19      	adds	r1, r3, #4
 800592c:	687a      	ldr	r2, [r7, #4]
 800592e:	6011      	str	r1, [r2, #0]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8005934:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005936:	f107 0014 	add.w	r0, r7, #20
 800593a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800593c:	9301      	str	r3, [sp, #4]
 800593e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005940:	9300      	str	r3, [sp, #0]
 8005942:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005944:	2210      	movs	r2, #16
 8005946:	f7ff fd5f 	bl	8005408 <_PrintUnsigned>
        break;
 800594a:	e01c      	b.n	8005986 <_VPrintTarget+0x332>
 800594c:	2000604c 	.word	0x2000604c
      case 'p':
        v = va_arg(*pParamList, int);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	1d19      	adds	r1, r3, #4
 8005956:	687a      	ldr	r2, [r7, #4]
 8005958:	6011      	str	r1, [r2, #0]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 800595e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005960:	f107 0014 	add.w	r0, r7, #20
 8005964:	2300      	movs	r3, #0
 8005966:	9301      	str	r3, [sp, #4]
 8005968:	2308      	movs	r3, #8
 800596a:	9300      	str	r3, [sp, #0]
 800596c:	2308      	movs	r3, #8
 800596e:	2210      	movs	r2, #16
 8005970:	f7ff fd4a 	bl	8005408 <_PrintUnsigned>
        break;
 8005974:	e007      	b.n	8005986 <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8005976:	f107 0314 	add.w	r3, r7, #20
 800597a:	2125      	movs	r1, #37	@ 0x25
 800597c:	4618      	mov	r0, r3
 800597e:	f7ff fcc7 	bl	8005310 <_StoreChar>
        break;
 8005982:	e000      	b.n	8005986 <_VPrintTarget+0x332>
      default:
        break;
 8005984:	bf00      	nop
      }
      sFormat++;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	3301      	adds	r3, #1
 800598a:	60fb      	str	r3, [r7, #12]
 800598c:	e007      	b.n	800599e <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 800598e:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8005992:	f107 0314 	add.w	r3, r7, #20
 8005996:	4611      	mov	r1, r2
 8005998:	4618      	mov	r0, r3
 800599a:	f7ff fcb9 	bl	8005310 <_StoreChar>
    }
  } while (*sFormat);
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	781b      	ldrb	r3, [r3, #0]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	f47f ae72 	bne.w	800568c <_VPrintTarget+0x38>
 80059a8:	e000      	b.n	80059ac <_VPrintTarget+0x358>
      break;
 80059aa:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 80059ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d041      	beq.n	8005a36 <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 80059b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059b4:	69fb      	ldr	r3, [r7, #28]
 80059b6:	b2d2      	uxtb	r2, r2
 80059b8:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 80059ba:	69bb      	ldr	r3, [r7, #24]
 80059bc:	643b      	str	r3, [r7, #64]	@ 0x40
 80059be:	6a3b      	ldr	r3, [r7, #32]
 80059c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80059c2:	e00b      	b.n	80059dc <_VPrintTarget+0x388>
 80059c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059c6:	b2da      	uxtb	r2, r3
 80059c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80059ca:	1c59      	adds	r1, r3, #1
 80059cc:	6439      	str	r1, [r7, #64]	@ 0x40
 80059ce:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80059d2:	b2d2      	uxtb	r2, r2
 80059d4:	701a      	strb	r2, [r3, #0]
 80059d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059d8:	09db      	lsrs	r3, r3, #7
 80059da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80059dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059de:	2b7f      	cmp	r3, #127	@ 0x7f
 80059e0:	d8f0      	bhi.n	80059c4 <_VPrintTarget+0x370>
 80059e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80059e4:	1c5a      	adds	r2, r3, #1
 80059e6:	643a      	str	r2, [r7, #64]	@ 0x40
 80059e8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80059ea:	b2d2      	uxtb	r2, r2
 80059ec:	701a      	strb	r2, [r3, #0]
 80059ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80059f0:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 80059f2:	69bb      	ldr	r3, [r7, #24]
 80059f4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80059f6:	2300      	movs	r3, #0
 80059f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80059fa:	e00b      	b.n	8005a14 <_VPrintTarget+0x3c0>
 80059fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059fe:	b2da      	uxtb	r2, r3
 8005a00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a02:	1c59      	adds	r1, r3, #1
 8005a04:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005a06:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005a0a:	b2d2      	uxtb	r2, r2
 8005a0c:	701a      	strb	r2, [r3, #0]
 8005a0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a10:	09db      	lsrs	r3, r3, #7
 8005a12:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a16:	2b7f      	cmp	r3, #127	@ 0x7f
 8005a18:	d8f0      	bhi.n	80059fc <_VPrintTarget+0x3a8>
 8005a1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a1c:	1c5a      	adds	r2, r3, #1
 8005a1e:	63ba      	str	r2, [r7, #56]	@ 0x38
 8005a20:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005a22:	b2d2      	uxtb	r2, r2
 8005a24:	701a      	strb	r2, [r3, #0]
 8005a26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a28:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005a2a:	69fb      	ldr	r3, [r7, #28]
 8005a2c:	69b9      	ldr	r1, [r7, #24]
 8005a2e:	221a      	movs	r2, #26
 8005a30:	4618      	mov	r0, r3
 8005a32:	f7ff fb87 	bl	8005144 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8005a36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a38:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8005a3c:	bf00      	nop
 8005a3e:	3758      	adds	r7, #88	@ 0x58
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bd80      	pop	{r7, pc}

08005a44 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b086      	sub	sp, #24
 8005a48:	af02      	add	r7, sp, #8
 8005a4a:	60f8      	str	r0, [r7, #12]
 8005a4c:	60b9      	str	r1, [r7, #8]
 8005a4e:	607a      	str	r2, [r7, #4]
 8005a50:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005a52:	2300      	movs	r3, #0
 8005a54:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8005a58:	4917      	ldr	r1, [pc, #92]	@ (8005ab8 <SEGGER_SYSVIEW_Init+0x74>)
 8005a5a:	4818      	ldr	r0, [pc, #96]	@ (8005abc <SEGGER_SYSVIEW_Init+0x78>)
 8005a5c:	f7ff f942 	bl	8004ce4 <SEGGER_RTT_AllocUpBuffer>
 8005a60:	4603      	mov	r3, r0
 8005a62:	b2da      	uxtb	r2, r3
 8005a64:	4b16      	ldr	r3, [pc, #88]	@ (8005ac0 <SEGGER_SYSVIEW_Init+0x7c>)
 8005a66:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8005a68:	4b15      	ldr	r3, [pc, #84]	@ (8005ac0 <SEGGER_SYSVIEW_Init+0x7c>)
 8005a6a:	785a      	ldrb	r2, [r3, #1]
 8005a6c:	4b14      	ldr	r3, [pc, #80]	@ (8005ac0 <SEGGER_SYSVIEW_Init+0x7c>)
 8005a6e:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005a70:	4b13      	ldr	r3, [pc, #76]	@ (8005ac0 <SEGGER_SYSVIEW_Init+0x7c>)
 8005a72:	7e1b      	ldrb	r3, [r3, #24]
 8005a74:	4618      	mov	r0, r3
 8005a76:	2300      	movs	r3, #0
 8005a78:	9300      	str	r3, [sp, #0]
 8005a7a:	2308      	movs	r3, #8
 8005a7c:	4a11      	ldr	r2, [pc, #68]	@ (8005ac4 <SEGGER_SYSVIEW_Init+0x80>)
 8005a7e:	490f      	ldr	r1, [pc, #60]	@ (8005abc <SEGGER_SYSVIEW_Init+0x78>)
 8005a80:	f7ff f9b4 	bl	8004dec <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8005a84:	4b0e      	ldr	r3, [pc, #56]	@ (8005ac0 <SEGGER_SYSVIEW_Init+0x7c>)
 8005a86:	2200      	movs	r2, #0
 8005a88:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005a8a:	4b0f      	ldr	r3, [pc, #60]	@ (8005ac8 <SEGGER_SYSVIEW_Init+0x84>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4a0c      	ldr	r2, [pc, #48]	@ (8005ac0 <SEGGER_SYSVIEW_Init+0x7c>)
 8005a90:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8005a92:	4a0b      	ldr	r2, [pc, #44]	@ (8005ac0 <SEGGER_SYSVIEW_Init+0x7c>)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8005a98:	4a09      	ldr	r2, [pc, #36]	@ (8005ac0 <SEGGER_SYSVIEW_Init+0x7c>)
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8005a9e:	4a08      	ldr	r2, [pc, #32]	@ (8005ac0 <SEGGER_SYSVIEW_Init+0x7c>)
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8005aa4:	4a06      	ldr	r2, [pc, #24]	@ (8005ac0 <SEGGER_SYSVIEW_Init+0x7c>)
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8005aaa:	4b05      	ldr	r3, [pc, #20]	@ (8005ac0 <SEGGER_SYSVIEW_Init+0x7c>)
 8005aac:	2200      	movs	r2, #0
 8005aae:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8005ab0:	bf00      	nop
 8005ab2:	3710      	adds	r7, #16
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}
 8005ab8:	20005014 	.word	0x20005014
 8005abc:	080073e4 	.word	0x080073e4
 8005ac0:	2000601c 	.word	0x2000601c
 8005ac4:	20006014 	.word	0x20006014
 8005ac8:	e0001004 	.word	0xe0001004

08005acc <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8005acc:	b480      	push	{r7}
 8005ace:	b083      	sub	sp, #12
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8005ad4:	4a04      	ldr	r2, [pc, #16]	@ (8005ae8 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6113      	str	r3, [r2, #16]
}
 8005ada:	bf00      	nop
 8005adc:	370c      	adds	r7, #12
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae4:	4770      	bx	lr
 8005ae6:	bf00      	nop
 8005ae8:	2000601c 	.word	0x2000601c

08005aec <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b084      	sub	sp, #16
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005af4:	f3ef 8311 	mrs	r3, BASEPRI
 8005af8:	f04f 0120 	mov.w	r1, #32
 8005afc:	f381 8811 	msr	BASEPRI, r1
 8005b00:	60fb      	str	r3, [r7, #12]
 8005b02:	4808      	ldr	r0, [pc, #32]	@ (8005b24 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8005b04:	f7ff fa2f 	bl	8004f66 <_PreparePacket>
 8005b08:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8005b0a:	687a      	ldr	r2, [r7, #4]
 8005b0c:	68b9      	ldr	r1, [r7, #8]
 8005b0e:	68b8      	ldr	r0, [r7, #8]
 8005b10:	f7ff fb18 	bl	8005144 <_SendPacket>
  RECORD_END();
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f383 8811 	msr	BASEPRI, r3
}
 8005b1a:	bf00      	nop
 8005b1c:	3710      	adds	r7, #16
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}
 8005b22:	bf00      	nop
 8005b24:	2000604c 	.word	0x2000604c

08005b28 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b088      	sub	sp, #32
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
 8005b30:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005b32:	f3ef 8311 	mrs	r3, BASEPRI
 8005b36:	f04f 0120 	mov.w	r1, #32
 8005b3a:	f381 8811 	msr	BASEPRI, r1
 8005b3e:	617b      	str	r3, [r7, #20]
 8005b40:	4816      	ldr	r0, [pc, #88]	@ (8005b9c <SEGGER_SYSVIEW_RecordU32+0x74>)
 8005b42:	f7ff fa10 	bl	8004f66 <_PreparePacket>
 8005b46:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	61fb      	str	r3, [r7, #28]
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	61bb      	str	r3, [r7, #24]
 8005b54:	e00b      	b.n	8005b6e <SEGGER_SYSVIEW_RecordU32+0x46>
 8005b56:	69bb      	ldr	r3, [r7, #24]
 8005b58:	b2da      	uxtb	r2, r3
 8005b5a:	69fb      	ldr	r3, [r7, #28]
 8005b5c:	1c59      	adds	r1, r3, #1
 8005b5e:	61f9      	str	r1, [r7, #28]
 8005b60:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005b64:	b2d2      	uxtb	r2, r2
 8005b66:	701a      	strb	r2, [r3, #0]
 8005b68:	69bb      	ldr	r3, [r7, #24]
 8005b6a:	09db      	lsrs	r3, r3, #7
 8005b6c:	61bb      	str	r3, [r7, #24]
 8005b6e:	69bb      	ldr	r3, [r7, #24]
 8005b70:	2b7f      	cmp	r3, #127	@ 0x7f
 8005b72:	d8f0      	bhi.n	8005b56 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8005b74:	69fb      	ldr	r3, [r7, #28]
 8005b76:	1c5a      	adds	r2, r3, #1
 8005b78:	61fa      	str	r2, [r7, #28]
 8005b7a:	69ba      	ldr	r2, [r7, #24]
 8005b7c:	b2d2      	uxtb	r2, r2
 8005b7e:	701a      	strb	r2, [r3, #0]
 8005b80:	69fb      	ldr	r3, [r7, #28]
 8005b82:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005b84:	687a      	ldr	r2, [r7, #4]
 8005b86:	68f9      	ldr	r1, [r7, #12]
 8005b88:	6938      	ldr	r0, [r7, #16]
 8005b8a:	f7ff fadb 	bl	8005144 <_SendPacket>
  RECORD_END();
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	f383 8811 	msr	BASEPRI, r3
}
 8005b94:	bf00      	nop
 8005b96:	3720      	adds	r7, #32
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bd80      	pop	{r7, pc}
 8005b9c:	2000604c 	.word	0x2000604c

08005ba0 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b08c      	sub	sp, #48	@ 0x30
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	60f8      	str	r0, [r7, #12]
 8005ba8:	60b9      	str	r1, [r7, #8]
 8005baa:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005bac:	f3ef 8311 	mrs	r3, BASEPRI
 8005bb0:	f04f 0120 	mov.w	r1, #32
 8005bb4:	f381 8811 	msr	BASEPRI, r1
 8005bb8:	61fb      	str	r3, [r7, #28]
 8005bba:	4825      	ldr	r0, [pc, #148]	@ (8005c50 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8005bbc:	f7ff f9d3 	bl	8004f66 <_PreparePacket>
 8005bc0:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005bc2:	69bb      	ldr	r3, [r7, #24]
 8005bc4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005bce:	e00b      	b.n	8005be8 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8005bd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bd2:	b2da      	uxtb	r2, r3
 8005bd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bd6:	1c59      	adds	r1, r3, #1
 8005bd8:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005bda:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005bde:	b2d2      	uxtb	r2, r2
 8005be0:	701a      	strb	r2, [r3, #0]
 8005be2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005be4:	09db      	lsrs	r3, r3, #7
 8005be6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005be8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bea:	2b7f      	cmp	r3, #127	@ 0x7f
 8005bec:	d8f0      	bhi.n	8005bd0 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8005bee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bf0:	1c5a      	adds	r2, r3, #1
 8005bf2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005bf4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005bf6:	b2d2      	uxtb	r2, r2
 8005bf8:	701a      	strb	r2, [r3, #0]
 8005bfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bfc:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	623b      	str	r3, [r7, #32]
 8005c06:	e00b      	b.n	8005c20 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8005c08:	6a3b      	ldr	r3, [r7, #32]
 8005c0a:	b2da      	uxtb	r2, r3
 8005c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c0e:	1c59      	adds	r1, r3, #1
 8005c10:	6279      	str	r1, [r7, #36]	@ 0x24
 8005c12:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005c16:	b2d2      	uxtb	r2, r2
 8005c18:	701a      	strb	r2, [r3, #0]
 8005c1a:	6a3b      	ldr	r3, [r7, #32]
 8005c1c:	09db      	lsrs	r3, r3, #7
 8005c1e:	623b      	str	r3, [r7, #32]
 8005c20:	6a3b      	ldr	r3, [r7, #32]
 8005c22:	2b7f      	cmp	r3, #127	@ 0x7f
 8005c24:	d8f0      	bhi.n	8005c08 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8005c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c28:	1c5a      	adds	r2, r3, #1
 8005c2a:	627a      	str	r2, [r7, #36]	@ 0x24
 8005c2c:	6a3a      	ldr	r2, [r7, #32]
 8005c2e:	b2d2      	uxtb	r2, r2
 8005c30:	701a      	strb	r2, [r3, #0]
 8005c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c34:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005c36:	68fa      	ldr	r2, [r7, #12]
 8005c38:	6979      	ldr	r1, [r7, #20]
 8005c3a:	69b8      	ldr	r0, [r7, #24]
 8005c3c:	f7ff fa82 	bl	8005144 <_SendPacket>
  RECORD_END();
 8005c40:	69fb      	ldr	r3, [r7, #28]
 8005c42:	f383 8811 	msr	BASEPRI, r3
}
 8005c46:	bf00      	nop
 8005c48:	3730      	adds	r7, #48	@ 0x30
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}
 8005c4e:	bf00      	nop
 8005c50:	2000604c 	.word	0x2000604c

08005c54 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b08e      	sub	sp, #56	@ 0x38
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	60f8      	str	r0, [r7, #12]
 8005c5c:	60b9      	str	r1, [r7, #8]
 8005c5e:	607a      	str	r2, [r7, #4]
 8005c60:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8005c62:	f3ef 8311 	mrs	r3, BASEPRI
 8005c66:	f04f 0120 	mov.w	r1, #32
 8005c6a:	f381 8811 	msr	BASEPRI, r1
 8005c6e:	61fb      	str	r3, [r7, #28]
 8005c70:	4832      	ldr	r0, [pc, #200]	@ (8005d3c <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8005c72:	f7ff f978 	bl	8004f66 <_PreparePacket>
 8005c76:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005c78:	69bb      	ldr	r3, [r7, #24]
 8005c7a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	633b      	str	r3, [r7, #48]	@ 0x30
 8005c84:	e00b      	b.n	8005c9e <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8005c86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c88:	b2da      	uxtb	r2, r3
 8005c8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c8c:	1c59      	adds	r1, r3, #1
 8005c8e:	6379      	str	r1, [r7, #52]	@ 0x34
 8005c90:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005c94:	b2d2      	uxtb	r2, r2
 8005c96:	701a      	strb	r2, [r3, #0]
 8005c98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c9a:	09db      	lsrs	r3, r3, #7
 8005c9c:	633b      	str	r3, [r7, #48]	@ 0x30
 8005c9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ca0:	2b7f      	cmp	r3, #127	@ 0x7f
 8005ca2:	d8f0      	bhi.n	8005c86 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8005ca4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ca6:	1c5a      	adds	r2, r3, #1
 8005ca8:	637a      	str	r2, [r7, #52]	@ 0x34
 8005caa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005cac:	b2d2      	uxtb	r2, r2
 8005cae:	701a      	strb	r2, [r3, #0]
 8005cb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cb2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005cbc:	e00b      	b.n	8005cd6 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8005cbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cc0:	b2da      	uxtb	r2, r3
 8005cc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cc4:	1c59      	adds	r1, r3, #1
 8005cc6:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005cc8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005ccc:	b2d2      	uxtb	r2, r2
 8005cce:	701a      	strb	r2, [r3, #0]
 8005cd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cd2:	09db      	lsrs	r3, r3, #7
 8005cd4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005cd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cd8:	2b7f      	cmp	r3, #127	@ 0x7f
 8005cda:	d8f0      	bhi.n	8005cbe <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8005cdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cde:	1c5a      	adds	r2, r3, #1
 8005ce0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005ce2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005ce4:	b2d2      	uxtb	r2, r2
 8005ce6:	701a      	strb	r2, [r3, #0]
 8005ce8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cea:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	627b      	str	r3, [r7, #36]	@ 0x24
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	623b      	str	r3, [r7, #32]
 8005cf4:	e00b      	b.n	8005d0e <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8005cf6:	6a3b      	ldr	r3, [r7, #32]
 8005cf8:	b2da      	uxtb	r2, r3
 8005cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cfc:	1c59      	adds	r1, r3, #1
 8005cfe:	6279      	str	r1, [r7, #36]	@ 0x24
 8005d00:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005d04:	b2d2      	uxtb	r2, r2
 8005d06:	701a      	strb	r2, [r3, #0]
 8005d08:	6a3b      	ldr	r3, [r7, #32]
 8005d0a:	09db      	lsrs	r3, r3, #7
 8005d0c:	623b      	str	r3, [r7, #32]
 8005d0e:	6a3b      	ldr	r3, [r7, #32]
 8005d10:	2b7f      	cmp	r3, #127	@ 0x7f
 8005d12:	d8f0      	bhi.n	8005cf6 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8005d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d16:	1c5a      	adds	r2, r3, #1
 8005d18:	627a      	str	r2, [r7, #36]	@ 0x24
 8005d1a:	6a3a      	ldr	r2, [r7, #32]
 8005d1c:	b2d2      	uxtb	r2, r2
 8005d1e:	701a      	strb	r2, [r3, #0]
 8005d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d22:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005d24:	68fa      	ldr	r2, [r7, #12]
 8005d26:	6979      	ldr	r1, [r7, #20]
 8005d28:	69b8      	ldr	r0, [r7, #24]
 8005d2a:	f7ff fa0b 	bl	8005144 <_SendPacket>
  RECORD_END();
 8005d2e:	69fb      	ldr	r3, [r7, #28]
 8005d30:	f383 8811 	msr	BASEPRI, r3
}
 8005d34:	bf00      	nop
 8005d36:	3738      	adds	r7, #56	@ 0x38
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bd80      	pop	{r7, pc}
 8005d3c:	2000604c 	.word	0x2000604c

08005d40 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b090      	sub	sp, #64	@ 0x40
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	60f8      	str	r0, [r7, #12]
 8005d48:	60b9      	str	r1, [r7, #8]
 8005d4a:	607a      	str	r2, [r7, #4]
 8005d4c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005d4e:	f3ef 8311 	mrs	r3, BASEPRI
 8005d52:	f04f 0120 	mov.w	r1, #32
 8005d56:	f381 8811 	msr	BASEPRI, r1
 8005d5a:	61fb      	str	r3, [r7, #28]
 8005d5c:	4840      	ldr	r0, [pc, #256]	@ (8005e60 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8005d5e:	f7ff f902 	bl	8004f66 <_PreparePacket>
 8005d62:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005d64:	69bb      	ldr	r3, [r7, #24]
 8005d66:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005d70:	e00b      	b.n	8005d8a <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8005d72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d74:	b2da      	uxtb	r2, r3
 8005d76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d78:	1c59      	adds	r1, r3, #1
 8005d7a:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8005d7c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005d80:	b2d2      	uxtb	r2, r2
 8005d82:	701a      	strb	r2, [r3, #0]
 8005d84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d86:	09db      	lsrs	r3, r3, #7
 8005d88:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005d8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d8c:	2b7f      	cmp	r3, #127	@ 0x7f
 8005d8e:	d8f0      	bhi.n	8005d72 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8005d90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d92:	1c5a      	adds	r2, r3, #1
 8005d94:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005d96:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005d98:	b2d2      	uxtb	r2, r2
 8005d9a:	701a      	strb	r2, [r3, #0]
 8005d9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d9e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	637b      	str	r3, [r7, #52]	@ 0x34
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	633b      	str	r3, [r7, #48]	@ 0x30
 8005da8:	e00b      	b.n	8005dc2 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8005daa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dac:	b2da      	uxtb	r2, r3
 8005dae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005db0:	1c59      	adds	r1, r3, #1
 8005db2:	6379      	str	r1, [r7, #52]	@ 0x34
 8005db4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005db8:	b2d2      	uxtb	r2, r2
 8005dba:	701a      	strb	r2, [r3, #0]
 8005dbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dbe:	09db      	lsrs	r3, r3, #7
 8005dc0:	633b      	str	r3, [r7, #48]	@ 0x30
 8005dc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dc4:	2b7f      	cmp	r3, #127	@ 0x7f
 8005dc6:	d8f0      	bhi.n	8005daa <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8005dc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dca:	1c5a      	adds	r2, r3, #1
 8005dcc:	637a      	str	r2, [r7, #52]	@ 0x34
 8005dce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005dd0:	b2d2      	uxtb	r2, r2
 8005dd2:	701a      	strb	r2, [r3, #0]
 8005dd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dd6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005de0:	e00b      	b.n	8005dfa <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8005de2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005de4:	b2da      	uxtb	r2, r3
 8005de6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005de8:	1c59      	adds	r1, r3, #1
 8005dea:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005dec:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005df0:	b2d2      	uxtb	r2, r2
 8005df2:	701a      	strb	r2, [r3, #0]
 8005df4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005df6:	09db      	lsrs	r3, r3, #7
 8005df8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005dfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dfc:	2b7f      	cmp	r3, #127	@ 0x7f
 8005dfe:	d8f0      	bhi.n	8005de2 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8005e00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e02:	1c5a      	adds	r2, r3, #1
 8005e04:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005e06:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005e08:	b2d2      	uxtb	r2, r2
 8005e0a:	701a      	strb	r2, [r3, #0]
 8005e0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e0e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e14:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005e16:	623b      	str	r3, [r7, #32]
 8005e18:	e00b      	b.n	8005e32 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8005e1a:	6a3b      	ldr	r3, [r7, #32]
 8005e1c:	b2da      	uxtb	r2, r3
 8005e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e20:	1c59      	adds	r1, r3, #1
 8005e22:	6279      	str	r1, [r7, #36]	@ 0x24
 8005e24:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005e28:	b2d2      	uxtb	r2, r2
 8005e2a:	701a      	strb	r2, [r3, #0]
 8005e2c:	6a3b      	ldr	r3, [r7, #32]
 8005e2e:	09db      	lsrs	r3, r3, #7
 8005e30:	623b      	str	r3, [r7, #32]
 8005e32:	6a3b      	ldr	r3, [r7, #32]
 8005e34:	2b7f      	cmp	r3, #127	@ 0x7f
 8005e36:	d8f0      	bhi.n	8005e1a <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8005e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e3a:	1c5a      	adds	r2, r3, #1
 8005e3c:	627a      	str	r2, [r7, #36]	@ 0x24
 8005e3e:	6a3a      	ldr	r2, [r7, #32]
 8005e40:	b2d2      	uxtb	r2, r2
 8005e42:	701a      	strb	r2, [r3, #0]
 8005e44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e46:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005e48:	68fa      	ldr	r2, [r7, #12]
 8005e4a:	6979      	ldr	r1, [r7, #20]
 8005e4c:	69b8      	ldr	r0, [r7, #24]
 8005e4e:	f7ff f979 	bl	8005144 <_SendPacket>
  RECORD_END();
 8005e52:	69fb      	ldr	r3, [r7, #28]
 8005e54:	f383 8811 	msr	BASEPRI, r3
}
 8005e58:	bf00      	nop
 8005e5a:	3740      	adds	r7, #64	@ 0x40
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}
 8005e60:	2000604c 	.word	0x2000604c

08005e64 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b08c      	sub	sp, #48	@ 0x30
 8005e68:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8005e6a:	4b58      	ldr	r3, [pc, #352]	@ (8005fcc <SEGGER_SYSVIEW_Start+0x168>)
 8005e6c:	2201      	movs	r2, #1
 8005e6e:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8005e70:	f3ef 8311 	mrs	r3, BASEPRI
 8005e74:	f04f 0120 	mov.w	r1, #32
 8005e78:	f381 8811 	msr	BASEPRI, r1
 8005e7c:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8005e7e:	4b53      	ldr	r3, [pc, #332]	@ (8005fcc <SEGGER_SYSVIEW_Start+0x168>)
 8005e80:	785b      	ldrb	r3, [r3, #1]
 8005e82:	220a      	movs	r2, #10
 8005e84:	4952      	ldr	r1, [pc, #328]	@ (8005fd0 <SEGGER_SYSVIEW_Start+0x16c>)
 8005e86:	4618      	mov	r0, r3
 8005e88:	f7fa f9a2 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8005e92:	200a      	movs	r0, #10
 8005e94:	f7ff fe2a 	bl	8005aec <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005e98:	f3ef 8311 	mrs	r3, BASEPRI
 8005e9c:	f04f 0120 	mov.w	r1, #32
 8005ea0:	f381 8811 	msr	BASEPRI, r1
 8005ea4:	60bb      	str	r3, [r7, #8]
 8005ea6:	484b      	ldr	r0, [pc, #300]	@ (8005fd4 <SEGGER_SYSVIEW_Start+0x170>)
 8005ea8:	f7ff f85d 	bl	8004f66 <_PreparePacket>
 8005eac:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005eb6:	4b45      	ldr	r3, [pc, #276]	@ (8005fcc <SEGGER_SYSVIEW_Start+0x168>)
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005ebc:	e00b      	b.n	8005ed6 <SEGGER_SYSVIEW_Start+0x72>
 8005ebe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ec0:	b2da      	uxtb	r2, r3
 8005ec2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ec4:	1c59      	adds	r1, r3, #1
 8005ec6:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005ec8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005ecc:	b2d2      	uxtb	r2, r2
 8005ece:	701a      	strb	r2, [r3, #0]
 8005ed0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ed2:	09db      	lsrs	r3, r3, #7
 8005ed4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005ed6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ed8:	2b7f      	cmp	r3, #127	@ 0x7f
 8005eda:	d8f0      	bhi.n	8005ebe <SEGGER_SYSVIEW_Start+0x5a>
 8005edc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ede:	1c5a      	adds	r2, r3, #1
 8005ee0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005ee2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005ee4:	b2d2      	uxtb	r2, r2
 8005ee6:	701a      	strb	r2, [r3, #0]
 8005ee8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005eea:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ef0:	4b36      	ldr	r3, [pc, #216]	@ (8005fcc <SEGGER_SYSVIEW_Start+0x168>)
 8005ef2:	689b      	ldr	r3, [r3, #8]
 8005ef4:	623b      	str	r3, [r7, #32]
 8005ef6:	e00b      	b.n	8005f10 <SEGGER_SYSVIEW_Start+0xac>
 8005ef8:	6a3b      	ldr	r3, [r7, #32]
 8005efa:	b2da      	uxtb	r2, r3
 8005efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005efe:	1c59      	adds	r1, r3, #1
 8005f00:	6279      	str	r1, [r7, #36]	@ 0x24
 8005f02:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005f06:	b2d2      	uxtb	r2, r2
 8005f08:	701a      	strb	r2, [r3, #0]
 8005f0a:	6a3b      	ldr	r3, [r7, #32]
 8005f0c:	09db      	lsrs	r3, r3, #7
 8005f0e:	623b      	str	r3, [r7, #32]
 8005f10:	6a3b      	ldr	r3, [r7, #32]
 8005f12:	2b7f      	cmp	r3, #127	@ 0x7f
 8005f14:	d8f0      	bhi.n	8005ef8 <SEGGER_SYSVIEW_Start+0x94>
 8005f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f18:	1c5a      	adds	r2, r3, #1
 8005f1a:	627a      	str	r2, [r7, #36]	@ 0x24
 8005f1c:	6a3a      	ldr	r2, [r7, #32]
 8005f1e:	b2d2      	uxtb	r2, r2
 8005f20:	701a      	strb	r2, [r3, #0]
 8005f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f24:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	61fb      	str	r3, [r7, #28]
 8005f2a:	4b28      	ldr	r3, [pc, #160]	@ (8005fcc <SEGGER_SYSVIEW_Start+0x168>)
 8005f2c:	691b      	ldr	r3, [r3, #16]
 8005f2e:	61bb      	str	r3, [r7, #24]
 8005f30:	e00b      	b.n	8005f4a <SEGGER_SYSVIEW_Start+0xe6>
 8005f32:	69bb      	ldr	r3, [r7, #24]
 8005f34:	b2da      	uxtb	r2, r3
 8005f36:	69fb      	ldr	r3, [r7, #28]
 8005f38:	1c59      	adds	r1, r3, #1
 8005f3a:	61f9      	str	r1, [r7, #28]
 8005f3c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005f40:	b2d2      	uxtb	r2, r2
 8005f42:	701a      	strb	r2, [r3, #0]
 8005f44:	69bb      	ldr	r3, [r7, #24]
 8005f46:	09db      	lsrs	r3, r3, #7
 8005f48:	61bb      	str	r3, [r7, #24]
 8005f4a:	69bb      	ldr	r3, [r7, #24]
 8005f4c:	2b7f      	cmp	r3, #127	@ 0x7f
 8005f4e:	d8f0      	bhi.n	8005f32 <SEGGER_SYSVIEW_Start+0xce>
 8005f50:	69fb      	ldr	r3, [r7, #28]
 8005f52:	1c5a      	adds	r2, r3, #1
 8005f54:	61fa      	str	r2, [r7, #28]
 8005f56:	69ba      	ldr	r2, [r7, #24]
 8005f58:	b2d2      	uxtb	r2, r2
 8005f5a:	701a      	strb	r2, [r3, #0]
 8005f5c:	69fb      	ldr	r3, [r7, #28]
 8005f5e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	617b      	str	r3, [r7, #20]
 8005f64:	2300      	movs	r3, #0
 8005f66:	613b      	str	r3, [r7, #16]
 8005f68:	e00b      	b.n	8005f82 <SEGGER_SYSVIEW_Start+0x11e>
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	b2da      	uxtb	r2, r3
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	1c59      	adds	r1, r3, #1
 8005f72:	6179      	str	r1, [r7, #20]
 8005f74:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005f78:	b2d2      	uxtb	r2, r2
 8005f7a:	701a      	strb	r2, [r3, #0]
 8005f7c:	693b      	ldr	r3, [r7, #16]
 8005f7e:	09db      	lsrs	r3, r3, #7
 8005f80:	613b      	str	r3, [r7, #16]
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	2b7f      	cmp	r3, #127	@ 0x7f
 8005f86:	d8f0      	bhi.n	8005f6a <SEGGER_SYSVIEW_Start+0x106>
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	1c5a      	adds	r2, r3, #1
 8005f8c:	617a      	str	r2, [r7, #20]
 8005f8e:	693a      	ldr	r2, [r7, #16]
 8005f90:	b2d2      	uxtb	r2, r2
 8005f92:	701a      	strb	r2, [r3, #0]
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005f98:	2218      	movs	r2, #24
 8005f9a:	6839      	ldr	r1, [r7, #0]
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	f7ff f8d1 	bl	8005144 <_SendPacket>
      RECORD_END();
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005fa8:	4b08      	ldr	r3, [pc, #32]	@ (8005fcc <SEGGER_SYSVIEW_Start+0x168>)
 8005faa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d002      	beq.n	8005fb6 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8005fb0:	4b06      	ldr	r3, [pc, #24]	@ (8005fcc <SEGGER_SYSVIEW_Start+0x168>)
 8005fb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fb4:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8005fb6:	f000 f9eb 	bl	8006390 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8005fba:	f000 f9b1 	bl	8006320 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8005fbe:	f000 fba9 	bl	8006714 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8005fc2:	bf00      	nop
 8005fc4:	3730      	adds	r7, #48	@ 0x30
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd80      	pop	{r7, pc}
 8005fca:	bf00      	nop
 8005fcc:	2000601c 	.word	0x2000601c
 8005fd0:	08007430 	.word	0x08007430
 8005fd4:	2000604c 	.word	0x2000604c

08005fd8 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b082      	sub	sp, #8
 8005fdc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005fde:	f3ef 8311 	mrs	r3, BASEPRI
 8005fe2:	f04f 0120 	mov.w	r1, #32
 8005fe6:	f381 8811 	msr	BASEPRI, r1
 8005fea:	607b      	str	r3, [r7, #4]
 8005fec:	480b      	ldr	r0, [pc, #44]	@ (800601c <SEGGER_SYSVIEW_Stop+0x44>)
 8005fee:	f7fe ffba 	bl	8004f66 <_PreparePacket>
 8005ff2:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8005ff4:	4b0a      	ldr	r3, [pc, #40]	@ (8006020 <SEGGER_SYSVIEW_Stop+0x48>)
 8005ff6:	781b      	ldrb	r3, [r3, #0]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d007      	beq.n	800600c <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8005ffc:	220b      	movs	r2, #11
 8005ffe:	6839      	ldr	r1, [r7, #0]
 8006000:	6838      	ldr	r0, [r7, #0]
 8006002:	f7ff f89f 	bl	8005144 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8006006:	4b06      	ldr	r3, [pc, #24]	@ (8006020 <SEGGER_SYSVIEW_Stop+0x48>)
 8006008:	2200      	movs	r2, #0
 800600a:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f383 8811 	msr	BASEPRI, r3
}
 8006012:	bf00      	nop
 8006014:	3708      	adds	r7, #8
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}
 800601a:	bf00      	nop
 800601c:	2000604c 	.word	0x2000604c
 8006020:	2000601c 	.word	0x2000601c

08006024 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8006024:	b580      	push	{r7, lr}
 8006026:	b08c      	sub	sp, #48	@ 0x30
 8006028:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800602a:	f3ef 8311 	mrs	r3, BASEPRI
 800602e:	f04f 0120 	mov.w	r1, #32
 8006032:	f381 8811 	msr	BASEPRI, r1
 8006036:	60fb      	str	r3, [r7, #12]
 8006038:	4845      	ldr	r0, [pc, #276]	@ (8006150 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800603a:	f7fe ff94 	bl	8004f66 <_PreparePacket>
 800603e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006048:	4b42      	ldr	r3, [pc, #264]	@ (8006154 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800604e:	e00b      	b.n	8006068 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8006050:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006052:	b2da      	uxtb	r2, r3
 8006054:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006056:	1c59      	adds	r1, r3, #1
 8006058:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800605a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800605e:	b2d2      	uxtb	r2, r2
 8006060:	701a      	strb	r2, [r3, #0]
 8006062:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006064:	09db      	lsrs	r3, r3, #7
 8006066:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006068:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800606a:	2b7f      	cmp	r3, #127	@ 0x7f
 800606c:	d8f0      	bhi.n	8006050 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800606e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006070:	1c5a      	adds	r2, r3, #1
 8006072:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006074:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006076:	b2d2      	uxtb	r2, r2
 8006078:	701a      	strb	r2, [r3, #0]
 800607a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800607c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	627b      	str	r3, [r7, #36]	@ 0x24
 8006082:	4b34      	ldr	r3, [pc, #208]	@ (8006154 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006084:	689b      	ldr	r3, [r3, #8]
 8006086:	623b      	str	r3, [r7, #32]
 8006088:	e00b      	b.n	80060a2 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800608a:	6a3b      	ldr	r3, [r7, #32]
 800608c:	b2da      	uxtb	r2, r3
 800608e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006090:	1c59      	adds	r1, r3, #1
 8006092:	6279      	str	r1, [r7, #36]	@ 0x24
 8006094:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006098:	b2d2      	uxtb	r2, r2
 800609a:	701a      	strb	r2, [r3, #0]
 800609c:	6a3b      	ldr	r3, [r7, #32]
 800609e:	09db      	lsrs	r3, r3, #7
 80060a0:	623b      	str	r3, [r7, #32]
 80060a2:	6a3b      	ldr	r3, [r7, #32]
 80060a4:	2b7f      	cmp	r3, #127	@ 0x7f
 80060a6:	d8f0      	bhi.n	800608a <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80060a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060aa:	1c5a      	adds	r2, r3, #1
 80060ac:	627a      	str	r2, [r7, #36]	@ 0x24
 80060ae:	6a3a      	ldr	r2, [r7, #32]
 80060b0:	b2d2      	uxtb	r2, r2
 80060b2:	701a      	strb	r2, [r3, #0]
 80060b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060b6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	61fb      	str	r3, [r7, #28]
 80060bc:	4b25      	ldr	r3, [pc, #148]	@ (8006154 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80060be:	691b      	ldr	r3, [r3, #16]
 80060c0:	61bb      	str	r3, [r7, #24]
 80060c2:	e00b      	b.n	80060dc <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80060c4:	69bb      	ldr	r3, [r7, #24]
 80060c6:	b2da      	uxtb	r2, r3
 80060c8:	69fb      	ldr	r3, [r7, #28]
 80060ca:	1c59      	adds	r1, r3, #1
 80060cc:	61f9      	str	r1, [r7, #28]
 80060ce:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80060d2:	b2d2      	uxtb	r2, r2
 80060d4:	701a      	strb	r2, [r3, #0]
 80060d6:	69bb      	ldr	r3, [r7, #24]
 80060d8:	09db      	lsrs	r3, r3, #7
 80060da:	61bb      	str	r3, [r7, #24]
 80060dc:	69bb      	ldr	r3, [r7, #24]
 80060de:	2b7f      	cmp	r3, #127	@ 0x7f
 80060e0:	d8f0      	bhi.n	80060c4 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80060e2:	69fb      	ldr	r3, [r7, #28]
 80060e4:	1c5a      	adds	r2, r3, #1
 80060e6:	61fa      	str	r2, [r7, #28]
 80060e8:	69ba      	ldr	r2, [r7, #24]
 80060ea:	b2d2      	uxtb	r2, r2
 80060ec:	701a      	strb	r2, [r3, #0]
 80060ee:	69fb      	ldr	r3, [r7, #28]
 80060f0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	617b      	str	r3, [r7, #20]
 80060f6:	2300      	movs	r3, #0
 80060f8:	613b      	str	r3, [r7, #16]
 80060fa:	e00b      	b.n	8006114 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	b2da      	uxtb	r2, r3
 8006100:	697b      	ldr	r3, [r7, #20]
 8006102:	1c59      	adds	r1, r3, #1
 8006104:	6179      	str	r1, [r7, #20]
 8006106:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800610a:	b2d2      	uxtb	r2, r2
 800610c:	701a      	strb	r2, [r3, #0]
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	09db      	lsrs	r3, r3, #7
 8006112:	613b      	str	r3, [r7, #16]
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	2b7f      	cmp	r3, #127	@ 0x7f
 8006118:	d8f0      	bhi.n	80060fc <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	1c5a      	adds	r2, r3, #1
 800611e:	617a      	str	r2, [r7, #20]
 8006120:	693a      	ldr	r2, [r7, #16]
 8006122:	b2d2      	uxtb	r2, r2
 8006124:	701a      	strb	r2, [r3, #0]
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800612a:	2218      	movs	r2, #24
 800612c:	6879      	ldr	r1, [r7, #4]
 800612e:	68b8      	ldr	r0, [r7, #8]
 8006130:	f7ff f808 	bl	8005144 <_SendPacket>
  RECORD_END();
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800613a:	4b06      	ldr	r3, [pc, #24]	@ (8006154 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800613c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800613e:	2b00      	cmp	r3, #0
 8006140:	d002      	beq.n	8006148 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8006142:	4b04      	ldr	r3, [pc, #16]	@ (8006154 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006146:	4798      	blx	r3
  }
}
 8006148:	bf00      	nop
 800614a:	3730      	adds	r7, #48	@ 0x30
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}
 8006150:	2000604c 	.word	0x2000604c
 8006154:	2000601c 	.word	0x2000601c

08006158 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8006158:	b580      	push	{r7, lr}
 800615a:	b092      	sub	sp, #72	@ 0x48
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8006160:	f3ef 8311 	mrs	r3, BASEPRI
 8006164:	f04f 0120 	mov.w	r1, #32
 8006168:	f381 8811 	msr	BASEPRI, r1
 800616c:	617b      	str	r3, [r7, #20]
 800616e:	486a      	ldr	r0, [pc, #424]	@ (8006318 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8006170:	f7fe fef9 	bl	8004f66 <_PreparePacket>
 8006174:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	647b      	str	r3, [r7, #68]	@ 0x44
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681a      	ldr	r2, [r3, #0]
 8006182:	4b66      	ldr	r3, [pc, #408]	@ (800631c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006184:	691b      	ldr	r3, [r3, #16]
 8006186:	1ad3      	subs	r3, r2, r3
 8006188:	643b      	str	r3, [r7, #64]	@ 0x40
 800618a:	e00b      	b.n	80061a4 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 800618c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800618e:	b2da      	uxtb	r2, r3
 8006190:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006192:	1c59      	adds	r1, r3, #1
 8006194:	6479      	str	r1, [r7, #68]	@ 0x44
 8006196:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800619a:	b2d2      	uxtb	r2, r2
 800619c:	701a      	strb	r2, [r3, #0]
 800619e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80061a0:	09db      	lsrs	r3, r3, #7
 80061a2:	643b      	str	r3, [r7, #64]	@ 0x40
 80061a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80061a6:	2b7f      	cmp	r3, #127	@ 0x7f
 80061a8:	d8f0      	bhi.n	800618c <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 80061aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80061ac:	1c5a      	adds	r2, r3, #1
 80061ae:	647a      	str	r2, [r7, #68]	@ 0x44
 80061b0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80061b2:	b2d2      	uxtb	r2, r2
 80061b4:	701a      	strb	r2, [r3, #0]
 80061b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80061b8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	689b      	ldr	r3, [r3, #8]
 80061c2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80061c4:	e00b      	b.n	80061de <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 80061c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061c8:	b2da      	uxtb	r2, r3
 80061ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061cc:	1c59      	adds	r1, r3, #1
 80061ce:	63f9      	str	r1, [r7, #60]	@ 0x3c
 80061d0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80061d4:	b2d2      	uxtb	r2, r2
 80061d6:	701a      	strb	r2, [r3, #0]
 80061d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061da:	09db      	lsrs	r3, r3, #7
 80061dc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80061de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061e0:	2b7f      	cmp	r3, #127	@ 0x7f
 80061e2:	d8f0      	bhi.n	80061c6 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80061e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061e6:	1c5a      	adds	r2, r3, #1
 80061e8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80061ea:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80061ec:	b2d2      	uxtb	r2, r2
 80061ee:	701a      	strb	r2, [r3, #0]
 80061f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061f2:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	2220      	movs	r2, #32
 80061fa:	4619      	mov	r1, r3
 80061fc:	68f8      	ldr	r0, [r7, #12]
 80061fe:	f7fe fe65 	bl	8004ecc <_EncodeStr>
 8006202:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8006204:	2209      	movs	r2, #9
 8006206:	68f9      	ldr	r1, [r7, #12]
 8006208:	6938      	ldr	r0, [r7, #16]
 800620a:	f7fe ff9b 	bl	8005144 <_SendPacket>
  //
  pPayload = pPayloadStart;
 800620e:	693b      	ldr	r3, [r7, #16]
 8006210:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	637b      	str	r3, [r7, #52]	@ 0x34
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681a      	ldr	r2, [r3, #0]
 800621a:	4b40      	ldr	r3, [pc, #256]	@ (800631c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800621c:	691b      	ldr	r3, [r3, #16]
 800621e:	1ad3      	subs	r3, r2, r3
 8006220:	633b      	str	r3, [r7, #48]	@ 0x30
 8006222:	e00b      	b.n	800623c <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8006224:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006226:	b2da      	uxtb	r2, r3
 8006228:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800622a:	1c59      	adds	r1, r3, #1
 800622c:	6379      	str	r1, [r7, #52]	@ 0x34
 800622e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006232:	b2d2      	uxtb	r2, r2
 8006234:	701a      	strb	r2, [r3, #0]
 8006236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006238:	09db      	lsrs	r3, r3, #7
 800623a:	633b      	str	r3, [r7, #48]	@ 0x30
 800623c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800623e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006240:	d8f0      	bhi.n	8006224 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8006242:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006244:	1c5a      	adds	r2, r3, #1
 8006246:	637a      	str	r2, [r7, #52]	@ 0x34
 8006248:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800624a:	b2d2      	uxtb	r2, r2
 800624c:	701a      	strb	r2, [r3, #0]
 800624e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006250:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	68db      	ldr	r3, [r3, #12]
 800625a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800625c:	e00b      	b.n	8006276 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800625e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006260:	b2da      	uxtb	r2, r3
 8006262:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006264:	1c59      	adds	r1, r3, #1
 8006266:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006268:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800626c:	b2d2      	uxtb	r2, r2
 800626e:	701a      	strb	r2, [r3, #0]
 8006270:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006272:	09db      	lsrs	r3, r3, #7
 8006274:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006276:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006278:	2b7f      	cmp	r3, #127	@ 0x7f
 800627a:	d8f0      	bhi.n	800625e <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 800627c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800627e:	1c5a      	adds	r2, r3, #1
 8006280:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006282:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006284:	b2d2      	uxtb	r2, r2
 8006286:	701a      	strb	r2, [r3, #0]
 8006288:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800628a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	691b      	ldr	r3, [r3, #16]
 8006294:	623b      	str	r3, [r7, #32]
 8006296:	e00b      	b.n	80062b0 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8006298:	6a3b      	ldr	r3, [r7, #32]
 800629a:	b2da      	uxtb	r2, r3
 800629c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800629e:	1c59      	adds	r1, r3, #1
 80062a0:	6279      	str	r1, [r7, #36]	@ 0x24
 80062a2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80062a6:	b2d2      	uxtb	r2, r2
 80062a8:	701a      	strb	r2, [r3, #0]
 80062aa:	6a3b      	ldr	r3, [r7, #32]
 80062ac:	09db      	lsrs	r3, r3, #7
 80062ae:	623b      	str	r3, [r7, #32]
 80062b0:	6a3b      	ldr	r3, [r7, #32]
 80062b2:	2b7f      	cmp	r3, #127	@ 0x7f
 80062b4:	d8f0      	bhi.n	8006298 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 80062b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062b8:	1c5a      	adds	r2, r3, #1
 80062ba:	627a      	str	r2, [r7, #36]	@ 0x24
 80062bc:	6a3a      	ldr	r2, [r7, #32]
 80062be:	b2d2      	uxtb	r2, r2
 80062c0:	701a      	strb	r2, [r3, #0]
 80062c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062c4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	61fb      	str	r3, [r7, #28]
 80062ca:	2300      	movs	r3, #0
 80062cc:	61bb      	str	r3, [r7, #24]
 80062ce:	e00b      	b.n	80062e8 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 80062d0:	69bb      	ldr	r3, [r7, #24]
 80062d2:	b2da      	uxtb	r2, r3
 80062d4:	69fb      	ldr	r3, [r7, #28]
 80062d6:	1c59      	adds	r1, r3, #1
 80062d8:	61f9      	str	r1, [r7, #28]
 80062da:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80062de:	b2d2      	uxtb	r2, r2
 80062e0:	701a      	strb	r2, [r3, #0]
 80062e2:	69bb      	ldr	r3, [r7, #24]
 80062e4:	09db      	lsrs	r3, r3, #7
 80062e6:	61bb      	str	r3, [r7, #24]
 80062e8:	69bb      	ldr	r3, [r7, #24]
 80062ea:	2b7f      	cmp	r3, #127	@ 0x7f
 80062ec:	d8f0      	bhi.n	80062d0 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 80062ee:	69fb      	ldr	r3, [r7, #28]
 80062f0:	1c5a      	adds	r2, r3, #1
 80062f2:	61fa      	str	r2, [r7, #28]
 80062f4:	69ba      	ldr	r2, [r7, #24]
 80062f6:	b2d2      	uxtb	r2, r2
 80062f8:	701a      	strb	r2, [r3, #0]
 80062fa:	69fb      	ldr	r3, [r7, #28]
 80062fc:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80062fe:	2215      	movs	r2, #21
 8006300:	68f9      	ldr	r1, [r7, #12]
 8006302:	6938      	ldr	r0, [r7, #16]
 8006304:	f7fe ff1e 	bl	8005144 <_SendPacket>
  RECORD_END();
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	f383 8811 	msr	BASEPRI, r3
}
 800630e:	bf00      	nop
 8006310:	3748      	adds	r7, #72	@ 0x48
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}
 8006316:	bf00      	nop
 8006318:	2000604c 	.word	0x2000604c
 800631c:	2000601c 	.word	0x2000601c

08006320 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8006320:	b580      	push	{r7, lr}
 8006322:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8006324:	4b07      	ldr	r3, [pc, #28]	@ (8006344 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006326:	6a1b      	ldr	r3, [r3, #32]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d008      	beq.n	800633e <SEGGER_SYSVIEW_SendTaskList+0x1e>
 800632c:	4b05      	ldr	r3, [pc, #20]	@ (8006344 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800632e:	6a1b      	ldr	r3, [r3, #32]
 8006330:	685b      	ldr	r3, [r3, #4]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d003      	beq.n	800633e <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8006336:	4b03      	ldr	r3, [pc, #12]	@ (8006344 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006338:	6a1b      	ldr	r3, [r3, #32]
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	4798      	blx	r3
  }
}
 800633e:	bf00      	nop
 8006340:	bd80      	pop	{r7, pc}
 8006342:	bf00      	nop
 8006344:	2000601c 	.word	0x2000601c

08006348 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8006348:	b580      	push	{r7, lr}
 800634a:	b086      	sub	sp, #24
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006350:	f3ef 8311 	mrs	r3, BASEPRI
 8006354:	f04f 0120 	mov.w	r1, #32
 8006358:	f381 8811 	msr	BASEPRI, r1
 800635c:	617b      	str	r3, [r7, #20]
 800635e:	480b      	ldr	r0, [pc, #44]	@ (800638c <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8006360:	f7fe fe01 	bl	8004f66 <_PreparePacket>
 8006364:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006366:	2280      	movs	r2, #128	@ 0x80
 8006368:	6879      	ldr	r1, [r7, #4]
 800636a:	6938      	ldr	r0, [r7, #16]
 800636c:	f7fe fdae 	bl	8004ecc <_EncodeStr>
 8006370:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8006372:	220e      	movs	r2, #14
 8006374:	68f9      	ldr	r1, [r7, #12]
 8006376:	6938      	ldr	r0, [r7, #16]
 8006378:	f7fe fee4 	bl	8005144 <_SendPacket>
  RECORD_END();
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	f383 8811 	msr	BASEPRI, r3
}
 8006382:	bf00      	nop
 8006384:	3718      	adds	r7, #24
 8006386:	46bd      	mov	sp, r7
 8006388:	bd80      	pop	{r7, pc}
 800638a:	bf00      	nop
 800638c:	2000604c 	.word	0x2000604c

08006390 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006390:	b590      	push	{r4, r7, lr}
 8006392:	b083      	sub	sp, #12
 8006394:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8006396:	4b15      	ldr	r3, [pc, #84]	@ (80063ec <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006398:	6a1b      	ldr	r3, [r3, #32]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d01a      	beq.n	80063d4 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800639e:	4b13      	ldr	r3, [pc, #76]	@ (80063ec <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80063a0:	6a1b      	ldr	r3, [r3, #32]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d015      	beq.n	80063d4 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80063a8:	4b10      	ldr	r3, [pc, #64]	@ (80063ec <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80063aa:	6a1b      	ldr	r3, [r3, #32]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4798      	blx	r3
 80063b0:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80063b4:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80063b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80063ba:	f04f 0200 	mov.w	r2, #0
 80063be:	f04f 0300 	mov.w	r3, #0
 80063c2:	000a      	movs	r2, r1
 80063c4:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80063c6:	4613      	mov	r3, r2
 80063c8:	461a      	mov	r2, r3
 80063ca:	4621      	mov	r1, r4
 80063cc:	200d      	movs	r0, #13
 80063ce:	f7ff fbe7 	bl	8005ba0 <SEGGER_SYSVIEW_RecordU32x2>
 80063d2:	e006      	b.n	80063e2 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80063d4:	4b06      	ldr	r3, [pc, #24]	@ (80063f0 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4619      	mov	r1, r3
 80063da:	200c      	movs	r0, #12
 80063dc:	f7ff fba4 	bl	8005b28 <SEGGER_SYSVIEW_RecordU32>
  }
}
 80063e0:	bf00      	nop
 80063e2:	bf00      	nop
 80063e4:	370c      	adds	r7, #12
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd90      	pop	{r4, r7, pc}
 80063ea:	bf00      	nop
 80063ec:	2000601c 	.word	0x2000601c
 80063f0:	e0001004 	.word	0xe0001004

080063f4 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b082      	sub	sp, #8
 80063f8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80063fa:	f3ef 8311 	mrs	r3, BASEPRI
 80063fe:	f04f 0120 	mov.w	r1, #32
 8006402:	f381 8811 	msr	BASEPRI, r1
 8006406:	607b      	str	r3, [r7, #4]
 8006408:	4807      	ldr	r0, [pc, #28]	@ (8006428 <SEGGER_SYSVIEW_OnIdle+0x34>)
 800640a:	f7fe fdac 	bl	8004f66 <_PreparePacket>
 800640e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8006410:	2211      	movs	r2, #17
 8006412:	6839      	ldr	r1, [r7, #0]
 8006414:	6838      	ldr	r0, [r7, #0]
 8006416:	f7fe fe95 	bl	8005144 <_SendPacket>
  RECORD_END();
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f383 8811 	msr	BASEPRI, r3
}
 8006420:	bf00      	nop
 8006422:	3708      	adds	r7, #8
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}
 8006428:	2000604c 	.word	0x2000604c

0800642c <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 800642c:	b580      	push	{r7, lr}
 800642e:	b088      	sub	sp, #32
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006434:	f3ef 8311 	mrs	r3, BASEPRI
 8006438:	f04f 0120 	mov.w	r1, #32
 800643c:	f381 8811 	msr	BASEPRI, r1
 8006440:	617b      	str	r3, [r7, #20]
 8006442:	4819      	ldr	r0, [pc, #100]	@ (80064a8 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8006444:	f7fe fd8f 	bl	8004f66 <_PreparePacket>
 8006448:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800644a:	693b      	ldr	r3, [r7, #16]
 800644c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800644e:	4b17      	ldr	r3, [pc, #92]	@ (80064ac <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8006450:	691b      	ldr	r3, [r3, #16]
 8006452:	687a      	ldr	r2, [r7, #4]
 8006454:	1ad3      	subs	r3, r2, r3
 8006456:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	61fb      	str	r3, [r7, #28]
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	61bb      	str	r3, [r7, #24]
 8006460:	e00b      	b.n	800647a <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8006462:	69bb      	ldr	r3, [r7, #24]
 8006464:	b2da      	uxtb	r2, r3
 8006466:	69fb      	ldr	r3, [r7, #28]
 8006468:	1c59      	adds	r1, r3, #1
 800646a:	61f9      	str	r1, [r7, #28]
 800646c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006470:	b2d2      	uxtb	r2, r2
 8006472:	701a      	strb	r2, [r3, #0]
 8006474:	69bb      	ldr	r3, [r7, #24]
 8006476:	09db      	lsrs	r3, r3, #7
 8006478:	61bb      	str	r3, [r7, #24]
 800647a:	69bb      	ldr	r3, [r7, #24]
 800647c:	2b7f      	cmp	r3, #127	@ 0x7f
 800647e:	d8f0      	bhi.n	8006462 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006480:	69fb      	ldr	r3, [r7, #28]
 8006482:	1c5a      	adds	r2, r3, #1
 8006484:	61fa      	str	r2, [r7, #28]
 8006486:	69ba      	ldr	r2, [r7, #24]
 8006488:	b2d2      	uxtb	r2, r2
 800648a:	701a      	strb	r2, [r3, #0]
 800648c:	69fb      	ldr	r3, [r7, #28]
 800648e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006490:	2208      	movs	r2, #8
 8006492:	68f9      	ldr	r1, [r7, #12]
 8006494:	6938      	ldr	r0, [r7, #16]
 8006496:	f7fe fe55 	bl	8005144 <_SendPacket>
  RECORD_END();
 800649a:	697b      	ldr	r3, [r7, #20]
 800649c:	f383 8811 	msr	BASEPRI, r3
}
 80064a0:	bf00      	nop
 80064a2:	3720      	adds	r7, #32
 80064a4:	46bd      	mov	sp, r7
 80064a6:	bd80      	pop	{r7, pc}
 80064a8:	2000604c 	.word	0x2000604c
 80064ac:	2000601c 	.word	0x2000601c

080064b0 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b088      	sub	sp, #32
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80064b8:	f3ef 8311 	mrs	r3, BASEPRI
 80064bc:	f04f 0120 	mov.w	r1, #32
 80064c0:	f381 8811 	msr	BASEPRI, r1
 80064c4:	617b      	str	r3, [r7, #20]
 80064c6:	4819      	ldr	r0, [pc, #100]	@ (800652c <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80064c8:	f7fe fd4d 	bl	8004f66 <_PreparePacket>
 80064cc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80064ce:	693b      	ldr	r3, [r7, #16]
 80064d0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80064d2:	4b17      	ldr	r3, [pc, #92]	@ (8006530 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80064d4:	691b      	ldr	r3, [r3, #16]
 80064d6:	687a      	ldr	r2, [r7, #4]
 80064d8:	1ad3      	subs	r3, r2, r3
 80064da:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	61fb      	str	r3, [r7, #28]
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	61bb      	str	r3, [r7, #24]
 80064e4:	e00b      	b.n	80064fe <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80064e6:	69bb      	ldr	r3, [r7, #24]
 80064e8:	b2da      	uxtb	r2, r3
 80064ea:	69fb      	ldr	r3, [r7, #28]
 80064ec:	1c59      	adds	r1, r3, #1
 80064ee:	61f9      	str	r1, [r7, #28]
 80064f0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80064f4:	b2d2      	uxtb	r2, r2
 80064f6:	701a      	strb	r2, [r3, #0]
 80064f8:	69bb      	ldr	r3, [r7, #24]
 80064fa:	09db      	lsrs	r3, r3, #7
 80064fc:	61bb      	str	r3, [r7, #24]
 80064fe:	69bb      	ldr	r3, [r7, #24]
 8006500:	2b7f      	cmp	r3, #127	@ 0x7f
 8006502:	d8f0      	bhi.n	80064e6 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006504:	69fb      	ldr	r3, [r7, #28]
 8006506:	1c5a      	adds	r2, r3, #1
 8006508:	61fa      	str	r2, [r7, #28]
 800650a:	69ba      	ldr	r2, [r7, #24]
 800650c:	b2d2      	uxtb	r2, r2
 800650e:	701a      	strb	r2, [r3, #0]
 8006510:	69fb      	ldr	r3, [r7, #28]
 8006512:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006514:	2204      	movs	r2, #4
 8006516:	68f9      	ldr	r1, [r7, #12]
 8006518:	6938      	ldr	r0, [r7, #16]
 800651a:	f7fe fe13 	bl	8005144 <_SendPacket>
  RECORD_END();
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	f383 8811 	msr	BASEPRI, r3
}
 8006524:	bf00      	nop
 8006526:	3720      	adds	r7, #32
 8006528:	46bd      	mov	sp, r7
 800652a:	bd80      	pop	{r7, pc}
 800652c:	2000604c 	.word	0x2000604c
 8006530:	2000601c 	.word	0x2000601c

08006534 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006534:	b580      	push	{r7, lr}
 8006536:	b088      	sub	sp, #32
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800653c:	f3ef 8311 	mrs	r3, BASEPRI
 8006540:	f04f 0120 	mov.w	r1, #32
 8006544:	f381 8811 	msr	BASEPRI, r1
 8006548:	617b      	str	r3, [r7, #20]
 800654a:	4819      	ldr	r0, [pc, #100]	@ (80065b0 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 800654c:	f7fe fd0b 	bl	8004f66 <_PreparePacket>
 8006550:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006552:	693b      	ldr	r3, [r7, #16]
 8006554:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006556:	4b17      	ldr	r3, [pc, #92]	@ (80065b4 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006558:	691b      	ldr	r3, [r3, #16]
 800655a:	687a      	ldr	r2, [r7, #4]
 800655c:	1ad3      	subs	r3, r2, r3
 800655e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	61fb      	str	r3, [r7, #28]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	61bb      	str	r3, [r7, #24]
 8006568:	e00b      	b.n	8006582 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800656a:	69bb      	ldr	r3, [r7, #24]
 800656c:	b2da      	uxtb	r2, r3
 800656e:	69fb      	ldr	r3, [r7, #28]
 8006570:	1c59      	adds	r1, r3, #1
 8006572:	61f9      	str	r1, [r7, #28]
 8006574:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006578:	b2d2      	uxtb	r2, r2
 800657a:	701a      	strb	r2, [r3, #0]
 800657c:	69bb      	ldr	r3, [r7, #24]
 800657e:	09db      	lsrs	r3, r3, #7
 8006580:	61bb      	str	r3, [r7, #24]
 8006582:	69bb      	ldr	r3, [r7, #24]
 8006584:	2b7f      	cmp	r3, #127	@ 0x7f
 8006586:	d8f0      	bhi.n	800656a <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006588:	69fb      	ldr	r3, [r7, #28]
 800658a:	1c5a      	adds	r2, r3, #1
 800658c:	61fa      	str	r2, [r7, #28]
 800658e:	69ba      	ldr	r2, [r7, #24]
 8006590:	b2d2      	uxtb	r2, r2
 8006592:	701a      	strb	r2, [r3, #0]
 8006594:	69fb      	ldr	r3, [r7, #28]
 8006596:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006598:	2206      	movs	r2, #6
 800659a:	68f9      	ldr	r1, [r7, #12]
 800659c:	6938      	ldr	r0, [r7, #16]
 800659e:	f7fe fdd1 	bl	8005144 <_SendPacket>
  RECORD_END();
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	f383 8811 	msr	BASEPRI, r3
}
 80065a8:	bf00      	nop
 80065aa:	3720      	adds	r7, #32
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bd80      	pop	{r7, pc}
 80065b0:	2000604c 	.word	0x2000604c
 80065b4:	2000601c 	.word	0x2000601c

080065b8 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 80065b8:	b480      	push	{r7}
 80065ba:	b083      	sub	sp, #12
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 80065c0:	4b04      	ldr	r3, [pc, #16]	@ (80065d4 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 80065c2:	691b      	ldr	r3, [r3, #16]
 80065c4:	687a      	ldr	r2, [r7, #4]
 80065c6:	1ad3      	subs	r3, r2, r3
}
 80065c8:	4618      	mov	r0, r3
 80065ca:	370c      	adds	r7, #12
 80065cc:	46bd      	mov	sp, r7
 80065ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d2:	4770      	bx	lr
 80065d4:	2000601c 	.word	0x2000601c

080065d8 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80065d8:	b580      	push	{r7, lr}
 80065da:	b08c      	sub	sp, #48	@ 0x30
 80065dc:	af00      	add	r7, sp, #0
 80065de:	4603      	mov	r3, r0
 80065e0:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80065e2:	4b3b      	ldr	r3, [pc, #236]	@ (80066d0 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d06d      	beq.n	80066c6 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 80065ea:	4b39      	ldr	r3, [pc, #228]	@ (80066d0 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 80065f0:	2300      	movs	r3, #0
 80065f2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80065f4:	e008      	b.n	8006608 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80065f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065f8:	691b      	ldr	r3, [r3, #16]
 80065fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 80065fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d007      	beq.n	8006612 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8006602:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006604:	3301      	adds	r3, #1
 8006606:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006608:	79fb      	ldrb	r3, [r7, #7]
 800660a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800660c:	429a      	cmp	r2, r3
 800660e:	d3f2      	bcc.n	80065f6 <SEGGER_SYSVIEW_SendModule+0x1e>
 8006610:	e000      	b.n	8006614 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8006612:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8006614:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006616:	2b00      	cmp	r3, #0
 8006618:	d055      	beq.n	80066c6 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800661a:	f3ef 8311 	mrs	r3, BASEPRI
 800661e:	f04f 0120 	mov.w	r1, #32
 8006622:	f381 8811 	msr	BASEPRI, r1
 8006626:	617b      	str	r3, [r7, #20]
 8006628:	482a      	ldr	r0, [pc, #168]	@ (80066d4 <SEGGER_SYSVIEW_SendModule+0xfc>)
 800662a:	f7fe fc9c 	bl	8004f66 <_PreparePacket>
 800662e:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006630:	693b      	ldr	r3, [r7, #16]
 8006632:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	627b      	str	r3, [r7, #36]	@ 0x24
 8006638:	79fb      	ldrb	r3, [r7, #7]
 800663a:	623b      	str	r3, [r7, #32]
 800663c:	e00b      	b.n	8006656 <SEGGER_SYSVIEW_SendModule+0x7e>
 800663e:	6a3b      	ldr	r3, [r7, #32]
 8006640:	b2da      	uxtb	r2, r3
 8006642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006644:	1c59      	adds	r1, r3, #1
 8006646:	6279      	str	r1, [r7, #36]	@ 0x24
 8006648:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800664c:	b2d2      	uxtb	r2, r2
 800664e:	701a      	strb	r2, [r3, #0]
 8006650:	6a3b      	ldr	r3, [r7, #32]
 8006652:	09db      	lsrs	r3, r3, #7
 8006654:	623b      	str	r3, [r7, #32]
 8006656:	6a3b      	ldr	r3, [r7, #32]
 8006658:	2b7f      	cmp	r3, #127	@ 0x7f
 800665a:	d8f0      	bhi.n	800663e <SEGGER_SYSVIEW_SendModule+0x66>
 800665c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800665e:	1c5a      	adds	r2, r3, #1
 8006660:	627a      	str	r2, [r7, #36]	@ 0x24
 8006662:	6a3a      	ldr	r2, [r7, #32]
 8006664:	b2d2      	uxtb	r2, r2
 8006666:	701a      	strb	r2, [r3, #0]
 8006668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800666a:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	61fb      	str	r3, [r7, #28]
 8006670:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006672:	689b      	ldr	r3, [r3, #8]
 8006674:	61bb      	str	r3, [r7, #24]
 8006676:	e00b      	b.n	8006690 <SEGGER_SYSVIEW_SendModule+0xb8>
 8006678:	69bb      	ldr	r3, [r7, #24]
 800667a:	b2da      	uxtb	r2, r3
 800667c:	69fb      	ldr	r3, [r7, #28]
 800667e:	1c59      	adds	r1, r3, #1
 8006680:	61f9      	str	r1, [r7, #28]
 8006682:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006686:	b2d2      	uxtb	r2, r2
 8006688:	701a      	strb	r2, [r3, #0]
 800668a:	69bb      	ldr	r3, [r7, #24]
 800668c:	09db      	lsrs	r3, r3, #7
 800668e:	61bb      	str	r3, [r7, #24]
 8006690:	69bb      	ldr	r3, [r7, #24]
 8006692:	2b7f      	cmp	r3, #127	@ 0x7f
 8006694:	d8f0      	bhi.n	8006678 <SEGGER_SYSVIEW_SendModule+0xa0>
 8006696:	69fb      	ldr	r3, [r7, #28]
 8006698:	1c5a      	adds	r2, r3, #1
 800669a:	61fa      	str	r2, [r7, #28]
 800669c:	69ba      	ldr	r2, [r7, #24]
 800669e:	b2d2      	uxtb	r2, r2
 80066a0:	701a      	strb	r2, [r3, #0]
 80066a2:	69fb      	ldr	r3, [r7, #28]
 80066a4:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80066a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	2280      	movs	r2, #128	@ 0x80
 80066ac:	4619      	mov	r1, r3
 80066ae:	68f8      	ldr	r0, [r7, #12]
 80066b0:	f7fe fc0c 	bl	8004ecc <_EncodeStr>
 80066b4:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80066b6:	2216      	movs	r2, #22
 80066b8:	68f9      	ldr	r1, [r7, #12]
 80066ba:	6938      	ldr	r0, [r7, #16]
 80066bc:	f7fe fd42 	bl	8005144 <_SendPacket>
      RECORD_END();
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 80066c6:	bf00      	nop
 80066c8:	3730      	adds	r7, #48	@ 0x30
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}
 80066ce:	bf00      	nop
 80066d0:	20006044 	.word	0x20006044
 80066d4:	2000604c 	.word	0x2000604c

080066d8 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80066d8:	b580      	push	{r7, lr}
 80066da:	b082      	sub	sp, #8
 80066dc:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80066de:	4b0c      	ldr	r3, [pc, #48]	@ (8006710 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d00f      	beq.n	8006706 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80066e6:	4b0a      	ldr	r3, [pc, #40]	@ (8006710 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	68db      	ldr	r3, [r3, #12]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d002      	beq.n	80066fa <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	68db      	ldr	r3, [r3, #12]
 80066f8:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	691b      	ldr	r3, [r3, #16]
 80066fe:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d1f2      	bne.n	80066ec <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8006706:	bf00      	nop
 8006708:	3708      	adds	r7, #8
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}
 800670e:	bf00      	nop
 8006710:	20006044 	.word	0x20006044

08006714 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006714:	b580      	push	{r7, lr}
 8006716:	b086      	sub	sp, #24
 8006718:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800671a:	f3ef 8311 	mrs	r3, BASEPRI
 800671e:	f04f 0120 	mov.w	r1, #32
 8006722:	f381 8811 	msr	BASEPRI, r1
 8006726:	60fb      	str	r3, [r7, #12]
 8006728:	4817      	ldr	r0, [pc, #92]	@ (8006788 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800672a:	f7fe fc1c 	bl	8004f66 <_PreparePacket>
 800672e:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	617b      	str	r3, [r7, #20]
 8006738:	4b14      	ldr	r3, [pc, #80]	@ (800678c <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800673a:	781b      	ldrb	r3, [r3, #0]
 800673c:	613b      	str	r3, [r7, #16]
 800673e:	e00b      	b.n	8006758 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006740:	693b      	ldr	r3, [r7, #16]
 8006742:	b2da      	uxtb	r2, r3
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	1c59      	adds	r1, r3, #1
 8006748:	6179      	str	r1, [r7, #20]
 800674a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800674e:	b2d2      	uxtb	r2, r2
 8006750:	701a      	strb	r2, [r3, #0]
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	09db      	lsrs	r3, r3, #7
 8006756:	613b      	str	r3, [r7, #16]
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	2b7f      	cmp	r3, #127	@ 0x7f
 800675c:	d8f0      	bhi.n	8006740 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	1c5a      	adds	r2, r3, #1
 8006762:	617a      	str	r2, [r7, #20]
 8006764:	693a      	ldr	r2, [r7, #16]
 8006766:	b2d2      	uxtb	r2, r2
 8006768:	701a      	strb	r2, [r3, #0]
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800676e:	221b      	movs	r2, #27
 8006770:	6879      	ldr	r1, [r7, #4]
 8006772:	68b8      	ldr	r0, [r7, #8]
 8006774:	f7fe fce6 	bl	8005144 <_SendPacket>
  RECORD_END();
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	f383 8811 	msr	BASEPRI, r3
}
 800677e:	bf00      	nop
 8006780:	3718      	adds	r7, #24
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}
 8006786:	bf00      	nop
 8006788:	2000604c 	.word	0x2000604c
 800678c:	20006048 	.word	0x20006048

08006790 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8006790:	b40f      	push	{r0, r1, r2, r3}
 8006792:	b580      	push	{r7, lr}
 8006794:	b082      	sub	sp, #8
 8006796:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8006798:	f107 0314 	add.w	r3, r7, #20
 800679c:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 800679e:	1d3b      	adds	r3, r7, #4
 80067a0:	461a      	mov	r2, r3
 80067a2:	2100      	movs	r1, #0
 80067a4:	6938      	ldr	r0, [r7, #16]
 80067a6:	f7fe ff55 	bl	8005654 <_VPrintTarget>
  va_end(ParamList);
}
 80067aa:	bf00      	nop
 80067ac:	3708      	adds	r7, #8
 80067ae:	46bd      	mov	sp, r7
 80067b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80067b4:	b004      	add	sp, #16
 80067b6:	4770      	bx	lr

080067b8 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b08a      	sub	sp, #40	@ 0x28
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80067c0:	f3ef 8311 	mrs	r3, BASEPRI
 80067c4:	f04f 0120 	mov.w	r1, #32
 80067c8:	f381 8811 	msr	BASEPRI, r1
 80067cc:	617b      	str	r3, [r7, #20]
 80067ce:	4827      	ldr	r0, [pc, #156]	@ (800686c <SEGGER_SYSVIEW_Warn+0xb4>)
 80067d0:	f7fe fbc9 	bl	8004f66 <_PreparePacket>
 80067d4:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80067d6:	2280      	movs	r2, #128	@ 0x80
 80067d8:	6879      	ldr	r1, [r7, #4]
 80067da:	6938      	ldr	r0, [r7, #16]
 80067dc:	f7fe fb76 	bl	8004ecc <_EncodeStr>
 80067e0:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80067e6:	2301      	movs	r3, #1
 80067e8:	623b      	str	r3, [r7, #32]
 80067ea:	e00b      	b.n	8006804 <SEGGER_SYSVIEW_Warn+0x4c>
 80067ec:	6a3b      	ldr	r3, [r7, #32]
 80067ee:	b2da      	uxtb	r2, r3
 80067f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067f2:	1c59      	adds	r1, r3, #1
 80067f4:	6279      	str	r1, [r7, #36]	@ 0x24
 80067f6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80067fa:	b2d2      	uxtb	r2, r2
 80067fc:	701a      	strb	r2, [r3, #0]
 80067fe:	6a3b      	ldr	r3, [r7, #32]
 8006800:	09db      	lsrs	r3, r3, #7
 8006802:	623b      	str	r3, [r7, #32]
 8006804:	6a3b      	ldr	r3, [r7, #32]
 8006806:	2b7f      	cmp	r3, #127	@ 0x7f
 8006808:	d8f0      	bhi.n	80067ec <SEGGER_SYSVIEW_Warn+0x34>
 800680a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800680c:	1c5a      	adds	r2, r3, #1
 800680e:	627a      	str	r2, [r7, #36]	@ 0x24
 8006810:	6a3a      	ldr	r2, [r7, #32]
 8006812:	b2d2      	uxtb	r2, r2
 8006814:	701a      	strb	r2, [r3, #0]
 8006816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006818:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	61fb      	str	r3, [r7, #28]
 800681e:	2300      	movs	r3, #0
 8006820:	61bb      	str	r3, [r7, #24]
 8006822:	e00b      	b.n	800683c <SEGGER_SYSVIEW_Warn+0x84>
 8006824:	69bb      	ldr	r3, [r7, #24]
 8006826:	b2da      	uxtb	r2, r3
 8006828:	69fb      	ldr	r3, [r7, #28]
 800682a:	1c59      	adds	r1, r3, #1
 800682c:	61f9      	str	r1, [r7, #28]
 800682e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006832:	b2d2      	uxtb	r2, r2
 8006834:	701a      	strb	r2, [r3, #0]
 8006836:	69bb      	ldr	r3, [r7, #24]
 8006838:	09db      	lsrs	r3, r3, #7
 800683a:	61bb      	str	r3, [r7, #24]
 800683c:	69bb      	ldr	r3, [r7, #24]
 800683e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006840:	d8f0      	bhi.n	8006824 <SEGGER_SYSVIEW_Warn+0x6c>
 8006842:	69fb      	ldr	r3, [r7, #28]
 8006844:	1c5a      	adds	r2, r3, #1
 8006846:	61fa      	str	r2, [r7, #28]
 8006848:	69ba      	ldr	r2, [r7, #24]
 800684a:	b2d2      	uxtb	r2, r2
 800684c:	701a      	strb	r2, [r3, #0]
 800684e:	69fb      	ldr	r3, [r7, #28]
 8006850:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006852:	221a      	movs	r2, #26
 8006854:	68f9      	ldr	r1, [r7, #12]
 8006856:	6938      	ldr	r0, [r7, #16]
 8006858:	f7fe fc74 	bl	8005144 <_SendPacket>
  RECORD_END();
 800685c:	697b      	ldr	r3, [r7, #20]
 800685e:	f383 8811 	msr	BASEPRI, r3
}
 8006862:	bf00      	nop
 8006864:	3728      	adds	r7, #40	@ 0x28
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}
 800686a:	bf00      	nop
 800686c:	2000604c 	.word	0x2000604c

08006870 <sniprintf>:
 8006870:	b40c      	push	{r2, r3}
 8006872:	b530      	push	{r4, r5, lr}
 8006874:	4b18      	ldr	r3, [pc, #96]	@ (80068d8 <sniprintf+0x68>)
 8006876:	1e0c      	subs	r4, r1, #0
 8006878:	681d      	ldr	r5, [r3, #0]
 800687a:	b09d      	sub	sp, #116	@ 0x74
 800687c:	da08      	bge.n	8006890 <sniprintf+0x20>
 800687e:	238b      	movs	r3, #139	@ 0x8b
 8006880:	602b      	str	r3, [r5, #0]
 8006882:	f04f 30ff 	mov.w	r0, #4294967295
 8006886:	b01d      	add	sp, #116	@ 0x74
 8006888:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800688c:	b002      	add	sp, #8
 800688e:	4770      	bx	lr
 8006890:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006894:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006898:	f04f 0300 	mov.w	r3, #0
 800689c:	931b      	str	r3, [sp, #108]	@ 0x6c
 800689e:	bf14      	ite	ne
 80068a0:	f104 33ff 	addne.w	r3, r4, #4294967295
 80068a4:	4623      	moveq	r3, r4
 80068a6:	9304      	str	r3, [sp, #16]
 80068a8:	9307      	str	r3, [sp, #28]
 80068aa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80068ae:	9002      	str	r0, [sp, #8]
 80068b0:	9006      	str	r0, [sp, #24]
 80068b2:	f8ad 3016 	strh.w	r3, [sp, #22]
 80068b6:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80068b8:	ab21      	add	r3, sp, #132	@ 0x84
 80068ba:	a902      	add	r1, sp, #8
 80068bc:	4628      	mov	r0, r5
 80068be:	9301      	str	r3, [sp, #4]
 80068c0:	f000 fa10 	bl	8006ce4 <_svfiprintf_r>
 80068c4:	1c43      	adds	r3, r0, #1
 80068c6:	bfbc      	itt	lt
 80068c8:	238b      	movlt	r3, #139	@ 0x8b
 80068ca:	602b      	strlt	r3, [r5, #0]
 80068cc:	2c00      	cmp	r4, #0
 80068ce:	d0da      	beq.n	8006886 <sniprintf+0x16>
 80068d0:	9b02      	ldr	r3, [sp, #8]
 80068d2:	2200      	movs	r2, #0
 80068d4:	701a      	strb	r2, [r3, #0]
 80068d6:	e7d6      	b.n	8006886 <sniprintf+0x16>
 80068d8:	20000010 	.word	0x20000010

080068dc <memcmp>:
 80068dc:	b510      	push	{r4, lr}
 80068de:	3901      	subs	r1, #1
 80068e0:	4402      	add	r2, r0
 80068e2:	4290      	cmp	r0, r2
 80068e4:	d101      	bne.n	80068ea <memcmp+0xe>
 80068e6:	2000      	movs	r0, #0
 80068e8:	e005      	b.n	80068f6 <memcmp+0x1a>
 80068ea:	7803      	ldrb	r3, [r0, #0]
 80068ec:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80068f0:	42a3      	cmp	r3, r4
 80068f2:	d001      	beq.n	80068f8 <memcmp+0x1c>
 80068f4:	1b18      	subs	r0, r3, r4
 80068f6:	bd10      	pop	{r4, pc}
 80068f8:	3001      	adds	r0, #1
 80068fa:	e7f2      	b.n	80068e2 <memcmp+0x6>

080068fc <memset>:
 80068fc:	4402      	add	r2, r0
 80068fe:	4603      	mov	r3, r0
 8006900:	4293      	cmp	r3, r2
 8006902:	d100      	bne.n	8006906 <memset+0xa>
 8006904:	4770      	bx	lr
 8006906:	f803 1b01 	strb.w	r1, [r3], #1
 800690a:	e7f9      	b.n	8006900 <memset+0x4>

0800690c <_reclaim_reent>:
 800690c:	4b2d      	ldr	r3, [pc, #180]	@ (80069c4 <_reclaim_reent+0xb8>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4283      	cmp	r3, r0
 8006912:	b570      	push	{r4, r5, r6, lr}
 8006914:	4604      	mov	r4, r0
 8006916:	d053      	beq.n	80069c0 <_reclaim_reent+0xb4>
 8006918:	69c3      	ldr	r3, [r0, #28]
 800691a:	b31b      	cbz	r3, 8006964 <_reclaim_reent+0x58>
 800691c:	68db      	ldr	r3, [r3, #12]
 800691e:	b163      	cbz	r3, 800693a <_reclaim_reent+0x2e>
 8006920:	2500      	movs	r5, #0
 8006922:	69e3      	ldr	r3, [r4, #28]
 8006924:	68db      	ldr	r3, [r3, #12]
 8006926:	5959      	ldr	r1, [r3, r5]
 8006928:	b9b1      	cbnz	r1, 8006958 <_reclaim_reent+0x4c>
 800692a:	3504      	adds	r5, #4
 800692c:	2d80      	cmp	r5, #128	@ 0x80
 800692e:	d1f8      	bne.n	8006922 <_reclaim_reent+0x16>
 8006930:	69e3      	ldr	r3, [r4, #28]
 8006932:	4620      	mov	r0, r4
 8006934:	68d9      	ldr	r1, [r3, #12]
 8006936:	f000 f881 	bl	8006a3c <_free_r>
 800693a:	69e3      	ldr	r3, [r4, #28]
 800693c:	6819      	ldr	r1, [r3, #0]
 800693e:	b111      	cbz	r1, 8006946 <_reclaim_reent+0x3a>
 8006940:	4620      	mov	r0, r4
 8006942:	f000 f87b 	bl	8006a3c <_free_r>
 8006946:	69e3      	ldr	r3, [r4, #28]
 8006948:	689d      	ldr	r5, [r3, #8]
 800694a:	b15d      	cbz	r5, 8006964 <_reclaim_reent+0x58>
 800694c:	4629      	mov	r1, r5
 800694e:	4620      	mov	r0, r4
 8006950:	682d      	ldr	r5, [r5, #0]
 8006952:	f000 f873 	bl	8006a3c <_free_r>
 8006956:	e7f8      	b.n	800694a <_reclaim_reent+0x3e>
 8006958:	680e      	ldr	r6, [r1, #0]
 800695a:	4620      	mov	r0, r4
 800695c:	f000 f86e 	bl	8006a3c <_free_r>
 8006960:	4631      	mov	r1, r6
 8006962:	e7e1      	b.n	8006928 <_reclaim_reent+0x1c>
 8006964:	6961      	ldr	r1, [r4, #20]
 8006966:	b111      	cbz	r1, 800696e <_reclaim_reent+0x62>
 8006968:	4620      	mov	r0, r4
 800696a:	f000 f867 	bl	8006a3c <_free_r>
 800696e:	69e1      	ldr	r1, [r4, #28]
 8006970:	b111      	cbz	r1, 8006978 <_reclaim_reent+0x6c>
 8006972:	4620      	mov	r0, r4
 8006974:	f000 f862 	bl	8006a3c <_free_r>
 8006978:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800697a:	b111      	cbz	r1, 8006982 <_reclaim_reent+0x76>
 800697c:	4620      	mov	r0, r4
 800697e:	f000 f85d 	bl	8006a3c <_free_r>
 8006982:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006984:	b111      	cbz	r1, 800698c <_reclaim_reent+0x80>
 8006986:	4620      	mov	r0, r4
 8006988:	f000 f858 	bl	8006a3c <_free_r>
 800698c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800698e:	b111      	cbz	r1, 8006996 <_reclaim_reent+0x8a>
 8006990:	4620      	mov	r0, r4
 8006992:	f000 f853 	bl	8006a3c <_free_r>
 8006996:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006998:	b111      	cbz	r1, 80069a0 <_reclaim_reent+0x94>
 800699a:	4620      	mov	r0, r4
 800699c:	f000 f84e 	bl	8006a3c <_free_r>
 80069a0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80069a2:	b111      	cbz	r1, 80069aa <_reclaim_reent+0x9e>
 80069a4:	4620      	mov	r0, r4
 80069a6:	f000 f849 	bl	8006a3c <_free_r>
 80069aa:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80069ac:	b111      	cbz	r1, 80069b4 <_reclaim_reent+0xa8>
 80069ae:	4620      	mov	r0, r4
 80069b0:	f000 f844 	bl	8006a3c <_free_r>
 80069b4:	6a23      	ldr	r3, [r4, #32]
 80069b6:	b11b      	cbz	r3, 80069c0 <_reclaim_reent+0xb4>
 80069b8:	4620      	mov	r0, r4
 80069ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80069be:	4718      	bx	r3
 80069c0:	bd70      	pop	{r4, r5, r6, pc}
 80069c2:	bf00      	nop
 80069c4:	20000010 	.word	0x20000010

080069c8 <__errno>:
 80069c8:	4b01      	ldr	r3, [pc, #4]	@ (80069d0 <__errno+0x8>)
 80069ca:	6818      	ldr	r0, [r3, #0]
 80069cc:	4770      	bx	lr
 80069ce:	bf00      	nop
 80069d0:	20000010 	.word	0x20000010

080069d4 <__libc_init_array>:
 80069d4:	b570      	push	{r4, r5, r6, lr}
 80069d6:	4d0d      	ldr	r5, [pc, #52]	@ (8006a0c <__libc_init_array+0x38>)
 80069d8:	4c0d      	ldr	r4, [pc, #52]	@ (8006a10 <__libc_init_array+0x3c>)
 80069da:	1b64      	subs	r4, r4, r5
 80069dc:	10a4      	asrs	r4, r4, #2
 80069de:	2600      	movs	r6, #0
 80069e0:	42a6      	cmp	r6, r4
 80069e2:	d109      	bne.n	80069f8 <__libc_init_array+0x24>
 80069e4:	4d0b      	ldr	r5, [pc, #44]	@ (8006a14 <__libc_init_array+0x40>)
 80069e6:	4c0c      	ldr	r4, [pc, #48]	@ (8006a18 <__libc_init_array+0x44>)
 80069e8:	f000 fc64 	bl	80072b4 <_init>
 80069ec:	1b64      	subs	r4, r4, r5
 80069ee:	10a4      	asrs	r4, r4, #2
 80069f0:	2600      	movs	r6, #0
 80069f2:	42a6      	cmp	r6, r4
 80069f4:	d105      	bne.n	8006a02 <__libc_init_array+0x2e>
 80069f6:	bd70      	pop	{r4, r5, r6, pc}
 80069f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80069fc:	4798      	blx	r3
 80069fe:	3601      	adds	r6, #1
 8006a00:	e7ee      	b.n	80069e0 <__libc_init_array+0xc>
 8006a02:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a06:	4798      	blx	r3
 8006a08:	3601      	adds	r6, #1
 8006a0a:	e7f2      	b.n	80069f2 <__libc_init_array+0x1e>
 8006a0c:	08007488 	.word	0x08007488
 8006a10:	08007488 	.word	0x08007488
 8006a14:	08007488 	.word	0x08007488
 8006a18:	0800748c 	.word	0x0800748c

08006a1c <__retarget_lock_acquire_recursive>:
 8006a1c:	4770      	bx	lr

08006a1e <__retarget_lock_release_recursive>:
 8006a1e:	4770      	bx	lr

08006a20 <memcpy>:
 8006a20:	440a      	add	r2, r1
 8006a22:	4291      	cmp	r1, r2
 8006a24:	f100 33ff 	add.w	r3, r0, #4294967295
 8006a28:	d100      	bne.n	8006a2c <memcpy+0xc>
 8006a2a:	4770      	bx	lr
 8006a2c:	b510      	push	{r4, lr}
 8006a2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a32:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006a36:	4291      	cmp	r1, r2
 8006a38:	d1f9      	bne.n	8006a2e <memcpy+0xe>
 8006a3a:	bd10      	pop	{r4, pc}

08006a3c <_free_r>:
 8006a3c:	b538      	push	{r3, r4, r5, lr}
 8006a3e:	4605      	mov	r5, r0
 8006a40:	2900      	cmp	r1, #0
 8006a42:	d041      	beq.n	8006ac8 <_free_r+0x8c>
 8006a44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a48:	1f0c      	subs	r4, r1, #4
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	bfb8      	it	lt
 8006a4e:	18e4      	addlt	r4, r4, r3
 8006a50:	f000 f8e0 	bl	8006c14 <__malloc_lock>
 8006a54:	4a1d      	ldr	r2, [pc, #116]	@ (8006acc <_free_r+0x90>)
 8006a56:	6813      	ldr	r3, [r2, #0]
 8006a58:	b933      	cbnz	r3, 8006a68 <_free_r+0x2c>
 8006a5a:	6063      	str	r3, [r4, #4]
 8006a5c:	6014      	str	r4, [r2, #0]
 8006a5e:	4628      	mov	r0, r5
 8006a60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a64:	f000 b8dc 	b.w	8006c20 <__malloc_unlock>
 8006a68:	42a3      	cmp	r3, r4
 8006a6a:	d908      	bls.n	8006a7e <_free_r+0x42>
 8006a6c:	6820      	ldr	r0, [r4, #0]
 8006a6e:	1821      	adds	r1, r4, r0
 8006a70:	428b      	cmp	r3, r1
 8006a72:	bf01      	itttt	eq
 8006a74:	6819      	ldreq	r1, [r3, #0]
 8006a76:	685b      	ldreq	r3, [r3, #4]
 8006a78:	1809      	addeq	r1, r1, r0
 8006a7a:	6021      	streq	r1, [r4, #0]
 8006a7c:	e7ed      	b.n	8006a5a <_free_r+0x1e>
 8006a7e:	461a      	mov	r2, r3
 8006a80:	685b      	ldr	r3, [r3, #4]
 8006a82:	b10b      	cbz	r3, 8006a88 <_free_r+0x4c>
 8006a84:	42a3      	cmp	r3, r4
 8006a86:	d9fa      	bls.n	8006a7e <_free_r+0x42>
 8006a88:	6811      	ldr	r1, [r2, #0]
 8006a8a:	1850      	adds	r0, r2, r1
 8006a8c:	42a0      	cmp	r0, r4
 8006a8e:	d10b      	bne.n	8006aa8 <_free_r+0x6c>
 8006a90:	6820      	ldr	r0, [r4, #0]
 8006a92:	4401      	add	r1, r0
 8006a94:	1850      	adds	r0, r2, r1
 8006a96:	4283      	cmp	r3, r0
 8006a98:	6011      	str	r1, [r2, #0]
 8006a9a:	d1e0      	bne.n	8006a5e <_free_r+0x22>
 8006a9c:	6818      	ldr	r0, [r3, #0]
 8006a9e:	685b      	ldr	r3, [r3, #4]
 8006aa0:	6053      	str	r3, [r2, #4]
 8006aa2:	4408      	add	r0, r1
 8006aa4:	6010      	str	r0, [r2, #0]
 8006aa6:	e7da      	b.n	8006a5e <_free_r+0x22>
 8006aa8:	d902      	bls.n	8006ab0 <_free_r+0x74>
 8006aaa:	230c      	movs	r3, #12
 8006aac:	602b      	str	r3, [r5, #0]
 8006aae:	e7d6      	b.n	8006a5e <_free_r+0x22>
 8006ab0:	6820      	ldr	r0, [r4, #0]
 8006ab2:	1821      	adds	r1, r4, r0
 8006ab4:	428b      	cmp	r3, r1
 8006ab6:	bf04      	itt	eq
 8006ab8:	6819      	ldreq	r1, [r3, #0]
 8006aba:	685b      	ldreq	r3, [r3, #4]
 8006abc:	6063      	str	r3, [r4, #4]
 8006abe:	bf04      	itt	eq
 8006ac0:	1809      	addeq	r1, r1, r0
 8006ac2:	6021      	streq	r1, [r4, #0]
 8006ac4:	6054      	str	r4, [r2, #4]
 8006ac6:	e7ca      	b.n	8006a5e <_free_r+0x22>
 8006ac8:	bd38      	pop	{r3, r4, r5, pc}
 8006aca:	bf00      	nop
 8006acc:	20006274 	.word	0x20006274

08006ad0 <sbrk_aligned>:
 8006ad0:	b570      	push	{r4, r5, r6, lr}
 8006ad2:	4e0f      	ldr	r6, [pc, #60]	@ (8006b10 <sbrk_aligned+0x40>)
 8006ad4:	460c      	mov	r4, r1
 8006ad6:	6831      	ldr	r1, [r6, #0]
 8006ad8:	4605      	mov	r5, r0
 8006ada:	b911      	cbnz	r1, 8006ae2 <sbrk_aligned+0x12>
 8006adc:	f000 fba4 	bl	8007228 <_sbrk_r>
 8006ae0:	6030      	str	r0, [r6, #0]
 8006ae2:	4621      	mov	r1, r4
 8006ae4:	4628      	mov	r0, r5
 8006ae6:	f000 fb9f 	bl	8007228 <_sbrk_r>
 8006aea:	1c43      	adds	r3, r0, #1
 8006aec:	d103      	bne.n	8006af6 <sbrk_aligned+0x26>
 8006aee:	f04f 34ff 	mov.w	r4, #4294967295
 8006af2:	4620      	mov	r0, r4
 8006af4:	bd70      	pop	{r4, r5, r6, pc}
 8006af6:	1cc4      	adds	r4, r0, #3
 8006af8:	f024 0403 	bic.w	r4, r4, #3
 8006afc:	42a0      	cmp	r0, r4
 8006afe:	d0f8      	beq.n	8006af2 <sbrk_aligned+0x22>
 8006b00:	1a21      	subs	r1, r4, r0
 8006b02:	4628      	mov	r0, r5
 8006b04:	f000 fb90 	bl	8007228 <_sbrk_r>
 8006b08:	3001      	adds	r0, #1
 8006b0a:	d1f2      	bne.n	8006af2 <sbrk_aligned+0x22>
 8006b0c:	e7ef      	b.n	8006aee <sbrk_aligned+0x1e>
 8006b0e:	bf00      	nop
 8006b10:	20006270 	.word	0x20006270

08006b14 <_malloc_r>:
 8006b14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b18:	1ccd      	adds	r5, r1, #3
 8006b1a:	f025 0503 	bic.w	r5, r5, #3
 8006b1e:	3508      	adds	r5, #8
 8006b20:	2d0c      	cmp	r5, #12
 8006b22:	bf38      	it	cc
 8006b24:	250c      	movcc	r5, #12
 8006b26:	2d00      	cmp	r5, #0
 8006b28:	4606      	mov	r6, r0
 8006b2a:	db01      	blt.n	8006b30 <_malloc_r+0x1c>
 8006b2c:	42a9      	cmp	r1, r5
 8006b2e:	d904      	bls.n	8006b3a <_malloc_r+0x26>
 8006b30:	230c      	movs	r3, #12
 8006b32:	6033      	str	r3, [r6, #0]
 8006b34:	2000      	movs	r0, #0
 8006b36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b3a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006c10 <_malloc_r+0xfc>
 8006b3e:	f000 f869 	bl	8006c14 <__malloc_lock>
 8006b42:	f8d8 3000 	ldr.w	r3, [r8]
 8006b46:	461c      	mov	r4, r3
 8006b48:	bb44      	cbnz	r4, 8006b9c <_malloc_r+0x88>
 8006b4a:	4629      	mov	r1, r5
 8006b4c:	4630      	mov	r0, r6
 8006b4e:	f7ff ffbf 	bl	8006ad0 <sbrk_aligned>
 8006b52:	1c43      	adds	r3, r0, #1
 8006b54:	4604      	mov	r4, r0
 8006b56:	d158      	bne.n	8006c0a <_malloc_r+0xf6>
 8006b58:	f8d8 4000 	ldr.w	r4, [r8]
 8006b5c:	4627      	mov	r7, r4
 8006b5e:	2f00      	cmp	r7, #0
 8006b60:	d143      	bne.n	8006bea <_malloc_r+0xd6>
 8006b62:	2c00      	cmp	r4, #0
 8006b64:	d04b      	beq.n	8006bfe <_malloc_r+0xea>
 8006b66:	6823      	ldr	r3, [r4, #0]
 8006b68:	4639      	mov	r1, r7
 8006b6a:	4630      	mov	r0, r6
 8006b6c:	eb04 0903 	add.w	r9, r4, r3
 8006b70:	f000 fb5a 	bl	8007228 <_sbrk_r>
 8006b74:	4581      	cmp	r9, r0
 8006b76:	d142      	bne.n	8006bfe <_malloc_r+0xea>
 8006b78:	6821      	ldr	r1, [r4, #0]
 8006b7a:	1a6d      	subs	r5, r5, r1
 8006b7c:	4629      	mov	r1, r5
 8006b7e:	4630      	mov	r0, r6
 8006b80:	f7ff ffa6 	bl	8006ad0 <sbrk_aligned>
 8006b84:	3001      	adds	r0, #1
 8006b86:	d03a      	beq.n	8006bfe <_malloc_r+0xea>
 8006b88:	6823      	ldr	r3, [r4, #0]
 8006b8a:	442b      	add	r3, r5
 8006b8c:	6023      	str	r3, [r4, #0]
 8006b8e:	f8d8 3000 	ldr.w	r3, [r8]
 8006b92:	685a      	ldr	r2, [r3, #4]
 8006b94:	bb62      	cbnz	r2, 8006bf0 <_malloc_r+0xdc>
 8006b96:	f8c8 7000 	str.w	r7, [r8]
 8006b9a:	e00f      	b.n	8006bbc <_malloc_r+0xa8>
 8006b9c:	6822      	ldr	r2, [r4, #0]
 8006b9e:	1b52      	subs	r2, r2, r5
 8006ba0:	d420      	bmi.n	8006be4 <_malloc_r+0xd0>
 8006ba2:	2a0b      	cmp	r2, #11
 8006ba4:	d917      	bls.n	8006bd6 <_malloc_r+0xc2>
 8006ba6:	1961      	adds	r1, r4, r5
 8006ba8:	42a3      	cmp	r3, r4
 8006baa:	6025      	str	r5, [r4, #0]
 8006bac:	bf18      	it	ne
 8006bae:	6059      	strne	r1, [r3, #4]
 8006bb0:	6863      	ldr	r3, [r4, #4]
 8006bb2:	bf08      	it	eq
 8006bb4:	f8c8 1000 	streq.w	r1, [r8]
 8006bb8:	5162      	str	r2, [r4, r5]
 8006bba:	604b      	str	r3, [r1, #4]
 8006bbc:	4630      	mov	r0, r6
 8006bbe:	f000 f82f 	bl	8006c20 <__malloc_unlock>
 8006bc2:	f104 000b 	add.w	r0, r4, #11
 8006bc6:	1d23      	adds	r3, r4, #4
 8006bc8:	f020 0007 	bic.w	r0, r0, #7
 8006bcc:	1ac2      	subs	r2, r0, r3
 8006bce:	bf1c      	itt	ne
 8006bd0:	1a1b      	subne	r3, r3, r0
 8006bd2:	50a3      	strne	r3, [r4, r2]
 8006bd4:	e7af      	b.n	8006b36 <_malloc_r+0x22>
 8006bd6:	6862      	ldr	r2, [r4, #4]
 8006bd8:	42a3      	cmp	r3, r4
 8006bda:	bf0c      	ite	eq
 8006bdc:	f8c8 2000 	streq.w	r2, [r8]
 8006be0:	605a      	strne	r2, [r3, #4]
 8006be2:	e7eb      	b.n	8006bbc <_malloc_r+0xa8>
 8006be4:	4623      	mov	r3, r4
 8006be6:	6864      	ldr	r4, [r4, #4]
 8006be8:	e7ae      	b.n	8006b48 <_malloc_r+0x34>
 8006bea:	463c      	mov	r4, r7
 8006bec:	687f      	ldr	r7, [r7, #4]
 8006bee:	e7b6      	b.n	8006b5e <_malloc_r+0x4a>
 8006bf0:	461a      	mov	r2, r3
 8006bf2:	685b      	ldr	r3, [r3, #4]
 8006bf4:	42a3      	cmp	r3, r4
 8006bf6:	d1fb      	bne.n	8006bf0 <_malloc_r+0xdc>
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	6053      	str	r3, [r2, #4]
 8006bfc:	e7de      	b.n	8006bbc <_malloc_r+0xa8>
 8006bfe:	230c      	movs	r3, #12
 8006c00:	6033      	str	r3, [r6, #0]
 8006c02:	4630      	mov	r0, r6
 8006c04:	f000 f80c 	bl	8006c20 <__malloc_unlock>
 8006c08:	e794      	b.n	8006b34 <_malloc_r+0x20>
 8006c0a:	6005      	str	r5, [r0, #0]
 8006c0c:	e7d6      	b.n	8006bbc <_malloc_r+0xa8>
 8006c0e:	bf00      	nop
 8006c10:	20006274 	.word	0x20006274

08006c14 <__malloc_lock>:
 8006c14:	4801      	ldr	r0, [pc, #4]	@ (8006c1c <__malloc_lock+0x8>)
 8006c16:	f7ff bf01 	b.w	8006a1c <__retarget_lock_acquire_recursive>
 8006c1a:	bf00      	nop
 8006c1c:	2000626c 	.word	0x2000626c

08006c20 <__malloc_unlock>:
 8006c20:	4801      	ldr	r0, [pc, #4]	@ (8006c28 <__malloc_unlock+0x8>)
 8006c22:	f7ff befc 	b.w	8006a1e <__retarget_lock_release_recursive>
 8006c26:	bf00      	nop
 8006c28:	2000626c 	.word	0x2000626c

08006c2c <__ssputs_r>:
 8006c2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c30:	688e      	ldr	r6, [r1, #8]
 8006c32:	461f      	mov	r7, r3
 8006c34:	42be      	cmp	r6, r7
 8006c36:	680b      	ldr	r3, [r1, #0]
 8006c38:	4682      	mov	sl, r0
 8006c3a:	460c      	mov	r4, r1
 8006c3c:	4690      	mov	r8, r2
 8006c3e:	d82d      	bhi.n	8006c9c <__ssputs_r+0x70>
 8006c40:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006c44:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006c48:	d026      	beq.n	8006c98 <__ssputs_r+0x6c>
 8006c4a:	6965      	ldr	r5, [r4, #20]
 8006c4c:	6909      	ldr	r1, [r1, #16]
 8006c4e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006c52:	eba3 0901 	sub.w	r9, r3, r1
 8006c56:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006c5a:	1c7b      	adds	r3, r7, #1
 8006c5c:	444b      	add	r3, r9
 8006c5e:	106d      	asrs	r5, r5, #1
 8006c60:	429d      	cmp	r5, r3
 8006c62:	bf38      	it	cc
 8006c64:	461d      	movcc	r5, r3
 8006c66:	0553      	lsls	r3, r2, #21
 8006c68:	d527      	bpl.n	8006cba <__ssputs_r+0x8e>
 8006c6a:	4629      	mov	r1, r5
 8006c6c:	f7ff ff52 	bl	8006b14 <_malloc_r>
 8006c70:	4606      	mov	r6, r0
 8006c72:	b360      	cbz	r0, 8006cce <__ssputs_r+0xa2>
 8006c74:	6921      	ldr	r1, [r4, #16]
 8006c76:	464a      	mov	r2, r9
 8006c78:	f7ff fed2 	bl	8006a20 <memcpy>
 8006c7c:	89a3      	ldrh	r3, [r4, #12]
 8006c7e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006c82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c86:	81a3      	strh	r3, [r4, #12]
 8006c88:	6126      	str	r6, [r4, #16]
 8006c8a:	6165      	str	r5, [r4, #20]
 8006c8c:	444e      	add	r6, r9
 8006c8e:	eba5 0509 	sub.w	r5, r5, r9
 8006c92:	6026      	str	r6, [r4, #0]
 8006c94:	60a5      	str	r5, [r4, #8]
 8006c96:	463e      	mov	r6, r7
 8006c98:	42be      	cmp	r6, r7
 8006c9a:	d900      	bls.n	8006c9e <__ssputs_r+0x72>
 8006c9c:	463e      	mov	r6, r7
 8006c9e:	6820      	ldr	r0, [r4, #0]
 8006ca0:	4632      	mov	r2, r6
 8006ca2:	4641      	mov	r1, r8
 8006ca4:	f000 faa6 	bl	80071f4 <memmove>
 8006ca8:	68a3      	ldr	r3, [r4, #8]
 8006caa:	1b9b      	subs	r3, r3, r6
 8006cac:	60a3      	str	r3, [r4, #8]
 8006cae:	6823      	ldr	r3, [r4, #0]
 8006cb0:	4433      	add	r3, r6
 8006cb2:	6023      	str	r3, [r4, #0]
 8006cb4:	2000      	movs	r0, #0
 8006cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cba:	462a      	mov	r2, r5
 8006cbc:	f000 fac4 	bl	8007248 <_realloc_r>
 8006cc0:	4606      	mov	r6, r0
 8006cc2:	2800      	cmp	r0, #0
 8006cc4:	d1e0      	bne.n	8006c88 <__ssputs_r+0x5c>
 8006cc6:	6921      	ldr	r1, [r4, #16]
 8006cc8:	4650      	mov	r0, sl
 8006cca:	f7ff feb7 	bl	8006a3c <_free_r>
 8006cce:	230c      	movs	r3, #12
 8006cd0:	f8ca 3000 	str.w	r3, [sl]
 8006cd4:	89a3      	ldrh	r3, [r4, #12]
 8006cd6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006cda:	81a3      	strh	r3, [r4, #12]
 8006cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8006ce0:	e7e9      	b.n	8006cb6 <__ssputs_r+0x8a>
	...

08006ce4 <_svfiprintf_r>:
 8006ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ce8:	4698      	mov	r8, r3
 8006cea:	898b      	ldrh	r3, [r1, #12]
 8006cec:	061b      	lsls	r3, r3, #24
 8006cee:	b09d      	sub	sp, #116	@ 0x74
 8006cf0:	4607      	mov	r7, r0
 8006cf2:	460d      	mov	r5, r1
 8006cf4:	4614      	mov	r4, r2
 8006cf6:	d510      	bpl.n	8006d1a <_svfiprintf_r+0x36>
 8006cf8:	690b      	ldr	r3, [r1, #16]
 8006cfa:	b973      	cbnz	r3, 8006d1a <_svfiprintf_r+0x36>
 8006cfc:	2140      	movs	r1, #64	@ 0x40
 8006cfe:	f7ff ff09 	bl	8006b14 <_malloc_r>
 8006d02:	6028      	str	r0, [r5, #0]
 8006d04:	6128      	str	r0, [r5, #16]
 8006d06:	b930      	cbnz	r0, 8006d16 <_svfiprintf_r+0x32>
 8006d08:	230c      	movs	r3, #12
 8006d0a:	603b      	str	r3, [r7, #0]
 8006d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8006d10:	b01d      	add	sp, #116	@ 0x74
 8006d12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d16:	2340      	movs	r3, #64	@ 0x40
 8006d18:	616b      	str	r3, [r5, #20]
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d1e:	2320      	movs	r3, #32
 8006d20:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006d24:	f8cd 800c 	str.w	r8, [sp, #12]
 8006d28:	2330      	movs	r3, #48	@ 0x30
 8006d2a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006ec8 <_svfiprintf_r+0x1e4>
 8006d2e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006d32:	f04f 0901 	mov.w	r9, #1
 8006d36:	4623      	mov	r3, r4
 8006d38:	469a      	mov	sl, r3
 8006d3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d3e:	b10a      	cbz	r2, 8006d44 <_svfiprintf_r+0x60>
 8006d40:	2a25      	cmp	r2, #37	@ 0x25
 8006d42:	d1f9      	bne.n	8006d38 <_svfiprintf_r+0x54>
 8006d44:	ebba 0b04 	subs.w	fp, sl, r4
 8006d48:	d00b      	beq.n	8006d62 <_svfiprintf_r+0x7e>
 8006d4a:	465b      	mov	r3, fp
 8006d4c:	4622      	mov	r2, r4
 8006d4e:	4629      	mov	r1, r5
 8006d50:	4638      	mov	r0, r7
 8006d52:	f7ff ff6b 	bl	8006c2c <__ssputs_r>
 8006d56:	3001      	adds	r0, #1
 8006d58:	f000 80a7 	beq.w	8006eaa <_svfiprintf_r+0x1c6>
 8006d5c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006d5e:	445a      	add	r2, fp
 8006d60:	9209      	str	r2, [sp, #36]	@ 0x24
 8006d62:	f89a 3000 	ldrb.w	r3, [sl]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	f000 809f 	beq.w	8006eaa <_svfiprintf_r+0x1c6>
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	f04f 32ff 	mov.w	r2, #4294967295
 8006d72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006d76:	f10a 0a01 	add.w	sl, sl, #1
 8006d7a:	9304      	str	r3, [sp, #16]
 8006d7c:	9307      	str	r3, [sp, #28]
 8006d7e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006d82:	931a      	str	r3, [sp, #104]	@ 0x68
 8006d84:	4654      	mov	r4, sl
 8006d86:	2205      	movs	r2, #5
 8006d88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d8c:	484e      	ldr	r0, [pc, #312]	@ (8006ec8 <_svfiprintf_r+0x1e4>)
 8006d8e:	f7f9 fa6f 	bl	8000270 <memchr>
 8006d92:	9a04      	ldr	r2, [sp, #16]
 8006d94:	b9d8      	cbnz	r0, 8006dce <_svfiprintf_r+0xea>
 8006d96:	06d0      	lsls	r0, r2, #27
 8006d98:	bf44      	itt	mi
 8006d9a:	2320      	movmi	r3, #32
 8006d9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006da0:	0711      	lsls	r1, r2, #28
 8006da2:	bf44      	itt	mi
 8006da4:	232b      	movmi	r3, #43	@ 0x2b
 8006da6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006daa:	f89a 3000 	ldrb.w	r3, [sl]
 8006dae:	2b2a      	cmp	r3, #42	@ 0x2a
 8006db0:	d015      	beq.n	8006dde <_svfiprintf_r+0xfa>
 8006db2:	9a07      	ldr	r2, [sp, #28]
 8006db4:	4654      	mov	r4, sl
 8006db6:	2000      	movs	r0, #0
 8006db8:	f04f 0c0a 	mov.w	ip, #10
 8006dbc:	4621      	mov	r1, r4
 8006dbe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006dc2:	3b30      	subs	r3, #48	@ 0x30
 8006dc4:	2b09      	cmp	r3, #9
 8006dc6:	d94b      	bls.n	8006e60 <_svfiprintf_r+0x17c>
 8006dc8:	b1b0      	cbz	r0, 8006df8 <_svfiprintf_r+0x114>
 8006dca:	9207      	str	r2, [sp, #28]
 8006dcc:	e014      	b.n	8006df8 <_svfiprintf_r+0x114>
 8006dce:	eba0 0308 	sub.w	r3, r0, r8
 8006dd2:	fa09 f303 	lsl.w	r3, r9, r3
 8006dd6:	4313      	orrs	r3, r2
 8006dd8:	9304      	str	r3, [sp, #16]
 8006dda:	46a2      	mov	sl, r4
 8006ddc:	e7d2      	b.n	8006d84 <_svfiprintf_r+0xa0>
 8006dde:	9b03      	ldr	r3, [sp, #12]
 8006de0:	1d19      	adds	r1, r3, #4
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	9103      	str	r1, [sp, #12]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	bfbb      	ittet	lt
 8006dea:	425b      	neglt	r3, r3
 8006dec:	f042 0202 	orrlt.w	r2, r2, #2
 8006df0:	9307      	strge	r3, [sp, #28]
 8006df2:	9307      	strlt	r3, [sp, #28]
 8006df4:	bfb8      	it	lt
 8006df6:	9204      	strlt	r2, [sp, #16]
 8006df8:	7823      	ldrb	r3, [r4, #0]
 8006dfa:	2b2e      	cmp	r3, #46	@ 0x2e
 8006dfc:	d10a      	bne.n	8006e14 <_svfiprintf_r+0x130>
 8006dfe:	7863      	ldrb	r3, [r4, #1]
 8006e00:	2b2a      	cmp	r3, #42	@ 0x2a
 8006e02:	d132      	bne.n	8006e6a <_svfiprintf_r+0x186>
 8006e04:	9b03      	ldr	r3, [sp, #12]
 8006e06:	1d1a      	adds	r2, r3, #4
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	9203      	str	r2, [sp, #12]
 8006e0c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006e10:	3402      	adds	r4, #2
 8006e12:	9305      	str	r3, [sp, #20]
 8006e14:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006ed8 <_svfiprintf_r+0x1f4>
 8006e18:	7821      	ldrb	r1, [r4, #0]
 8006e1a:	2203      	movs	r2, #3
 8006e1c:	4650      	mov	r0, sl
 8006e1e:	f7f9 fa27 	bl	8000270 <memchr>
 8006e22:	b138      	cbz	r0, 8006e34 <_svfiprintf_r+0x150>
 8006e24:	9b04      	ldr	r3, [sp, #16]
 8006e26:	eba0 000a 	sub.w	r0, r0, sl
 8006e2a:	2240      	movs	r2, #64	@ 0x40
 8006e2c:	4082      	lsls	r2, r0
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	3401      	adds	r4, #1
 8006e32:	9304      	str	r3, [sp, #16]
 8006e34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e38:	4824      	ldr	r0, [pc, #144]	@ (8006ecc <_svfiprintf_r+0x1e8>)
 8006e3a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006e3e:	2206      	movs	r2, #6
 8006e40:	f7f9 fa16 	bl	8000270 <memchr>
 8006e44:	2800      	cmp	r0, #0
 8006e46:	d036      	beq.n	8006eb6 <_svfiprintf_r+0x1d2>
 8006e48:	4b21      	ldr	r3, [pc, #132]	@ (8006ed0 <_svfiprintf_r+0x1ec>)
 8006e4a:	bb1b      	cbnz	r3, 8006e94 <_svfiprintf_r+0x1b0>
 8006e4c:	9b03      	ldr	r3, [sp, #12]
 8006e4e:	3307      	adds	r3, #7
 8006e50:	f023 0307 	bic.w	r3, r3, #7
 8006e54:	3308      	adds	r3, #8
 8006e56:	9303      	str	r3, [sp, #12]
 8006e58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e5a:	4433      	add	r3, r6
 8006e5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e5e:	e76a      	b.n	8006d36 <_svfiprintf_r+0x52>
 8006e60:	fb0c 3202 	mla	r2, ip, r2, r3
 8006e64:	460c      	mov	r4, r1
 8006e66:	2001      	movs	r0, #1
 8006e68:	e7a8      	b.n	8006dbc <_svfiprintf_r+0xd8>
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	3401      	adds	r4, #1
 8006e6e:	9305      	str	r3, [sp, #20]
 8006e70:	4619      	mov	r1, r3
 8006e72:	f04f 0c0a 	mov.w	ip, #10
 8006e76:	4620      	mov	r0, r4
 8006e78:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006e7c:	3a30      	subs	r2, #48	@ 0x30
 8006e7e:	2a09      	cmp	r2, #9
 8006e80:	d903      	bls.n	8006e8a <_svfiprintf_r+0x1a6>
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d0c6      	beq.n	8006e14 <_svfiprintf_r+0x130>
 8006e86:	9105      	str	r1, [sp, #20]
 8006e88:	e7c4      	b.n	8006e14 <_svfiprintf_r+0x130>
 8006e8a:	fb0c 2101 	mla	r1, ip, r1, r2
 8006e8e:	4604      	mov	r4, r0
 8006e90:	2301      	movs	r3, #1
 8006e92:	e7f0      	b.n	8006e76 <_svfiprintf_r+0x192>
 8006e94:	ab03      	add	r3, sp, #12
 8006e96:	9300      	str	r3, [sp, #0]
 8006e98:	462a      	mov	r2, r5
 8006e9a:	4b0e      	ldr	r3, [pc, #56]	@ (8006ed4 <_svfiprintf_r+0x1f0>)
 8006e9c:	a904      	add	r1, sp, #16
 8006e9e:	4638      	mov	r0, r7
 8006ea0:	f3af 8000 	nop.w
 8006ea4:	1c42      	adds	r2, r0, #1
 8006ea6:	4606      	mov	r6, r0
 8006ea8:	d1d6      	bne.n	8006e58 <_svfiprintf_r+0x174>
 8006eaa:	89ab      	ldrh	r3, [r5, #12]
 8006eac:	065b      	lsls	r3, r3, #25
 8006eae:	f53f af2d 	bmi.w	8006d0c <_svfiprintf_r+0x28>
 8006eb2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006eb4:	e72c      	b.n	8006d10 <_svfiprintf_r+0x2c>
 8006eb6:	ab03      	add	r3, sp, #12
 8006eb8:	9300      	str	r3, [sp, #0]
 8006eba:	462a      	mov	r2, r5
 8006ebc:	4b05      	ldr	r3, [pc, #20]	@ (8006ed4 <_svfiprintf_r+0x1f0>)
 8006ebe:	a904      	add	r1, sp, #16
 8006ec0:	4638      	mov	r0, r7
 8006ec2:	f000 f879 	bl	8006fb8 <_printf_i>
 8006ec6:	e7ed      	b.n	8006ea4 <_svfiprintf_r+0x1c0>
 8006ec8:	0800744c 	.word	0x0800744c
 8006ecc:	08007456 	.word	0x08007456
 8006ed0:	00000000 	.word	0x00000000
 8006ed4:	08006c2d 	.word	0x08006c2d
 8006ed8:	08007452 	.word	0x08007452

08006edc <_printf_common>:
 8006edc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ee0:	4616      	mov	r6, r2
 8006ee2:	4698      	mov	r8, r3
 8006ee4:	688a      	ldr	r2, [r1, #8]
 8006ee6:	690b      	ldr	r3, [r1, #16]
 8006ee8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006eec:	4293      	cmp	r3, r2
 8006eee:	bfb8      	it	lt
 8006ef0:	4613      	movlt	r3, r2
 8006ef2:	6033      	str	r3, [r6, #0]
 8006ef4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006ef8:	4607      	mov	r7, r0
 8006efa:	460c      	mov	r4, r1
 8006efc:	b10a      	cbz	r2, 8006f02 <_printf_common+0x26>
 8006efe:	3301      	adds	r3, #1
 8006f00:	6033      	str	r3, [r6, #0]
 8006f02:	6823      	ldr	r3, [r4, #0]
 8006f04:	0699      	lsls	r1, r3, #26
 8006f06:	bf42      	ittt	mi
 8006f08:	6833      	ldrmi	r3, [r6, #0]
 8006f0a:	3302      	addmi	r3, #2
 8006f0c:	6033      	strmi	r3, [r6, #0]
 8006f0e:	6825      	ldr	r5, [r4, #0]
 8006f10:	f015 0506 	ands.w	r5, r5, #6
 8006f14:	d106      	bne.n	8006f24 <_printf_common+0x48>
 8006f16:	f104 0a19 	add.w	sl, r4, #25
 8006f1a:	68e3      	ldr	r3, [r4, #12]
 8006f1c:	6832      	ldr	r2, [r6, #0]
 8006f1e:	1a9b      	subs	r3, r3, r2
 8006f20:	42ab      	cmp	r3, r5
 8006f22:	dc26      	bgt.n	8006f72 <_printf_common+0x96>
 8006f24:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006f28:	6822      	ldr	r2, [r4, #0]
 8006f2a:	3b00      	subs	r3, #0
 8006f2c:	bf18      	it	ne
 8006f2e:	2301      	movne	r3, #1
 8006f30:	0692      	lsls	r2, r2, #26
 8006f32:	d42b      	bmi.n	8006f8c <_printf_common+0xb0>
 8006f34:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006f38:	4641      	mov	r1, r8
 8006f3a:	4638      	mov	r0, r7
 8006f3c:	47c8      	blx	r9
 8006f3e:	3001      	adds	r0, #1
 8006f40:	d01e      	beq.n	8006f80 <_printf_common+0xa4>
 8006f42:	6823      	ldr	r3, [r4, #0]
 8006f44:	6922      	ldr	r2, [r4, #16]
 8006f46:	f003 0306 	and.w	r3, r3, #6
 8006f4a:	2b04      	cmp	r3, #4
 8006f4c:	bf02      	ittt	eq
 8006f4e:	68e5      	ldreq	r5, [r4, #12]
 8006f50:	6833      	ldreq	r3, [r6, #0]
 8006f52:	1aed      	subeq	r5, r5, r3
 8006f54:	68a3      	ldr	r3, [r4, #8]
 8006f56:	bf0c      	ite	eq
 8006f58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006f5c:	2500      	movne	r5, #0
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	bfc4      	itt	gt
 8006f62:	1a9b      	subgt	r3, r3, r2
 8006f64:	18ed      	addgt	r5, r5, r3
 8006f66:	2600      	movs	r6, #0
 8006f68:	341a      	adds	r4, #26
 8006f6a:	42b5      	cmp	r5, r6
 8006f6c:	d11a      	bne.n	8006fa4 <_printf_common+0xc8>
 8006f6e:	2000      	movs	r0, #0
 8006f70:	e008      	b.n	8006f84 <_printf_common+0xa8>
 8006f72:	2301      	movs	r3, #1
 8006f74:	4652      	mov	r2, sl
 8006f76:	4641      	mov	r1, r8
 8006f78:	4638      	mov	r0, r7
 8006f7a:	47c8      	blx	r9
 8006f7c:	3001      	adds	r0, #1
 8006f7e:	d103      	bne.n	8006f88 <_printf_common+0xac>
 8006f80:	f04f 30ff 	mov.w	r0, #4294967295
 8006f84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f88:	3501      	adds	r5, #1
 8006f8a:	e7c6      	b.n	8006f1a <_printf_common+0x3e>
 8006f8c:	18e1      	adds	r1, r4, r3
 8006f8e:	1c5a      	adds	r2, r3, #1
 8006f90:	2030      	movs	r0, #48	@ 0x30
 8006f92:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006f96:	4422      	add	r2, r4
 8006f98:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006f9c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006fa0:	3302      	adds	r3, #2
 8006fa2:	e7c7      	b.n	8006f34 <_printf_common+0x58>
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	4622      	mov	r2, r4
 8006fa8:	4641      	mov	r1, r8
 8006faa:	4638      	mov	r0, r7
 8006fac:	47c8      	blx	r9
 8006fae:	3001      	adds	r0, #1
 8006fb0:	d0e6      	beq.n	8006f80 <_printf_common+0xa4>
 8006fb2:	3601      	adds	r6, #1
 8006fb4:	e7d9      	b.n	8006f6a <_printf_common+0x8e>
	...

08006fb8 <_printf_i>:
 8006fb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006fbc:	7e0f      	ldrb	r7, [r1, #24]
 8006fbe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006fc0:	2f78      	cmp	r7, #120	@ 0x78
 8006fc2:	4691      	mov	r9, r2
 8006fc4:	4680      	mov	r8, r0
 8006fc6:	460c      	mov	r4, r1
 8006fc8:	469a      	mov	sl, r3
 8006fca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006fce:	d807      	bhi.n	8006fe0 <_printf_i+0x28>
 8006fd0:	2f62      	cmp	r7, #98	@ 0x62
 8006fd2:	d80a      	bhi.n	8006fea <_printf_i+0x32>
 8006fd4:	2f00      	cmp	r7, #0
 8006fd6:	f000 80d1 	beq.w	800717c <_printf_i+0x1c4>
 8006fda:	2f58      	cmp	r7, #88	@ 0x58
 8006fdc:	f000 80b8 	beq.w	8007150 <_printf_i+0x198>
 8006fe0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006fe4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006fe8:	e03a      	b.n	8007060 <_printf_i+0xa8>
 8006fea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006fee:	2b15      	cmp	r3, #21
 8006ff0:	d8f6      	bhi.n	8006fe0 <_printf_i+0x28>
 8006ff2:	a101      	add	r1, pc, #4	@ (adr r1, 8006ff8 <_printf_i+0x40>)
 8006ff4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006ff8:	08007051 	.word	0x08007051
 8006ffc:	08007065 	.word	0x08007065
 8007000:	08006fe1 	.word	0x08006fe1
 8007004:	08006fe1 	.word	0x08006fe1
 8007008:	08006fe1 	.word	0x08006fe1
 800700c:	08006fe1 	.word	0x08006fe1
 8007010:	08007065 	.word	0x08007065
 8007014:	08006fe1 	.word	0x08006fe1
 8007018:	08006fe1 	.word	0x08006fe1
 800701c:	08006fe1 	.word	0x08006fe1
 8007020:	08006fe1 	.word	0x08006fe1
 8007024:	08007163 	.word	0x08007163
 8007028:	0800708f 	.word	0x0800708f
 800702c:	0800711d 	.word	0x0800711d
 8007030:	08006fe1 	.word	0x08006fe1
 8007034:	08006fe1 	.word	0x08006fe1
 8007038:	08007185 	.word	0x08007185
 800703c:	08006fe1 	.word	0x08006fe1
 8007040:	0800708f 	.word	0x0800708f
 8007044:	08006fe1 	.word	0x08006fe1
 8007048:	08006fe1 	.word	0x08006fe1
 800704c:	08007125 	.word	0x08007125
 8007050:	6833      	ldr	r3, [r6, #0]
 8007052:	1d1a      	adds	r2, r3, #4
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	6032      	str	r2, [r6, #0]
 8007058:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800705c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007060:	2301      	movs	r3, #1
 8007062:	e09c      	b.n	800719e <_printf_i+0x1e6>
 8007064:	6833      	ldr	r3, [r6, #0]
 8007066:	6820      	ldr	r0, [r4, #0]
 8007068:	1d19      	adds	r1, r3, #4
 800706a:	6031      	str	r1, [r6, #0]
 800706c:	0606      	lsls	r6, r0, #24
 800706e:	d501      	bpl.n	8007074 <_printf_i+0xbc>
 8007070:	681d      	ldr	r5, [r3, #0]
 8007072:	e003      	b.n	800707c <_printf_i+0xc4>
 8007074:	0645      	lsls	r5, r0, #25
 8007076:	d5fb      	bpl.n	8007070 <_printf_i+0xb8>
 8007078:	f9b3 5000 	ldrsh.w	r5, [r3]
 800707c:	2d00      	cmp	r5, #0
 800707e:	da03      	bge.n	8007088 <_printf_i+0xd0>
 8007080:	232d      	movs	r3, #45	@ 0x2d
 8007082:	426d      	negs	r5, r5
 8007084:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007088:	4858      	ldr	r0, [pc, #352]	@ (80071ec <_printf_i+0x234>)
 800708a:	230a      	movs	r3, #10
 800708c:	e011      	b.n	80070b2 <_printf_i+0xfa>
 800708e:	6821      	ldr	r1, [r4, #0]
 8007090:	6833      	ldr	r3, [r6, #0]
 8007092:	0608      	lsls	r0, r1, #24
 8007094:	f853 5b04 	ldr.w	r5, [r3], #4
 8007098:	d402      	bmi.n	80070a0 <_printf_i+0xe8>
 800709a:	0649      	lsls	r1, r1, #25
 800709c:	bf48      	it	mi
 800709e:	b2ad      	uxthmi	r5, r5
 80070a0:	2f6f      	cmp	r7, #111	@ 0x6f
 80070a2:	4852      	ldr	r0, [pc, #328]	@ (80071ec <_printf_i+0x234>)
 80070a4:	6033      	str	r3, [r6, #0]
 80070a6:	bf14      	ite	ne
 80070a8:	230a      	movne	r3, #10
 80070aa:	2308      	moveq	r3, #8
 80070ac:	2100      	movs	r1, #0
 80070ae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80070b2:	6866      	ldr	r6, [r4, #4]
 80070b4:	60a6      	str	r6, [r4, #8]
 80070b6:	2e00      	cmp	r6, #0
 80070b8:	db05      	blt.n	80070c6 <_printf_i+0x10e>
 80070ba:	6821      	ldr	r1, [r4, #0]
 80070bc:	432e      	orrs	r6, r5
 80070be:	f021 0104 	bic.w	r1, r1, #4
 80070c2:	6021      	str	r1, [r4, #0]
 80070c4:	d04b      	beq.n	800715e <_printf_i+0x1a6>
 80070c6:	4616      	mov	r6, r2
 80070c8:	fbb5 f1f3 	udiv	r1, r5, r3
 80070cc:	fb03 5711 	mls	r7, r3, r1, r5
 80070d0:	5dc7      	ldrb	r7, [r0, r7]
 80070d2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80070d6:	462f      	mov	r7, r5
 80070d8:	42bb      	cmp	r3, r7
 80070da:	460d      	mov	r5, r1
 80070dc:	d9f4      	bls.n	80070c8 <_printf_i+0x110>
 80070de:	2b08      	cmp	r3, #8
 80070e0:	d10b      	bne.n	80070fa <_printf_i+0x142>
 80070e2:	6823      	ldr	r3, [r4, #0]
 80070e4:	07df      	lsls	r7, r3, #31
 80070e6:	d508      	bpl.n	80070fa <_printf_i+0x142>
 80070e8:	6923      	ldr	r3, [r4, #16]
 80070ea:	6861      	ldr	r1, [r4, #4]
 80070ec:	4299      	cmp	r1, r3
 80070ee:	bfde      	ittt	le
 80070f0:	2330      	movle	r3, #48	@ 0x30
 80070f2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80070f6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80070fa:	1b92      	subs	r2, r2, r6
 80070fc:	6122      	str	r2, [r4, #16]
 80070fe:	f8cd a000 	str.w	sl, [sp]
 8007102:	464b      	mov	r3, r9
 8007104:	aa03      	add	r2, sp, #12
 8007106:	4621      	mov	r1, r4
 8007108:	4640      	mov	r0, r8
 800710a:	f7ff fee7 	bl	8006edc <_printf_common>
 800710e:	3001      	adds	r0, #1
 8007110:	d14a      	bne.n	80071a8 <_printf_i+0x1f0>
 8007112:	f04f 30ff 	mov.w	r0, #4294967295
 8007116:	b004      	add	sp, #16
 8007118:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800711c:	6823      	ldr	r3, [r4, #0]
 800711e:	f043 0320 	orr.w	r3, r3, #32
 8007122:	6023      	str	r3, [r4, #0]
 8007124:	4832      	ldr	r0, [pc, #200]	@ (80071f0 <_printf_i+0x238>)
 8007126:	2778      	movs	r7, #120	@ 0x78
 8007128:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800712c:	6823      	ldr	r3, [r4, #0]
 800712e:	6831      	ldr	r1, [r6, #0]
 8007130:	061f      	lsls	r7, r3, #24
 8007132:	f851 5b04 	ldr.w	r5, [r1], #4
 8007136:	d402      	bmi.n	800713e <_printf_i+0x186>
 8007138:	065f      	lsls	r7, r3, #25
 800713a:	bf48      	it	mi
 800713c:	b2ad      	uxthmi	r5, r5
 800713e:	6031      	str	r1, [r6, #0]
 8007140:	07d9      	lsls	r1, r3, #31
 8007142:	bf44      	itt	mi
 8007144:	f043 0320 	orrmi.w	r3, r3, #32
 8007148:	6023      	strmi	r3, [r4, #0]
 800714a:	b11d      	cbz	r5, 8007154 <_printf_i+0x19c>
 800714c:	2310      	movs	r3, #16
 800714e:	e7ad      	b.n	80070ac <_printf_i+0xf4>
 8007150:	4826      	ldr	r0, [pc, #152]	@ (80071ec <_printf_i+0x234>)
 8007152:	e7e9      	b.n	8007128 <_printf_i+0x170>
 8007154:	6823      	ldr	r3, [r4, #0]
 8007156:	f023 0320 	bic.w	r3, r3, #32
 800715a:	6023      	str	r3, [r4, #0]
 800715c:	e7f6      	b.n	800714c <_printf_i+0x194>
 800715e:	4616      	mov	r6, r2
 8007160:	e7bd      	b.n	80070de <_printf_i+0x126>
 8007162:	6833      	ldr	r3, [r6, #0]
 8007164:	6825      	ldr	r5, [r4, #0]
 8007166:	6961      	ldr	r1, [r4, #20]
 8007168:	1d18      	adds	r0, r3, #4
 800716a:	6030      	str	r0, [r6, #0]
 800716c:	062e      	lsls	r6, r5, #24
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	d501      	bpl.n	8007176 <_printf_i+0x1be>
 8007172:	6019      	str	r1, [r3, #0]
 8007174:	e002      	b.n	800717c <_printf_i+0x1c4>
 8007176:	0668      	lsls	r0, r5, #25
 8007178:	d5fb      	bpl.n	8007172 <_printf_i+0x1ba>
 800717a:	8019      	strh	r1, [r3, #0]
 800717c:	2300      	movs	r3, #0
 800717e:	6123      	str	r3, [r4, #16]
 8007180:	4616      	mov	r6, r2
 8007182:	e7bc      	b.n	80070fe <_printf_i+0x146>
 8007184:	6833      	ldr	r3, [r6, #0]
 8007186:	1d1a      	adds	r2, r3, #4
 8007188:	6032      	str	r2, [r6, #0]
 800718a:	681e      	ldr	r6, [r3, #0]
 800718c:	6862      	ldr	r2, [r4, #4]
 800718e:	2100      	movs	r1, #0
 8007190:	4630      	mov	r0, r6
 8007192:	f7f9 f86d 	bl	8000270 <memchr>
 8007196:	b108      	cbz	r0, 800719c <_printf_i+0x1e4>
 8007198:	1b80      	subs	r0, r0, r6
 800719a:	6060      	str	r0, [r4, #4]
 800719c:	6863      	ldr	r3, [r4, #4]
 800719e:	6123      	str	r3, [r4, #16]
 80071a0:	2300      	movs	r3, #0
 80071a2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80071a6:	e7aa      	b.n	80070fe <_printf_i+0x146>
 80071a8:	6923      	ldr	r3, [r4, #16]
 80071aa:	4632      	mov	r2, r6
 80071ac:	4649      	mov	r1, r9
 80071ae:	4640      	mov	r0, r8
 80071b0:	47d0      	blx	sl
 80071b2:	3001      	adds	r0, #1
 80071b4:	d0ad      	beq.n	8007112 <_printf_i+0x15a>
 80071b6:	6823      	ldr	r3, [r4, #0]
 80071b8:	079b      	lsls	r3, r3, #30
 80071ba:	d413      	bmi.n	80071e4 <_printf_i+0x22c>
 80071bc:	68e0      	ldr	r0, [r4, #12]
 80071be:	9b03      	ldr	r3, [sp, #12]
 80071c0:	4298      	cmp	r0, r3
 80071c2:	bfb8      	it	lt
 80071c4:	4618      	movlt	r0, r3
 80071c6:	e7a6      	b.n	8007116 <_printf_i+0x15e>
 80071c8:	2301      	movs	r3, #1
 80071ca:	4632      	mov	r2, r6
 80071cc:	4649      	mov	r1, r9
 80071ce:	4640      	mov	r0, r8
 80071d0:	47d0      	blx	sl
 80071d2:	3001      	adds	r0, #1
 80071d4:	d09d      	beq.n	8007112 <_printf_i+0x15a>
 80071d6:	3501      	adds	r5, #1
 80071d8:	68e3      	ldr	r3, [r4, #12]
 80071da:	9903      	ldr	r1, [sp, #12]
 80071dc:	1a5b      	subs	r3, r3, r1
 80071de:	42ab      	cmp	r3, r5
 80071e0:	dcf2      	bgt.n	80071c8 <_printf_i+0x210>
 80071e2:	e7eb      	b.n	80071bc <_printf_i+0x204>
 80071e4:	2500      	movs	r5, #0
 80071e6:	f104 0619 	add.w	r6, r4, #25
 80071ea:	e7f5      	b.n	80071d8 <_printf_i+0x220>
 80071ec:	0800745d 	.word	0x0800745d
 80071f0:	0800746e 	.word	0x0800746e

080071f4 <memmove>:
 80071f4:	4288      	cmp	r0, r1
 80071f6:	b510      	push	{r4, lr}
 80071f8:	eb01 0402 	add.w	r4, r1, r2
 80071fc:	d902      	bls.n	8007204 <memmove+0x10>
 80071fe:	4284      	cmp	r4, r0
 8007200:	4623      	mov	r3, r4
 8007202:	d807      	bhi.n	8007214 <memmove+0x20>
 8007204:	1e43      	subs	r3, r0, #1
 8007206:	42a1      	cmp	r1, r4
 8007208:	d008      	beq.n	800721c <memmove+0x28>
 800720a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800720e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007212:	e7f8      	b.n	8007206 <memmove+0x12>
 8007214:	4402      	add	r2, r0
 8007216:	4601      	mov	r1, r0
 8007218:	428a      	cmp	r2, r1
 800721a:	d100      	bne.n	800721e <memmove+0x2a>
 800721c:	bd10      	pop	{r4, pc}
 800721e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007222:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007226:	e7f7      	b.n	8007218 <memmove+0x24>

08007228 <_sbrk_r>:
 8007228:	b538      	push	{r3, r4, r5, lr}
 800722a:	4d06      	ldr	r5, [pc, #24]	@ (8007244 <_sbrk_r+0x1c>)
 800722c:	2300      	movs	r3, #0
 800722e:	4604      	mov	r4, r0
 8007230:	4608      	mov	r0, r1
 8007232:	602b      	str	r3, [r5, #0]
 8007234:	f7f9 fc04 	bl	8000a40 <_sbrk>
 8007238:	1c43      	adds	r3, r0, #1
 800723a:	d102      	bne.n	8007242 <_sbrk_r+0x1a>
 800723c:	682b      	ldr	r3, [r5, #0]
 800723e:	b103      	cbz	r3, 8007242 <_sbrk_r+0x1a>
 8007240:	6023      	str	r3, [r4, #0]
 8007242:	bd38      	pop	{r3, r4, r5, pc}
 8007244:	20006268 	.word	0x20006268

08007248 <_realloc_r>:
 8007248:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800724c:	4607      	mov	r7, r0
 800724e:	4614      	mov	r4, r2
 8007250:	460d      	mov	r5, r1
 8007252:	b921      	cbnz	r1, 800725e <_realloc_r+0x16>
 8007254:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007258:	4611      	mov	r1, r2
 800725a:	f7ff bc5b 	b.w	8006b14 <_malloc_r>
 800725e:	b92a      	cbnz	r2, 800726c <_realloc_r+0x24>
 8007260:	f7ff fbec 	bl	8006a3c <_free_r>
 8007264:	4625      	mov	r5, r4
 8007266:	4628      	mov	r0, r5
 8007268:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800726c:	f000 f81a 	bl	80072a4 <_malloc_usable_size_r>
 8007270:	4284      	cmp	r4, r0
 8007272:	4606      	mov	r6, r0
 8007274:	d802      	bhi.n	800727c <_realloc_r+0x34>
 8007276:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800727a:	d8f4      	bhi.n	8007266 <_realloc_r+0x1e>
 800727c:	4621      	mov	r1, r4
 800727e:	4638      	mov	r0, r7
 8007280:	f7ff fc48 	bl	8006b14 <_malloc_r>
 8007284:	4680      	mov	r8, r0
 8007286:	b908      	cbnz	r0, 800728c <_realloc_r+0x44>
 8007288:	4645      	mov	r5, r8
 800728a:	e7ec      	b.n	8007266 <_realloc_r+0x1e>
 800728c:	42b4      	cmp	r4, r6
 800728e:	4622      	mov	r2, r4
 8007290:	4629      	mov	r1, r5
 8007292:	bf28      	it	cs
 8007294:	4632      	movcs	r2, r6
 8007296:	f7ff fbc3 	bl	8006a20 <memcpy>
 800729a:	4629      	mov	r1, r5
 800729c:	4638      	mov	r0, r7
 800729e:	f7ff fbcd 	bl	8006a3c <_free_r>
 80072a2:	e7f1      	b.n	8007288 <_realloc_r+0x40>

080072a4 <_malloc_usable_size_r>:
 80072a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80072a8:	1f18      	subs	r0, r3, #4
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	bfbc      	itt	lt
 80072ae:	580b      	ldrlt	r3, [r1, r0]
 80072b0:	18c0      	addlt	r0, r0, r3
 80072b2:	4770      	bx	lr

080072b4 <_init>:
 80072b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072b6:	bf00      	nop
 80072b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072ba:	bc08      	pop	{r3}
 80072bc:	469e      	mov	lr, r3
 80072be:	4770      	bx	lr

080072c0 <_fini>:
 80072c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072c2:	bf00      	nop
 80072c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072c6:	bc08      	pop	{r3}
 80072c8:	469e      	mov	lr, r3
 80072ca:	4770      	bx	lr
