
TaskCreat_F407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005400  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08005590  08005590  00006590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005630  08005630  0000706c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005630  08005630  00006630  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005638  08005638  0000706c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005638  08005638  00006638  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800563c  0800563c  0000663c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08005640  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000706c  2**0
                  CONTENTS
 10 .bss          00004ba4  2000006c  2000006c  0000706c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004c10  20004c10  0000706c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000706c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014790  00000000  00000000  0000709c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003007  00000000  00000000  0001b82c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001268  00000000  00000000  0001e838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e1f  00000000  00000000  0001faa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003f3e  00000000  00000000  000208bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013b60  00000000  00000000  000247fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d52d3  00000000  00000000  0003835d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010d630  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005324  00000000  00000000  0010d674  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000060  00000000  00000000  00112998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005578 	.word	0x08005578

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	08005578 	.word	0x08005578

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b988 	b.w	80004f8 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	468e      	mov	lr, r1
 8000208:	4604      	mov	r4, r0
 800020a:	4688      	mov	r8, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14a      	bne.n	80002a6 <__udivmoddi4+0xa6>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d962      	bls.n	80002dc <__udivmoddi4+0xdc>
 8000216:	fab2 f682 	clz	r6, r2
 800021a:	b14e      	cbz	r6, 8000230 <__udivmoddi4+0x30>
 800021c:	f1c6 0320 	rsb	r3, r6, #32
 8000220:	fa01 f806 	lsl.w	r8, r1, r6
 8000224:	fa20 f303 	lsr.w	r3, r0, r3
 8000228:	40b7      	lsls	r7, r6
 800022a:	ea43 0808 	orr.w	r8, r3, r8
 800022e:	40b4      	lsls	r4, r6
 8000230:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000234:	fa1f fc87 	uxth.w	ip, r7
 8000238:	fbb8 f1fe 	udiv	r1, r8, lr
 800023c:	0c23      	lsrs	r3, r4, #16
 800023e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000242:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000246:	fb01 f20c 	mul.w	r2, r1, ip
 800024a:	429a      	cmp	r2, r3
 800024c:	d909      	bls.n	8000262 <__udivmoddi4+0x62>
 800024e:	18fb      	adds	r3, r7, r3
 8000250:	f101 30ff 	add.w	r0, r1, #4294967295
 8000254:	f080 80ea 	bcs.w	800042c <__udivmoddi4+0x22c>
 8000258:	429a      	cmp	r2, r3
 800025a:	f240 80e7 	bls.w	800042c <__udivmoddi4+0x22c>
 800025e:	3902      	subs	r1, #2
 8000260:	443b      	add	r3, r7
 8000262:	1a9a      	subs	r2, r3, r2
 8000264:	b2a3      	uxth	r3, r4
 8000266:	fbb2 f0fe 	udiv	r0, r2, lr
 800026a:	fb0e 2210 	mls	r2, lr, r0, r2
 800026e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000272:	fb00 fc0c 	mul.w	ip, r0, ip
 8000276:	459c      	cmp	ip, r3
 8000278:	d909      	bls.n	800028e <__udivmoddi4+0x8e>
 800027a:	18fb      	adds	r3, r7, r3
 800027c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000280:	f080 80d6 	bcs.w	8000430 <__udivmoddi4+0x230>
 8000284:	459c      	cmp	ip, r3
 8000286:	f240 80d3 	bls.w	8000430 <__udivmoddi4+0x230>
 800028a:	443b      	add	r3, r7
 800028c:	3802      	subs	r0, #2
 800028e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000292:	eba3 030c 	sub.w	r3, r3, ip
 8000296:	2100      	movs	r1, #0
 8000298:	b11d      	cbz	r5, 80002a2 <__udivmoddi4+0xa2>
 800029a:	40f3      	lsrs	r3, r6
 800029c:	2200      	movs	r2, #0
 800029e:	e9c5 3200 	strd	r3, r2, [r5]
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d905      	bls.n	80002b6 <__udivmoddi4+0xb6>
 80002aa:	b10d      	cbz	r5, 80002b0 <__udivmoddi4+0xb0>
 80002ac:	e9c5 0100 	strd	r0, r1, [r5]
 80002b0:	2100      	movs	r1, #0
 80002b2:	4608      	mov	r0, r1
 80002b4:	e7f5      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002b6:	fab3 f183 	clz	r1, r3
 80002ba:	2900      	cmp	r1, #0
 80002bc:	d146      	bne.n	800034c <__udivmoddi4+0x14c>
 80002be:	4573      	cmp	r3, lr
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xc8>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 8105 	bhi.w	80004d2 <__udivmoddi4+0x2d2>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb6e 0203 	sbc.w	r2, lr, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4690      	mov	r8, r2
 80002d2:	2d00      	cmp	r5, #0
 80002d4:	d0e5      	beq.n	80002a2 <__udivmoddi4+0xa2>
 80002d6:	e9c5 4800 	strd	r4, r8, [r5]
 80002da:	e7e2      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002dc:	2a00      	cmp	r2, #0
 80002de:	f000 8090 	beq.w	8000402 <__udivmoddi4+0x202>
 80002e2:	fab2 f682 	clz	r6, r2
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	f040 80a4 	bne.w	8000434 <__udivmoddi4+0x234>
 80002ec:	1a8a      	subs	r2, r1, r2
 80002ee:	0c03      	lsrs	r3, r0, #16
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	b280      	uxth	r0, r0
 80002f6:	b2bc      	uxth	r4, r7
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb2 fcfe 	udiv	ip, r2, lr
 80002fe:	fb0e 221c 	mls	r2, lr, ip, r2
 8000302:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000306:	fb04 f20c 	mul.w	r2, r4, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d907      	bls.n	800031e <__udivmoddi4+0x11e>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000314:	d202      	bcs.n	800031c <__udivmoddi4+0x11c>
 8000316:	429a      	cmp	r2, r3
 8000318:	f200 80e0 	bhi.w	80004dc <__udivmoddi4+0x2dc>
 800031c:	46c4      	mov	ip, r8
 800031e:	1a9b      	subs	r3, r3, r2
 8000320:	fbb3 f2fe 	udiv	r2, r3, lr
 8000324:	fb0e 3312 	mls	r3, lr, r2, r3
 8000328:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800032c:	fb02 f404 	mul.w	r4, r2, r4
 8000330:	429c      	cmp	r4, r3
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x144>
 8000334:	18fb      	adds	r3, r7, r3
 8000336:	f102 30ff 	add.w	r0, r2, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x142>
 800033c:	429c      	cmp	r4, r3
 800033e:	f200 80ca 	bhi.w	80004d6 <__udivmoddi4+0x2d6>
 8000342:	4602      	mov	r2, r0
 8000344:	1b1b      	subs	r3, r3, r4
 8000346:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0x98>
 800034c:	f1c1 0620 	rsb	r6, r1, #32
 8000350:	408b      	lsls	r3, r1
 8000352:	fa22 f706 	lsr.w	r7, r2, r6
 8000356:	431f      	orrs	r7, r3
 8000358:	fa0e f401 	lsl.w	r4, lr, r1
 800035c:	fa20 f306 	lsr.w	r3, r0, r6
 8000360:	fa2e fe06 	lsr.w	lr, lr, r6
 8000364:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000368:	4323      	orrs	r3, r4
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	fa1f fc87 	uxth.w	ip, r7
 8000372:	fbbe f0f9 	udiv	r0, lr, r9
 8000376:	0c1c      	lsrs	r4, r3, #16
 8000378:	fb09 ee10 	mls	lr, r9, r0, lr
 800037c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000380:	fb00 fe0c 	mul.w	lr, r0, ip
 8000384:	45a6      	cmp	lr, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x1a0>
 800038c:	193c      	adds	r4, r7, r4
 800038e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000392:	f080 809c 	bcs.w	80004ce <__udivmoddi4+0x2ce>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f240 8099 	bls.w	80004ce <__udivmoddi4+0x2ce>
 800039c:	3802      	subs	r0, #2
 800039e:	443c      	add	r4, r7
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	fa1f fe83 	uxth.w	lr, r3
 80003a8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ac:	fb09 4413 	mls	r4, r9, r3, r4
 80003b0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003b4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b8:	45a4      	cmp	ip, r4
 80003ba:	d908      	bls.n	80003ce <__udivmoddi4+0x1ce>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f103 3eff 	add.w	lr, r3, #4294967295
 80003c2:	f080 8082 	bcs.w	80004ca <__udivmoddi4+0x2ca>
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d97f      	bls.n	80004ca <__udivmoddi4+0x2ca>
 80003ca:	3b02      	subs	r3, #2
 80003cc:	443c      	add	r4, r7
 80003ce:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	fba0 ec02 	umull	lr, ip, r0, r2
 80003da:	4564      	cmp	r4, ip
 80003dc:	4673      	mov	r3, lr
 80003de:	46e1      	mov	r9, ip
 80003e0:	d362      	bcc.n	80004a8 <__udivmoddi4+0x2a8>
 80003e2:	d05f      	beq.n	80004a4 <__udivmoddi4+0x2a4>
 80003e4:	b15d      	cbz	r5, 80003fe <__udivmoddi4+0x1fe>
 80003e6:	ebb8 0203 	subs.w	r2, r8, r3
 80003ea:	eb64 0409 	sbc.w	r4, r4, r9
 80003ee:	fa04 f606 	lsl.w	r6, r4, r6
 80003f2:	fa22 f301 	lsr.w	r3, r2, r1
 80003f6:	431e      	orrs	r6, r3
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	e9c5 6400 	strd	r6, r4, [r5]
 80003fe:	2100      	movs	r1, #0
 8000400:	e74f      	b.n	80002a2 <__udivmoddi4+0xa2>
 8000402:	fbb1 fcf2 	udiv	ip, r1, r2
 8000406:	0c01      	lsrs	r1, r0, #16
 8000408:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800040c:	b280      	uxth	r0, r0
 800040e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000412:	463b      	mov	r3, r7
 8000414:	4638      	mov	r0, r7
 8000416:	463c      	mov	r4, r7
 8000418:	46b8      	mov	r8, r7
 800041a:	46be      	mov	lr, r7
 800041c:	2620      	movs	r6, #32
 800041e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000422:	eba2 0208 	sub.w	r2, r2, r8
 8000426:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800042a:	e766      	b.n	80002fa <__udivmoddi4+0xfa>
 800042c:	4601      	mov	r1, r0
 800042e:	e718      	b.n	8000262 <__udivmoddi4+0x62>
 8000430:	4610      	mov	r0, r2
 8000432:	e72c      	b.n	800028e <__udivmoddi4+0x8e>
 8000434:	f1c6 0220 	rsb	r2, r6, #32
 8000438:	fa2e f302 	lsr.w	r3, lr, r2
 800043c:	40b7      	lsls	r7, r6
 800043e:	40b1      	lsls	r1, r6
 8000440:	fa20 f202 	lsr.w	r2, r0, r2
 8000444:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000448:	430a      	orrs	r2, r1
 800044a:	fbb3 f8fe 	udiv	r8, r3, lr
 800044e:	b2bc      	uxth	r4, r7
 8000450:	fb0e 3318 	mls	r3, lr, r8, r3
 8000454:	0c11      	lsrs	r1, r2, #16
 8000456:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045a:	fb08 f904 	mul.w	r9, r8, r4
 800045e:	40b0      	lsls	r0, r6
 8000460:	4589      	cmp	r9, r1
 8000462:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000466:	b280      	uxth	r0, r0
 8000468:	d93e      	bls.n	80004e8 <__udivmoddi4+0x2e8>
 800046a:	1879      	adds	r1, r7, r1
 800046c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000470:	d201      	bcs.n	8000476 <__udivmoddi4+0x276>
 8000472:	4589      	cmp	r9, r1
 8000474:	d81f      	bhi.n	80004b6 <__udivmoddi4+0x2b6>
 8000476:	eba1 0109 	sub.w	r1, r1, r9
 800047a:	fbb1 f9fe 	udiv	r9, r1, lr
 800047e:	fb09 f804 	mul.w	r8, r9, r4
 8000482:	fb0e 1119 	mls	r1, lr, r9, r1
 8000486:	b292      	uxth	r2, r2
 8000488:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800048c:	4542      	cmp	r2, r8
 800048e:	d229      	bcs.n	80004e4 <__udivmoddi4+0x2e4>
 8000490:	18ba      	adds	r2, r7, r2
 8000492:	f109 31ff 	add.w	r1, r9, #4294967295
 8000496:	d2c4      	bcs.n	8000422 <__udivmoddi4+0x222>
 8000498:	4542      	cmp	r2, r8
 800049a:	d2c2      	bcs.n	8000422 <__udivmoddi4+0x222>
 800049c:	f1a9 0102 	sub.w	r1, r9, #2
 80004a0:	443a      	add	r2, r7
 80004a2:	e7be      	b.n	8000422 <__udivmoddi4+0x222>
 80004a4:	45f0      	cmp	r8, lr
 80004a6:	d29d      	bcs.n	80003e4 <__udivmoddi4+0x1e4>
 80004a8:	ebbe 0302 	subs.w	r3, lr, r2
 80004ac:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b0:	3801      	subs	r0, #1
 80004b2:	46e1      	mov	r9, ip
 80004b4:	e796      	b.n	80003e4 <__udivmoddi4+0x1e4>
 80004b6:	eba7 0909 	sub.w	r9, r7, r9
 80004ba:	4449      	add	r1, r9
 80004bc:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c0:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c4:	fb09 f804 	mul.w	r8, r9, r4
 80004c8:	e7db      	b.n	8000482 <__udivmoddi4+0x282>
 80004ca:	4673      	mov	r3, lr
 80004cc:	e77f      	b.n	80003ce <__udivmoddi4+0x1ce>
 80004ce:	4650      	mov	r0, sl
 80004d0:	e766      	b.n	80003a0 <__udivmoddi4+0x1a0>
 80004d2:	4608      	mov	r0, r1
 80004d4:	e6fd      	b.n	80002d2 <__udivmoddi4+0xd2>
 80004d6:	443b      	add	r3, r7
 80004d8:	3a02      	subs	r2, #2
 80004da:	e733      	b.n	8000344 <__udivmoddi4+0x144>
 80004dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e0:	443b      	add	r3, r7
 80004e2:	e71c      	b.n	800031e <__udivmoddi4+0x11e>
 80004e4:	4649      	mov	r1, r9
 80004e6:	e79c      	b.n	8000422 <__udivmoddi4+0x222>
 80004e8:	eba1 0109 	sub.w	r1, r1, r9
 80004ec:	46c4      	mov	ip, r8
 80004ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f2:	fb09 f804 	mul.w	r8, r9, r4
 80004f6:	e7c4      	b.n	8000482 <__udivmoddi4+0x282>

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b088      	sub	sp, #32
 8000500:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
	TaskHandle_t task_1_handel=NULL;
 8000502:	2300      	movs	r3, #0
 8000504:	60bb      	str	r3, [r7, #8]
	TaskHandle_t task_2_handel=NULL;
 8000506:	2300      	movs	r3, #0
 8000508:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050a:	f000 fb3f 	bl	8000b8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050e:	f000 f859 	bl	80005c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000512:	f000 f8c1 	bl	8000698 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

	/* USER CODE BEGIN 2 */
	status=xTaskCreate(task_1_Handler, "Task_1", 200, "Hello world from task 1", 2, &task_1_handel);
 8000516:	f107 0308 	add.w	r3, r7, #8
 800051a:	9301      	str	r3, [sp, #4]
 800051c:	2302      	movs	r3, #2
 800051e:	9300      	str	r3, [sp, #0]
 8000520:	4b1f      	ldr	r3, [pc, #124]	@ (80005a0 <main+0xa4>)
 8000522:	22c8      	movs	r2, #200	@ 0xc8
 8000524:	491f      	ldr	r1, [pc, #124]	@ (80005a4 <main+0xa8>)
 8000526:	4820      	ldr	r0, [pc, #128]	@ (80005a8 <main+0xac>)
 8000528:	f002 fc9a 	bl	8002e60 <xTaskCreate>
 800052c:	6178      	str	r0, [r7, #20]
	configASSERT(status==pdPASS);//if task creat fail then code will hang here
 800052e:	697b      	ldr	r3, [r7, #20]
 8000530:	2b01      	cmp	r3, #1
 8000532:	d00b      	beq.n	800054c <main+0x50>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000534:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000538:	f383 8811 	msr	BASEPRI, r3
 800053c:	f3bf 8f6f 	isb	sy
 8000540:	f3bf 8f4f 	dsb	sy
 8000544:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000546:	bf00      	nop
 8000548:	bf00      	nop
 800054a:	e7fd      	b.n	8000548 <main+0x4c>

	status=xTaskCreate(task_2_Handler, "Task_2", 200, "Hello world from task 2", 2, &task_2_handel);
 800054c:	1d3b      	adds	r3, r7, #4
 800054e:	9301      	str	r3, [sp, #4]
 8000550:	2302      	movs	r3, #2
 8000552:	9300      	str	r3, [sp, #0]
 8000554:	4b15      	ldr	r3, [pc, #84]	@ (80005ac <main+0xb0>)
 8000556:	22c8      	movs	r2, #200	@ 0xc8
 8000558:	4915      	ldr	r1, [pc, #84]	@ (80005b0 <main+0xb4>)
 800055a:	4816      	ldr	r0, [pc, #88]	@ (80005b4 <main+0xb8>)
 800055c:	f002 fc80 	bl	8002e60 <xTaskCreate>
 8000560:	6178      	str	r0, [r7, #20]
	configASSERT(status==pdPASS);//if task creation fails, then the code will hang here
 8000562:	697b      	ldr	r3, [r7, #20]
 8000564:	2b01      	cmp	r3, #1
 8000566:	d00b      	beq.n	8000580 <main+0x84>
	__asm volatile
 8000568:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800056c:	f383 8811 	msr	BASEPRI, r3
 8000570:	f3bf 8f6f 	isb	sy
 8000574:	f3bf 8f4f 	dsb	sy
 8000578:	60fb      	str	r3, [r7, #12]
}
 800057a:	bf00      	nop
 800057c:	bf00      	nop
 800057e:	e7fd      	b.n	800057c <main+0x80>

	vTaskStartScheduler();//start the freeRTOS scheduler
 8000580:	f002 fe02 	bl	8003188 <vTaskStartScheduler>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000584:	f001 fd32 	bl	8001fec <osKernelInitialize>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000588:	4a0b      	ldr	r2, [pc, #44]	@ (80005b8 <main+0xbc>)
 800058a:	2100      	movs	r1, #0
 800058c:	480b      	ldr	r0, [pc, #44]	@ (80005bc <main+0xc0>)
 800058e:	f001 fd77 	bl	8002080 <osThreadNew>
 8000592:	4603      	mov	r3, r0
 8000594:	4a0a      	ldr	r2, [pc, #40]	@ (80005c0 <main+0xc4>)
 8000596:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000598:	f001 fd4c 	bl	8002034 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 800059c:	bf00      	nop
 800059e:	e7fd      	b.n	800059c <main+0xa0>
 80005a0:	0800559c 	.word	0x0800559c
 80005a4:	080055b4 	.word	0x080055b4
 80005a8:	08000781 	.word	0x08000781
 80005ac:	080055bc 	.word	0x080055bc
 80005b0:	080055d4 	.word	0x080055d4
 80005b4:	08000791 	.word	0x08000791
 80005b8:	080055f4 	.word	0x080055f4
 80005bc:	080007a1 	.word	0x080007a1
 80005c0:	20000088 	.word	0x20000088

080005c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b094      	sub	sp, #80	@ 0x50
 80005c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ca:	f107 0320 	add.w	r3, r7, #32
 80005ce:	2230      	movs	r2, #48	@ 0x30
 80005d0:	2100      	movs	r1, #0
 80005d2:	4618      	mov	r0, r3
 80005d4:	f004 fcb0 	bl	8004f38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d8:	f107 030c 	add.w	r3, r7, #12
 80005dc:	2200      	movs	r2, #0
 80005de:	601a      	str	r2, [r3, #0]
 80005e0:	605a      	str	r2, [r3, #4]
 80005e2:	609a      	str	r2, [r3, #8]
 80005e4:	60da      	str	r2, [r3, #12]
 80005e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e8:	2300      	movs	r3, #0
 80005ea:	60bb      	str	r3, [r7, #8]
 80005ec:	4b28      	ldr	r3, [pc, #160]	@ (8000690 <SystemClock_Config+0xcc>)
 80005ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005f0:	4a27      	ldr	r2, [pc, #156]	@ (8000690 <SystemClock_Config+0xcc>)
 80005f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005f6:	6413      	str	r3, [r2, #64]	@ 0x40
 80005f8:	4b25      	ldr	r3, [pc, #148]	@ (8000690 <SystemClock_Config+0xcc>)
 80005fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000600:	60bb      	str	r3, [r7, #8]
 8000602:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000604:	2300      	movs	r3, #0
 8000606:	607b      	str	r3, [r7, #4]
 8000608:	4b22      	ldr	r3, [pc, #136]	@ (8000694 <SystemClock_Config+0xd0>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4a21      	ldr	r2, [pc, #132]	@ (8000694 <SystemClock_Config+0xd0>)
 800060e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000612:	6013      	str	r3, [r2, #0]
 8000614:	4b1f      	ldr	r3, [pc, #124]	@ (8000694 <SystemClock_Config+0xd0>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800061c:	607b      	str	r3, [r7, #4]
 800061e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000620:	2302      	movs	r3, #2
 8000622:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000624:	2301      	movs	r3, #1
 8000626:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000628:	2310      	movs	r3, #16
 800062a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800062c:	2302      	movs	r3, #2
 800062e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000630:	2300      	movs	r3, #0
 8000632:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000634:	2308      	movs	r3, #8
 8000636:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000638:	2332      	movs	r3, #50	@ 0x32
 800063a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800063c:	2304      	movs	r3, #4
 800063e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000640:	2304      	movs	r3, #4
 8000642:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000644:	f107 0320 	add.w	r3, r7, #32
 8000648:	4618      	mov	r0, r3
 800064a:	f000 fd79 	bl	8001140 <HAL_RCC_OscConfig>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000654:	f000 f8be 	bl	80007d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000658:	230f      	movs	r3, #15
 800065a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800065c:	2302      	movs	r3, #2
 800065e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000660:	2300      	movs	r3, #0
 8000662:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000664:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000668:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800066a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800066e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000670:	f107 030c 	add.w	r3, r7, #12
 8000674:	2100      	movs	r1, #0
 8000676:	4618      	mov	r0, r3
 8000678:	f000 ffda 	bl	8001630 <HAL_RCC_ClockConfig>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000682:	f000 f8a7 	bl	80007d4 <Error_Handler>
  }
}
 8000686:	bf00      	nop
 8000688:	3750      	adds	r7, #80	@ 0x50
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	40023800 	.word	0x40023800
 8000694:	40007000 	.word	0x40007000

08000698 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b088      	sub	sp, #32
 800069c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800069e:	f107 030c 	add.w	r3, r7, #12
 80006a2:	2200      	movs	r2, #0
 80006a4:	601a      	str	r2, [r3, #0]
 80006a6:	605a      	str	r2, [r3, #4]
 80006a8:	609a      	str	r2, [r3, #8]
 80006aa:	60da      	str	r2, [r3, #12]
 80006ac:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ae:	2300      	movs	r3, #0
 80006b0:	60bb      	str	r3, [r7, #8]
 80006b2:	4b2f      	ldr	r3, [pc, #188]	@ (8000770 <MX_GPIO_Init+0xd8>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006b6:	4a2e      	ldr	r2, [pc, #184]	@ (8000770 <MX_GPIO_Init+0xd8>)
 80006b8:	f043 0301 	orr.w	r3, r3, #1
 80006bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80006be:	4b2c      	ldr	r3, [pc, #176]	@ (8000770 <MX_GPIO_Init+0xd8>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006c2:	f003 0301 	and.w	r3, r3, #1
 80006c6:	60bb      	str	r3, [r7, #8]
 80006c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ca:	2300      	movs	r3, #0
 80006cc:	607b      	str	r3, [r7, #4]
 80006ce:	4b28      	ldr	r3, [pc, #160]	@ (8000770 <MX_GPIO_Init+0xd8>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006d2:	4a27      	ldr	r2, [pc, #156]	@ (8000770 <MX_GPIO_Init+0xd8>)
 80006d4:	f043 0304 	orr.w	r3, r3, #4
 80006d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006da:	4b25      	ldr	r3, [pc, #148]	@ (8000770 <MX_GPIO_Init+0xd8>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006de:	f003 0304 	and.w	r3, r3, #4
 80006e2:	607b      	str	r3, [r7, #4]
 80006e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006e6:	2300      	movs	r3, #0
 80006e8:	603b      	str	r3, [r7, #0]
 80006ea:	4b21      	ldr	r3, [pc, #132]	@ (8000770 <MX_GPIO_Init+0xd8>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ee:	4a20      	ldr	r2, [pc, #128]	@ (8000770 <MX_GPIO_Init+0xd8>)
 80006f0:	f043 0302 	orr.w	r3, r3, #2
 80006f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006f6:	4b1e      	ldr	r3, [pc, #120]	@ (8000770 <MX_GPIO_Init+0xd8>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006fa:	f003 0302 	and.w	r3, r3, #2
 80006fe:	603b      	str	r3, [r7, #0]
 8000700:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(redLed_GPIO_Port, redLed_Pin, GPIO_PIN_RESET);
 8000702:	2200      	movs	r2, #0
 8000704:	2120      	movs	r1, #32
 8000706:	481b      	ldr	r0, [pc, #108]	@ (8000774 <MX_GPIO_Init+0xdc>)
 8000708:	f000 fd00 	bl	800110c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(blueLed_GPIO_Port, blueLed_Pin, GPIO_PIN_RESET);
 800070c:	2200      	movs	r2, #0
 800070e:	2104      	movs	r1, #4
 8000710:	4819      	ldr	r0, [pc, #100]	@ (8000778 <MX_GPIO_Init+0xe0>)
 8000712:	f000 fcfb 	bl	800110c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : switch_Pin */
  GPIO_InitStruct.Pin = switch_Pin;
 8000716:	2301      	movs	r3, #1
 8000718:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800071a:	2300      	movs	r3, #0
 800071c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071e:	2300      	movs	r3, #0
 8000720:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(switch_GPIO_Port, &GPIO_InitStruct);
 8000722:	f107 030c 	add.w	r3, r7, #12
 8000726:	4619      	mov	r1, r3
 8000728:	4814      	ldr	r0, [pc, #80]	@ (800077c <MX_GPIO_Init+0xe4>)
 800072a:	f000 fb53 	bl	8000dd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : redLed_Pin */
  GPIO_InitStruct.Pin = redLed_Pin;
 800072e:	2320      	movs	r3, #32
 8000730:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000732:	2301      	movs	r3, #1
 8000734:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000736:	2300      	movs	r3, #0
 8000738:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800073a:	2300      	movs	r3, #0
 800073c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(redLed_GPIO_Port, &GPIO_InitStruct);
 800073e:	f107 030c 	add.w	r3, r7, #12
 8000742:	4619      	mov	r1, r3
 8000744:	480b      	ldr	r0, [pc, #44]	@ (8000774 <MX_GPIO_Init+0xdc>)
 8000746:	f000 fb45 	bl	8000dd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : blueLed_Pin */
  GPIO_InitStruct.Pin = blueLed_Pin;
 800074a:	2304      	movs	r3, #4
 800074c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800074e:	2301      	movs	r3, #1
 8000750:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000752:	2300      	movs	r3, #0
 8000754:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000756:	2300      	movs	r3, #0
 8000758:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(blueLed_GPIO_Port, &GPIO_InitStruct);
 800075a:	f107 030c 	add.w	r3, r7, #12
 800075e:	4619      	mov	r1, r3
 8000760:	4805      	ldr	r0, [pc, #20]	@ (8000778 <MX_GPIO_Init+0xe0>)
 8000762:	f000 fb37 	bl	8000dd4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000766:	bf00      	nop
 8000768:	3720      	adds	r7, #32
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	40023800 	.word	0x40023800
 8000774:	40020800 	.word	0x40020800
 8000778:	40020400 	.word	0x40020400
 800077c:	40020000 	.word	0x40020000

08000780 <task_1_Handler>:

/* USER CODE BEGIN 4 */

static void task_1_Handler (void* arg){
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]

	while(1){

		printf("%s\n",(char*)arg);
 8000788:	6878      	ldr	r0, [r7, #4]
 800078a:	f004 faf5 	bl	8004d78 <puts>
 800078e:	e7fb      	b.n	8000788 <task_1_Handler+0x8>

08000790 <task_2_Handler>:

	}
}

static void task_2_Handler (void* arg){
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]

	while(1){

		printf("%s\n",(char*)arg);
 8000798:	6878      	ldr	r0, [r7, #4]
 800079a:	f004 faed 	bl	8004d78 <puts>
 800079e:	e7fb      	b.n	8000798 <task_2_Handler+0x8>

080007a0 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for(;;)
	{
		osDelay(1);
 80007a8:	2001      	movs	r0, #1
 80007aa:	f001 fcfb 	bl	80021a4 <osDelay>
 80007ae:	e7fb      	b.n	80007a8 <StartDefaultTask+0x8>

080007b0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4a04      	ldr	r2, [pc, #16]	@ (80007d0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007be:	4293      	cmp	r3, r2
 80007c0:	d101      	bne.n	80007c6 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80007c2:	f000 fa05 	bl	8000bd0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007c6:	bf00      	nop
 80007c8:	3708      	adds	r7, #8
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	40001000 	.word	0x40001000

080007d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007d8:	b672      	cpsid	i
}
 80007da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80007dc:	bf00      	nop
 80007de:	e7fd      	b.n	80007dc <Error_Handler+0x8>

080007e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	607b      	str	r3, [r7, #4]
 80007ea:	4b12      	ldr	r3, [pc, #72]	@ (8000834 <HAL_MspInit+0x54>)
 80007ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007ee:	4a11      	ldr	r2, [pc, #68]	@ (8000834 <HAL_MspInit+0x54>)
 80007f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80007f6:	4b0f      	ldr	r3, [pc, #60]	@ (8000834 <HAL_MspInit+0x54>)
 80007f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007fe:	607b      	str	r3, [r7, #4]
 8000800:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	603b      	str	r3, [r7, #0]
 8000806:	4b0b      	ldr	r3, [pc, #44]	@ (8000834 <HAL_MspInit+0x54>)
 8000808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800080a:	4a0a      	ldr	r2, [pc, #40]	@ (8000834 <HAL_MspInit+0x54>)
 800080c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000810:	6413      	str	r3, [r2, #64]	@ 0x40
 8000812:	4b08      	ldr	r3, [pc, #32]	@ (8000834 <HAL_MspInit+0x54>)
 8000814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000816:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800081a:	603b      	str	r3, [r7, #0]
 800081c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800081e:	2200      	movs	r2, #0
 8000820:	210f      	movs	r1, #15
 8000822:	f06f 0001 	mvn.w	r0, #1
 8000826:	f000 faab 	bl	8000d80 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800082a:	bf00      	nop
 800082c:	3708      	adds	r7, #8
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	40023800 	.word	0x40023800

08000838 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b08e      	sub	sp, #56	@ 0x38
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000840:	2300      	movs	r3, #0
 8000842:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000844:	2300      	movs	r3, #0
 8000846:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000848:	2300      	movs	r3, #0
 800084a:	60fb      	str	r3, [r7, #12]
 800084c:	4b33      	ldr	r3, [pc, #204]	@ (800091c <HAL_InitTick+0xe4>)
 800084e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000850:	4a32      	ldr	r2, [pc, #200]	@ (800091c <HAL_InitTick+0xe4>)
 8000852:	f043 0310 	orr.w	r3, r3, #16
 8000856:	6413      	str	r3, [r2, #64]	@ 0x40
 8000858:	4b30      	ldr	r3, [pc, #192]	@ (800091c <HAL_InitTick+0xe4>)
 800085a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800085c:	f003 0310 	and.w	r3, r3, #16
 8000860:	60fb      	str	r3, [r7, #12]
 8000862:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000864:	f107 0210 	add.w	r2, r7, #16
 8000868:	f107 0314 	add.w	r3, r7, #20
 800086c:	4611      	mov	r1, r2
 800086e:	4618      	mov	r0, r3
 8000870:	f001 f8aa 	bl	80019c8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000874:	6a3b      	ldr	r3, [r7, #32]
 8000876:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000878:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800087a:	2b00      	cmp	r3, #0
 800087c:	d103      	bne.n	8000886 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800087e:	f001 f88f 	bl	80019a0 <HAL_RCC_GetPCLK1Freq>
 8000882:	6378      	str	r0, [r7, #52]	@ 0x34
 8000884:	e004      	b.n	8000890 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000886:	f001 f88b 	bl	80019a0 <HAL_RCC_GetPCLK1Freq>
 800088a:	4603      	mov	r3, r0
 800088c:	005b      	lsls	r3, r3, #1
 800088e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000890:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000892:	4a23      	ldr	r2, [pc, #140]	@ (8000920 <HAL_InitTick+0xe8>)
 8000894:	fba2 2303 	umull	r2, r3, r2, r3
 8000898:	0c9b      	lsrs	r3, r3, #18
 800089a:	3b01      	subs	r3, #1
 800089c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800089e:	4b21      	ldr	r3, [pc, #132]	@ (8000924 <HAL_InitTick+0xec>)
 80008a0:	4a21      	ldr	r2, [pc, #132]	@ (8000928 <HAL_InitTick+0xf0>)
 80008a2:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80008a4:	4b1f      	ldr	r3, [pc, #124]	@ (8000924 <HAL_InitTick+0xec>)
 80008a6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80008aa:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80008ac:	4a1d      	ldr	r2, [pc, #116]	@ (8000924 <HAL_InitTick+0xec>)
 80008ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80008b0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80008b2:	4b1c      	ldr	r3, [pc, #112]	@ (8000924 <HAL_InitTick+0xec>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008b8:	4b1a      	ldr	r3, [pc, #104]	@ (8000924 <HAL_InitTick+0xec>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008be:	4b19      	ldr	r3, [pc, #100]	@ (8000924 <HAL_InitTick+0xec>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80008c4:	4817      	ldr	r0, [pc, #92]	@ (8000924 <HAL_InitTick+0xec>)
 80008c6:	f001 f8b1 	bl	8001a2c <HAL_TIM_Base_Init>
 80008ca:	4603      	mov	r3, r0
 80008cc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80008d0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d11b      	bne.n	8000910 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80008d8:	4812      	ldr	r0, [pc, #72]	@ (8000924 <HAL_InitTick+0xec>)
 80008da:	f001 f901 	bl	8001ae0 <HAL_TIM_Base_Start_IT>
 80008de:	4603      	mov	r3, r0
 80008e0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80008e4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d111      	bne.n	8000910 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80008ec:	2036      	movs	r0, #54	@ 0x36
 80008ee:	f000 fa63 	bl	8000db8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	2b0f      	cmp	r3, #15
 80008f6:	d808      	bhi.n	800090a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80008f8:	2200      	movs	r2, #0
 80008fa:	6879      	ldr	r1, [r7, #4]
 80008fc:	2036      	movs	r0, #54	@ 0x36
 80008fe:	f000 fa3f 	bl	8000d80 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000902:	4a0a      	ldr	r2, [pc, #40]	@ (800092c <HAL_InitTick+0xf4>)
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	6013      	str	r3, [r2, #0]
 8000908:	e002      	b.n	8000910 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800090a:	2301      	movs	r3, #1
 800090c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000910:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000914:	4618      	mov	r0, r3
 8000916:	3738      	adds	r7, #56	@ 0x38
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	40023800 	.word	0x40023800
 8000920:	431bde83 	.word	0x431bde83
 8000924:	2000008c 	.word	0x2000008c
 8000928:	40001000 	.word	0x40001000
 800092c:	20000004 	.word	0x20000004

08000930 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000934:	bf00      	nop
 8000936:	e7fd      	b.n	8000934 <NMI_Handler+0x4>

08000938 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800093c:	bf00      	nop
 800093e:	e7fd      	b.n	800093c <HardFault_Handler+0x4>

08000940 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000944:	bf00      	nop
 8000946:	e7fd      	b.n	8000944 <MemManage_Handler+0x4>

08000948 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800094c:	bf00      	nop
 800094e:	e7fd      	b.n	800094c <BusFault_Handler+0x4>

08000950 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000954:	bf00      	nop
 8000956:	e7fd      	b.n	8000954 <UsageFault_Handler+0x4>

08000958 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800095c:	bf00      	nop
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr
	...

08000968 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800096c:	4802      	ldr	r0, [pc, #8]	@ (8000978 <TIM6_DAC_IRQHandler+0x10>)
 800096e:	f001 f927 	bl	8001bc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000972:	bf00      	nop
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	2000008c 	.word	0x2000008c

0800097c <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 800097c:	b480      	push	{r7}
 800097e:	b083      	sub	sp, #12
 8000980:	af00      	add	r7, sp, #0
 8000982:	4603      	mov	r3, r0
 8000984:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000986:	4b0f      	ldr	r3, [pc, #60]	@ (80009c4 <ITM_SendChar+0x48>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	4a0e      	ldr	r2, [pc, #56]	@ (80009c4 <ITM_SendChar+0x48>)
 800098c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000990:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000992:	4b0d      	ldr	r3, [pc, #52]	@ (80009c8 <ITM_SendChar+0x4c>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	4a0c      	ldr	r2, [pc, #48]	@ (80009c8 <ITM_SendChar+0x4c>)
 8000998:	f043 0301 	orr.w	r3, r3, #1
 800099c:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 800099e:	bf00      	nop
 80009a0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	f003 0301 	and.w	r3, r3, #1
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d0f8      	beq.n	80009a0 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80009ae:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 80009b2:	79fb      	ldrb	r3, [r7, #7]
 80009b4:	6013      	str	r3, [r2, #0]
}
 80009b6:	bf00      	nop
 80009b8:	370c      	adds	r7, #12
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop
 80009c4:	e000edfc 	.word	0xe000edfc
 80009c8:	e0000e00 	.word	0xe0000e00

080009cc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b086      	sub	sp, #24
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	60f8      	str	r0, [r7, #12]
 80009d4:	60b9      	str	r1, [r7, #8]
 80009d6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009d8:	2300      	movs	r3, #0
 80009da:	617b      	str	r3, [r7, #20]
 80009dc:	e00a      	b.n	80009f4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80009de:	f3af 8000 	nop.w
 80009e2:	4601      	mov	r1, r0
 80009e4:	68bb      	ldr	r3, [r7, #8]
 80009e6:	1c5a      	adds	r2, r3, #1
 80009e8:	60ba      	str	r2, [r7, #8]
 80009ea:	b2ca      	uxtb	r2, r1
 80009ec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009ee:	697b      	ldr	r3, [r7, #20]
 80009f0:	3301      	adds	r3, #1
 80009f2:	617b      	str	r3, [r7, #20]
 80009f4:	697a      	ldr	r2, [r7, #20]
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	429a      	cmp	r2, r3
 80009fa:	dbf0      	blt.n	80009de <_read+0x12>
  }

  return len;
 80009fc:	687b      	ldr	r3, [r7, #4]
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	3718      	adds	r7, #24
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}

08000a06 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a06:	b580      	push	{r7, lr}
 8000a08:	b086      	sub	sp, #24
 8000a0a:	af00      	add	r7, sp, #0
 8000a0c:	60f8      	str	r0, [r7, #12]
 8000a0e:	60b9      	str	r1, [r7, #8]
 8000a10:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a12:	2300      	movs	r3, #0
 8000a14:	617b      	str	r3, [r7, #20]
 8000a16:	e009      	b.n	8000a2c <_write+0x26>
  {
//    __io_putchar(*ptr++);

	  ITM_SendChar(*ptr++);// printf over SWO
 8000a18:	68bb      	ldr	r3, [r7, #8]
 8000a1a:	1c5a      	adds	r2, r3, #1
 8000a1c:	60ba      	str	r2, [r7, #8]
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	4618      	mov	r0, r3
 8000a22:	f7ff ffab 	bl	800097c <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a26:	697b      	ldr	r3, [r7, #20]
 8000a28:	3301      	adds	r3, #1
 8000a2a:	617b      	str	r3, [r7, #20]
 8000a2c:	697a      	ldr	r2, [r7, #20]
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	429a      	cmp	r2, r3
 8000a32:	dbf1      	blt.n	8000a18 <_write+0x12>


  }
  return len;
 8000a34:	687b      	ldr	r3, [r7, #4]
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	3718      	adds	r7, #24
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}

08000a3e <_close>:

int _close(int file)
{
 8000a3e:	b480      	push	{r7}
 8000a40:	b083      	sub	sp, #12
 8000a42:	af00      	add	r7, sp, #0
 8000a44:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a46:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	370c      	adds	r7, #12
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr

08000a56 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a56:	b480      	push	{r7}
 8000a58:	b083      	sub	sp, #12
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	6078      	str	r0, [r7, #4]
 8000a5e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000a66:	605a      	str	r2, [r3, #4]
  return 0;
 8000a68:	2300      	movs	r3, #0
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	370c      	adds	r7, #12
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr

08000a76 <_isatty>:

int _isatty(int file)
{
 8000a76:	b480      	push	{r7}
 8000a78:	b083      	sub	sp, #12
 8000a7a:	af00      	add	r7, sp, #0
 8000a7c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a7e:	2301      	movs	r3, #1
}
 8000a80:	4618      	mov	r0, r3
 8000a82:	370c      	adds	r7, #12
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr

08000a8c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b085      	sub	sp, #20
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	60f8      	str	r0, [r7, #12]
 8000a94:	60b9      	str	r1, [r7, #8]
 8000a96:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a98:	2300      	movs	r3, #0
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	3714      	adds	r7, #20
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr
	...

08000aa8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b086      	sub	sp, #24
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ab0:	4a14      	ldr	r2, [pc, #80]	@ (8000b04 <_sbrk+0x5c>)
 8000ab2:	4b15      	ldr	r3, [pc, #84]	@ (8000b08 <_sbrk+0x60>)
 8000ab4:	1ad3      	subs	r3, r2, r3
 8000ab6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000abc:	4b13      	ldr	r3, [pc, #76]	@ (8000b0c <_sbrk+0x64>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d102      	bne.n	8000aca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ac4:	4b11      	ldr	r3, [pc, #68]	@ (8000b0c <_sbrk+0x64>)
 8000ac6:	4a12      	ldr	r2, [pc, #72]	@ (8000b10 <_sbrk+0x68>)
 8000ac8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000aca:	4b10      	ldr	r3, [pc, #64]	@ (8000b0c <_sbrk+0x64>)
 8000acc:	681a      	ldr	r2, [r3, #0]
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	4413      	add	r3, r2
 8000ad2:	693a      	ldr	r2, [r7, #16]
 8000ad4:	429a      	cmp	r2, r3
 8000ad6:	d207      	bcs.n	8000ae8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ad8:	f004 fada 	bl	8005090 <__errno>
 8000adc:	4603      	mov	r3, r0
 8000ade:	220c      	movs	r2, #12
 8000ae0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ae2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ae6:	e009      	b.n	8000afc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ae8:	4b08      	ldr	r3, [pc, #32]	@ (8000b0c <_sbrk+0x64>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000aee:	4b07      	ldr	r3, [pc, #28]	@ (8000b0c <_sbrk+0x64>)
 8000af0:	681a      	ldr	r2, [r3, #0]
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	4413      	add	r3, r2
 8000af6:	4a05      	ldr	r2, [pc, #20]	@ (8000b0c <_sbrk+0x64>)
 8000af8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000afa:	68fb      	ldr	r3, [r7, #12]
}
 8000afc:	4618      	mov	r0, r3
 8000afe:	3718      	adds	r7, #24
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	20020000 	.word	0x20020000
 8000b08:	00000400 	.word	0x00000400
 8000b0c:	200000d4 	.word	0x200000d4
 8000b10:	20004c10 	.word	0x20004c10

08000b14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b18:	4b06      	ldr	r3, [pc, #24]	@ (8000b34 <SystemInit+0x20>)
 8000b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b1e:	4a05      	ldr	r2, [pc, #20]	@ (8000b34 <SystemInit+0x20>)
 8000b20:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b24:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b28:	bf00      	nop
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	e000ed00 	.word	0xe000ed00

08000b38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000b38:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b70 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000b3c:	f7ff ffea 	bl	8000b14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b40:	480c      	ldr	r0, [pc, #48]	@ (8000b74 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b42:	490d      	ldr	r1, [pc, #52]	@ (8000b78 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b44:	4a0d      	ldr	r2, [pc, #52]	@ (8000b7c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b48:	e002      	b.n	8000b50 <LoopCopyDataInit>

08000b4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b4e:	3304      	adds	r3, #4

08000b50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b54:	d3f9      	bcc.n	8000b4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b56:	4a0a      	ldr	r2, [pc, #40]	@ (8000b80 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b58:	4c0a      	ldr	r4, [pc, #40]	@ (8000b84 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b5c:	e001      	b.n	8000b62 <LoopFillZerobss>

08000b5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b60:	3204      	adds	r2, #4

08000b62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b64:	d3fb      	bcc.n	8000b5e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b66:	f004 fa99 	bl	800509c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b6a:	f7ff fcc7 	bl	80004fc <main>
  bx  lr    
 8000b6e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000b70:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b78:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000b7c:	08005640 	.word	0x08005640
  ldr r2, =_sbss
 8000b80:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000b84:	20004c10 	.word	0x20004c10

08000b88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b88:	e7fe      	b.n	8000b88 <ADC_IRQHandler>
	...

08000b8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b90:	4b0e      	ldr	r3, [pc, #56]	@ (8000bcc <HAL_Init+0x40>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a0d      	ldr	r2, [pc, #52]	@ (8000bcc <HAL_Init+0x40>)
 8000b96:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000bcc <HAL_Init+0x40>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a0a      	ldr	r2, [pc, #40]	@ (8000bcc <HAL_Init+0x40>)
 8000ba2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ba6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ba8:	4b08      	ldr	r3, [pc, #32]	@ (8000bcc <HAL_Init+0x40>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a07      	ldr	r2, [pc, #28]	@ (8000bcc <HAL_Init+0x40>)
 8000bae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000bb2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bb4:	2003      	movs	r0, #3
 8000bb6:	f000 f8d8 	bl	8000d6a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bba:	200f      	movs	r0, #15
 8000bbc:	f7ff fe3c 	bl	8000838 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bc0:	f7ff fe0e 	bl	80007e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bc4:	2300      	movs	r3, #0
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	40023c00 	.word	0x40023c00

08000bd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bd4:	4b06      	ldr	r3, [pc, #24]	@ (8000bf0 <HAL_IncTick+0x20>)
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	461a      	mov	r2, r3
 8000bda:	4b06      	ldr	r3, [pc, #24]	@ (8000bf4 <HAL_IncTick+0x24>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4413      	add	r3, r2
 8000be0:	4a04      	ldr	r2, [pc, #16]	@ (8000bf4 <HAL_IncTick+0x24>)
 8000be2:	6013      	str	r3, [r2, #0]
}
 8000be4:	bf00      	nop
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	20000008 	.word	0x20000008
 8000bf4:	200000d8 	.word	0x200000d8

08000bf8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  return uwTick;
 8000bfc:	4b03      	ldr	r3, [pc, #12]	@ (8000c0c <HAL_GetTick+0x14>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	200000d8 	.word	0x200000d8

08000c10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b085      	sub	sp, #20
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	f003 0307 	and.w	r3, r3, #7
 8000c1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c20:	4b0c      	ldr	r3, [pc, #48]	@ (8000c54 <__NVIC_SetPriorityGrouping+0x44>)
 8000c22:	68db      	ldr	r3, [r3, #12]
 8000c24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c26:	68ba      	ldr	r2, [r7, #8]
 8000c28:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c2c:	4013      	ands	r3, r2
 8000c2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c38:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c42:	4a04      	ldr	r2, [pc, #16]	@ (8000c54 <__NVIC_SetPriorityGrouping+0x44>)
 8000c44:	68bb      	ldr	r3, [r7, #8]
 8000c46:	60d3      	str	r3, [r2, #12]
}
 8000c48:	bf00      	nop
 8000c4a:	3714      	adds	r7, #20
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr
 8000c54:	e000ed00 	.word	0xe000ed00

08000c58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c5c:	4b04      	ldr	r3, [pc, #16]	@ (8000c70 <__NVIC_GetPriorityGrouping+0x18>)
 8000c5e:	68db      	ldr	r3, [r3, #12]
 8000c60:	0a1b      	lsrs	r3, r3, #8
 8000c62:	f003 0307 	and.w	r3, r3, #7
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr
 8000c70:	e000ed00 	.word	0xe000ed00

08000c74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	db0b      	blt.n	8000c9e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c86:	79fb      	ldrb	r3, [r7, #7]
 8000c88:	f003 021f 	and.w	r2, r3, #31
 8000c8c:	4907      	ldr	r1, [pc, #28]	@ (8000cac <__NVIC_EnableIRQ+0x38>)
 8000c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c92:	095b      	lsrs	r3, r3, #5
 8000c94:	2001      	movs	r0, #1
 8000c96:	fa00 f202 	lsl.w	r2, r0, r2
 8000c9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c9e:	bf00      	nop
 8000ca0:	370c      	adds	r7, #12
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	e000e100 	.word	0xe000e100

08000cb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	6039      	str	r1, [r7, #0]
 8000cba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	db0a      	blt.n	8000cda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	b2da      	uxtb	r2, r3
 8000cc8:	490c      	ldr	r1, [pc, #48]	@ (8000cfc <__NVIC_SetPriority+0x4c>)
 8000cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cce:	0112      	lsls	r2, r2, #4
 8000cd0:	b2d2      	uxtb	r2, r2
 8000cd2:	440b      	add	r3, r1
 8000cd4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cd8:	e00a      	b.n	8000cf0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	b2da      	uxtb	r2, r3
 8000cde:	4908      	ldr	r1, [pc, #32]	@ (8000d00 <__NVIC_SetPriority+0x50>)
 8000ce0:	79fb      	ldrb	r3, [r7, #7]
 8000ce2:	f003 030f 	and.w	r3, r3, #15
 8000ce6:	3b04      	subs	r3, #4
 8000ce8:	0112      	lsls	r2, r2, #4
 8000cea:	b2d2      	uxtb	r2, r2
 8000cec:	440b      	add	r3, r1
 8000cee:	761a      	strb	r2, [r3, #24]
}
 8000cf0:	bf00      	nop
 8000cf2:	370c      	adds	r7, #12
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr
 8000cfc:	e000e100 	.word	0xe000e100
 8000d00:	e000ed00 	.word	0xe000ed00

08000d04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b089      	sub	sp, #36	@ 0x24
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	60f8      	str	r0, [r7, #12]
 8000d0c:	60b9      	str	r1, [r7, #8]
 8000d0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	f003 0307 	and.w	r3, r3, #7
 8000d16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d18:	69fb      	ldr	r3, [r7, #28]
 8000d1a:	f1c3 0307 	rsb	r3, r3, #7
 8000d1e:	2b04      	cmp	r3, #4
 8000d20:	bf28      	it	cs
 8000d22:	2304      	movcs	r3, #4
 8000d24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d26:	69fb      	ldr	r3, [r7, #28]
 8000d28:	3304      	adds	r3, #4
 8000d2a:	2b06      	cmp	r3, #6
 8000d2c:	d902      	bls.n	8000d34 <NVIC_EncodePriority+0x30>
 8000d2e:	69fb      	ldr	r3, [r7, #28]
 8000d30:	3b03      	subs	r3, #3
 8000d32:	e000      	b.n	8000d36 <NVIC_EncodePriority+0x32>
 8000d34:	2300      	movs	r3, #0
 8000d36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d38:	f04f 32ff 	mov.w	r2, #4294967295
 8000d3c:	69bb      	ldr	r3, [r7, #24]
 8000d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d42:	43da      	mvns	r2, r3
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	401a      	ands	r2, r3
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d4c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	fa01 f303 	lsl.w	r3, r1, r3
 8000d56:	43d9      	mvns	r1, r3
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d5c:	4313      	orrs	r3, r2
         );
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	3724      	adds	r7, #36	@ 0x24
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr

08000d6a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	b082      	sub	sp, #8
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d72:	6878      	ldr	r0, [r7, #4]
 8000d74:	f7ff ff4c 	bl	8000c10 <__NVIC_SetPriorityGrouping>
}
 8000d78:	bf00      	nop
 8000d7a:	3708      	adds	r7, #8
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}

08000d80 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b086      	sub	sp, #24
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	4603      	mov	r3, r0
 8000d88:	60b9      	str	r1, [r7, #8]
 8000d8a:	607a      	str	r2, [r7, #4]
 8000d8c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d92:	f7ff ff61 	bl	8000c58 <__NVIC_GetPriorityGrouping>
 8000d96:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d98:	687a      	ldr	r2, [r7, #4]
 8000d9a:	68b9      	ldr	r1, [r7, #8]
 8000d9c:	6978      	ldr	r0, [r7, #20]
 8000d9e:	f7ff ffb1 	bl	8000d04 <NVIC_EncodePriority>
 8000da2:	4602      	mov	r2, r0
 8000da4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000da8:	4611      	mov	r1, r2
 8000daa:	4618      	mov	r0, r3
 8000dac:	f7ff ff80 	bl	8000cb0 <__NVIC_SetPriority>
}
 8000db0:	bf00      	nop
 8000db2:	3718      	adds	r7, #24
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}

08000db8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f7ff ff54 	bl	8000c74 <__NVIC_EnableIRQ>
}
 8000dcc:	bf00      	nop
 8000dce:	3708      	adds	r7, #8
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b089      	sub	sp, #36	@ 0x24
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
 8000ddc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000dde:	2300      	movs	r3, #0
 8000de0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000de2:	2300      	movs	r3, #0
 8000de4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000de6:	2300      	movs	r3, #0
 8000de8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dea:	2300      	movs	r3, #0
 8000dec:	61fb      	str	r3, [r7, #28]
 8000dee:	e16b      	b.n	80010c8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000df0:	2201      	movs	r2, #1
 8000df2:	69fb      	ldr	r3, [r7, #28]
 8000df4:	fa02 f303 	lsl.w	r3, r2, r3
 8000df8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	697a      	ldr	r2, [r7, #20]
 8000e00:	4013      	ands	r3, r2
 8000e02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e04:	693a      	ldr	r2, [r7, #16]
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	429a      	cmp	r2, r3
 8000e0a:	f040 815a 	bne.w	80010c2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	f003 0303 	and.w	r3, r3, #3
 8000e16:	2b01      	cmp	r3, #1
 8000e18:	d005      	beq.n	8000e26 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e22:	2b02      	cmp	r3, #2
 8000e24:	d130      	bne.n	8000e88 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	689b      	ldr	r3, [r3, #8]
 8000e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e2c:	69fb      	ldr	r3, [r7, #28]
 8000e2e:	005b      	lsls	r3, r3, #1
 8000e30:	2203      	movs	r2, #3
 8000e32:	fa02 f303 	lsl.w	r3, r2, r3
 8000e36:	43db      	mvns	r3, r3
 8000e38:	69ba      	ldr	r2, [r7, #24]
 8000e3a:	4013      	ands	r3, r2
 8000e3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	68da      	ldr	r2, [r3, #12]
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	005b      	lsls	r3, r3, #1
 8000e46:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4a:	69ba      	ldr	r2, [r7, #24]
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	69ba      	ldr	r2, [r7, #24]
 8000e54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	fa02 f303 	lsl.w	r3, r2, r3
 8000e64:	43db      	mvns	r3, r3
 8000e66:	69ba      	ldr	r2, [r7, #24]
 8000e68:	4013      	ands	r3, r2
 8000e6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	091b      	lsrs	r3, r3, #4
 8000e72:	f003 0201 	and.w	r2, r3, #1
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7c:	69ba      	ldr	r2, [r7, #24]
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	69ba      	ldr	r2, [r7, #24]
 8000e86:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	f003 0303 	and.w	r3, r3, #3
 8000e90:	2b03      	cmp	r3, #3
 8000e92:	d017      	beq.n	8000ec4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	68db      	ldr	r3, [r3, #12]
 8000e98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e9a:	69fb      	ldr	r3, [r7, #28]
 8000e9c:	005b      	lsls	r3, r3, #1
 8000e9e:	2203      	movs	r2, #3
 8000ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea4:	43db      	mvns	r3, r3
 8000ea6:	69ba      	ldr	r2, [r7, #24]
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	689a      	ldr	r2, [r3, #8]
 8000eb0:	69fb      	ldr	r3, [r7, #28]
 8000eb2:	005b      	lsls	r3, r3, #1
 8000eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb8:	69ba      	ldr	r2, [r7, #24]
 8000eba:	4313      	orrs	r3, r2
 8000ebc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	69ba      	ldr	r2, [r7, #24]
 8000ec2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	f003 0303 	and.w	r3, r3, #3
 8000ecc:	2b02      	cmp	r3, #2
 8000ece:	d123      	bne.n	8000f18 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ed0:	69fb      	ldr	r3, [r7, #28]
 8000ed2:	08da      	lsrs	r2, r3, #3
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	3208      	adds	r2, #8
 8000ed8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000edc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	f003 0307 	and.w	r3, r3, #7
 8000ee4:	009b      	lsls	r3, r3, #2
 8000ee6:	220f      	movs	r2, #15
 8000ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eec:	43db      	mvns	r3, r3
 8000eee:	69ba      	ldr	r2, [r7, #24]
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	691a      	ldr	r2, [r3, #16]
 8000ef8:	69fb      	ldr	r3, [r7, #28]
 8000efa:	f003 0307 	and.w	r3, r3, #7
 8000efe:	009b      	lsls	r3, r3, #2
 8000f00:	fa02 f303 	lsl.w	r3, r2, r3
 8000f04:	69ba      	ldr	r2, [r7, #24]
 8000f06:	4313      	orrs	r3, r2
 8000f08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	08da      	lsrs	r2, r3, #3
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	3208      	adds	r2, #8
 8000f12:	69b9      	ldr	r1, [r7, #24]
 8000f14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	005b      	lsls	r3, r3, #1
 8000f22:	2203      	movs	r2, #3
 8000f24:	fa02 f303 	lsl.w	r3, r2, r3
 8000f28:	43db      	mvns	r3, r3
 8000f2a:	69ba      	ldr	r2, [r7, #24]
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	f003 0203 	and.w	r2, r3, #3
 8000f38:	69fb      	ldr	r3, [r7, #28]
 8000f3a:	005b      	lsls	r3, r3, #1
 8000f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f40:	69ba      	ldr	r2, [r7, #24]
 8000f42:	4313      	orrs	r3, r2
 8000f44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	69ba      	ldr	r2, [r7, #24]
 8000f4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	f000 80b4 	beq.w	80010c2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	60fb      	str	r3, [r7, #12]
 8000f5e:	4b60      	ldr	r3, [pc, #384]	@ (80010e0 <HAL_GPIO_Init+0x30c>)
 8000f60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f62:	4a5f      	ldr	r2, [pc, #380]	@ (80010e0 <HAL_GPIO_Init+0x30c>)
 8000f64:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f68:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f6a:	4b5d      	ldr	r3, [pc, #372]	@ (80010e0 <HAL_GPIO_Init+0x30c>)
 8000f6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f72:	60fb      	str	r3, [r7, #12]
 8000f74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f76:	4a5b      	ldr	r2, [pc, #364]	@ (80010e4 <HAL_GPIO_Init+0x310>)
 8000f78:	69fb      	ldr	r3, [r7, #28]
 8000f7a:	089b      	lsrs	r3, r3, #2
 8000f7c:	3302      	adds	r3, #2
 8000f7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f84:	69fb      	ldr	r3, [r7, #28]
 8000f86:	f003 0303 	and.w	r3, r3, #3
 8000f8a:	009b      	lsls	r3, r3, #2
 8000f8c:	220f      	movs	r2, #15
 8000f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f92:	43db      	mvns	r3, r3
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	4013      	ands	r3, r2
 8000f98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4a52      	ldr	r2, [pc, #328]	@ (80010e8 <HAL_GPIO_Init+0x314>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d02b      	beq.n	8000ffa <HAL_GPIO_Init+0x226>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4a51      	ldr	r2, [pc, #324]	@ (80010ec <HAL_GPIO_Init+0x318>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d025      	beq.n	8000ff6 <HAL_GPIO_Init+0x222>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4a50      	ldr	r2, [pc, #320]	@ (80010f0 <HAL_GPIO_Init+0x31c>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d01f      	beq.n	8000ff2 <HAL_GPIO_Init+0x21e>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4a4f      	ldr	r2, [pc, #316]	@ (80010f4 <HAL_GPIO_Init+0x320>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d019      	beq.n	8000fee <HAL_GPIO_Init+0x21a>
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4a4e      	ldr	r2, [pc, #312]	@ (80010f8 <HAL_GPIO_Init+0x324>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d013      	beq.n	8000fea <HAL_GPIO_Init+0x216>
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4a4d      	ldr	r2, [pc, #308]	@ (80010fc <HAL_GPIO_Init+0x328>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d00d      	beq.n	8000fe6 <HAL_GPIO_Init+0x212>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4a4c      	ldr	r2, [pc, #304]	@ (8001100 <HAL_GPIO_Init+0x32c>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d007      	beq.n	8000fe2 <HAL_GPIO_Init+0x20e>
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4a4b      	ldr	r2, [pc, #300]	@ (8001104 <HAL_GPIO_Init+0x330>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d101      	bne.n	8000fde <HAL_GPIO_Init+0x20a>
 8000fda:	2307      	movs	r3, #7
 8000fdc:	e00e      	b.n	8000ffc <HAL_GPIO_Init+0x228>
 8000fde:	2308      	movs	r3, #8
 8000fe0:	e00c      	b.n	8000ffc <HAL_GPIO_Init+0x228>
 8000fe2:	2306      	movs	r3, #6
 8000fe4:	e00a      	b.n	8000ffc <HAL_GPIO_Init+0x228>
 8000fe6:	2305      	movs	r3, #5
 8000fe8:	e008      	b.n	8000ffc <HAL_GPIO_Init+0x228>
 8000fea:	2304      	movs	r3, #4
 8000fec:	e006      	b.n	8000ffc <HAL_GPIO_Init+0x228>
 8000fee:	2303      	movs	r3, #3
 8000ff0:	e004      	b.n	8000ffc <HAL_GPIO_Init+0x228>
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	e002      	b.n	8000ffc <HAL_GPIO_Init+0x228>
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e000      	b.n	8000ffc <HAL_GPIO_Init+0x228>
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	69fa      	ldr	r2, [r7, #28]
 8000ffe:	f002 0203 	and.w	r2, r2, #3
 8001002:	0092      	lsls	r2, r2, #2
 8001004:	4093      	lsls	r3, r2
 8001006:	69ba      	ldr	r2, [r7, #24]
 8001008:	4313      	orrs	r3, r2
 800100a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800100c:	4935      	ldr	r1, [pc, #212]	@ (80010e4 <HAL_GPIO_Init+0x310>)
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	089b      	lsrs	r3, r3, #2
 8001012:	3302      	adds	r3, #2
 8001014:	69ba      	ldr	r2, [r7, #24]
 8001016:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800101a:	4b3b      	ldr	r3, [pc, #236]	@ (8001108 <HAL_GPIO_Init+0x334>)
 800101c:	689b      	ldr	r3, [r3, #8]
 800101e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001020:	693b      	ldr	r3, [r7, #16]
 8001022:	43db      	mvns	r3, r3
 8001024:	69ba      	ldr	r2, [r7, #24]
 8001026:	4013      	ands	r3, r2
 8001028:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001032:	2b00      	cmp	r3, #0
 8001034:	d003      	beq.n	800103e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001036:	69ba      	ldr	r2, [r7, #24]
 8001038:	693b      	ldr	r3, [r7, #16]
 800103a:	4313      	orrs	r3, r2
 800103c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800103e:	4a32      	ldr	r2, [pc, #200]	@ (8001108 <HAL_GPIO_Init+0x334>)
 8001040:	69bb      	ldr	r3, [r7, #24]
 8001042:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001044:	4b30      	ldr	r3, [pc, #192]	@ (8001108 <HAL_GPIO_Init+0x334>)
 8001046:	68db      	ldr	r3, [r3, #12]
 8001048:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	43db      	mvns	r3, r3
 800104e:	69ba      	ldr	r2, [r7, #24]
 8001050:	4013      	ands	r3, r2
 8001052:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800105c:	2b00      	cmp	r3, #0
 800105e:	d003      	beq.n	8001068 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001060:	69ba      	ldr	r2, [r7, #24]
 8001062:	693b      	ldr	r3, [r7, #16]
 8001064:	4313      	orrs	r3, r2
 8001066:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001068:	4a27      	ldr	r2, [pc, #156]	@ (8001108 <HAL_GPIO_Init+0x334>)
 800106a:	69bb      	ldr	r3, [r7, #24]
 800106c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800106e:	4b26      	ldr	r3, [pc, #152]	@ (8001108 <HAL_GPIO_Init+0x334>)
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001074:	693b      	ldr	r3, [r7, #16]
 8001076:	43db      	mvns	r3, r3
 8001078:	69ba      	ldr	r2, [r7, #24]
 800107a:	4013      	ands	r3, r2
 800107c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001086:	2b00      	cmp	r3, #0
 8001088:	d003      	beq.n	8001092 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800108a:	69ba      	ldr	r2, [r7, #24]
 800108c:	693b      	ldr	r3, [r7, #16]
 800108e:	4313      	orrs	r3, r2
 8001090:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001092:	4a1d      	ldr	r2, [pc, #116]	@ (8001108 <HAL_GPIO_Init+0x334>)
 8001094:	69bb      	ldr	r3, [r7, #24]
 8001096:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001098:	4b1b      	ldr	r3, [pc, #108]	@ (8001108 <HAL_GPIO_Init+0x334>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800109e:	693b      	ldr	r3, [r7, #16]
 80010a0:	43db      	mvns	r3, r3
 80010a2:	69ba      	ldr	r2, [r7, #24]
 80010a4:	4013      	ands	r3, r2
 80010a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d003      	beq.n	80010bc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	693b      	ldr	r3, [r7, #16]
 80010b8:	4313      	orrs	r3, r2
 80010ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010bc:	4a12      	ldr	r2, [pc, #72]	@ (8001108 <HAL_GPIO_Init+0x334>)
 80010be:	69bb      	ldr	r3, [r7, #24]
 80010c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	3301      	adds	r3, #1
 80010c6:	61fb      	str	r3, [r7, #28]
 80010c8:	69fb      	ldr	r3, [r7, #28]
 80010ca:	2b0f      	cmp	r3, #15
 80010cc:	f67f ae90 	bls.w	8000df0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010d0:	bf00      	nop
 80010d2:	bf00      	nop
 80010d4:	3724      	adds	r7, #36	@ 0x24
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	40023800 	.word	0x40023800
 80010e4:	40013800 	.word	0x40013800
 80010e8:	40020000 	.word	0x40020000
 80010ec:	40020400 	.word	0x40020400
 80010f0:	40020800 	.word	0x40020800
 80010f4:	40020c00 	.word	0x40020c00
 80010f8:	40021000 	.word	0x40021000
 80010fc:	40021400 	.word	0x40021400
 8001100:	40021800 	.word	0x40021800
 8001104:	40021c00 	.word	0x40021c00
 8001108:	40013c00 	.word	0x40013c00

0800110c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	460b      	mov	r3, r1
 8001116:	807b      	strh	r3, [r7, #2]
 8001118:	4613      	mov	r3, r2
 800111a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800111c:	787b      	ldrb	r3, [r7, #1]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d003      	beq.n	800112a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001122:	887a      	ldrh	r2, [r7, #2]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001128:	e003      	b.n	8001132 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800112a:	887b      	ldrh	r3, [r7, #2]
 800112c:	041a      	lsls	r2, r3, #16
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	619a      	str	r2, [r3, #24]
}
 8001132:	bf00      	nop
 8001134:	370c      	adds	r7, #12
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
	...

08001140 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b086      	sub	sp, #24
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d101      	bne.n	8001152 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800114e:	2301      	movs	r3, #1
 8001150:	e267      	b.n	8001622 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f003 0301 	and.w	r3, r3, #1
 800115a:	2b00      	cmp	r3, #0
 800115c:	d075      	beq.n	800124a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800115e:	4b88      	ldr	r3, [pc, #544]	@ (8001380 <HAL_RCC_OscConfig+0x240>)
 8001160:	689b      	ldr	r3, [r3, #8]
 8001162:	f003 030c 	and.w	r3, r3, #12
 8001166:	2b04      	cmp	r3, #4
 8001168:	d00c      	beq.n	8001184 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800116a:	4b85      	ldr	r3, [pc, #532]	@ (8001380 <HAL_RCC_OscConfig+0x240>)
 800116c:	689b      	ldr	r3, [r3, #8]
 800116e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001172:	2b08      	cmp	r3, #8
 8001174:	d112      	bne.n	800119c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001176:	4b82      	ldr	r3, [pc, #520]	@ (8001380 <HAL_RCC_OscConfig+0x240>)
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800117e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001182:	d10b      	bne.n	800119c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001184:	4b7e      	ldr	r3, [pc, #504]	@ (8001380 <HAL_RCC_OscConfig+0x240>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800118c:	2b00      	cmp	r3, #0
 800118e:	d05b      	beq.n	8001248 <HAL_RCC_OscConfig+0x108>
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d157      	bne.n	8001248 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001198:	2301      	movs	r3, #1
 800119a:	e242      	b.n	8001622 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80011a4:	d106      	bne.n	80011b4 <HAL_RCC_OscConfig+0x74>
 80011a6:	4b76      	ldr	r3, [pc, #472]	@ (8001380 <HAL_RCC_OscConfig+0x240>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4a75      	ldr	r2, [pc, #468]	@ (8001380 <HAL_RCC_OscConfig+0x240>)
 80011ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011b0:	6013      	str	r3, [r2, #0]
 80011b2:	e01d      	b.n	80011f0 <HAL_RCC_OscConfig+0xb0>
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80011bc:	d10c      	bne.n	80011d8 <HAL_RCC_OscConfig+0x98>
 80011be:	4b70      	ldr	r3, [pc, #448]	@ (8001380 <HAL_RCC_OscConfig+0x240>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a6f      	ldr	r2, [pc, #444]	@ (8001380 <HAL_RCC_OscConfig+0x240>)
 80011c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80011c8:	6013      	str	r3, [r2, #0]
 80011ca:	4b6d      	ldr	r3, [pc, #436]	@ (8001380 <HAL_RCC_OscConfig+0x240>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a6c      	ldr	r2, [pc, #432]	@ (8001380 <HAL_RCC_OscConfig+0x240>)
 80011d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011d4:	6013      	str	r3, [r2, #0]
 80011d6:	e00b      	b.n	80011f0 <HAL_RCC_OscConfig+0xb0>
 80011d8:	4b69      	ldr	r3, [pc, #420]	@ (8001380 <HAL_RCC_OscConfig+0x240>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a68      	ldr	r2, [pc, #416]	@ (8001380 <HAL_RCC_OscConfig+0x240>)
 80011de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80011e2:	6013      	str	r3, [r2, #0]
 80011e4:	4b66      	ldr	r3, [pc, #408]	@ (8001380 <HAL_RCC_OscConfig+0x240>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a65      	ldr	r2, [pc, #404]	@ (8001380 <HAL_RCC_OscConfig+0x240>)
 80011ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80011ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d013      	beq.n	8001220 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011f8:	f7ff fcfe 	bl	8000bf8 <HAL_GetTick>
 80011fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011fe:	e008      	b.n	8001212 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001200:	f7ff fcfa 	bl	8000bf8 <HAL_GetTick>
 8001204:	4602      	mov	r2, r0
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	1ad3      	subs	r3, r2, r3
 800120a:	2b64      	cmp	r3, #100	@ 0x64
 800120c:	d901      	bls.n	8001212 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800120e:	2303      	movs	r3, #3
 8001210:	e207      	b.n	8001622 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001212:	4b5b      	ldr	r3, [pc, #364]	@ (8001380 <HAL_RCC_OscConfig+0x240>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800121a:	2b00      	cmp	r3, #0
 800121c:	d0f0      	beq.n	8001200 <HAL_RCC_OscConfig+0xc0>
 800121e:	e014      	b.n	800124a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001220:	f7ff fcea 	bl	8000bf8 <HAL_GetTick>
 8001224:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001226:	e008      	b.n	800123a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001228:	f7ff fce6 	bl	8000bf8 <HAL_GetTick>
 800122c:	4602      	mov	r2, r0
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	2b64      	cmp	r3, #100	@ 0x64
 8001234:	d901      	bls.n	800123a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001236:	2303      	movs	r3, #3
 8001238:	e1f3      	b.n	8001622 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800123a:	4b51      	ldr	r3, [pc, #324]	@ (8001380 <HAL_RCC_OscConfig+0x240>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001242:	2b00      	cmp	r3, #0
 8001244:	d1f0      	bne.n	8001228 <HAL_RCC_OscConfig+0xe8>
 8001246:	e000      	b.n	800124a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001248:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f003 0302 	and.w	r3, r3, #2
 8001252:	2b00      	cmp	r3, #0
 8001254:	d063      	beq.n	800131e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001256:	4b4a      	ldr	r3, [pc, #296]	@ (8001380 <HAL_RCC_OscConfig+0x240>)
 8001258:	689b      	ldr	r3, [r3, #8]
 800125a:	f003 030c 	and.w	r3, r3, #12
 800125e:	2b00      	cmp	r3, #0
 8001260:	d00b      	beq.n	800127a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001262:	4b47      	ldr	r3, [pc, #284]	@ (8001380 <HAL_RCC_OscConfig+0x240>)
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800126a:	2b08      	cmp	r3, #8
 800126c:	d11c      	bne.n	80012a8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800126e:	4b44      	ldr	r3, [pc, #272]	@ (8001380 <HAL_RCC_OscConfig+0x240>)
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001276:	2b00      	cmp	r3, #0
 8001278:	d116      	bne.n	80012a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800127a:	4b41      	ldr	r3, [pc, #260]	@ (8001380 <HAL_RCC_OscConfig+0x240>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f003 0302 	and.w	r3, r3, #2
 8001282:	2b00      	cmp	r3, #0
 8001284:	d005      	beq.n	8001292 <HAL_RCC_OscConfig+0x152>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	68db      	ldr	r3, [r3, #12]
 800128a:	2b01      	cmp	r3, #1
 800128c:	d001      	beq.n	8001292 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	e1c7      	b.n	8001622 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001292:	4b3b      	ldr	r3, [pc, #236]	@ (8001380 <HAL_RCC_OscConfig+0x240>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	691b      	ldr	r3, [r3, #16]
 800129e:	00db      	lsls	r3, r3, #3
 80012a0:	4937      	ldr	r1, [pc, #220]	@ (8001380 <HAL_RCC_OscConfig+0x240>)
 80012a2:	4313      	orrs	r3, r2
 80012a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012a6:	e03a      	b.n	800131e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	68db      	ldr	r3, [r3, #12]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d020      	beq.n	80012f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012b0:	4b34      	ldr	r3, [pc, #208]	@ (8001384 <HAL_RCC_OscConfig+0x244>)
 80012b2:	2201      	movs	r2, #1
 80012b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012b6:	f7ff fc9f 	bl	8000bf8 <HAL_GetTick>
 80012ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012bc:	e008      	b.n	80012d0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012be:	f7ff fc9b 	bl	8000bf8 <HAL_GetTick>
 80012c2:	4602      	mov	r2, r0
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	1ad3      	subs	r3, r2, r3
 80012c8:	2b02      	cmp	r3, #2
 80012ca:	d901      	bls.n	80012d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80012cc:	2303      	movs	r3, #3
 80012ce:	e1a8      	b.n	8001622 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012d0:	4b2b      	ldr	r3, [pc, #172]	@ (8001380 <HAL_RCC_OscConfig+0x240>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f003 0302 	and.w	r3, r3, #2
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d0f0      	beq.n	80012be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012dc:	4b28      	ldr	r3, [pc, #160]	@ (8001380 <HAL_RCC_OscConfig+0x240>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	691b      	ldr	r3, [r3, #16]
 80012e8:	00db      	lsls	r3, r3, #3
 80012ea:	4925      	ldr	r1, [pc, #148]	@ (8001380 <HAL_RCC_OscConfig+0x240>)
 80012ec:	4313      	orrs	r3, r2
 80012ee:	600b      	str	r3, [r1, #0]
 80012f0:	e015      	b.n	800131e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012f2:	4b24      	ldr	r3, [pc, #144]	@ (8001384 <HAL_RCC_OscConfig+0x244>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012f8:	f7ff fc7e 	bl	8000bf8 <HAL_GetTick>
 80012fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012fe:	e008      	b.n	8001312 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001300:	f7ff fc7a 	bl	8000bf8 <HAL_GetTick>
 8001304:	4602      	mov	r2, r0
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	2b02      	cmp	r3, #2
 800130c:	d901      	bls.n	8001312 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800130e:	2303      	movs	r3, #3
 8001310:	e187      	b.n	8001622 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001312:	4b1b      	ldr	r3, [pc, #108]	@ (8001380 <HAL_RCC_OscConfig+0x240>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f003 0302 	and.w	r3, r3, #2
 800131a:	2b00      	cmp	r3, #0
 800131c:	d1f0      	bne.n	8001300 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f003 0308 	and.w	r3, r3, #8
 8001326:	2b00      	cmp	r3, #0
 8001328:	d036      	beq.n	8001398 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	695b      	ldr	r3, [r3, #20]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d016      	beq.n	8001360 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001332:	4b15      	ldr	r3, [pc, #84]	@ (8001388 <HAL_RCC_OscConfig+0x248>)
 8001334:	2201      	movs	r2, #1
 8001336:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001338:	f7ff fc5e 	bl	8000bf8 <HAL_GetTick>
 800133c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800133e:	e008      	b.n	8001352 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001340:	f7ff fc5a 	bl	8000bf8 <HAL_GetTick>
 8001344:	4602      	mov	r2, r0
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	2b02      	cmp	r3, #2
 800134c:	d901      	bls.n	8001352 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800134e:	2303      	movs	r3, #3
 8001350:	e167      	b.n	8001622 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001352:	4b0b      	ldr	r3, [pc, #44]	@ (8001380 <HAL_RCC_OscConfig+0x240>)
 8001354:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001356:	f003 0302 	and.w	r3, r3, #2
 800135a:	2b00      	cmp	r3, #0
 800135c:	d0f0      	beq.n	8001340 <HAL_RCC_OscConfig+0x200>
 800135e:	e01b      	b.n	8001398 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001360:	4b09      	ldr	r3, [pc, #36]	@ (8001388 <HAL_RCC_OscConfig+0x248>)
 8001362:	2200      	movs	r2, #0
 8001364:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001366:	f7ff fc47 	bl	8000bf8 <HAL_GetTick>
 800136a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800136c:	e00e      	b.n	800138c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800136e:	f7ff fc43 	bl	8000bf8 <HAL_GetTick>
 8001372:	4602      	mov	r2, r0
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	1ad3      	subs	r3, r2, r3
 8001378:	2b02      	cmp	r3, #2
 800137a:	d907      	bls.n	800138c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800137c:	2303      	movs	r3, #3
 800137e:	e150      	b.n	8001622 <HAL_RCC_OscConfig+0x4e2>
 8001380:	40023800 	.word	0x40023800
 8001384:	42470000 	.word	0x42470000
 8001388:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800138c:	4b88      	ldr	r3, [pc, #544]	@ (80015b0 <HAL_RCC_OscConfig+0x470>)
 800138e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001390:	f003 0302 	and.w	r3, r3, #2
 8001394:	2b00      	cmp	r3, #0
 8001396:	d1ea      	bne.n	800136e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f003 0304 	and.w	r3, r3, #4
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	f000 8097 	beq.w	80014d4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013a6:	2300      	movs	r3, #0
 80013a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013aa:	4b81      	ldr	r3, [pc, #516]	@ (80015b0 <HAL_RCC_OscConfig+0x470>)
 80013ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d10f      	bne.n	80013d6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013b6:	2300      	movs	r3, #0
 80013b8:	60bb      	str	r3, [r7, #8]
 80013ba:	4b7d      	ldr	r3, [pc, #500]	@ (80015b0 <HAL_RCC_OscConfig+0x470>)
 80013bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013be:	4a7c      	ldr	r2, [pc, #496]	@ (80015b0 <HAL_RCC_OscConfig+0x470>)
 80013c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80013c6:	4b7a      	ldr	r3, [pc, #488]	@ (80015b0 <HAL_RCC_OscConfig+0x470>)
 80013c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013ce:	60bb      	str	r3, [r7, #8]
 80013d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013d2:	2301      	movs	r3, #1
 80013d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013d6:	4b77      	ldr	r3, [pc, #476]	@ (80015b4 <HAL_RCC_OscConfig+0x474>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d118      	bne.n	8001414 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013e2:	4b74      	ldr	r3, [pc, #464]	@ (80015b4 <HAL_RCC_OscConfig+0x474>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a73      	ldr	r2, [pc, #460]	@ (80015b4 <HAL_RCC_OscConfig+0x474>)
 80013e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013ee:	f7ff fc03 	bl	8000bf8 <HAL_GetTick>
 80013f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013f4:	e008      	b.n	8001408 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013f6:	f7ff fbff 	bl	8000bf8 <HAL_GetTick>
 80013fa:	4602      	mov	r2, r0
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	1ad3      	subs	r3, r2, r3
 8001400:	2b02      	cmp	r3, #2
 8001402:	d901      	bls.n	8001408 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001404:	2303      	movs	r3, #3
 8001406:	e10c      	b.n	8001622 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001408:	4b6a      	ldr	r3, [pc, #424]	@ (80015b4 <HAL_RCC_OscConfig+0x474>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001410:	2b00      	cmp	r3, #0
 8001412:	d0f0      	beq.n	80013f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	689b      	ldr	r3, [r3, #8]
 8001418:	2b01      	cmp	r3, #1
 800141a:	d106      	bne.n	800142a <HAL_RCC_OscConfig+0x2ea>
 800141c:	4b64      	ldr	r3, [pc, #400]	@ (80015b0 <HAL_RCC_OscConfig+0x470>)
 800141e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001420:	4a63      	ldr	r2, [pc, #396]	@ (80015b0 <HAL_RCC_OscConfig+0x470>)
 8001422:	f043 0301 	orr.w	r3, r3, #1
 8001426:	6713      	str	r3, [r2, #112]	@ 0x70
 8001428:	e01c      	b.n	8001464 <HAL_RCC_OscConfig+0x324>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	689b      	ldr	r3, [r3, #8]
 800142e:	2b05      	cmp	r3, #5
 8001430:	d10c      	bne.n	800144c <HAL_RCC_OscConfig+0x30c>
 8001432:	4b5f      	ldr	r3, [pc, #380]	@ (80015b0 <HAL_RCC_OscConfig+0x470>)
 8001434:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001436:	4a5e      	ldr	r2, [pc, #376]	@ (80015b0 <HAL_RCC_OscConfig+0x470>)
 8001438:	f043 0304 	orr.w	r3, r3, #4
 800143c:	6713      	str	r3, [r2, #112]	@ 0x70
 800143e:	4b5c      	ldr	r3, [pc, #368]	@ (80015b0 <HAL_RCC_OscConfig+0x470>)
 8001440:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001442:	4a5b      	ldr	r2, [pc, #364]	@ (80015b0 <HAL_RCC_OscConfig+0x470>)
 8001444:	f043 0301 	orr.w	r3, r3, #1
 8001448:	6713      	str	r3, [r2, #112]	@ 0x70
 800144a:	e00b      	b.n	8001464 <HAL_RCC_OscConfig+0x324>
 800144c:	4b58      	ldr	r3, [pc, #352]	@ (80015b0 <HAL_RCC_OscConfig+0x470>)
 800144e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001450:	4a57      	ldr	r2, [pc, #348]	@ (80015b0 <HAL_RCC_OscConfig+0x470>)
 8001452:	f023 0301 	bic.w	r3, r3, #1
 8001456:	6713      	str	r3, [r2, #112]	@ 0x70
 8001458:	4b55      	ldr	r3, [pc, #340]	@ (80015b0 <HAL_RCC_OscConfig+0x470>)
 800145a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800145c:	4a54      	ldr	r2, [pc, #336]	@ (80015b0 <HAL_RCC_OscConfig+0x470>)
 800145e:	f023 0304 	bic.w	r3, r3, #4
 8001462:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d015      	beq.n	8001498 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800146c:	f7ff fbc4 	bl	8000bf8 <HAL_GetTick>
 8001470:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001472:	e00a      	b.n	800148a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001474:	f7ff fbc0 	bl	8000bf8 <HAL_GetTick>
 8001478:	4602      	mov	r2, r0
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001482:	4293      	cmp	r3, r2
 8001484:	d901      	bls.n	800148a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001486:	2303      	movs	r3, #3
 8001488:	e0cb      	b.n	8001622 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800148a:	4b49      	ldr	r3, [pc, #292]	@ (80015b0 <HAL_RCC_OscConfig+0x470>)
 800148c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800148e:	f003 0302 	and.w	r3, r3, #2
 8001492:	2b00      	cmp	r3, #0
 8001494:	d0ee      	beq.n	8001474 <HAL_RCC_OscConfig+0x334>
 8001496:	e014      	b.n	80014c2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001498:	f7ff fbae 	bl	8000bf8 <HAL_GetTick>
 800149c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800149e:	e00a      	b.n	80014b6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014a0:	f7ff fbaa 	bl	8000bf8 <HAL_GetTick>
 80014a4:	4602      	mov	r2, r0
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d901      	bls.n	80014b6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80014b2:	2303      	movs	r3, #3
 80014b4:	e0b5      	b.n	8001622 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014b6:	4b3e      	ldr	r3, [pc, #248]	@ (80015b0 <HAL_RCC_OscConfig+0x470>)
 80014b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014ba:	f003 0302 	and.w	r3, r3, #2
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d1ee      	bne.n	80014a0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80014c2:	7dfb      	ldrb	r3, [r7, #23]
 80014c4:	2b01      	cmp	r3, #1
 80014c6:	d105      	bne.n	80014d4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014c8:	4b39      	ldr	r3, [pc, #228]	@ (80015b0 <HAL_RCC_OscConfig+0x470>)
 80014ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014cc:	4a38      	ldr	r2, [pc, #224]	@ (80015b0 <HAL_RCC_OscConfig+0x470>)
 80014ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80014d2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	699b      	ldr	r3, [r3, #24]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	f000 80a1 	beq.w	8001620 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80014de:	4b34      	ldr	r3, [pc, #208]	@ (80015b0 <HAL_RCC_OscConfig+0x470>)
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	f003 030c 	and.w	r3, r3, #12
 80014e6:	2b08      	cmp	r3, #8
 80014e8:	d05c      	beq.n	80015a4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	699b      	ldr	r3, [r3, #24]
 80014ee:	2b02      	cmp	r3, #2
 80014f0:	d141      	bne.n	8001576 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014f2:	4b31      	ldr	r3, [pc, #196]	@ (80015b8 <HAL_RCC_OscConfig+0x478>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014f8:	f7ff fb7e 	bl	8000bf8 <HAL_GetTick>
 80014fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014fe:	e008      	b.n	8001512 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001500:	f7ff fb7a 	bl	8000bf8 <HAL_GetTick>
 8001504:	4602      	mov	r2, r0
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	2b02      	cmp	r3, #2
 800150c:	d901      	bls.n	8001512 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800150e:	2303      	movs	r3, #3
 8001510:	e087      	b.n	8001622 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001512:	4b27      	ldr	r3, [pc, #156]	@ (80015b0 <HAL_RCC_OscConfig+0x470>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800151a:	2b00      	cmp	r3, #0
 800151c:	d1f0      	bne.n	8001500 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	69da      	ldr	r2, [r3, #28]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6a1b      	ldr	r3, [r3, #32]
 8001526:	431a      	orrs	r2, r3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800152c:	019b      	lsls	r3, r3, #6
 800152e:	431a      	orrs	r2, r3
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001534:	085b      	lsrs	r3, r3, #1
 8001536:	3b01      	subs	r3, #1
 8001538:	041b      	lsls	r3, r3, #16
 800153a:	431a      	orrs	r2, r3
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001540:	061b      	lsls	r3, r3, #24
 8001542:	491b      	ldr	r1, [pc, #108]	@ (80015b0 <HAL_RCC_OscConfig+0x470>)
 8001544:	4313      	orrs	r3, r2
 8001546:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001548:	4b1b      	ldr	r3, [pc, #108]	@ (80015b8 <HAL_RCC_OscConfig+0x478>)
 800154a:	2201      	movs	r2, #1
 800154c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800154e:	f7ff fb53 	bl	8000bf8 <HAL_GetTick>
 8001552:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001554:	e008      	b.n	8001568 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001556:	f7ff fb4f 	bl	8000bf8 <HAL_GetTick>
 800155a:	4602      	mov	r2, r0
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	1ad3      	subs	r3, r2, r3
 8001560:	2b02      	cmp	r3, #2
 8001562:	d901      	bls.n	8001568 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001564:	2303      	movs	r3, #3
 8001566:	e05c      	b.n	8001622 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001568:	4b11      	ldr	r3, [pc, #68]	@ (80015b0 <HAL_RCC_OscConfig+0x470>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001570:	2b00      	cmp	r3, #0
 8001572:	d0f0      	beq.n	8001556 <HAL_RCC_OscConfig+0x416>
 8001574:	e054      	b.n	8001620 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001576:	4b10      	ldr	r3, [pc, #64]	@ (80015b8 <HAL_RCC_OscConfig+0x478>)
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800157c:	f7ff fb3c 	bl	8000bf8 <HAL_GetTick>
 8001580:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001582:	e008      	b.n	8001596 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001584:	f7ff fb38 	bl	8000bf8 <HAL_GetTick>
 8001588:	4602      	mov	r2, r0
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	2b02      	cmp	r3, #2
 8001590:	d901      	bls.n	8001596 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001592:	2303      	movs	r3, #3
 8001594:	e045      	b.n	8001622 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001596:	4b06      	ldr	r3, [pc, #24]	@ (80015b0 <HAL_RCC_OscConfig+0x470>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d1f0      	bne.n	8001584 <HAL_RCC_OscConfig+0x444>
 80015a2:	e03d      	b.n	8001620 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	699b      	ldr	r3, [r3, #24]
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	d107      	bne.n	80015bc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80015ac:	2301      	movs	r3, #1
 80015ae:	e038      	b.n	8001622 <HAL_RCC_OscConfig+0x4e2>
 80015b0:	40023800 	.word	0x40023800
 80015b4:	40007000 	.word	0x40007000
 80015b8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80015bc:	4b1b      	ldr	r3, [pc, #108]	@ (800162c <HAL_RCC_OscConfig+0x4ec>)
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	699b      	ldr	r3, [r3, #24]
 80015c6:	2b01      	cmp	r3, #1
 80015c8:	d028      	beq.n	800161c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d121      	bne.n	800161c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015e2:	429a      	cmp	r2, r3
 80015e4:	d11a      	bne.n	800161c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015e6:	68fa      	ldr	r2, [r7, #12]
 80015e8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80015ec:	4013      	ands	r3, r2
 80015ee:	687a      	ldr	r2, [r7, #4]
 80015f0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80015f2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d111      	bne.n	800161c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001602:	085b      	lsrs	r3, r3, #1
 8001604:	3b01      	subs	r3, #1
 8001606:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001608:	429a      	cmp	r2, r3
 800160a:	d107      	bne.n	800161c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001616:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001618:	429a      	cmp	r2, r3
 800161a:	d001      	beq.n	8001620 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800161c:	2301      	movs	r3, #1
 800161e:	e000      	b.n	8001622 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001620:	2300      	movs	r3, #0
}
 8001622:	4618      	mov	r0, r3
 8001624:	3718      	adds	r7, #24
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	40023800 	.word	0x40023800

08001630 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b084      	sub	sp, #16
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d101      	bne.n	8001644 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001640:	2301      	movs	r3, #1
 8001642:	e0cc      	b.n	80017de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001644:	4b68      	ldr	r3, [pc, #416]	@ (80017e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f003 0307 	and.w	r3, r3, #7
 800164c:	683a      	ldr	r2, [r7, #0]
 800164e:	429a      	cmp	r2, r3
 8001650:	d90c      	bls.n	800166c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001652:	4b65      	ldr	r3, [pc, #404]	@ (80017e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001654:	683a      	ldr	r2, [r7, #0]
 8001656:	b2d2      	uxtb	r2, r2
 8001658:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800165a:	4b63      	ldr	r3, [pc, #396]	@ (80017e8 <HAL_RCC_ClockConfig+0x1b8>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 0307 	and.w	r3, r3, #7
 8001662:	683a      	ldr	r2, [r7, #0]
 8001664:	429a      	cmp	r2, r3
 8001666:	d001      	beq.n	800166c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	e0b8      	b.n	80017de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 0302 	and.w	r3, r3, #2
 8001674:	2b00      	cmp	r3, #0
 8001676:	d020      	beq.n	80016ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f003 0304 	and.w	r3, r3, #4
 8001680:	2b00      	cmp	r3, #0
 8001682:	d005      	beq.n	8001690 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001684:	4b59      	ldr	r3, [pc, #356]	@ (80017ec <HAL_RCC_ClockConfig+0x1bc>)
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	4a58      	ldr	r2, [pc, #352]	@ (80017ec <HAL_RCC_ClockConfig+0x1bc>)
 800168a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800168e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f003 0308 	and.w	r3, r3, #8
 8001698:	2b00      	cmp	r3, #0
 800169a:	d005      	beq.n	80016a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800169c:	4b53      	ldr	r3, [pc, #332]	@ (80017ec <HAL_RCC_ClockConfig+0x1bc>)
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	4a52      	ldr	r2, [pc, #328]	@ (80017ec <HAL_RCC_ClockConfig+0x1bc>)
 80016a2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80016a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016a8:	4b50      	ldr	r3, [pc, #320]	@ (80017ec <HAL_RCC_ClockConfig+0x1bc>)
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	494d      	ldr	r1, [pc, #308]	@ (80017ec <HAL_RCC_ClockConfig+0x1bc>)
 80016b6:	4313      	orrs	r3, r2
 80016b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 0301 	and.w	r3, r3, #1
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d044      	beq.n	8001750 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d107      	bne.n	80016de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016ce:	4b47      	ldr	r3, [pc, #284]	@ (80017ec <HAL_RCC_ClockConfig+0x1bc>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d119      	bne.n	800170e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e07f      	b.n	80017de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d003      	beq.n	80016ee <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016ea:	2b03      	cmp	r3, #3
 80016ec:	d107      	bne.n	80016fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016ee:	4b3f      	ldr	r3, [pc, #252]	@ (80017ec <HAL_RCC_ClockConfig+0x1bc>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d109      	bne.n	800170e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e06f      	b.n	80017de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016fe:	4b3b      	ldr	r3, [pc, #236]	@ (80017ec <HAL_RCC_ClockConfig+0x1bc>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 0302 	and.w	r3, r3, #2
 8001706:	2b00      	cmp	r3, #0
 8001708:	d101      	bne.n	800170e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e067      	b.n	80017de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800170e:	4b37      	ldr	r3, [pc, #220]	@ (80017ec <HAL_RCC_ClockConfig+0x1bc>)
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	f023 0203 	bic.w	r2, r3, #3
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	4934      	ldr	r1, [pc, #208]	@ (80017ec <HAL_RCC_ClockConfig+0x1bc>)
 800171c:	4313      	orrs	r3, r2
 800171e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001720:	f7ff fa6a 	bl	8000bf8 <HAL_GetTick>
 8001724:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001726:	e00a      	b.n	800173e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001728:	f7ff fa66 	bl	8000bf8 <HAL_GetTick>
 800172c:	4602      	mov	r2, r0
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001736:	4293      	cmp	r3, r2
 8001738:	d901      	bls.n	800173e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800173a:	2303      	movs	r3, #3
 800173c:	e04f      	b.n	80017de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800173e:	4b2b      	ldr	r3, [pc, #172]	@ (80017ec <HAL_RCC_ClockConfig+0x1bc>)
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	f003 020c 	and.w	r2, r3, #12
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	429a      	cmp	r2, r3
 800174e:	d1eb      	bne.n	8001728 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001750:	4b25      	ldr	r3, [pc, #148]	@ (80017e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 0307 	and.w	r3, r3, #7
 8001758:	683a      	ldr	r2, [r7, #0]
 800175a:	429a      	cmp	r2, r3
 800175c:	d20c      	bcs.n	8001778 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800175e:	4b22      	ldr	r3, [pc, #136]	@ (80017e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001760:	683a      	ldr	r2, [r7, #0]
 8001762:	b2d2      	uxtb	r2, r2
 8001764:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001766:	4b20      	ldr	r3, [pc, #128]	@ (80017e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f003 0307 	and.w	r3, r3, #7
 800176e:	683a      	ldr	r2, [r7, #0]
 8001770:	429a      	cmp	r2, r3
 8001772:	d001      	beq.n	8001778 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001774:	2301      	movs	r3, #1
 8001776:	e032      	b.n	80017de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 0304 	and.w	r3, r3, #4
 8001780:	2b00      	cmp	r3, #0
 8001782:	d008      	beq.n	8001796 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001784:	4b19      	ldr	r3, [pc, #100]	@ (80017ec <HAL_RCC_ClockConfig+0x1bc>)
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	4916      	ldr	r1, [pc, #88]	@ (80017ec <HAL_RCC_ClockConfig+0x1bc>)
 8001792:	4313      	orrs	r3, r2
 8001794:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 0308 	and.w	r3, r3, #8
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d009      	beq.n	80017b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017a2:	4b12      	ldr	r3, [pc, #72]	@ (80017ec <HAL_RCC_ClockConfig+0x1bc>)
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	691b      	ldr	r3, [r3, #16]
 80017ae:	00db      	lsls	r3, r3, #3
 80017b0:	490e      	ldr	r1, [pc, #56]	@ (80017ec <HAL_RCC_ClockConfig+0x1bc>)
 80017b2:	4313      	orrs	r3, r2
 80017b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80017b6:	f000 f821 	bl	80017fc <HAL_RCC_GetSysClockFreq>
 80017ba:	4602      	mov	r2, r0
 80017bc:	4b0b      	ldr	r3, [pc, #44]	@ (80017ec <HAL_RCC_ClockConfig+0x1bc>)
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	091b      	lsrs	r3, r3, #4
 80017c2:	f003 030f 	and.w	r3, r3, #15
 80017c6:	490a      	ldr	r1, [pc, #40]	@ (80017f0 <HAL_RCC_ClockConfig+0x1c0>)
 80017c8:	5ccb      	ldrb	r3, [r1, r3]
 80017ca:	fa22 f303 	lsr.w	r3, r2, r3
 80017ce:	4a09      	ldr	r2, [pc, #36]	@ (80017f4 <HAL_RCC_ClockConfig+0x1c4>)
 80017d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80017d2:	4b09      	ldr	r3, [pc, #36]	@ (80017f8 <HAL_RCC_ClockConfig+0x1c8>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7ff f82e 	bl	8000838 <HAL_InitTick>

  return HAL_OK;
 80017dc:	2300      	movs	r3, #0
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3710      	adds	r7, #16
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	40023c00 	.word	0x40023c00
 80017ec:	40023800 	.word	0x40023800
 80017f0:	08005618 	.word	0x08005618
 80017f4:	20000000 	.word	0x20000000
 80017f8:	20000004 	.word	0x20000004

080017fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001800:	b090      	sub	sp, #64	@ 0x40
 8001802:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001804:	2300      	movs	r3, #0
 8001806:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8001808:	2300      	movs	r3, #0
 800180a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800180c:	2300      	movs	r3, #0
 800180e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001810:	2300      	movs	r3, #0
 8001812:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001814:	4b59      	ldr	r3, [pc, #356]	@ (800197c <HAL_RCC_GetSysClockFreq+0x180>)
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	f003 030c 	and.w	r3, r3, #12
 800181c:	2b08      	cmp	r3, #8
 800181e:	d00d      	beq.n	800183c <HAL_RCC_GetSysClockFreq+0x40>
 8001820:	2b08      	cmp	r3, #8
 8001822:	f200 80a1 	bhi.w	8001968 <HAL_RCC_GetSysClockFreq+0x16c>
 8001826:	2b00      	cmp	r3, #0
 8001828:	d002      	beq.n	8001830 <HAL_RCC_GetSysClockFreq+0x34>
 800182a:	2b04      	cmp	r3, #4
 800182c:	d003      	beq.n	8001836 <HAL_RCC_GetSysClockFreq+0x3a>
 800182e:	e09b      	b.n	8001968 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001830:	4b53      	ldr	r3, [pc, #332]	@ (8001980 <HAL_RCC_GetSysClockFreq+0x184>)
 8001832:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001834:	e09b      	b.n	800196e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001836:	4b53      	ldr	r3, [pc, #332]	@ (8001984 <HAL_RCC_GetSysClockFreq+0x188>)
 8001838:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800183a:	e098      	b.n	800196e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800183c:	4b4f      	ldr	r3, [pc, #316]	@ (800197c <HAL_RCC_GetSysClockFreq+0x180>)
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001844:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001846:	4b4d      	ldr	r3, [pc, #308]	@ (800197c <HAL_RCC_GetSysClockFreq+0x180>)
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d028      	beq.n	80018a4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001852:	4b4a      	ldr	r3, [pc, #296]	@ (800197c <HAL_RCC_GetSysClockFreq+0x180>)
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	099b      	lsrs	r3, r3, #6
 8001858:	2200      	movs	r2, #0
 800185a:	623b      	str	r3, [r7, #32]
 800185c:	627a      	str	r2, [r7, #36]	@ 0x24
 800185e:	6a3b      	ldr	r3, [r7, #32]
 8001860:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001864:	2100      	movs	r1, #0
 8001866:	4b47      	ldr	r3, [pc, #284]	@ (8001984 <HAL_RCC_GetSysClockFreq+0x188>)
 8001868:	fb03 f201 	mul.w	r2, r3, r1
 800186c:	2300      	movs	r3, #0
 800186e:	fb00 f303 	mul.w	r3, r0, r3
 8001872:	4413      	add	r3, r2
 8001874:	4a43      	ldr	r2, [pc, #268]	@ (8001984 <HAL_RCC_GetSysClockFreq+0x188>)
 8001876:	fba0 1202 	umull	r1, r2, r0, r2
 800187a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800187c:	460a      	mov	r2, r1
 800187e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001880:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001882:	4413      	add	r3, r2
 8001884:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001886:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001888:	2200      	movs	r2, #0
 800188a:	61bb      	str	r3, [r7, #24]
 800188c:	61fa      	str	r2, [r7, #28]
 800188e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001892:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001896:	f7fe fc9b 	bl	80001d0 <__aeabi_uldivmod>
 800189a:	4602      	mov	r2, r0
 800189c:	460b      	mov	r3, r1
 800189e:	4613      	mov	r3, r2
 80018a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80018a2:	e053      	b.n	800194c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018a4:	4b35      	ldr	r3, [pc, #212]	@ (800197c <HAL_RCC_GetSysClockFreq+0x180>)
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	099b      	lsrs	r3, r3, #6
 80018aa:	2200      	movs	r2, #0
 80018ac:	613b      	str	r3, [r7, #16]
 80018ae:	617a      	str	r2, [r7, #20]
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80018b6:	f04f 0b00 	mov.w	fp, #0
 80018ba:	4652      	mov	r2, sl
 80018bc:	465b      	mov	r3, fp
 80018be:	f04f 0000 	mov.w	r0, #0
 80018c2:	f04f 0100 	mov.w	r1, #0
 80018c6:	0159      	lsls	r1, r3, #5
 80018c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018cc:	0150      	lsls	r0, r2, #5
 80018ce:	4602      	mov	r2, r0
 80018d0:	460b      	mov	r3, r1
 80018d2:	ebb2 080a 	subs.w	r8, r2, sl
 80018d6:	eb63 090b 	sbc.w	r9, r3, fp
 80018da:	f04f 0200 	mov.w	r2, #0
 80018de:	f04f 0300 	mov.w	r3, #0
 80018e2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80018e6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80018ea:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80018ee:	ebb2 0408 	subs.w	r4, r2, r8
 80018f2:	eb63 0509 	sbc.w	r5, r3, r9
 80018f6:	f04f 0200 	mov.w	r2, #0
 80018fa:	f04f 0300 	mov.w	r3, #0
 80018fe:	00eb      	lsls	r3, r5, #3
 8001900:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001904:	00e2      	lsls	r2, r4, #3
 8001906:	4614      	mov	r4, r2
 8001908:	461d      	mov	r5, r3
 800190a:	eb14 030a 	adds.w	r3, r4, sl
 800190e:	603b      	str	r3, [r7, #0]
 8001910:	eb45 030b 	adc.w	r3, r5, fp
 8001914:	607b      	str	r3, [r7, #4]
 8001916:	f04f 0200 	mov.w	r2, #0
 800191a:	f04f 0300 	mov.w	r3, #0
 800191e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001922:	4629      	mov	r1, r5
 8001924:	028b      	lsls	r3, r1, #10
 8001926:	4621      	mov	r1, r4
 8001928:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800192c:	4621      	mov	r1, r4
 800192e:	028a      	lsls	r2, r1, #10
 8001930:	4610      	mov	r0, r2
 8001932:	4619      	mov	r1, r3
 8001934:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001936:	2200      	movs	r2, #0
 8001938:	60bb      	str	r3, [r7, #8]
 800193a:	60fa      	str	r2, [r7, #12]
 800193c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001940:	f7fe fc46 	bl	80001d0 <__aeabi_uldivmod>
 8001944:	4602      	mov	r2, r0
 8001946:	460b      	mov	r3, r1
 8001948:	4613      	mov	r3, r2
 800194a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800194c:	4b0b      	ldr	r3, [pc, #44]	@ (800197c <HAL_RCC_GetSysClockFreq+0x180>)
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	0c1b      	lsrs	r3, r3, #16
 8001952:	f003 0303 	and.w	r3, r3, #3
 8001956:	3301      	adds	r3, #1
 8001958:	005b      	lsls	r3, r3, #1
 800195a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800195c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800195e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001960:	fbb2 f3f3 	udiv	r3, r2, r3
 8001964:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001966:	e002      	b.n	800196e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001968:	4b05      	ldr	r3, [pc, #20]	@ (8001980 <HAL_RCC_GetSysClockFreq+0x184>)
 800196a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800196c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800196e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001970:	4618      	mov	r0, r3
 8001972:	3740      	adds	r7, #64	@ 0x40
 8001974:	46bd      	mov	sp, r7
 8001976:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800197a:	bf00      	nop
 800197c:	40023800 	.word	0x40023800
 8001980:	00f42400 	.word	0x00f42400
 8001984:	017d7840 	.word	0x017d7840

08001988 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800198c:	4b03      	ldr	r3, [pc, #12]	@ (800199c <HAL_RCC_GetHCLKFreq+0x14>)
 800198e:	681b      	ldr	r3, [r3, #0]
}
 8001990:	4618      	mov	r0, r3
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	20000000 	.word	0x20000000

080019a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80019a4:	f7ff fff0 	bl	8001988 <HAL_RCC_GetHCLKFreq>
 80019a8:	4602      	mov	r2, r0
 80019aa:	4b05      	ldr	r3, [pc, #20]	@ (80019c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	0a9b      	lsrs	r3, r3, #10
 80019b0:	f003 0307 	and.w	r3, r3, #7
 80019b4:	4903      	ldr	r1, [pc, #12]	@ (80019c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80019b6:	5ccb      	ldrb	r3, [r1, r3]
 80019b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019bc:	4618      	mov	r0, r3
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	40023800 	.word	0x40023800
 80019c4:	08005628 	.word	0x08005628

080019c8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
 80019d0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	220f      	movs	r2, #15
 80019d6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80019d8:	4b12      	ldr	r3, [pc, #72]	@ (8001a24 <HAL_RCC_GetClockConfig+0x5c>)
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	f003 0203 	and.w	r2, r3, #3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80019e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001a24 <HAL_RCC_GetClockConfig+0x5c>)
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80019f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001a24 <HAL_RCC_GetClockConfig+0x5c>)
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80019fc:	4b09      	ldr	r3, [pc, #36]	@ (8001a24 <HAL_RCC_GetClockConfig+0x5c>)
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	08db      	lsrs	r3, r3, #3
 8001a02:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001a0a:	4b07      	ldr	r3, [pc, #28]	@ (8001a28 <HAL_RCC_GetClockConfig+0x60>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 0207 	and.w	r2, r3, #7
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	601a      	str	r2, [r3, #0]
}
 8001a16:	bf00      	nop
 8001a18:	370c      	adds	r7, #12
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	40023800 	.word	0x40023800
 8001a28:	40023c00 	.word	0x40023c00

08001a2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d101      	bne.n	8001a3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e041      	b.n	8001ac2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d106      	bne.n	8001a58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	f000 f839 	bl	8001aca <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2202      	movs	r2, #2
 8001a5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	3304      	adds	r3, #4
 8001a68:	4619      	mov	r1, r3
 8001a6a:	4610      	mov	r0, r2
 8001a6c:	f000 f9c0 	bl	8001df0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2201      	movs	r2, #1
 8001a74:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2201      	movs	r2, #1
 8001a84:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2201      	movs	r2, #1
 8001a94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2201      	movs	r2, #1
 8001aac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2201      	movs	r2, #1
 8001abc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001ac0:	2300      	movs	r3, #0
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3708      	adds	r7, #8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}

08001aca <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001aca:	b480      	push	{r7}
 8001acc:	b083      	sub	sp, #12
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001ad2:	bf00      	nop
 8001ad4:	370c      	adds	r7, #12
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
	...

08001ae0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b085      	sub	sp, #20
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001aee:	b2db      	uxtb	r3, r3
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d001      	beq.n	8001af8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	e04e      	b.n	8001b96 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2202      	movs	r2, #2
 8001afc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	68da      	ldr	r2, [r3, #12]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f042 0201 	orr.w	r2, r2, #1
 8001b0e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a23      	ldr	r2, [pc, #140]	@ (8001ba4 <HAL_TIM_Base_Start_IT+0xc4>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d022      	beq.n	8001b60 <HAL_TIM_Base_Start_IT+0x80>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b22:	d01d      	beq.n	8001b60 <HAL_TIM_Base_Start_IT+0x80>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a1f      	ldr	r2, [pc, #124]	@ (8001ba8 <HAL_TIM_Base_Start_IT+0xc8>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d018      	beq.n	8001b60 <HAL_TIM_Base_Start_IT+0x80>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a1e      	ldr	r2, [pc, #120]	@ (8001bac <HAL_TIM_Base_Start_IT+0xcc>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d013      	beq.n	8001b60 <HAL_TIM_Base_Start_IT+0x80>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a1c      	ldr	r2, [pc, #112]	@ (8001bb0 <HAL_TIM_Base_Start_IT+0xd0>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d00e      	beq.n	8001b60 <HAL_TIM_Base_Start_IT+0x80>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a1b      	ldr	r2, [pc, #108]	@ (8001bb4 <HAL_TIM_Base_Start_IT+0xd4>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d009      	beq.n	8001b60 <HAL_TIM_Base_Start_IT+0x80>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a19      	ldr	r2, [pc, #100]	@ (8001bb8 <HAL_TIM_Base_Start_IT+0xd8>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d004      	beq.n	8001b60 <HAL_TIM_Base_Start_IT+0x80>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a18      	ldr	r2, [pc, #96]	@ (8001bbc <HAL_TIM_Base_Start_IT+0xdc>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d111      	bne.n	8001b84 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	f003 0307 	and.w	r3, r3, #7
 8001b6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	2b06      	cmp	r3, #6
 8001b70:	d010      	beq.n	8001b94 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f042 0201 	orr.w	r2, r2, #1
 8001b80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b82:	e007      	b.n	8001b94 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f042 0201 	orr.w	r2, r2, #1
 8001b92:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b94:	2300      	movs	r3, #0
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3714      	adds	r7, #20
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	40010000 	.word	0x40010000
 8001ba8:	40000400 	.word	0x40000400
 8001bac:	40000800 	.word	0x40000800
 8001bb0:	40000c00 	.word	0x40000c00
 8001bb4:	40010400 	.word	0x40010400
 8001bb8:	40014000 	.word	0x40014000
 8001bbc:	40001800 	.word	0x40001800

08001bc0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b084      	sub	sp, #16
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	68db      	ldr	r3, [r3, #12]
 8001bce:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	691b      	ldr	r3, [r3, #16]
 8001bd6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	f003 0302 	and.w	r3, r3, #2
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d020      	beq.n	8001c24 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	f003 0302 	and.w	r3, r3, #2
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d01b      	beq.n	8001c24 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f06f 0202 	mvn.w	r2, #2
 8001bf4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	699b      	ldr	r3, [r3, #24]
 8001c02:	f003 0303 	and.w	r3, r3, #3
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d003      	beq.n	8001c12 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c0a:	6878      	ldr	r0, [r7, #4]
 8001c0c:	f000 f8d2 	bl	8001db4 <HAL_TIM_IC_CaptureCallback>
 8001c10:	e005      	b.n	8001c1e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f000 f8c4 	bl	8001da0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c18:	6878      	ldr	r0, [r7, #4]
 8001c1a:	f000 f8d5 	bl	8001dc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2200      	movs	r2, #0
 8001c22:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	f003 0304 	and.w	r3, r3, #4
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d020      	beq.n	8001c70 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	f003 0304 	and.w	r3, r3, #4
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d01b      	beq.n	8001c70 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f06f 0204 	mvn.w	r2, #4
 8001c40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2202      	movs	r2, #2
 8001c46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	699b      	ldr	r3, [r3, #24]
 8001c4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d003      	beq.n	8001c5e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f000 f8ac 	bl	8001db4 <HAL_TIM_IC_CaptureCallback>
 8001c5c:	e005      	b.n	8001c6a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f000 f89e 	bl	8001da0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c64:	6878      	ldr	r0, [r7, #4]
 8001c66:	f000 f8af 	bl	8001dc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	f003 0308 	and.w	r3, r3, #8
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d020      	beq.n	8001cbc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	f003 0308 	and.w	r3, r3, #8
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d01b      	beq.n	8001cbc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f06f 0208 	mvn.w	r2, #8
 8001c8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2204      	movs	r2, #4
 8001c92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	69db      	ldr	r3, [r3, #28]
 8001c9a:	f003 0303 	and.w	r3, r3, #3
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d003      	beq.n	8001caa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	f000 f886 	bl	8001db4 <HAL_TIM_IC_CaptureCallback>
 8001ca8:	e005      	b.n	8001cb6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f000 f878 	bl	8001da0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f000 f889 	bl	8001dc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	f003 0310 	and.w	r3, r3, #16
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d020      	beq.n	8001d08 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	f003 0310 	and.w	r3, r3, #16
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d01b      	beq.n	8001d08 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f06f 0210 	mvn.w	r2, #16
 8001cd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2208      	movs	r2, #8
 8001cde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	69db      	ldr	r3, [r3, #28]
 8001ce6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d003      	beq.n	8001cf6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f000 f860 	bl	8001db4 <HAL_TIM_IC_CaptureCallback>
 8001cf4:	e005      	b.n	8001d02 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f000 f852 	bl	8001da0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	f000 f863 	bl	8001dc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2200      	movs	r2, #0
 8001d06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	f003 0301 	and.w	r3, r3, #1
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d00c      	beq.n	8001d2c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	f003 0301 	and.w	r3, r3, #1
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d007      	beq.n	8001d2c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f06f 0201 	mvn.w	r2, #1
 8001d24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f7fe fd42 	bl	80007b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d00c      	beq.n	8001d50 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d007      	beq.n	8001d50 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001d48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f000 f900 	bl	8001f50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d00c      	beq.n	8001d74 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d007      	beq.n	8001d74 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001d6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f000 f834 	bl	8001ddc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	f003 0320 	and.w	r3, r3, #32
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d00c      	beq.n	8001d98 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	f003 0320 	and.w	r3, r3, #32
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d007      	beq.n	8001d98 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f06f 0220 	mvn.w	r2, #32
 8001d90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f000 f8d2 	bl	8001f3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001d98:	bf00      	nop
 8001d9a:	3710      	adds	r7, #16
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}

08001da0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001da8:	bf00      	nop
 8001daa:	370c      	adds	r7, #12
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr

08001db4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001dbc:	bf00      	nop
 8001dbe:	370c      	adds	r7, #12
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr

08001dc8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001dd0:	bf00      	nop
 8001dd2:	370c      	adds	r7, #12
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr

08001ddc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001de4:	bf00      	nop
 8001de6:	370c      	adds	r7, #12
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr

08001df0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b085      	sub	sp, #20
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	4a43      	ldr	r2, [pc, #268]	@ (8001f10 <TIM_Base_SetConfig+0x120>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d013      	beq.n	8001e30 <TIM_Base_SetConfig+0x40>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e0e:	d00f      	beq.n	8001e30 <TIM_Base_SetConfig+0x40>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	4a40      	ldr	r2, [pc, #256]	@ (8001f14 <TIM_Base_SetConfig+0x124>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d00b      	beq.n	8001e30 <TIM_Base_SetConfig+0x40>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	4a3f      	ldr	r2, [pc, #252]	@ (8001f18 <TIM_Base_SetConfig+0x128>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d007      	beq.n	8001e30 <TIM_Base_SetConfig+0x40>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	4a3e      	ldr	r2, [pc, #248]	@ (8001f1c <TIM_Base_SetConfig+0x12c>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d003      	beq.n	8001e30 <TIM_Base_SetConfig+0x40>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	4a3d      	ldr	r2, [pc, #244]	@ (8001f20 <TIM_Base_SetConfig+0x130>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d108      	bne.n	8001e42 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001e36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	68fa      	ldr	r2, [r7, #12]
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a32      	ldr	r2, [pc, #200]	@ (8001f10 <TIM_Base_SetConfig+0x120>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d02b      	beq.n	8001ea2 <TIM_Base_SetConfig+0xb2>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e50:	d027      	beq.n	8001ea2 <TIM_Base_SetConfig+0xb2>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a2f      	ldr	r2, [pc, #188]	@ (8001f14 <TIM_Base_SetConfig+0x124>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d023      	beq.n	8001ea2 <TIM_Base_SetConfig+0xb2>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a2e      	ldr	r2, [pc, #184]	@ (8001f18 <TIM_Base_SetConfig+0x128>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d01f      	beq.n	8001ea2 <TIM_Base_SetConfig+0xb2>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a2d      	ldr	r2, [pc, #180]	@ (8001f1c <TIM_Base_SetConfig+0x12c>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d01b      	beq.n	8001ea2 <TIM_Base_SetConfig+0xb2>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a2c      	ldr	r2, [pc, #176]	@ (8001f20 <TIM_Base_SetConfig+0x130>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d017      	beq.n	8001ea2 <TIM_Base_SetConfig+0xb2>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a2b      	ldr	r2, [pc, #172]	@ (8001f24 <TIM_Base_SetConfig+0x134>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d013      	beq.n	8001ea2 <TIM_Base_SetConfig+0xb2>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a2a      	ldr	r2, [pc, #168]	@ (8001f28 <TIM_Base_SetConfig+0x138>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d00f      	beq.n	8001ea2 <TIM_Base_SetConfig+0xb2>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4a29      	ldr	r2, [pc, #164]	@ (8001f2c <TIM_Base_SetConfig+0x13c>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d00b      	beq.n	8001ea2 <TIM_Base_SetConfig+0xb2>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4a28      	ldr	r2, [pc, #160]	@ (8001f30 <TIM_Base_SetConfig+0x140>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d007      	beq.n	8001ea2 <TIM_Base_SetConfig+0xb2>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4a27      	ldr	r2, [pc, #156]	@ (8001f34 <TIM_Base_SetConfig+0x144>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d003      	beq.n	8001ea2 <TIM_Base_SetConfig+0xb2>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4a26      	ldr	r2, [pc, #152]	@ (8001f38 <TIM_Base_SetConfig+0x148>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d108      	bne.n	8001eb4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001ea8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	68db      	ldr	r3, [r3, #12]
 8001eae:	68fa      	ldr	r2, [r7, #12]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	695b      	ldr	r3, [r3, #20]
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	689a      	ldr	r2, [r3, #8]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4a0e      	ldr	r2, [pc, #56]	@ (8001f10 <TIM_Base_SetConfig+0x120>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d003      	beq.n	8001ee2 <TIM_Base_SetConfig+0xf2>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4a10      	ldr	r2, [pc, #64]	@ (8001f20 <TIM_Base_SetConfig+0x130>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d103      	bne.n	8001eea <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	691a      	ldr	r2, [r3, #16]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f043 0204 	orr.w	r2, r3, #4
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2201      	movs	r2, #1
 8001efa:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	68fa      	ldr	r2, [r7, #12]
 8001f00:	601a      	str	r2, [r3, #0]
}
 8001f02:	bf00      	nop
 8001f04:	3714      	adds	r7, #20
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	40010000 	.word	0x40010000
 8001f14:	40000400 	.word	0x40000400
 8001f18:	40000800 	.word	0x40000800
 8001f1c:	40000c00 	.word	0x40000c00
 8001f20:	40010400 	.word	0x40010400
 8001f24:	40014000 	.word	0x40014000
 8001f28:	40014400 	.word	0x40014400
 8001f2c:	40014800 	.word	0x40014800
 8001f30:	40001800 	.word	0x40001800
 8001f34:	40001c00 	.word	0x40001c00
 8001f38:	40002000 	.word	0x40002000

08001f3c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001f44:	bf00      	nop
 8001f46:	370c      	adds	r7, #12
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001f58:	bf00      	nop
 8001f5a:	370c      	adds	r7, #12
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr

08001f64 <__NVIC_SetPriority>:
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	6039      	str	r1, [r7, #0]
 8001f6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	db0a      	blt.n	8001f8e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	b2da      	uxtb	r2, r3
 8001f7c:	490c      	ldr	r1, [pc, #48]	@ (8001fb0 <__NVIC_SetPriority+0x4c>)
 8001f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f82:	0112      	lsls	r2, r2, #4
 8001f84:	b2d2      	uxtb	r2, r2
 8001f86:	440b      	add	r3, r1
 8001f88:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001f8c:	e00a      	b.n	8001fa4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	b2da      	uxtb	r2, r3
 8001f92:	4908      	ldr	r1, [pc, #32]	@ (8001fb4 <__NVIC_SetPriority+0x50>)
 8001f94:	79fb      	ldrb	r3, [r7, #7]
 8001f96:	f003 030f 	and.w	r3, r3, #15
 8001f9a:	3b04      	subs	r3, #4
 8001f9c:	0112      	lsls	r2, r2, #4
 8001f9e:	b2d2      	uxtb	r2, r2
 8001fa0:	440b      	add	r3, r1
 8001fa2:	761a      	strb	r2, [r3, #24]
}
 8001fa4:	bf00      	nop
 8001fa6:	370c      	adds	r7, #12
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr
 8001fb0:	e000e100 	.word	0xe000e100
 8001fb4:	e000ed00 	.word	0xe000ed00

08001fb8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8001fbc:	4b05      	ldr	r3, [pc, #20]	@ (8001fd4 <SysTick_Handler+0x1c>)
 8001fbe:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8001fc0:	f001 fd46 	bl	8003a50 <xTaskGetSchedulerState>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d001      	beq.n	8001fce <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8001fca:	f002 fb3d 	bl	8004648 <xPortSysTickHandler>
  }
}
 8001fce:	bf00      	nop
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	e000e010 	.word	0xe000e010

08001fd8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8001fdc:	2100      	movs	r1, #0
 8001fde:	f06f 0004 	mvn.w	r0, #4
 8001fe2:	f7ff ffbf 	bl	8001f64 <__NVIC_SetPriority>
#endif
}
 8001fe6:	bf00      	nop
 8001fe8:	bd80      	pop	{r7, pc}
	...

08001fec <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001ff2:	f3ef 8305 	mrs	r3, IPSR
 8001ff6:	603b      	str	r3, [r7, #0]
  return(result);
 8001ff8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d003      	beq.n	8002006 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8001ffe:	f06f 0305 	mvn.w	r3, #5
 8002002:	607b      	str	r3, [r7, #4]
 8002004:	e00c      	b.n	8002020 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002006:	4b0a      	ldr	r3, [pc, #40]	@ (8002030 <osKernelInitialize+0x44>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d105      	bne.n	800201a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800200e:	4b08      	ldr	r3, [pc, #32]	@ (8002030 <osKernelInitialize+0x44>)
 8002010:	2201      	movs	r2, #1
 8002012:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002014:	2300      	movs	r3, #0
 8002016:	607b      	str	r3, [r7, #4]
 8002018:	e002      	b.n	8002020 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800201a:	f04f 33ff 	mov.w	r3, #4294967295
 800201e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002020:	687b      	ldr	r3, [r7, #4]
}
 8002022:	4618      	mov	r0, r3
 8002024:	370c      	adds	r7, #12
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop
 8002030:	200000dc 	.word	0x200000dc

08002034 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800203a:	f3ef 8305 	mrs	r3, IPSR
 800203e:	603b      	str	r3, [r7, #0]
  return(result);
 8002040:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002042:	2b00      	cmp	r3, #0
 8002044:	d003      	beq.n	800204e <osKernelStart+0x1a>
    stat = osErrorISR;
 8002046:	f06f 0305 	mvn.w	r3, #5
 800204a:	607b      	str	r3, [r7, #4]
 800204c:	e010      	b.n	8002070 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800204e:	4b0b      	ldr	r3, [pc, #44]	@ (800207c <osKernelStart+0x48>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	2b01      	cmp	r3, #1
 8002054:	d109      	bne.n	800206a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002056:	f7ff ffbf 	bl	8001fd8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800205a:	4b08      	ldr	r3, [pc, #32]	@ (800207c <osKernelStart+0x48>)
 800205c:	2202      	movs	r2, #2
 800205e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002060:	f001 f892 	bl	8003188 <vTaskStartScheduler>
      stat = osOK;
 8002064:	2300      	movs	r3, #0
 8002066:	607b      	str	r3, [r7, #4]
 8002068:	e002      	b.n	8002070 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800206a:	f04f 33ff 	mov.w	r3, #4294967295
 800206e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002070:	687b      	ldr	r3, [r7, #4]
}
 8002072:	4618      	mov	r0, r3
 8002074:	3708      	adds	r7, #8
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	200000dc 	.word	0x200000dc

08002080 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002080:	b580      	push	{r7, lr}
 8002082:	b08e      	sub	sp, #56	@ 0x38
 8002084:	af04      	add	r7, sp, #16
 8002086:	60f8      	str	r0, [r7, #12]
 8002088:	60b9      	str	r1, [r7, #8]
 800208a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800208c:	2300      	movs	r3, #0
 800208e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002090:	f3ef 8305 	mrs	r3, IPSR
 8002094:	617b      	str	r3, [r7, #20]
  return(result);
 8002096:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002098:	2b00      	cmp	r3, #0
 800209a:	d17e      	bne.n	800219a <osThreadNew+0x11a>
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d07b      	beq.n	800219a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80020a2:	2380      	movs	r3, #128	@ 0x80
 80020a4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80020a6:	2318      	movs	r3, #24
 80020a8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80020aa:	2300      	movs	r3, #0
 80020ac:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80020ae:	f04f 33ff 	mov.w	r3, #4294967295
 80020b2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d045      	beq.n	8002146 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d002      	beq.n	80020c8 <osThreadNew+0x48>
        name = attr->name;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	699b      	ldr	r3, [r3, #24]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d002      	beq.n	80020d6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	699b      	ldr	r3, [r3, #24]
 80020d4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d008      	beq.n	80020ee <osThreadNew+0x6e>
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	2b38      	cmp	r3, #56	@ 0x38
 80020e0:	d805      	bhi.n	80020ee <osThreadNew+0x6e>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	f003 0301 	and.w	r3, r3, #1
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <osThreadNew+0x72>
        return (NULL);
 80020ee:	2300      	movs	r3, #0
 80020f0:	e054      	b.n	800219c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	695b      	ldr	r3, [r3, #20]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d003      	beq.n	8002102 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	695b      	ldr	r3, [r3, #20]
 80020fe:	089b      	lsrs	r3, r3, #2
 8002100:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d00e      	beq.n	8002128 <osThreadNew+0xa8>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	68db      	ldr	r3, [r3, #12]
 800210e:	2ba7      	cmp	r3, #167	@ 0xa7
 8002110:	d90a      	bls.n	8002128 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002116:	2b00      	cmp	r3, #0
 8002118:	d006      	beq.n	8002128 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	695b      	ldr	r3, [r3, #20]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d002      	beq.n	8002128 <osThreadNew+0xa8>
        mem = 1;
 8002122:	2301      	movs	r3, #1
 8002124:	61bb      	str	r3, [r7, #24]
 8002126:	e010      	b.n	800214a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d10c      	bne.n	800214a <osThreadNew+0xca>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d108      	bne.n	800214a <osThreadNew+0xca>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	691b      	ldr	r3, [r3, #16]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d104      	bne.n	800214a <osThreadNew+0xca>
          mem = 0;
 8002140:	2300      	movs	r3, #0
 8002142:	61bb      	str	r3, [r7, #24]
 8002144:	e001      	b.n	800214a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002146:	2300      	movs	r3, #0
 8002148:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	2b01      	cmp	r3, #1
 800214e:	d110      	bne.n	8002172 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002154:	687a      	ldr	r2, [r7, #4]
 8002156:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002158:	9202      	str	r2, [sp, #8]
 800215a:	9301      	str	r3, [sp, #4]
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	9300      	str	r3, [sp, #0]
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	6a3a      	ldr	r2, [r7, #32]
 8002164:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002166:	68f8      	ldr	r0, [r7, #12]
 8002168:	f000 fe1a 	bl	8002da0 <xTaskCreateStatic>
 800216c:	4603      	mov	r3, r0
 800216e:	613b      	str	r3, [r7, #16]
 8002170:	e013      	b.n	800219a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002172:	69bb      	ldr	r3, [r7, #24]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d110      	bne.n	800219a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002178:	6a3b      	ldr	r3, [r7, #32]
 800217a:	b29a      	uxth	r2, r3
 800217c:	f107 0310 	add.w	r3, r7, #16
 8002180:	9301      	str	r3, [sp, #4]
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	9300      	str	r3, [sp, #0]
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800218a:	68f8      	ldr	r0, [r7, #12]
 800218c:	f000 fe68 	bl	8002e60 <xTaskCreate>
 8002190:	4603      	mov	r3, r0
 8002192:	2b01      	cmp	r3, #1
 8002194:	d001      	beq.n	800219a <osThreadNew+0x11a>
            hTask = NULL;
 8002196:	2300      	movs	r3, #0
 8002198:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800219a:	693b      	ldr	r3, [r7, #16]
}
 800219c:	4618      	mov	r0, r3
 800219e:	3728      	adds	r7, #40	@ 0x28
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}

080021a4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b084      	sub	sp, #16
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80021ac:	f3ef 8305 	mrs	r3, IPSR
 80021b0:	60bb      	str	r3, [r7, #8]
  return(result);
 80021b2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d003      	beq.n	80021c0 <osDelay+0x1c>
    stat = osErrorISR;
 80021b8:	f06f 0305 	mvn.w	r3, #5
 80021bc:	60fb      	str	r3, [r7, #12]
 80021be:	e007      	b.n	80021d0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80021c0:	2300      	movs	r3, #0
 80021c2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d002      	beq.n	80021d0 <osDelay+0x2c>
      vTaskDelay(ticks);
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f000 ffa6 	bl	800311c <vTaskDelay>
    }
  }

  return (stat);
 80021d0:	68fb      	ldr	r3, [r7, #12]
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3710      	adds	r7, #16
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
	...

080021dc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80021dc:	b480      	push	{r7}
 80021de:	b085      	sub	sp, #20
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	60f8      	str	r0, [r7, #12]
 80021e4:	60b9      	str	r1, [r7, #8]
 80021e6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	4a07      	ldr	r2, [pc, #28]	@ (8002208 <vApplicationGetIdleTaskMemory+0x2c>)
 80021ec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	4a06      	ldr	r2, [pc, #24]	@ (800220c <vApplicationGetIdleTaskMemory+0x30>)
 80021f2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2280      	movs	r2, #128	@ 0x80
 80021f8:	601a      	str	r2, [r3, #0]
}
 80021fa:	bf00      	nop
 80021fc:	3714      	adds	r7, #20
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	200000e0 	.word	0x200000e0
 800220c:	20000188 	.word	0x20000188

08002210 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002210:	b480      	push	{r7}
 8002212:	b085      	sub	sp, #20
 8002214:	af00      	add	r7, sp, #0
 8002216:	60f8      	str	r0, [r7, #12]
 8002218:	60b9      	str	r1, [r7, #8]
 800221a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	4a07      	ldr	r2, [pc, #28]	@ (800223c <vApplicationGetTimerTaskMemory+0x2c>)
 8002220:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	4a06      	ldr	r2, [pc, #24]	@ (8002240 <vApplicationGetTimerTaskMemory+0x30>)
 8002226:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800222e:	601a      	str	r2, [r3, #0]
}
 8002230:	bf00      	nop
 8002232:	3714      	adds	r7, #20
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr
 800223c:	20000388 	.word	0x20000388
 8002240:	20000430 	.word	0x20000430

08002244 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	f103 0208 	add.w	r2, r3, #8
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	f04f 32ff 	mov.w	r2, #4294967295
 800225c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	f103 0208 	add.w	r2, r3, #8
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	f103 0208 	add.w	r2, r3, #8
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2200      	movs	r2, #0
 8002276:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002278:	bf00      	nop
 800227a:	370c      	adds	r7, #12
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr

08002284 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2200      	movs	r2, #0
 8002290:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002292:	bf00      	nop
 8002294:	370c      	adds	r7, #12
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr

0800229e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800229e:	b480      	push	{r7}
 80022a0:	b085      	sub	sp, #20
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	6078      	str	r0, [r7, #4]
 80022a6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	68fa      	ldr	r2, [r7, #12]
 80022b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	689a      	ldr	r2, [r3, #8]
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	683a      	ldr	r2, [r7, #0]
 80022c2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	683a      	ldr	r2, [r7, #0]
 80022c8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	687a      	ldr	r2, [r7, #4]
 80022ce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	1c5a      	adds	r2, r3, #1
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	601a      	str	r2, [r3, #0]
}
 80022da:	bf00      	nop
 80022dc:	3714      	adds	r7, #20
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr

080022e6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80022e6:	b480      	push	{r7}
 80022e8:	b085      	sub	sp, #20
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	6078      	str	r0, [r7, #4]
 80022ee:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022fc:	d103      	bne.n	8002306 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	691b      	ldr	r3, [r3, #16]
 8002302:	60fb      	str	r3, [r7, #12]
 8002304:	e00c      	b.n	8002320 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	3308      	adds	r3, #8
 800230a:	60fb      	str	r3, [r7, #12]
 800230c:	e002      	b.n	8002314 <vListInsert+0x2e>
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	60fb      	str	r3, [r7, #12]
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	68ba      	ldr	r2, [r7, #8]
 800231c:	429a      	cmp	r2, r3
 800231e:	d2f6      	bcs.n	800230e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	685a      	ldr	r2, [r3, #4]
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	683a      	ldr	r2, [r7, #0]
 800232e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	68fa      	ldr	r2, [r7, #12]
 8002334:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	683a      	ldr	r2, [r7, #0]
 800233a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	1c5a      	adds	r2, r3, #1
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	601a      	str	r2, [r3, #0]
}
 800234c:	bf00      	nop
 800234e:	3714      	adds	r7, #20
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr

08002358 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002358:	b480      	push	{r7}
 800235a:	b085      	sub	sp, #20
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	691b      	ldr	r3, [r3, #16]
 8002364:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	6892      	ldr	r2, [r2, #8]
 800236e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	687a      	ldr	r2, [r7, #4]
 8002376:	6852      	ldr	r2, [r2, #4]
 8002378:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	429a      	cmp	r2, r3
 8002382:	d103      	bne.n	800238c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	689a      	ldr	r2, [r3, #8]
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2200      	movs	r2, #0
 8002390:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	1e5a      	subs	r2, r3, #1
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	3714      	adds	r7, #20
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr

080023ac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b084      	sub	sp, #16
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d10b      	bne.n	80023d8 <xQueueGenericReset+0x2c>
	__asm volatile
 80023c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023c4:	f383 8811 	msr	BASEPRI, r3
 80023c8:	f3bf 8f6f 	isb	sy
 80023cc:	f3bf 8f4f 	dsb	sy
 80023d0:	60bb      	str	r3, [r7, #8]
}
 80023d2:	bf00      	nop
 80023d4:	bf00      	nop
 80023d6:	e7fd      	b.n	80023d4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80023d8:	f002 f8a6 	bl	8004528 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023e4:	68f9      	ldr	r1, [r7, #12]
 80023e6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80023e8:	fb01 f303 	mul.w	r3, r1, r3
 80023ec:	441a      	add	r2, r3
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2200      	movs	r2, #0
 80023f6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002408:	3b01      	subs	r3, #1
 800240a:	68f9      	ldr	r1, [r7, #12]
 800240c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800240e:	fb01 f303 	mul.w	r3, r1, r3
 8002412:	441a      	add	r2, r3
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	22ff      	movs	r2, #255	@ 0xff
 800241c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	22ff      	movs	r2, #255	@ 0xff
 8002424:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d114      	bne.n	8002458 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	691b      	ldr	r3, [r3, #16]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d01a      	beq.n	800246c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	3310      	adds	r3, #16
 800243a:	4618      	mov	r0, r3
 800243c:	f001 f942 	bl	80036c4 <xTaskRemoveFromEventList>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d012      	beq.n	800246c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002446:	4b0d      	ldr	r3, [pc, #52]	@ (800247c <xQueueGenericReset+0xd0>)
 8002448:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800244c:	601a      	str	r2, [r3, #0]
 800244e:	f3bf 8f4f 	dsb	sy
 8002452:	f3bf 8f6f 	isb	sy
 8002456:	e009      	b.n	800246c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	3310      	adds	r3, #16
 800245c:	4618      	mov	r0, r3
 800245e:	f7ff fef1 	bl	8002244 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	3324      	adds	r3, #36	@ 0x24
 8002466:	4618      	mov	r0, r3
 8002468:	f7ff feec 	bl	8002244 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800246c:	f002 f88e 	bl	800458c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002470:	2301      	movs	r3, #1
}
 8002472:	4618      	mov	r0, r3
 8002474:	3710      	adds	r7, #16
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	e000ed04 	.word	0xe000ed04

08002480 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002480:	b580      	push	{r7, lr}
 8002482:	b08e      	sub	sp, #56	@ 0x38
 8002484:	af02      	add	r7, sp, #8
 8002486:	60f8      	str	r0, [r7, #12]
 8002488:	60b9      	str	r1, [r7, #8]
 800248a:	607a      	str	r2, [r7, #4]
 800248c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d10b      	bne.n	80024ac <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8002494:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002498:	f383 8811 	msr	BASEPRI, r3
 800249c:	f3bf 8f6f 	isb	sy
 80024a0:	f3bf 8f4f 	dsb	sy
 80024a4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80024a6:	bf00      	nop
 80024a8:	bf00      	nop
 80024aa:	e7fd      	b.n	80024a8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d10b      	bne.n	80024ca <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80024b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024b6:	f383 8811 	msr	BASEPRI, r3
 80024ba:	f3bf 8f6f 	isb	sy
 80024be:	f3bf 8f4f 	dsb	sy
 80024c2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80024c4:	bf00      	nop
 80024c6:	bf00      	nop
 80024c8:	e7fd      	b.n	80024c6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d002      	beq.n	80024d6 <xQueueGenericCreateStatic+0x56>
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d001      	beq.n	80024da <xQueueGenericCreateStatic+0x5a>
 80024d6:	2301      	movs	r3, #1
 80024d8:	e000      	b.n	80024dc <xQueueGenericCreateStatic+0x5c>
 80024da:	2300      	movs	r3, #0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d10b      	bne.n	80024f8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80024e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024e4:	f383 8811 	msr	BASEPRI, r3
 80024e8:	f3bf 8f6f 	isb	sy
 80024ec:	f3bf 8f4f 	dsb	sy
 80024f0:	623b      	str	r3, [r7, #32]
}
 80024f2:	bf00      	nop
 80024f4:	bf00      	nop
 80024f6:	e7fd      	b.n	80024f4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d102      	bne.n	8002504 <xQueueGenericCreateStatic+0x84>
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d101      	bne.n	8002508 <xQueueGenericCreateStatic+0x88>
 8002504:	2301      	movs	r3, #1
 8002506:	e000      	b.n	800250a <xQueueGenericCreateStatic+0x8a>
 8002508:	2300      	movs	r3, #0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d10b      	bne.n	8002526 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800250e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002512:	f383 8811 	msr	BASEPRI, r3
 8002516:	f3bf 8f6f 	isb	sy
 800251a:	f3bf 8f4f 	dsb	sy
 800251e:	61fb      	str	r3, [r7, #28]
}
 8002520:	bf00      	nop
 8002522:	bf00      	nop
 8002524:	e7fd      	b.n	8002522 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002526:	2350      	movs	r3, #80	@ 0x50
 8002528:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	2b50      	cmp	r3, #80	@ 0x50
 800252e:	d00b      	beq.n	8002548 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8002530:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002534:	f383 8811 	msr	BASEPRI, r3
 8002538:	f3bf 8f6f 	isb	sy
 800253c:	f3bf 8f4f 	dsb	sy
 8002540:	61bb      	str	r3, [r7, #24]
}
 8002542:	bf00      	nop
 8002544:	bf00      	nop
 8002546:	e7fd      	b.n	8002544 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002548:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800254e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002550:	2b00      	cmp	r3, #0
 8002552:	d00d      	beq.n	8002570 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002554:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002556:	2201      	movs	r2, #1
 8002558:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800255c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8002560:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002562:	9300      	str	r3, [sp, #0]
 8002564:	4613      	mov	r3, r2
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	68b9      	ldr	r1, [r7, #8]
 800256a:	68f8      	ldr	r0, [r7, #12]
 800256c:	f000 f805 	bl	800257a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002570:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8002572:	4618      	mov	r0, r3
 8002574:	3730      	adds	r7, #48	@ 0x30
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}

0800257a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800257a:	b580      	push	{r7, lr}
 800257c:	b084      	sub	sp, #16
 800257e:	af00      	add	r7, sp, #0
 8002580:	60f8      	str	r0, [r7, #12]
 8002582:	60b9      	str	r1, [r7, #8]
 8002584:	607a      	str	r2, [r7, #4]
 8002586:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d103      	bne.n	8002596 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800258e:	69bb      	ldr	r3, [r7, #24]
 8002590:	69ba      	ldr	r2, [r7, #24]
 8002592:	601a      	str	r2, [r3, #0]
 8002594:	e002      	b.n	800259c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002596:	69bb      	ldr	r3, [r7, #24]
 8002598:	687a      	ldr	r2, [r7, #4]
 800259a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800259c:	69bb      	ldr	r3, [r7, #24]
 800259e:	68fa      	ldr	r2, [r7, #12]
 80025a0:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80025a2:	69bb      	ldr	r3, [r7, #24]
 80025a4:	68ba      	ldr	r2, [r7, #8]
 80025a6:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80025a8:	2101      	movs	r1, #1
 80025aa:	69b8      	ldr	r0, [r7, #24]
 80025ac:	f7ff fefe 	bl	80023ac <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80025b0:	69bb      	ldr	r3, [r7, #24]
 80025b2:	78fa      	ldrb	r2, [r7, #3]
 80025b4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80025b8:	bf00      	nop
 80025ba:	3710      	adds	r7, #16
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}

080025c0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b08e      	sub	sp, #56	@ 0x38
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	60f8      	str	r0, [r7, #12]
 80025c8:	60b9      	str	r1, [r7, #8]
 80025ca:	607a      	str	r2, [r7, #4]
 80025cc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80025ce:	2300      	movs	r3, #0
 80025d0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80025d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d10b      	bne.n	80025f4 <xQueueGenericSend+0x34>
	__asm volatile
 80025dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025e0:	f383 8811 	msr	BASEPRI, r3
 80025e4:	f3bf 8f6f 	isb	sy
 80025e8:	f3bf 8f4f 	dsb	sy
 80025ec:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80025ee:	bf00      	nop
 80025f0:	bf00      	nop
 80025f2:	e7fd      	b.n	80025f0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d103      	bne.n	8002602 <xQueueGenericSend+0x42>
 80025fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d101      	bne.n	8002606 <xQueueGenericSend+0x46>
 8002602:	2301      	movs	r3, #1
 8002604:	e000      	b.n	8002608 <xQueueGenericSend+0x48>
 8002606:	2300      	movs	r3, #0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d10b      	bne.n	8002624 <xQueueGenericSend+0x64>
	__asm volatile
 800260c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002610:	f383 8811 	msr	BASEPRI, r3
 8002614:	f3bf 8f6f 	isb	sy
 8002618:	f3bf 8f4f 	dsb	sy
 800261c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800261e:	bf00      	nop
 8002620:	bf00      	nop
 8002622:	e7fd      	b.n	8002620 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	2b02      	cmp	r3, #2
 8002628:	d103      	bne.n	8002632 <xQueueGenericSend+0x72>
 800262a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800262c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800262e:	2b01      	cmp	r3, #1
 8002630:	d101      	bne.n	8002636 <xQueueGenericSend+0x76>
 8002632:	2301      	movs	r3, #1
 8002634:	e000      	b.n	8002638 <xQueueGenericSend+0x78>
 8002636:	2300      	movs	r3, #0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d10b      	bne.n	8002654 <xQueueGenericSend+0x94>
	__asm volatile
 800263c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002640:	f383 8811 	msr	BASEPRI, r3
 8002644:	f3bf 8f6f 	isb	sy
 8002648:	f3bf 8f4f 	dsb	sy
 800264c:	623b      	str	r3, [r7, #32]
}
 800264e:	bf00      	nop
 8002650:	bf00      	nop
 8002652:	e7fd      	b.n	8002650 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002654:	f001 f9fc 	bl	8003a50 <xTaskGetSchedulerState>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d102      	bne.n	8002664 <xQueueGenericSend+0xa4>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d101      	bne.n	8002668 <xQueueGenericSend+0xa8>
 8002664:	2301      	movs	r3, #1
 8002666:	e000      	b.n	800266a <xQueueGenericSend+0xaa>
 8002668:	2300      	movs	r3, #0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d10b      	bne.n	8002686 <xQueueGenericSend+0xc6>
	__asm volatile
 800266e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002672:	f383 8811 	msr	BASEPRI, r3
 8002676:	f3bf 8f6f 	isb	sy
 800267a:	f3bf 8f4f 	dsb	sy
 800267e:	61fb      	str	r3, [r7, #28]
}
 8002680:	bf00      	nop
 8002682:	bf00      	nop
 8002684:	e7fd      	b.n	8002682 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002686:	f001 ff4f 	bl	8004528 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800268a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800268c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800268e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002690:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002692:	429a      	cmp	r2, r3
 8002694:	d302      	bcc.n	800269c <xQueueGenericSend+0xdc>
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	2b02      	cmp	r3, #2
 800269a:	d129      	bne.n	80026f0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800269c:	683a      	ldr	r2, [r7, #0]
 800269e:	68b9      	ldr	r1, [r7, #8]
 80026a0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80026a2:	f000 fa0f 	bl	8002ac4 <prvCopyDataToQueue>
 80026a6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80026a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d010      	beq.n	80026d2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80026b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026b2:	3324      	adds	r3, #36	@ 0x24
 80026b4:	4618      	mov	r0, r3
 80026b6:	f001 f805 	bl	80036c4 <xTaskRemoveFromEventList>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d013      	beq.n	80026e8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80026c0:	4b3f      	ldr	r3, [pc, #252]	@ (80027c0 <xQueueGenericSend+0x200>)
 80026c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80026c6:	601a      	str	r2, [r3, #0]
 80026c8:	f3bf 8f4f 	dsb	sy
 80026cc:	f3bf 8f6f 	isb	sy
 80026d0:	e00a      	b.n	80026e8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80026d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d007      	beq.n	80026e8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80026d8:	4b39      	ldr	r3, [pc, #228]	@ (80027c0 <xQueueGenericSend+0x200>)
 80026da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80026de:	601a      	str	r2, [r3, #0]
 80026e0:	f3bf 8f4f 	dsb	sy
 80026e4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80026e8:	f001 ff50 	bl	800458c <vPortExitCritical>
				return pdPASS;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e063      	b.n	80027b8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d103      	bne.n	80026fe <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80026f6:	f001 ff49 	bl	800458c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80026fa:	2300      	movs	r3, #0
 80026fc:	e05c      	b.n	80027b8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80026fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002700:	2b00      	cmp	r3, #0
 8002702:	d106      	bne.n	8002712 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002704:	f107 0314 	add.w	r3, r7, #20
 8002708:	4618      	mov	r0, r3
 800270a:	f001 f83f 	bl	800378c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800270e:	2301      	movs	r3, #1
 8002710:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002712:	f001 ff3b 	bl	800458c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002716:	f000 fda7 	bl	8003268 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800271a:	f001 ff05 	bl	8004528 <vPortEnterCritical>
 800271e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002720:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002724:	b25b      	sxtb	r3, r3
 8002726:	f1b3 3fff 	cmp.w	r3, #4294967295
 800272a:	d103      	bne.n	8002734 <xQueueGenericSend+0x174>
 800272c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800272e:	2200      	movs	r2, #0
 8002730:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002734:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002736:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800273a:	b25b      	sxtb	r3, r3
 800273c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002740:	d103      	bne.n	800274a <xQueueGenericSend+0x18a>
 8002742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002744:	2200      	movs	r2, #0
 8002746:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800274a:	f001 ff1f 	bl	800458c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800274e:	1d3a      	adds	r2, r7, #4
 8002750:	f107 0314 	add.w	r3, r7, #20
 8002754:	4611      	mov	r1, r2
 8002756:	4618      	mov	r0, r3
 8002758:	f001 f82e 	bl	80037b8 <xTaskCheckForTimeOut>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d124      	bne.n	80027ac <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002762:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002764:	f000 faa6 	bl	8002cb4 <prvIsQueueFull>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d018      	beq.n	80027a0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800276e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002770:	3310      	adds	r3, #16
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	4611      	mov	r1, r2
 8002776:	4618      	mov	r0, r3
 8002778:	f000 ff52 	bl	8003620 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800277c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800277e:	f000 fa31 	bl	8002be4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002782:	f000 fd7f 	bl	8003284 <xTaskResumeAll>
 8002786:	4603      	mov	r3, r0
 8002788:	2b00      	cmp	r3, #0
 800278a:	f47f af7c 	bne.w	8002686 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800278e:	4b0c      	ldr	r3, [pc, #48]	@ (80027c0 <xQueueGenericSend+0x200>)
 8002790:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002794:	601a      	str	r2, [r3, #0]
 8002796:	f3bf 8f4f 	dsb	sy
 800279a:	f3bf 8f6f 	isb	sy
 800279e:	e772      	b.n	8002686 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80027a0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80027a2:	f000 fa1f 	bl	8002be4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80027a6:	f000 fd6d 	bl	8003284 <xTaskResumeAll>
 80027aa:	e76c      	b.n	8002686 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80027ac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80027ae:	f000 fa19 	bl	8002be4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80027b2:	f000 fd67 	bl	8003284 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80027b6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3738      	adds	r7, #56	@ 0x38
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	e000ed04 	.word	0xe000ed04

080027c4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b090      	sub	sp, #64	@ 0x40
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	60b9      	str	r1, [r7, #8]
 80027ce:	607a      	str	r2, [r7, #4]
 80027d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80027d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d10b      	bne.n	80027f4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80027dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027e0:	f383 8811 	msr	BASEPRI, r3
 80027e4:	f3bf 8f6f 	isb	sy
 80027e8:	f3bf 8f4f 	dsb	sy
 80027ec:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80027ee:	bf00      	nop
 80027f0:	bf00      	nop
 80027f2:	e7fd      	b.n	80027f0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d103      	bne.n	8002802 <xQueueGenericSendFromISR+0x3e>
 80027fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d101      	bne.n	8002806 <xQueueGenericSendFromISR+0x42>
 8002802:	2301      	movs	r3, #1
 8002804:	e000      	b.n	8002808 <xQueueGenericSendFromISR+0x44>
 8002806:	2300      	movs	r3, #0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d10b      	bne.n	8002824 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800280c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002810:	f383 8811 	msr	BASEPRI, r3
 8002814:	f3bf 8f6f 	isb	sy
 8002818:	f3bf 8f4f 	dsb	sy
 800281c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800281e:	bf00      	nop
 8002820:	bf00      	nop
 8002822:	e7fd      	b.n	8002820 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	2b02      	cmp	r3, #2
 8002828:	d103      	bne.n	8002832 <xQueueGenericSendFromISR+0x6e>
 800282a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800282c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800282e:	2b01      	cmp	r3, #1
 8002830:	d101      	bne.n	8002836 <xQueueGenericSendFromISR+0x72>
 8002832:	2301      	movs	r3, #1
 8002834:	e000      	b.n	8002838 <xQueueGenericSendFromISR+0x74>
 8002836:	2300      	movs	r3, #0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d10b      	bne.n	8002854 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800283c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002840:	f383 8811 	msr	BASEPRI, r3
 8002844:	f3bf 8f6f 	isb	sy
 8002848:	f3bf 8f4f 	dsb	sy
 800284c:	623b      	str	r3, [r7, #32]
}
 800284e:	bf00      	nop
 8002850:	bf00      	nop
 8002852:	e7fd      	b.n	8002850 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002854:	f001 ff48 	bl	80046e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002858:	f3ef 8211 	mrs	r2, BASEPRI
 800285c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002860:	f383 8811 	msr	BASEPRI, r3
 8002864:	f3bf 8f6f 	isb	sy
 8002868:	f3bf 8f4f 	dsb	sy
 800286c:	61fa      	str	r2, [r7, #28]
 800286e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002870:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002872:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002874:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002876:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002878:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800287a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800287c:	429a      	cmp	r2, r3
 800287e:	d302      	bcc.n	8002886 <xQueueGenericSendFromISR+0xc2>
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	2b02      	cmp	r3, #2
 8002884:	d12f      	bne.n	80028e6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002886:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002888:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800288c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002890:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002892:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002894:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002896:	683a      	ldr	r2, [r7, #0]
 8002898:	68b9      	ldr	r1, [r7, #8]
 800289a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800289c:	f000 f912 	bl	8002ac4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80028a0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80028a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028a8:	d112      	bne.n	80028d0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80028aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d016      	beq.n	80028e0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80028b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028b4:	3324      	adds	r3, #36	@ 0x24
 80028b6:	4618      	mov	r0, r3
 80028b8:	f000 ff04 	bl	80036c4 <xTaskRemoveFromEventList>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d00e      	beq.n	80028e0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d00b      	beq.n	80028e0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2201      	movs	r2, #1
 80028cc:	601a      	str	r2, [r3, #0]
 80028ce:	e007      	b.n	80028e0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80028d0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80028d4:	3301      	adds	r3, #1
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	b25a      	sxtb	r2, r3
 80028da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80028e0:	2301      	movs	r3, #1
 80028e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80028e4:	e001      	b.n	80028ea <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80028e6:	2300      	movs	r3, #0
 80028e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80028ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028ec:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80028f4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80028f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3740      	adds	r7, #64	@ 0x40
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}

08002900 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b08c      	sub	sp, #48	@ 0x30
 8002904:	af00      	add	r7, sp, #0
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	60b9      	str	r1, [r7, #8]
 800290a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800290c:	2300      	movs	r3, #0
 800290e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002914:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002916:	2b00      	cmp	r3, #0
 8002918:	d10b      	bne.n	8002932 <xQueueReceive+0x32>
	__asm volatile
 800291a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800291e:	f383 8811 	msr	BASEPRI, r3
 8002922:	f3bf 8f6f 	isb	sy
 8002926:	f3bf 8f4f 	dsb	sy
 800292a:	623b      	str	r3, [r7, #32]
}
 800292c:	bf00      	nop
 800292e:	bf00      	nop
 8002930:	e7fd      	b.n	800292e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d103      	bne.n	8002940 <xQueueReceive+0x40>
 8002938:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800293a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800293c:	2b00      	cmp	r3, #0
 800293e:	d101      	bne.n	8002944 <xQueueReceive+0x44>
 8002940:	2301      	movs	r3, #1
 8002942:	e000      	b.n	8002946 <xQueueReceive+0x46>
 8002944:	2300      	movs	r3, #0
 8002946:	2b00      	cmp	r3, #0
 8002948:	d10b      	bne.n	8002962 <xQueueReceive+0x62>
	__asm volatile
 800294a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800294e:	f383 8811 	msr	BASEPRI, r3
 8002952:	f3bf 8f6f 	isb	sy
 8002956:	f3bf 8f4f 	dsb	sy
 800295a:	61fb      	str	r3, [r7, #28]
}
 800295c:	bf00      	nop
 800295e:	bf00      	nop
 8002960:	e7fd      	b.n	800295e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002962:	f001 f875 	bl	8003a50 <xTaskGetSchedulerState>
 8002966:	4603      	mov	r3, r0
 8002968:	2b00      	cmp	r3, #0
 800296a:	d102      	bne.n	8002972 <xQueueReceive+0x72>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d101      	bne.n	8002976 <xQueueReceive+0x76>
 8002972:	2301      	movs	r3, #1
 8002974:	e000      	b.n	8002978 <xQueueReceive+0x78>
 8002976:	2300      	movs	r3, #0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d10b      	bne.n	8002994 <xQueueReceive+0x94>
	__asm volatile
 800297c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002980:	f383 8811 	msr	BASEPRI, r3
 8002984:	f3bf 8f6f 	isb	sy
 8002988:	f3bf 8f4f 	dsb	sy
 800298c:	61bb      	str	r3, [r7, #24]
}
 800298e:	bf00      	nop
 8002990:	bf00      	nop
 8002992:	e7fd      	b.n	8002990 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002994:	f001 fdc8 	bl	8004528 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002998:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800299a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800299c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800299e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d01f      	beq.n	80029e4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80029a4:	68b9      	ldr	r1, [r7, #8]
 80029a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80029a8:	f000 f8f6 	bl	8002b98 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80029ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ae:	1e5a      	subs	r2, r3, #1
 80029b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029b2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80029b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029b6:	691b      	ldr	r3, [r3, #16]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d00f      	beq.n	80029dc <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80029bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029be:	3310      	adds	r3, #16
 80029c0:	4618      	mov	r0, r3
 80029c2:	f000 fe7f 	bl	80036c4 <xTaskRemoveFromEventList>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d007      	beq.n	80029dc <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80029cc:	4b3c      	ldr	r3, [pc, #240]	@ (8002ac0 <xQueueReceive+0x1c0>)
 80029ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80029d2:	601a      	str	r2, [r3, #0]
 80029d4:	f3bf 8f4f 	dsb	sy
 80029d8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80029dc:	f001 fdd6 	bl	800458c <vPortExitCritical>
				return pdPASS;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e069      	b.n	8002ab8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d103      	bne.n	80029f2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80029ea:	f001 fdcf 	bl	800458c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80029ee:	2300      	movs	r3, #0
 80029f0:	e062      	b.n	8002ab8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80029f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d106      	bne.n	8002a06 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80029f8:	f107 0310 	add.w	r3, r7, #16
 80029fc:	4618      	mov	r0, r3
 80029fe:	f000 fec5 	bl	800378c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002a02:	2301      	movs	r3, #1
 8002a04:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002a06:	f001 fdc1 	bl	800458c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002a0a:	f000 fc2d 	bl	8003268 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002a0e:	f001 fd8b 	bl	8004528 <vPortEnterCritical>
 8002a12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a14:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002a18:	b25b      	sxtb	r3, r3
 8002a1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a1e:	d103      	bne.n	8002a28 <xQueueReceive+0x128>
 8002a20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a22:	2200      	movs	r2, #0
 8002a24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002a28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a2a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002a2e:	b25b      	sxtb	r3, r3
 8002a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a34:	d103      	bne.n	8002a3e <xQueueReceive+0x13e>
 8002a36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a38:	2200      	movs	r2, #0
 8002a3a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002a3e:	f001 fda5 	bl	800458c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002a42:	1d3a      	adds	r2, r7, #4
 8002a44:	f107 0310 	add.w	r3, r7, #16
 8002a48:	4611      	mov	r1, r2
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f000 feb4 	bl	80037b8 <xTaskCheckForTimeOut>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d123      	bne.n	8002a9e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002a56:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002a58:	f000 f916 	bl	8002c88 <prvIsQueueEmpty>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d017      	beq.n	8002a92 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002a62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a64:	3324      	adds	r3, #36	@ 0x24
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	4611      	mov	r1, r2
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f000 fdd8 	bl	8003620 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002a70:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002a72:	f000 f8b7 	bl	8002be4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002a76:	f000 fc05 	bl	8003284 <xTaskResumeAll>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d189      	bne.n	8002994 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8002a80:	4b0f      	ldr	r3, [pc, #60]	@ (8002ac0 <xQueueReceive+0x1c0>)
 8002a82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002a86:	601a      	str	r2, [r3, #0]
 8002a88:	f3bf 8f4f 	dsb	sy
 8002a8c:	f3bf 8f6f 	isb	sy
 8002a90:	e780      	b.n	8002994 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002a92:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002a94:	f000 f8a6 	bl	8002be4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002a98:	f000 fbf4 	bl	8003284 <xTaskResumeAll>
 8002a9c:	e77a      	b.n	8002994 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002a9e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002aa0:	f000 f8a0 	bl	8002be4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002aa4:	f000 fbee 	bl	8003284 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002aa8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002aaa:	f000 f8ed 	bl	8002c88 <prvIsQueueEmpty>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	f43f af6f 	beq.w	8002994 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002ab6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3730      	adds	r7, #48	@ 0x30
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	e000ed04 	.word	0xe000ed04

08002ac4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b086      	sub	sp, #24
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	60f8      	str	r0, [r7, #12]
 8002acc:	60b9      	str	r1, [r7, #8]
 8002ace:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ad8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d10d      	bne.n	8002afe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d14d      	bne.n	8002b86 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	4618      	mov	r0, r3
 8002af0:	f000 ffcc 	bl	8003a8c <xTaskPriorityDisinherit>
 8002af4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2200      	movs	r2, #0
 8002afa:	609a      	str	r2, [r3, #8]
 8002afc:	e043      	b.n	8002b86 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d119      	bne.n	8002b38 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	6858      	ldr	r0, [r3, #4]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	68b9      	ldr	r1, [r7, #8]
 8002b10:	f002 faeb 	bl	80050ea <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	685a      	ldr	r2, [r3, #4]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b1c:	441a      	add	r2, r3
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	685a      	ldr	r2, [r3, #4]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d32b      	bcc.n	8002b86 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	605a      	str	r2, [r3, #4]
 8002b36:	e026      	b.n	8002b86 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	68d8      	ldr	r0, [r3, #12]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b40:	461a      	mov	r2, r3
 8002b42:	68b9      	ldr	r1, [r7, #8]
 8002b44:	f002 fad1 	bl	80050ea <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	68da      	ldr	r2, [r3, #12]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b50:	425b      	negs	r3, r3
 8002b52:	441a      	add	r2, r3
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	68da      	ldr	r2, [r3, #12]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d207      	bcs.n	8002b74 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	689a      	ldr	r2, [r3, #8]
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b6c:	425b      	negs	r3, r3
 8002b6e:	441a      	add	r2, r3
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	d105      	bne.n	8002b86 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d002      	beq.n	8002b86 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	3b01      	subs	r3, #1
 8002b84:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	1c5a      	adds	r2, r3, #1
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8002b8e:	697b      	ldr	r3, [r7, #20]
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3718      	adds	r7, #24
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}

08002b98 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b082      	sub	sp, #8
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d018      	beq.n	8002bdc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	68da      	ldr	r2, [r3, #12]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bb2:	441a      	add	r2, r3
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	68da      	ldr	r2, [r3, #12]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d303      	bcc.n	8002bcc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	68d9      	ldr	r1, [r3, #12]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	6838      	ldr	r0, [r7, #0]
 8002bd8:	f002 fa87 	bl	80050ea <memcpy>
	}
}
 8002bdc:	bf00      	nop
 8002bde:	3708      	adds	r7, #8
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002bec:	f001 fc9c 	bl	8004528 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002bf6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002bf8:	e011      	b.n	8002c1e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d012      	beq.n	8002c28 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	3324      	adds	r3, #36	@ 0x24
 8002c06:	4618      	mov	r0, r3
 8002c08:	f000 fd5c 	bl	80036c4 <xTaskRemoveFromEventList>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d001      	beq.n	8002c16 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002c12:	f000 fe35 	bl	8003880 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002c16:	7bfb      	ldrb	r3, [r7, #15]
 8002c18:	3b01      	subs	r3, #1
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002c1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	dce9      	bgt.n	8002bfa <prvUnlockQueue+0x16>
 8002c26:	e000      	b.n	8002c2a <prvUnlockQueue+0x46>
					break;
 8002c28:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	22ff      	movs	r2, #255	@ 0xff
 8002c2e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8002c32:	f001 fcab 	bl	800458c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002c36:	f001 fc77 	bl	8004528 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002c40:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002c42:	e011      	b.n	8002c68 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	691b      	ldr	r3, [r3, #16]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d012      	beq.n	8002c72 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	3310      	adds	r3, #16
 8002c50:	4618      	mov	r0, r3
 8002c52:	f000 fd37 	bl	80036c4 <xTaskRemoveFromEventList>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d001      	beq.n	8002c60 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002c5c:	f000 fe10 	bl	8003880 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002c60:	7bbb      	ldrb	r3, [r7, #14]
 8002c62:	3b01      	subs	r3, #1
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002c68:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	dce9      	bgt.n	8002c44 <prvUnlockQueue+0x60>
 8002c70:	e000      	b.n	8002c74 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002c72:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	22ff      	movs	r2, #255	@ 0xff
 8002c78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8002c7c:	f001 fc86 	bl	800458c <vPortExitCritical>
}
 8002c80:	bf00      	nop
 8002c82:	3710      	adds	r7, #16
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}

08002c88 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b084      	sub	sp, #16
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002c90:	f001 fc4a 	bl	8004528 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d102      	bne.n	8002ca2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	60fb      	str	r3, [r7, #12]
 8002ca0:	e001      	b.n	8002ca6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002ca6:	f001 fc71 	bl	800458c <vPortExitCritical>

	return xReturn;
 8002caa:	68fb      	ldr	r3, [r7, #12]
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3710      	adds	r7, #16
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b084      	sub	sp, #16
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002cbc:	f001 fc34 	bl	8004528 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d102      	bne.n	8002cd2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	60fb      	str	r3, [r7, #12]
 8002cd0:	e001      	b.n	8002cd6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002cd6:	f001 fc59 	bl	800458c <vPortExitCritical>

	return xReturn;
 8002cda:	68fb      	ldr	r3, [r7, #12]
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3710      	adds	r7, #16
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}

08002ce4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b085      	sub	sp, #20
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
 8002cec:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002cee:	2300      	movs	r3, #0
 8002cf0:	60fb      	str	r3, [r7, #12]
 8002cf2:	e014      	b.n	8002d1e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002cf4:	4a0f      	ldr	r2, [pc, #60]	@ (8002d34 <vQueueAddToRegistry+0x50>)
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d10b      	bne.n	8002d18 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002d00:	490c      	ldr	r1, [pc, #48]	@ (8002d34 <vQueueAddToRegistry+0x50>)
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	683a      	ldr	r2, [r7, #0]
 8002d06:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002d0a:	4a0a      	ldr	r2, [pc, #40]	@ (8002d34 <vQueueAddToRegistry+0x50>)
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	00db      	lsls	r3, r3, #3
 8002d10:	4413      	add	r3, r2
 8002d12:	687a      	ldr	r2, [r7, #4]
 8002d14:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002d16:	e006      	b.n	8002d26 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	3301      	adds	r3, #1
 8002d1c:	60fb      	str	r3, [r7, #12]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2b07      	cmp	r3, #7
 8002d22:	d9e7      	bls.n	8002cf4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002d24:	bf00      	nop
 8002d26:	bf00      	nop
 8002d28:	3714      	adds	r7, #20
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr
 8002d32:	bf00      	nop
 8002d34:	20000830 	.word	0x20000830

08002d38 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b086      	sub	sp, #24
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	60f8      	str	r0, [r7, #12]
 8002d40:	60b9      	str	r1, [r7, #8]
 8002d42:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002d48:	f001 fbee 	bl	8004528 <vPortEnterCritical>
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002d52:	b25b      	sxtb	r3, r3
 8002d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d58:	d103      	bne.n	8002d62 <vQueueWaitForMessageRestricted+0x2a>
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002d68:	b25b      	sxtb	r3, r3
 8002d6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d6e:	d103      	bne.n	8002d78 <vQueueWaitForMessageRestricted+0x40>
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002d78:	f001 fc08 	bl	800458c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d106      	bne.n	8002d92 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	3324      	adds	r3, #36	@ 0x24
 8002d88:	687a      	ldr	r2, [r7, #4]
 8002d8a:	68b9      	ldr	r1, [r7, #8]
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f000 fc6d 	bl	800366c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002d92:	6978      	ldr	r0, [r7, #20]
 8002d94:	f7ff ff26 	bl	8002be4 <prvUnlockQueue>
	}
 8002d98:	bf00      	nop
 8002d9a:	3718      	adds	r7, #24
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}

08002da0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b08e      	sub	sp, #56	@ 0x38
 8002da4:	af04      	add	r7, sp, #16
 8002da6:	60f8      	str	r0, [r7, #12]
 8002da8:	60b9      	str	r1, [r7, #8]
 8002daa:	607a      	str	r2, [r7, #4]
 8002dac:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002dae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d10b      	bne.n	8002dcc <xTaskCreateStatic+0x2c>
	__asm volatile
 8002db4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002db8:	f383 8811 	msr	BASEPRI, r3
 8002dbc:	f3bf 8f6f 	isb	sy
 8002dc0:	f3bf 8f4f 	dsb	sy
 8002dc4:	623b      	str	r3, [r7, #32]
}
 8002dc6:	bf00      	nop
 8002dc8:	bf00      	nop
 8002dca:	e7fd      	b.n	8002dc8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002dcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d10b      	bne.n	8002dea <xTaskCreateStatic+0x4a>
	__asm volatile
 8002dd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002dd6:	f383 8811 	msr	BASEPRI, r3
 8002dda:	f3bf 8f6f 	isb	sy
 8002dde:	f3bf 8f4f 	dsb	sy
 8002de2:	61fb      	str	r3, [r7, #28]
}
 8002de4:	bf00      	nop
 8002de6:	bf00      	nop
 8002de8:	e7fd      	b.n	8002de6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002dea:	23a8      	movs	r3, #168	@ 0xa8
 8002dec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	2ba8      	cmp	r3, #168	@ 0xa8
 8002df2:	d00b      	beq.n	8002e0c <xTaskCreateStatic+0x6c>
	__asm volatile
 8002df4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002df8:	f383 8811 	msr	BASEPRI, r3
 8002dfc:	f3bf 8f6f 	isb	sy
 8002e00:	f3bf 8f4f 	dsb	sy
 8002e04:	61bb      	str	r3, [r7, #24]
}
 8002e06:	bf00      	nop
 8002e08:	bf00      	nop
 8002e0a:	e7fd      	b.n	8002e08 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002e0c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002e0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d01e      	beq.n	8002e52 <xTaskCreateStatic+0xb2>
 8002e14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d01b      	beq.n	8002e52 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002e1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e1c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e20:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002e22:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e26:	2202      	movs	r2, #2
 8002e28:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	9303      	str	r3, [sp, #12]
 8002e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e32:	9302      	str	r3, [sp, #8]
 8002e34:	f107 0314 	add.w	r3, r7, #20
 8002e38:	9301      	str	r3, [sp, #4]
 8002e3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e3c:	9300      	str	r3, [sp, #0]
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	687a      	ldr	r2, [r7, #4]
 8002e42:	68b9      	ldr	r1, [r7, #8]
 8002e44:	68f8      	ldr	r0, [r7, #12]
 8002e46:	f000 f851 	bl	8002eec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002e4a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002e4c:	f000 f8f6 	bl	800303c <prvAddNewTaskToReadyList>
 8002e50:	e001      	b.n	8002e56 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8002e52:	2300      	movs	r3, #0
 8002e54:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002e56:	697b      	ldr	r3, [r7, #20]
	}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3728      	adds	r7, #40	@ 0x28
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b08c      	sub	sp, #48	@ 0x30
 8002e64:	af04      	add	r7, sp, #16
 8002e66:	60f8      	str	r0, [r7, #12]
 8002e68:	60b9      	str	r1, [r7, #8]
 8002e6a:	603b      	str	r3, [r7, #0]
 8002e6c:	4613      	mov	r3, r2
 8002e6e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002e70:	88fb      	ldrh	r3, [r7, #6]
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	4618      	mov	r0, r3
 8002e76:	f001 fc79 	bl	800476c <pvPortMalloc>
 8002e7a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d00e      	beq.n	8002ea0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002e82:	20a8      	movs	r0, #168	@ 0xa8
 8002e84:	f001 fc72 	bl	800476c <pvPortMalloc>
 8002e88:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002e8a:	69fb      	ldr	r3, [r7, #28]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d003      	beq.n	8002e98 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	697a      	ldr	r2, [r7, #20]
 8002e94:	631a      	str	r2, [r3, #48]	@ 0x30
 8002e96:	e005      	b.n	8002ea4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002e98:	6978      	ldr	r0, [r7, #20]
 8002e9a:	f001 fd35 	bl	8004908 <vPortFree>
 8002e9e:	e001      	b.n	8002ea4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d017      	beq.n	8002eda <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	2200      	movs	r2, #0
 8002eae:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002eb2:	88fa      	ldrh	r2, [r7, #6]
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	9303      	str	r3, [sp, #12]
 8002eb8:	69fb      	ldr	r3, [r7, #28]
 8002eba:	9302      	str	r3, [sp, #8]
 8002ebc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ebe:	9301      	str	r3, [sp, #4]
 8002ec0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ec2:	9300      	str	r3, [sp, #0]
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	68b9      	ldr	r1, [r7, #8]
 8002ec8:	68f8      	ldr	r0, [r7, #12]
 8002eca:	f000 f80f 	bl	8002eec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002ece:	69f8      	ldr	r0, [r7, #28]
 8002ed0:	f000 f8b4 	bl	800303c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	61bb      	str	r3, [r7, #24]
 8002ed8:	e002      	b.n	8002ee0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002eda:	f04f 33ff 	mov.w	r3, #4294967295
 8002ede:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002ee0:	69bb      	ldr	r3, [r7, #24]
	}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3720      	adds	r7, #32
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
	...

08002eec <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b088      	sub	sp, #32
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	60f8      	str	r0, [r7, #12]
 8002ef4:	60b9      	str	r1, [r7, #8]
 8002ef6:	607a      	str	r2, [r7, #4]
 8002ef8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002efa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002efc:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	009b      	lsls	r3, r3, #2
 8002f02:	461a      	mov	r2, r3
 8002f04:	21a5      	movs	r1, #165	@ 0xa5
 8002f06:	f002 f817 	bl	8004f38 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002f0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f0c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002f14:	3b01      	subs	r3, #1
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	4413      	add	r3, r2
 8002f1a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002f1c:	69bb      	ldr	r3, [r7, #24]
 8002f1e:	f023 0307 	bic.w	r3, r3, #7
 8002f22:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002f24:	69bb      	ldr	r3, [r7, #24]
 8002f26:	f003 0307 	and.w	r3, r3, #7
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d00b      	beq.n	8002f46 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8002f2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f32:	f383 8811 	msr	BASEPRI, r3
 8002f36:	f3bf 8f6f 	isb	sy
 8002f3a:	f3bf 8f4f 	dsb	sy
 8002f3e:	617b      	str	r3, [r7, #20]
}
 8002f40:	bf00      	nop
 8002f42:	bf00      	nop
 8002f44:	e7fd      	b.n	8002f42 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d01f      	beq.n	8002f8c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	61fb      	str	r3, [r7, #28]
 8002f50:	e012      	b.n	8002f78 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002f52:	68ba      	ldr	r2, [r7, #8]
 8002f54:	69fb      	ldr	r3, [r7, #28]
 8002f56:	4413      	add	r3, r2
 8002f58:	7819      	ldrb	r1, [r3, #0]
 8002f5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	4413      	add	r3, r2
 8002f60:	3334      	adds	r3, #52	@ 0x34
 8002f62:	460a      	mov	r2, r1
 8002f64:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002f66:	68ba      	ldr	r2, [r7, #8]
 8002f68:	69fb      	ldr	r3, [r7, #28]
 8002f6a:	4413      	add	r3, r2
 8002f6c:	781b      	ldrb	r3, [r3, #0]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d006      	beq.n	8002f80 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	3301      	adds	r3, #1
 8002f76:	61fb      	str	r3, [r7, #28]
 8002f78:	69fb      	ldr	r3, [r7, #28]
 8002f7a:	2b0f      	cmp	r3, #15
 8002f7c:	d9e9      	bls.n	8002f52 <prvInitialiseNewTask+0x66>
 8002f7e:	e000      	b.n	8002f82 <prvInitialiseNewTask+0x96>
			{
				break;
 8002f80:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002f82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f84:	2200      	movs	r2, #0
 8002f86:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002f8a:	e003      	b.n	8002f94 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002f8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f8e:	2200      	movs	r2, #0
 8002f90:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002f94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f96:	2b37      	cmp	r3, #55	@ 0x37
 8002f98:	d901      	bls.n	8002f9e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002f9a:	2337      	movs	r3, #55	@ 0x37
 8002f9c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002f9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fa0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002fa2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002fa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fa6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002fa8:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002faa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fac:	2200      	movs	r2, #0
 8002fae:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002fb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fb2:	3304      	adds	r3, #4
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f7ff f965 	bl	8002284 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002fba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fbc:	3318      	adds	r3, #24
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f7ff f960 	bl	8002284 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002fc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fc6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002fc8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002fca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fcc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8002fd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fd2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002fd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fd6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002fd8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002fda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fdc:	2200      	movs	r2, #0
 8002fde:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002fe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8002fea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fec:	3354      	adds	r3, #84	@ 0x54
 8002fee:	224c      	movs	r2, #76	@ 0x4c
 8002ff0:	2100      	movs	r1, #0
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f001 ffa0 	bl	8004f38 <memset>
 8002ff8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ffa:	4a0d      	ldr	r2, [pc, #52]	@ (8003030 <prvInitialiseNewTask+0x144>)
 8002ffc:	659a      	str	r2, [r3, #88]	@ 0x58
 8002ffe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003000:	4a0c      	ldr	r2, [pc, #48]	@ (8003034 <prvInitialiseNewTask+0x148>)
 8003002:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003004:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003006:	4a0c      	ldr	r2, [pc, #48]	@ (8003038 <prvInitialiseNewTask+0x14c>)
 8003008:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800300a:	683a      	ldr	r2, [r7, #0]
 800300c:	68f9      	ldr	r1, [r7, #12]
 800300e:	69b8      	ldr	r0, [r7, #24]
 8003010:	f001 f95a 	bl	80042c8 <pxPortInitialiseStack>
 8003014:	4602      	mov	r2, r0
 8003016:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003018:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800301a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800301c:	2b00      	cmp	r3, #0
 800301e:	d002      	beq.n	8003026 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003020:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003022:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003024:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003026:	bf00      	nop
 8003028:	3720      	adds	r7, #32
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
 800302e:	bf00      	nop
 8003030:	20004ac4 	.word	0x20004ac4
 8003034:	20004b2c 	.word	0x20004b2c
 8003038:	20004b94 	.word	0x20004b94

0800303c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b082      	sub	sp, #8
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003044:	f001 fa70 	bl	8004528 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003048:	4b2d      	ldr	r3, [pc, #180]	@ (8003100 <prvAddNewTaskToReadyList+0xc4>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	3301      	adds	r3, #1
 800304e:	4a2c      	ldr	r2, [pc, #176]	@ (8003100 <prvAddNewTaskToReadyList+0xc4>)
 8003050:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003052:	4b2c      	ldr	r3, [pc, #176]	@ (8003104 <prvAddNewTaskToReadyList+0xc8>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d109      	bne.n	800306e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800305a:	4a2a      	ldr	r2, [pc, #168]	@ (8003104 <prvAddNewTaskToReadyList+0xc8>)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003060:	4b27      	ldr	r3, [pc, #156]	@ (8003100 <prvAddNewTaskToReadyList+0xc4>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	2b01      	cmp	r3, #1
 8003066:	d110      	bne.n	800308a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003068:	f000 fc2e 	bl	80038c8 <prvInitialiseTaskLists>
 800306c:	e00d      	b.n	800308a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800306e:	4b26      	ldr	r3, [pc, #152]	@ (8003108 <prvAddNewTaskToReadyList+0xcc>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d109      	bne.n	800308a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003076:	4b23      	ldr	r3, [pc, #140]	@ (8003104 <prvAddNewTaskToReadyList+0xc8>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003080:	429a      	cmp	r2, r3
 8003082:	d802      	bhi.n	800308a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003084:	4a1f      	ldr	r2, [pc, #124]	@ (8003104 <prvAddNewTaskToReadyList+0xc8>)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800308a:	4b20      	ldr	r3, [pc, #128]	@ (800310c <prvAddNewTaskToReadyList+0xd0>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	3301      	adds	r3, #1
 8003090:	4a1e      	ldr	r2, [pc, #120]	@ (800310c <prvAddNewTaskToReadyList+0xd0>)
 8003092:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003094:	4b1d      	ldr	r3, [pc, #116]	@ (800310c <prvAddNewTaskToReadyList+0xd0>)
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030a0:	4b1b      	ldr	r3, [pc, #108]	@ (8003110 <prvAddNewTaskToReadyList+0xd4>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d903      	bls.n	80030b0 <prvAddNewTaskToReadyList+0x74>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030ac:	4a18      	ldr	r2, [pc, #96]	@ (8003110 <prvAddNewTaskToReadyList+0xd4>)
 80030ae:	6013      	str	r3, [r2, #0]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030b4:	4613      	mov	r3, r2
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	4413      	add	r3, r2
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	4a15      	ldr	r2, [pc, #84]	@ (8003114 <prvAddNewTaskToReadyList+0xd8>)
 80030be:	441a      	add	r2, r3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	3304      	adds	r3, #4
 80030c4:	4619      	mov	r1, r3
 80030c6:	4610      	mov	r0, r2
 80030c8:	f7ff f8e9 	bl	800229e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80030cc:	f001 fa5e 	bl	800458c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80030d0:	4b0d      	ldr	r3, [pc, #52]	@ (8003108 <prvAddNewTaskToReadyList+0xcc>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d00e      	beq.n	80030f6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80030d8:	4b0a      	ldr	r3, [pc, #40]	@ (8003104 <prvAddNewTaskToReadyList+0xc8>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d207      	bcs.n	80030f6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80030e6:	4b0c      	ldr	r3, [pc, #48]	@ (8003118 <prvAddNewTaskToReadyList+0xdc>)
 80030e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80030ec:	601a      	str	r2, [r3, #0]
 80030ee:	f3bf 8f4f 	dsb	sy
 80030f2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80030f6:	bf00      	nop
 80030f8:	3708      	adds	r7, #8
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	bf00      	nop
 8003100:	20000d44 	.word	0x20000d44
 8003104:	20000870 	.word	0x20000870
 8003108:	20000d50 	.word	0x20000d50
 800310c:	20000d60 	.word	0x20000d60
 8003110:	20000d4c 	.word	0x20000d4c
 8003114:	20000874 	.word	0x20000874
 8003118:	e000ed04 	.word	0xe000ed04

0800311c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003124:	2300      	movs	r3, #0
 8003126:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d018      	beq.n	8003160 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800312e:	4b14      	ldr	r3, [pc, #80]	@ (8003180 <vTaskDelay+0x64>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d00b      	beq.n	800314e <vTaskDelay+0x32>
	__asm volatile
 8003136:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800313a:	f383 8811 	msr	BASEPRI, r3
 800313e:	f3bf 8f6f 	isb	sy
 8003142:	f3bf 8f4f 	dsb	sy
 8003146:	60bb      	str	r3, [r7, #8]
}
 8003148:	bf00      	nop
 800314a:	bf00      	nop
 800314c:	e7fd      	b.n	800314a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800314e:	f000 f88b 	bl	8003268 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003152:	2100      	movs	r1, #0
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f000 fd09 	bl	8003b6c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800315a:	f000 f893 	bl	8003284 <xTaskResumeAll>
 800315e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d107      	bne.n	8003176 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003166:	4b07      	ldr	r3, [pc, #28]	@ (8003184 <vTaskDelay+0x68>)
 8003168:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800316c:	601a      	str	r2, [r3, #0]
 800316e:	f3bf 8f4f 	dsb	sy
 8003172:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003176:	bf00      	nop
 8003178:	3710      	adds	r7, #16
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	20000d6c 	.word	0x20000d6c
 8003184:	e000ed04 	.word	0xe000ed04

08003188 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b08a      	sub	sp, #40	@ 0x28
 800318c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800318e:	2300      	movs	r3, #0
 8003190:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003192:	2300      	movs	r3, #0
 8003194:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003196:	463a      	mov	r2, r7
 8003198:	1d39      	adds	r1, r7, #4
 800319a:	f107 0308 	add.w	r3, r7, #8
 800319e:	4618      	mov	r0, r3
 80031a0:	f7ff f81c 	bl	80021dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80031a4:	6839      	ldr	r1, [r7, #0]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	68ba      	ldr	r2, [r7, #8]
 80031aa:	9202      	str	r2, [sp, #8]
 80031ac:	9301      	str	r3, [sp, #4]
 80031ae:	2300      	movs	r3, #0
 80031b0:	9300      	str	r3, [sp, #0]
 80031b2:	2300      	movs	r3, #0
 80031b4:	460a      	mov	r2, r1
 80031b6:	4924      	ldr	r1, [pc, #144]	@ (8003248 <vTaskStartScheduler+0xc0>)
 80031b8:	4824      	ldr	r0, [pc, #144]	@ (800324c <vTaskStartScheduler+0xc4>)
 80031ba:	f7ff fdf1 	bl	8002da0 <xTaskCreateStatic>
 80031be:	4603      	mov	r3, r0
 80031c0:	4a23      	ldr	r2, [pc, #140]	@ (8003250 <vTaskStartScheduler+0xc8>)
 80031c2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80031c4:	4b22      	ldr	r3, [pc, #136]	@ (8003250 <vTaskStartScheduler+0xc8>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d002      	beq.n	80031d2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80031cc:	2301      	movs	r3, #1
 80031ce:	617b      	str	r3, [r7, #20]
 80031d0:	e001      	b.n	80031d6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80031d2:	2300      	movs	r3, #0
 80031d4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d102      	bne.n	80031e2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80031dc:	f000 fd1a 	bl	8003c14 <xTimerCreateTimerTask>
 80031e0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d11b      	bne.n	8003220 <vTaskStartScheduler+0x98>
	__asm volatile
 80031e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031ec:	f383 8811 	msr	BASEPRI, r3
 80031f0:	f3bf 8f6f 	isb	sy
 80031f4:	f3bf 8f4f 	dsb	sy
 80031f8:	613b      	str	r3, [r7, #16]
}
 80031fa:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80031fc:	4b15      	ldr	r3, [pc, #84]	@ (8003254 <vTaskStartScheduler+0xcc>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	3354      	adds	r3, #84	@ 0x54
 8003202:	4a15      	ldr	r2, [pc, #84]	@ (8003258 <vTaskStartScheduler+0xd0>)
 8003204:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003206:	4b15      	ldr	r3, [pc, #84]	@ (800325c <vTaskStartScheduler+0xd4>)
 8003208:	f04f 32ff 	mov.w	r2, #4294967295
 800320c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800320e:	4b14      	ldr	r3, [pc, #80]	@ (8003260 <vTaskStartScheduler+0xd8>)
 8003210:	2201      	movs	r2, #1
 8003212:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003214:	4b13      	ldr	r3, [pc, #76]	@ (8003264 <vTaskStartScheduler+0xdc>)
 8003216:	2200      	movs	r2, #0
 8003218:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800321a:	f001 f8e1 	bl	80043e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800321e:	e00f      	b.n	8003240 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003226:	d10b      	bne.n	8003240 <vTaskStartScheduler+0xb8>
	__asm volatile
 8003228:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800322c:	f383 8811 	msr	BASEPRI, r3
 8003230:	f3bf 8f6f 	isb	sy
 8003234:	f3bf 8f4f 	dsb	sy
 8003238:	60fb      	str	r3, [r7, #12]
}
 800323a:	bf00      	nop
 800323c:	bf00      	nop
 800323e:	e7fd      	b.n	800323c <vTaskStartScheduler+0xb4>
}
 8003240:	bf00      	nop
 8003242:	3718      	adds	r7, #24
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}
 8003248:	080055dc 	.word	0x080055dc
 800324c:	08003899 	.word	0x08003899
 8003250:	20000d68 	.word	0x20000d68
 8003254:	20000870 	.word	0x20000870
 8003258:	2000001c 	.word	0x2000001c
 800325c:	20000d64 	.word	0x20000d64
 8003260:	20000d50 	.word	0x20000d50
 8003264:	20000d48 	.word	0x20000d48

08003268 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003268:	b480      	push	{r7}
 800326a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800326c:	4b04      	ldr	r3, [pc, #16]	@ (8003280 <vTaskSuspendAll+0x18>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	3301      	adds	r3, #1
 8003272:	4a03      	ldr	r2, [pc, #12]	@ (8003280 <vTaskSuspendAll+0x18>)
 8003274:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003276:	bf00      	nop
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr
 8003280:	20000d6c 	.word	0x20000d6c

08003284 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b084      	sub	sp, #16
 8003288:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800328a:	2300      	movs	r3, #0
 800328c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800328e:	2300      	movs	r3, #0
 8003290:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003292:	4b42      	ldr	r3, [pc, #264]	@ (800339c <xTaskResumeAll+0x118>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d10b      	bne.n	80032b2 <xTaskResumeAll+0x2e>
	__asm volatile
 800329a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800329e:	f383 8811 	msr	BASEPRI, r3
 80032a2:	f3bf 8f6f 	isb	sy
 80032a6:	f3bf 8f4f 	dsb	sy
 80032aa:	603b      	str	r3, [r7, #0]
}
 80032ac:	bf00      	nop
 80032ae:	bf00      	nop
 80032b0:	e7fd      	b.n	80032ae <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80032b2:	f001 f939 	bl	8004528 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80032b6:	4b39      	ldr	r3, [pc, #228]	@ (800339c <xTaskResumeAll+0x118>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	3b01      	subs	r3, #1
 80032bc:	4a37      	ldr	r2, [pc, #220]	@ (800339c <xTaskResumeAll+0x118>)
 80032be:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80032c0:	4b36      	ldr	r3, [pc, #216]	@ (800339c <xTaskResumeAll+0x118>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d162      	bne.n	800338e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80032c8:	4b35      	ldr	r3, [pc, #212]	@ (80033a0 <xTaskResumeAll+0x11c>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d05e      	beq.n	800338e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80032d0:	e02f      	b.n	8003332 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80032d2:	4b34      	ldr	r3, [pc, #208]	@ (80033a4 <xTaskResumeAll+0x120>)
 80032d4:	68db      	ldr	r3, [r3, #12]
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	3318      	adds	r3, #24
 80032de:	4618      	mov	r0, r3
 80032e0:	f7ff f83a 	bl	8002358 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	3304      	adds	r3, #4
 80032e8:	4618      	mov	r0, r3
 80032ea:	f7ff f835 	bl	8002358 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032f2:	4b2d      	ldr	r3, [pc, #180]	@ (80033a8 <xTaskResumeAll+0x124>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d903      	bls.n	8003302 <xTaskResumeAll+0x7e>
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032fe:	4a2a      	ldr	r2, [pc, #168]	@ (80033a8 <xTaskResumeAll+0x124>)
 8003300:	6013      	str	r3, [r2, #0]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003306:	4613      	mov	r3, r2
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	4413      	add	r3, r2
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	4a27      	ldr	r2, [pc, #156]	@ (80033ac <xTaskResumeAll+0x128>)
 8003310:	441a      	add	r2, r3
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	3304      	adds	r3, #4
 8003316:	4619      	mov	r1, r3
 8003318:	4610      	mov	r0, r2
 800331a:	f7fe ffc0 	bl	800229e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003322:	4b23      	ldr	r3, [pc, #140]	@ (80033b0 <xTaskResumeAll+0x12c>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003328:	429a      	cmp	r2, r3
 800332a:	d302      	bcc.n	8003332 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800332c:	4b21      	ldr	r3, [pc, #132]	@ (80033b4 <xTaskResumeAll+0x130>)
 800332e:	2201      	movs	r2, #1
 8003330:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003332:	4b1c      	ldr	r3, [pc, #112]	@ (80033a4 <xTaskResumeAll+0x120>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d1cb      	bne.n	80032d2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d001      	beq.n	8003344 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003340:	f000 fb66 	bl	8003a10 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003344:	4b1c      	ldr	r3, [pc, #112]	@ (80033b8 <xTaskResumeAll+0x134>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d010      	beq.n	8003372 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003350:	f000 f846 	bl	80033e0 <xTaskIncrementTick>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d002      	beq.n	8003360 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800335a:	4b16      	ldr	r3, [pc, #88]	@ (80033b4 <xTaskResumeAll+0x130>)
 800335c:	2201      	movs	r2, #1
 800335e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	3b01      	subs	r3, #1
 8003364:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d1f1      	bne.n	8003350 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800336c:	4b12      	ldr	r3, [pc, #72]	@ (80033b8 <xTaskResumeAll+0x134>)
 800336e:	2200      	movs	r2, #0
 8003370:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003372:	4b10      	ldr	r3, [pc, #64]	@ (80033b4 <xTaskResumeAll+0x130>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d009      	beq.n	800338e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800337a:	2301      	movs	r3, #1
 800337c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800337e:	4b0f      	ldr	r3, [pc, #60]	@ (80033bc <xTaskResumeAll+0x138>)
 8003380:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003384:	601a      	str	r2, [r3, #0]
 8003386:	f3bf 8f4f 	dsb	sy
 800338a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800338e:	f001 f8fd 	bl	800458c <vPortExitCritical>

	return xAlreadyYielded;
 8003392:	68bb      	ldr	r3, [r7, #8]
}
 8003394:	4618      	mov	r0, r3
 8003396:	3710      	adds	r7, #16
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}
 800339c:	20000d6c 	.word	0x20000d6c
 80033a0:	20000d44 	.word	0x20000d44
 80033a4:	20000d04 	.word	0x20000d04
 80033a8:	20000d4c 	.word	0x20000d4c
 80033ac:	20000874 	.word	0x20000874
 80033b0:	20000870 	.word	0x20000870
 80033b4:	20000d58 	.word	0x20000d58
 80033b8:	20000d54 	.word	0x20000d54
 80033bc:	e000ed04 	.word	0xe000ed04

080033c0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80033c0:	b480      	push	{r7}
 80033c2:	b083      	sub	sp, #12
 80033c4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80033c6:	4b05      	ldr	r3, [pc, #20]	@ (80033dc <xTaskGetTickCount+0x1c>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80033cc:	687b      	ldr	r3, [r7, #4]
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	370c      	adds	r7, #12
 80033d2:	46bd      	mov	sp, r7
 80033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d8:	4770      	bx	lr
 80033da:	bf00      	nop
 80033dc:	20000d48 	.word	0x20000d48

080033e0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b086      	sub	sp, #24
 80033e4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80033e6:	2300      	movs	r3, #0
 80033e8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80033ea:	4b4f      	ldr	r3, [pc, #316]	@ (8003528 <xTaskIncrementTick+0x148>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	f040 8090 	bne.w	8003514 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80033f4:	4b4d      	ldr	r3, [pc, #308]	@ (800352c <xTaskIncrementTick+0x14c>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	3301      	adds	r3, #1
 80033fa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80033fc:	4a4b      	ldr	r2, [pc, #300]	@ (800352c <xTaskIncrementTick+0x14c>)
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d121      	bne.n	800344c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003408:	4b49      	ldr	r3, [pc, #292]	@ (8003530 <xTaskIncrementTick+0x150>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d00b      	beq.n	800342a <xTaskIncrementTick+0x4a>
	__asm volatile
 8003412:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003416:	f383 8811 	msr	BASEPRI, r3
 800341a:	f3bf 8f6f 	isb	sy
 800341e:	f3bf 8f4f 	dsb	sy
 8003422:	603b      	str	r3, [r7, #0]
}
 8003424:	bf00      	nop
 8003426:	bf00      	nop
 8003428:	e7fd      	b.n	8003426 <xTaskIncrementTick+0x46>
 800342a:	4b41      	ldr	r3, [pc, #260]	@ (8003530 <xTaskIncrementTick+0x150>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	60fb      	str	r3, [r7, #12]
 8003430:	4b40      	ldr	r3, [pc, #256]	@ (8003534 <xTaskIncrementTick+0x154>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a3e      	ldr	r2, [pc, #248]	@ (8003530 <xTaskIncrementTick+0x150>)
 8003436:	6013      	str	r3, [r2, #0]
 8003438:	4a3e      	ldr	r2, [pc, #248]	@ (8003534 <xTaskIncrementTick+0x154>)
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	6013      	str	r3, [r2, #0]
 800343e:	4b3e      	ldr	r3, [pc, #248]	@ (8003538 <xTaskIncrementTick+0x158>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	3301      	adds	r3, #1
 8003444:	4a3c      	ldr	r2, [pc, #240]	@ (8003538 <xTaskIncrementTick+0x158>)
 8003446:	6013      	str	r3, [r2, #0]
 8003448:	f000 fae2 	bl	8003a10 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800344c:	4b3b      	ldr	r3, [pc, #236]	@ (800353c <xTaskIncrementTick+0x15c>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	693a      	ldr	r2, [r7, #16]
 8003452:	429a      	cmp	r2, r3
 8003454:	d349      	bcc.n	80034ea <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003456:	4b36      	ldr	r3, [pc, #216]	@ (8003530 <xTaskIncrementTick+0x150>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d104      	bne.n	800346a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003460:	4b36      	ldr	r3, [pc, #216]	@ (800353c <xTaskIncrementTick+0x15c>)
 8003462:	f04f 32ff 	mov.w	r2, #4294967295
 8003466:	601a      	str	r2, [r3, #0]
					break;
 8003468:	e03f      	b.n	80034ea <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800346a:	4b31      	ldr	r3, [pc, #196]	@ (8003530 <xTaskIncrementTick+0x150>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	68db      	ldr	r3, [r3, #12]
 8003472:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800347a:	693a      	ldr	r2, [r7, #16]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	429a      	cmp	r2, r3
 8003480:	d203      	bcs.n	800348a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003482:	4a2e      	ldr	r2, [pc, #184]	@ (800353c <xTaskIncrementTick+0x15c>)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003488:	e02f      	b.n	80034ea <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	3304      	adds	r3, #4
 800348e:	4618      	mov	r0, r3
 8003490:	f7fe ff62 	bl	8002358 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003498:	2b00      	cmp	r3, #0
 800349a:	d004      	beq.n	80034a6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	3318      	adds	r3, #24
 80034a0:	4618      	mov	r0, r3
 80034a2:	f7fe ff59 	bl	8002358 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034aa:	4b25      	ldr	r3, [pc, #148]	@ (8003540 <xTaskIncrementTick+0x160>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d903      	bls.n	80034ba <xTaskIncrementTick+0xda>
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034b6:	4a22      	ldr	r2, [pc, #136]	@ (8003540 <xTaskIncrementTick+0x160>)
 80034b8:	6013      	str	r3, [r2, #0]
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034be:	4613      	mov	r3, r2
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	4413      	add	r3, r2
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	4a1f      	ldr	r2, [pc, #124]	@ (8003544 <xTaskIncrementTick+0x164>)
 80034c8:	441a      	add	r2, r3
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	3304      	adds	r3, #4
 80034ce:	4619      	mov	r1, r3
 80034d0:	4610      	mov	r0, r2
 80034d2:	f7fe fee4 	bl	800229e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034da:	4b1b      	ldr	r3, [pc, #108]	@ (8003548 <xTaskIncrementTick+0x168>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d3b8      	bcc.n	8003456 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80034e4:	2301      	movs	r3, #1
 80034e6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80034e8:	e7b5      	b.n	8003456 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80034ea:	4b17      	ldr	r3, [pc, #92]	@ (8003548 <xTaskIncrementTick+0x168>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034f0:	4914      	ldr	r1, [pc, #80]	@ (8003544 <xTaskIncrementTick+0x164>)
 80034f2:	4613      	mov	r3, r2
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	4413      	add	r3, r2
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	440b      	add	r3, r1
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	2b01      	cmp	r3, #1
 8003500:	d901      	bls.n	8003506 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8003502:	2301      	movs	r3, #1
 8003504:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003506:	4b11      	ldr	r3, [pc, #68]	@ (800354c <xTaskIncrementTick+0x16c>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d007      	beq.n	800351e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800350e:	2301      	movs	r3, #1
 8003510:	617b      	str	r3, [r7, #20]
 8003512:	e004      	b.n	800351e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003514:	4b0e      	ldr	r3, [pc, #56]	@ (8003550 <xTaskIncrementTick+0x170>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	3301      	adds	r3, #1
 800351a:	4a0d      	ldr	r2, [pc, #52]	@ (8003550 <xTaskIncrementTick+0x170>)
 800351c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800351e:	697b      	ldr	r3, [r7, #20]
}
 8003520:	4618      	mov	r0, r3
 8003522:	3718      	adds	r7, #24
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}
 8003528:	20000d6c 	.word	0x20000d6c
 800352c:	20000d48 	.word	0x20000d48
 8003530:	20000cfc 	.word	0x20000cfc
 8003534:	20000d00 	.word	0x20000d00
 8003538:	20000d5c 	.word	0x20000d5c
 800353c:	20000d64 	.word	0x20000d64
 8003540:	20000d4c 	.word	0x20000d4c
 8003544:	20000874 	.word	0x20000874
 8003548:	20000870 	.word	0x20000870
 800354c:	20000d58 	.word	0x20000d58
 8003550:	20000d54 	.word	0x20000d54

08003554 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003554:	b480      	push	{r7}
 8003556:	b085      	sub	sp, #20
 8003558:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800355a:	4b2b      	ldr	r3, [pc, #172]	@ (8003608 <vTaskSwitchContext+0xb4>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d003      	beq.n	800356a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003562:	4b2a      	ldr	r3, [pc, #168]	@ (800360c <vTaskSwitchContext+0xb8>)
 8003564:	2201      	movs	r2, #1
 8003566:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003568:	e047      	b.n	80035fa <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800356a:	4b28      	ldr	r3, [pc, #160]	@ (800360c <vTaskSwitchContext+0xb8>)
 800356c:	2200      	movs	r2, #0
 800356e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003570:	4b27      	ldr	r3, [pc, #156]	@ (8003610 <vTaskSwitchContext+0xbc>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	60fb      	str	r3, [r7, #12]
 8003576:	e011      	b.n	800359c <vTaskSwitchContext+0x48>
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d10b      	bne.n	8003596 <vTaskSwitchContext+0x42>
	__asm volatile
 800357e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003582:	f383 8811 	msr	BASEPRI, r3
 8003586:	f3bf 8f6f 	isb	sy
 800358a:	f3bf 8f4f 	dsb	sy
 800358e:	607b      	str	r3, [r7, #4]
}
 8003590:	bf00      	nop
 8003592:	bf00      	nop
 8003594:	e7fd      	b.n	8003592 <vTaskSwitchContext+0x3e>
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	3b01      	subs	r3, #1
 800359a:	60fb      	str	r3, [r7, #12]
 800359c:	491d      	ldr	r1, [pc, #116]	@ (8003614 <vTaskSwitchContext+0xc0>)
 800359e:	68fa      	ldr	r2, [r7, #12]
 80035a0:	4613      	mov	r3, r2
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	4413      	add	r3, r2
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	440b      	add	r3, r1
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d0e3      	beq.n	8003578 <vTaskSwitchContext+0x24>
 80035b0:	68fa      	ldr	r2, [r7, #12]
 80035b2:	4613      	mov	r3, r2
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	4413      	add	r3, r2
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	4a16      	ldr	r2, [pc, #88]	@ (8003614 <vTaskSwitchContext+0xc0>)
 80035bc:	4413      	add	r3, r2
 80035be:	60bb      	str	r3, [r7, #8]
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	685a      	ldr	r2, [r3, #4]
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	605a      	str	r2, [r3, #4]
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	685a      	ldr	r2, [r3, #4]
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	3308      	adds	r3, #8
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d104      	bne.n	80035e0 <vTaskSwitchContext+0x8c>
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	685a      	ldr	r2, [r3, #4]
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	605a      	str	r2, [r3, #4]
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	68db      	ldr	r3, [r3, #12]
 80035e6:	4a0c      	ldr	r2, [pc, #48]	@ (8003618 <vTaskSwitchContext+0xc4>)
 80035e8:	6013      	str	r3, [r2, #0]
 80035ea:	4a09      	ldr	r2, [pc, #36]	@ (8003610 <vTaskSwitchContext+0xbc>)
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80035f0:	4b09      	ldr	r3, [pc, #36]	@ (8003618 <vTaskSwitchContext+0xc4>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	3354      	adds	r3, #84	@ 0x54
 80035f6:	4a09      	ldr	r2, [pc, #36]	@ (800361c <vTaskSwitchContext+0xc8>)
 80035f8:	6013      	str	r3, [r2, #0]
}
 80035fa:	bf00      	nop
 80035fc:	3714      	adds	r7, #20
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr
 8003606:	bf00      	nop
 8003608:	20000d6c 	.word	0x20000d6c
 800360c:	20000d58 	.word	0x20000d58
 8003610:	20000d4c 	.word	0x20000d4c
 8003614:	20000874 	.word	0x20000874
 8003618:	20000870 	.word	0x20000870
 800361c:	2000001c 	.word	0x2000001c

08003620 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b084      	sub	sp, #16
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d10b      	bne.n	8003648 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8003630:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003634:	f383 8811 	msr	BASEPRI, r3
 8003638:	f3bf 8f6f 	isb	sy
 800363c:	f3bf 8f4f 	dsb	sy
 8003640:	60fb      	str	r3, [r7, #12]
}
 8003642:	bf00      	nop
 8003644:	bf00      	nop
 8003646:	e7fd      	b.n	8003644 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003648:	4b07      	ldr	r3, [pc, #28]	@ (8003668 <vTaskPlaceOnEventList+0x48>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	3318      	adds	r3, #24
 800364e:	4619      	mov	r1, r3
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	f7fe fe48 	bl	80022e6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003656:	2101      	movs	r1, #1
 8003658:	6838      	ldr	r0, [r7, #0]
 800365a:	f000 fa87 	bl	8003b6c <prvAddCurrentTaskToDelayedList>
}
 800365e:	bf00      	nop
 8003660:	3710      	adds	r7, #16
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
 8003666:	bf00      	nop
 8003668:	20000870 	.word	0x20000870

0800366c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800366c:	b580      	push	{r7, lr}
 800366e:	b086      	sub	sp, #24
 8003670:	af00      	add	r7, sp, #0
 8003672:	60f8      	str	r0, [r7, #12]
 8003674:	60b9      	str	r1, [r7, #8]
 8003676:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d10b      	bne.n	8003696 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800367e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003682:	f383 8811 	msr	BASEPRI, r3
 8003686:	f3bf 8f6f 	isb	sy
 800368a:	f3bf 8f4f 	dsb	sy
 800368e:	617b      	str	r3, [r7, #20]
}
 8003690:	bf00      	nop
 8003692:	bf00      	nop
 8003694:	e7fd      	b.n	8003692 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003696:	4b0a      	ldr	r3, [pc, #40]	@ (80036c0 <vTaskPlaceOnEventListRestricted+0x54>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	3318      	adds	r3, #24
 800369c:	4619      	mov	r1, r3
 800369e:	68f8      	ldr	r0, [r7, #12]
 80036a0:	f7fe fdfd 	bl	800229e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d002      	beq.n	80036b0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80036aa:	f04f 33ff 	mov.w	r3, #4294967295
 80036ae:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80036b0:	6879      	ldr	r1, [r7, #4]
 80036b2:	68b8      	ldr	r0, [r7, #8]
 80036b4:	f000 fa5a 	bl	8003b6c <prvAddCurrentTaskToDelayedList>
	}
 80036b8:	bf00      	nop
 80036ba:	3718      	adds	r7, #24
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}
 80036c0:	20000870 	.word	0x20000870

080036c4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b086      	sub	sp, #24
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	68db      	ldr	r3, [r3, #12]
 80036d0:	68db      	ldr	r3, [r3, #12]
 80036d2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d10b      	bne.n	80036f2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80036da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036de:	f383 8811 	msr	BASEPRI, r3
 80036e2:	f3bf 8f6f 	isb	sy
 80036e6:	f3bf 8f4f 	dsb	sy
 80036ea:	60fb      	str	r3, [r7, #12]
}
 80036ec:	bf00      	nop
 80036ee:	bf00      	nop
 80036f0:	e7fd      	b.n	80036ee <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	3318      	adds	r3, #24
 80036f6:	4618      	mov	r0, r3
 80036f8:	f7fe fe2e 	bl	8002358 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80036fc:	4b1d      	ldr	r3, [pc, #116]	@ (8003774 <xTaskRemoveFromEventList+0xb0>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d11d      	bne.n	8003740 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	3304      	adds	r3, #4
 8003708:	4618      	mov	r0, r3
 800370a:	f7fe fe25 	bl	8002358 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003712:	4b19      	ldr	r3, [pc, #100]	@ (8003778 <xTaskRemoveFromEventList+0xb4>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	429a      	cmp	r2, r3
 8003718:	d903      	bls.n	8003722 <xTaskRemoveFromEventList+0x5e>
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800371e:	4a16      	ldr	r2, [pc, #88]	@ (8003778 <xTaskRemoveFromEventList+0xb4>)
 8003720:	6013      	str	r3, [r2, #0]
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003726:	4613      	mov	r3, r2
 8003728:	009b      	lsls	r3, r3, #2
 800372a:	4413      	add	r3, r2
 800372c:	009b      	lsls	r3, r3, #2
 800372e:	4a13      	ldr	r2, [pc, #76]	@ (800377c <xTaskRemoveFromEventList+0xb8>)
 8003730:	441a      	add	r2, r3
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	3304      	adds	r3, #4
 8003736:	4619      	mov	r1, r3
 8003738:	4610      	mov	r0, r2
 800373a:	f7fe fdb0 	bl	800229e <vListInsertEnd>
 800373e:	e005      	b.n	800374c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	3318      	adds	r3, #24
 8003744:	4619      	mov	r1, r3
 8003746:	480e      	ldr	r0, [pc, #56]	@ (8003780 <xTaskRemoveFromEventList+0xbc>)
 8003748:	f7fe fda9 	bl	800229e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003750:	4b0c      	ldr	r3, [pc, #48]	@ (8003784 <xTaskRemoveFromEventList+0xc0>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003756:	429a      	cmp	r2, r3
 8003758:	d905      	bls.n	8003766 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800375a:	2301      	movs	r3, #1
 800375c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800375e:	4b0a      	ldr	r3, [pc, #40]	@ (8003788 <xTaskRemoveFromEventList+0xc4>)
 8003760:	2201      	movs	r2, #1
 8003762:	601a      	str	r2, [r3, #0]
 8003764:	e001      	b.n	800376a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8003766:	2300      	movs	r3, #0
 8003768:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800376a:	697b      	ldr	r3, [r7, #20]
}
 800376c:	4618      	mov	r0, r3
 800376e:	3718      	adds	r7, #24
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}
 8003774:	20000d6c 	.word	0x20000d6c
 8003778:	20000d4c 	.word	0x20000d4c
 800377c:	20000874 	.word	0x20000874
 8003780:	20000d04 	.word	0x20000d04
 8003784:	20000870 	.word	0x20000870
 8003788:	20000d58 	.word	0x20000d58

0800378c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800378c:	b480      	push	{r7}
 800378e:	b083      	sub	sp, #12
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003794:	4b06      	ldr	r3, [pc, #24]	@ (80037b0 <vTaskInternalSetTimeOutState+0x24>)
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800379c:	4b05      	ldr	r3, [pc, #20]	@ (80037b4 <vTaskInternalSetTimeOutState+0x28>)
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	605a      	str	r2, [r3, #4]
}
 80037a4:	bf00      	nop
 80037a6:	370c      	adds	r7, #12
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	4770      	bx	lr
 80037b0:	20000d5c 	.word	0x20000d5c
 80037b4:	20000d48 	.word	0x20000d48

080037b8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b088      	sub	sp, #32
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
 80037c0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d10b      	bne.n	80037e0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80037c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037cc:	f383 8811 	msr	BASEPRI, r3
 80037d0:	f3bf 8f6f 	isb	sy
 80037d4:	f3bf 8f4f 	dsb	sy
 80037d8:	613b      	str	r3, [r7, #16]
}
 80037da:	bf00      	nop
 80037dc:	bf00      	nop
 80037de:	e7fd      	b.n	80037dc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d10b      	bne.n	80037fe <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80037e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037ea:	f383 8811 	msr	BASEPRI, r3
 80037ee:	f3bf 8f6f 	isb	sy
 80037f2:	f3bf 8f4f 	dsb	sy
 80037f6:	60fb      	str	r3, [r7, #12]
}
 80037f8:	bf00      	nop
 80037fa:	bf00      	nop
 80037fc:	e7fd      	b.n	80037fa <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80037fe:	f000 fe93 	bl	8004528 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003802:	4b1d      	ldr	r3, [pc, #116]	@ (8003878 <xTaskCheckForTimeOut+0xc0>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	69ba      	ldr	r2, [r7, #24]
 800380e:	1ad3      	subs	r3, r2, r3
 8003810:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800381a:	d102      	bne.n	8003822 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800381c:	2300      	movs	r3, #0
 800381e:	61fb      	str	r3, [r7, #28]
 8003820:	e023      	b.n	800386a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	4b15      	ldr	r3, [pc, #84]	@ (800387c <xTaskCheckForTimeOut+0xc4>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	429a      	cmp	r2, r3
 800382c:	d007      	beq.n	800383e <xTaskCheckForTimeOut+0x86>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	69ba      	ldr	r2, [r7, #24]
 8003834:	429a      	cmp	r2, r3
 8003836:	d302      	bcc.n	800383e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003838:	2301      	movs	r3, #1
 800383a:	61fb      	str	r3, [r7, #28]
 800383c:	e015      	b.n	800386a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	697a      	ldr	r2, [r7, #20]
 8003844:	429a      	cmp	r2, r3
 8003846:	d20b      	bcs.n	8003860 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	1ad2      	subs	r2, r2, r3
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	f7ff ff99 	bl	800378c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800385a:	2300      	movs	r3, #0
 800385c:	61fb      	str	r3, [r7, #28]
 800385e:	e004      	b.n	800386a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	2200      	movs	r2, #0
 8003864:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003866:	2301      	movs	r3, #1
 8003868:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800386a:	f000 fe8f 	bl	800458c <vPortExitCritical>

	return xReturn;
 800386e:	69fb      	ldr	r3, [r7, #28]
}
 8003870:	4618      	mov	r0, r3
 8003872:	3720      	adds	r7, #32
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}
 8003878:	20000d48 	.word	0x20000d48
 800387c:	20000d5c 	.word	0x20000d5c

08003880 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003880:	b480      	push	{r7}
 8003882:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003884:	4b03      	ldr	r3, [pc, #12]	@ (8003894 <vTaskMissedYield+0x14>)
 8003886:	2201      	movs	r2, #1
 8003888:	601a      	str	r2, [r3, #0]
}
 800388a:	bf00      	nop
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr
 8003894:	20000d58 	.word	0x20000d58

08003898 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b082      	sub	sp, #8
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80038a0:	f000 f852 	bl	8003948 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80038a4:	4b06      	ldr	r3, [pc, #24]	@ (80038c0 <prvIdleTask+0x28>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d9f9      	bls.n	80038a0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80038ac:	4b05      	ldr	r3, [pc, #20]	@ (80038c4 <prvIdleTask+0x2c>)
 80038ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80038b2:	601a      	str	r2, [r3, #0]
 80038b4:	f3bf 8f4f 	dsb	sy
 80038b8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80038bc:	e7f0      	b.n	80038a0 <prvIdleTask+0x8>
 80038be:	bf00      	nop
 80038c0:	20000874 	.word	0x20000874
 80038c4:	e000ed04 	.word	0xe000ed04

080038c8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b082      	sub	sp, #8
 80038cc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80038ce:	2300      	movs	r3, #0
 80038d0:	607b      	str	r3, [r7, #4]
 80038d2:	e00c      	b.n	80038ee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80038d4:	687a      	ldr	r2, [r7, #4]
 80038d6:	4613      	mov	r3, r2
 80038d8:	009b      	lsls	r3, r3, #2
 80038da:	4413      	add	r3, r2
 80038dc:	009b      	lsls	r3, r3, #2
 80038de:	4a12      	ldr	r2, [pc, #72]	@ (8003928 <prvInitialiseTaskLists+0x60>)
 80038e0:	4413      	add	r3, r2
 80038e2:	4618      	mov	r0, r3
 80038e4:	f7fe fcae 	bl	8002244 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	3301      	adds	r3, #1
 80038ec:	607b      	str	r3, [r7, #4]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2b37      	cmp	r3, #55	@ 0x37
 80038f2:	d9ef      	bls.n	80038d4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80038f4:	480d      	ldr	r0, [pc, #52]	@ (800392c <prvInitialiseTaskLists+0x64>)
 80038f6:	f7fe fca5 	bl	8002244 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80038fa:	480d      	ldr	r0, [pc, #52]	@ (8003930 <prvInitialiseTaskLists+0x68>)
 80038fc:	f7fe fca2 	bl	8002244 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003900:	480c      	ldr	r0, [pc, #48]	@ (8003934 <prvInitialiseTaskLists+0x6c>)
 8003902:	f7fe fc9f 	bl	8002244 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003906:	480c      	ldr	r0, [pc, #48]	@ (8003938 <prvInitialiseTaskLists+0x70>)
 8003908:	f7fe fc9c 	bl	8002244 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800390c:	480b      	ldr	r0, [pc, #44]	@ (800393c <prvInitialiseTaskLists+0x74>)
 800390e:	f7fe fc99 	bl	8002244 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003912:	4b0b      	ldr	r3, [pc, #44]	@ (8003940 <prvInitialiseTaskLists+0x78>)
 8003914:	4a05      	ldr	r2, [pc, #20]	@ (800392c <prvInitialiseTaskLists+0x64>)
 8003916:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003918:	4b0a      	ldr	r3, [pc, #40]	@ (8003944 <prvInitialiseTaskLists+0x7c>)
 800391a:	4a05      	ldr	r2, [pc, #20]	@ (8003930 <prvInitialiseTaskLists+0x68>)
 800391c:	601a      	str	r2, [r3, #0]
}
 800391e:	bf00      	nop
 8003920:	3708      	adds	r7, #8
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}
 8003926:	bf00      	nop
 8003928:	20000874 	.word	0x20000874
 800392c:	20000cd4 	.word	0x20000cd4
 8003930:	20000ce8 	.word	0x20000ce8
 8003934:	20000d04 	.word	0x20000d04
 8003938:	20000d18 	.word	0x20000d18
 800393c:	20000d30 	.word	0x20000d30
 8003940:	20000cfc 	.word	0x20000cfc
 8003944:	20000d00 	.word	0x20000d00

08003948 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b082      	sub	sp, #8
 800394c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800394e:	e019      	b.n	8003984 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003950:	f000 fdea 	bl	8004528 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003954:	4b10      	ldr	r3, [pc, #64]	@ (8003998 <prvCheckTasksWaitingTermination+0x50>)
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	3304      	adds	r3, #4
 8003960:	4618      	mov	r0, r3
 8003962:	f7fe fcf9 	bl	8002358 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003966:	4b0d      	ldr	r3, [pc, #52]	@ (800399c <prvCheckTasksWaitingTermination+0x54>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	3b01      	subs	r3, #1
 800396c:	4a0b      	ldr	r2, [pc, #44]	@ (800399c <prvCheckTasksWaitingTermination+0x54>)
 800396e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003970:	4b0b      	ldr	r3, [pc, #44]	@ (80039a0 <prvCheckTasksWaitingTermination+0x58>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	3b01      	subs	r3, #1
 8003976:	4a0a      	ldr	r2, [pc, #40]	@ (80039a0 <prvCheckTasksWaitingTermination+0x58>)
 8003978:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800397a:	f000 fe07 	bl	800458c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f000 f810 	bl	80039a4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003984:	4b06      	ldr	r3, [pc, #24]	@ (80039a0 <prvCheckTasksWaitingTermination+0x58>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d1e1      	bne.n	8003950 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800398c:	bf00      	nop
 800398e:	bf00      	nop
 8003990:	3708      	adds	r7, #8
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
 8003996:	bf00      	nop
 8003998:	20000d18 	.word	0x20000d18
 800399c:	20000d44 	.word	0x20000d44
 80039a0:	20000d2c 	.word	0x20000d2c

080039a4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b084      	sub	sp, #16
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	3354      	adds	r3, #84	@ 0x54
 80039b0:	4618      	mov	r0, r3
 80039b2:	f001 fad9 	bl	8004f68 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d108      	bne.n	80039d2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039c4:	4618      	mov	r0, r3
 80039c6:	f000 ff9f 	bl	8004908 <vPortFree>
				vPortFree( pxTCB );
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f000 ff9c 	bl	8004908 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80039d0:	e019      	b.n	8003a06 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d103      	bne.n	80039e4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f000 ff93 	bl	8004908 <vPortFree>
	}
 80039e2:	e010      	b.n	8003a06 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80039ea:	2b02      	cmp	r3, #2
 80039ec:	d00b      	beq.n	8003a06 <prvDeleteTCB+0x62>
	__asm volatile
 80039ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039f2:	f383 8811 	msr	BASEPRI, r3
 80039f6:	f3bf 8f6f 	isb	sy
 80039fa:	f3bf 8f4f 	dsb	sy
 80039fe:	60fb      	str	r3, [r7, #12]
}
 8003a00:	bf00      	nop
 8003a02:	bf00      	nop
 8003a04:	e7fd      	b.n	8003a02 <prvDeleteTCB+0x5e>
	}
 8003a06:	bf00      	nop
 8003a08:	3710      	adds	r7, #16
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}
	...

08003a10 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003a10:	b480      	push	{r7}
 8003a12:	b083      	sub	sp, #12
 8003a14:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003a16:	4b0c      	ldr	r3, [pc, #48]	@ (8003a48 <prvResetNextTaskUnblockTime+0x38>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d104      	bne.n	8003a2a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003a20:	4b0a      	ldr	r3, [pc, #40]	@ (8003a4c <prvResetNextTaskUnblockTime+0x3c>)
 8003a22:	f04f 32ff 	mov.w	r2, #4294967295
 8003a26:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003a28:	e008      	b.n	8003a3c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a2a:	4b07      	ldr	r3, [pc, #28]	@ (8003a48 <prvResetNextTaskUnblockTime+0x38>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	68db      	ldr	r3, [r3, #12]
 8003a32:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	4a04      	ldr	r2, [pc, #16]	@ (8003a4c <prvResetNextTaskUnblockTime+0x3c>)
 8003a3a:	6013      	str	r3, [r2, #0]
}
 8003a3c:	bf00      	nop
 8003a3e:	370c      	adds	r7, #12
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr
 8003a48:	20000cfc 	.word	0x20000cfc
 8003a4c:	20000d64 	.word	0x20000d64

08003a50 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003a50:	b480      	push	{r7}
 8003a52:	b083      	sub	sp, #12
 8003a54:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003a56:	4b0b      	ldr	r3, [pc, #44]	@ (8003a84 <xTaskGetSchedulerState+0x34>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d102      	bne.n	8003a64 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	607b      	str	r3, [r7, #4]
 8003a62:	e008      	b.n	8003a76 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a64:	4b08      	ldr	r3, [pc, #32]	@ (8003a88 <xTaskGetSchedulerState+0x38>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d102      	bne.n	8003a72 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003a6c:	2302      	movs	r3, #2
 8003a6e:	607b      	str	r3, [r7, #4]
 8003a70:	e001      	b.n	8003a76 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003a72:	2300      	movs	r3, #0
 8003a74:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003a76:	687b      	ldr	r3, [r7, #4]
	}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	370c      	adds	r7, #12
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr
 8003a84:	20000d50 	.word	0x20000d50
 8003a88:	20000d6c 	.word	0x20000d6c

08003a8c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b086      	sub	sp, #24
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d058      	beq.n	8003b54 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003aa2:	4b2f      	ldr	r3, [pc, #188]	@ (8003b60 <xTaskPriorityDisinherit+0xd4>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	693a      	ldr	r2, [r7, #16]
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d00b      	beq.n	8003ac4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8003aac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ab0:	f383 8811 	msr	BASEPRI, r3
 8003ab4:	f3bf 8f6f 	isb	sy
 8003ab8:	f3bf 8f4f 	dsb	sy
 8003abc:	60fb      	str	r3, [r7, #12]
}
 8003abe:	bf00      	nop
 8003ac0:	bf00      	nop
 8003ac2:	e7fd      	b.n	8003ac0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d10b      	bne.n	8003ae4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8003acc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ad0:	f383 8811 	msr	BASEPRI, r3
 8003ad4:	f3bf 8f6f 	isb	sy
 8003ad8:	f3bf 8f4f 	dsb	sy
 8003adc:	60bb      	str	r3, [r7, #8]
}
 8003ade:	bf00      	nop
 8003ae0:	bf00      	nop
 8003ae2:	e7fd      	b.n	8003ae0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ae8:	1e5a      	subs	r2, r3, #1
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003af6:	429a      	cmp	r2, r3
 8003af8:	d02c      	beq.n	8003b54 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d128      	bne.n	8003b54 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	3304      	adds	r3, #4
 8003b06:	4618      	mov	r0, r3
 8003b08:	f7fe fc26 	bl	8002358 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b18:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b24:	4b0f      	ldr	r3, [pc, #60]	@ (8003b64 <xTaskPriorityDisinherit+0xd8>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d903      	bls.n	8003b34 <xTaskPriorityDisinherit+0xa8>
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b30:	4a0c      	ldr	r2, [pc, #48]	@ (8003b64 <xTaskPriorityDisinherit+0xd8>)
 8003b32:	6013      	str	r3, [r2, #0]
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b38:	4613      	mov	r3, r2
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	4413      	add	r3, r2
 8003b3e:	009b      	lsls	r3, r3, #2
 8003b40:	4a09      	ldr	r2, [pc, #36]	@ (8003b68 <xTaskPriorityDisinherit+0xdc>)
 8003b42:	441a      	add	r2, r3
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	3304      	adds	r3, #4
 8003b48:	4619      	mov	r1, r3
 8003b4a:	4610      	mov	r0, r2
 8003b4c:	f7fe fba7 	bl	800229e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003b50:	2301      	movs	r3, #1
 8003b52:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003b54:	697b      	ldr	r3, [r7, #20]
	}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3718      	adds	r7, #24
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	20000870 	.word	0x20000870
 8003b64:	20000d4c 	.word	0x20000d4c
 8003b68:	20000874 	.word	0x20000874

08003b6c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b084      	sub	sp, #16
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
 8003b74:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003b76:	4b21      	ldr	r3, [pc, #132]	@ (8003bfc <prvAddCurrentTaskToDelayedList+0x90>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003b7c:	4b20      	ldr	r3, [pc, #128]	@ (8003c00 <prvAddCurrentTaskToDelayedList+0x94>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	3304      	adds	r3, #4
 8003b82:	4618      	mov	r0, r3
 8003b84:	f7fe fbe8 	bl	8002358 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b8e:	d10a      	bne.n	8003ba6 <prvAddCurrentTaskToDelayedList+0x3a>
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d007      	beq.n	8003ba6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b96:	4b1a      	ldr	r3, [pc, #104]	@ (8003c00 <prvAddCurrentTaskToDelayedList+0x94>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	3304      	adds	r3, #4
 8003b9c:	4619      	mov	r1, r3
 8003b9e:	4819      	ldr	r0, [pc, #100]	@ (8003c04 <prvAddCurrentTaskToDelayedList+0x98>)
 8003ba0:	f7fe fb7d 	bl	800229e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003ba4:	e026      	b.n	8003bf4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003ba6:	68fa      	ldr	r2, [r7, #12]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	4413      	add	r3, r2
 8003bac:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003bae:	4b14      	ldr	r3, [pc, #80]	@ (8003c00 <prvAddCurrentTaskToDelayedList+0x94>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	68ba      	ldr	r2, [r7, #8]
 8003bb4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003bb6:	68ba      	ldr	r2, [r7, #8]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d209      	bcs.n	8003bd2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003bbe:	4b12      	ldr	r3, [pc, #72]	@ (8003c08 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	4b0f      	ldr	r3, [pc, #60]	@ (8003c00 <prvAddCurrentTaskToDelayedList+0x94>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	3304      	adds	r3, #4
 8003bc8:	4619      	mov	r1, r3
 8003bca:	4610      	mov	r0, r2
 8003bcc:	f7fe fb8b 	bl	80022e6 <vListInsert>
}
 8003bd0:	e010      	b.n	8003bf4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003bd2:	4b0e      	ldr	r3, [pc, #56]	@ (8003c0c <prvAddCurrentTaskToDelayedList+0xa0>)
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	4b0a      	ldr	r3, [pc, #40]	@ (8003c00 <prvAddCurrentTaskToDelayedList+0x94>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	3304      	adds	r3, #4
 8003bdc:	4619      	mov	r1, r3
 8003bde:	4610      	mov	r0, r2
 8003be0:	f7fe fb81 	bl	80022e6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003be4:	4b0a      	ldr	r3, [pc, #40]	@ (8003c10 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	68ba      	ldr	r2, [r7, #8]
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d202      	bcs.n	8003bf4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003bee:	4a08      	ldr	r2, [pc, #32]	@ (8003c10 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	6013      	str	r3, [r2, #0]
}
 8003bf4:	bf00      	nop
 8003bf6:	3710      	adds	r7, #16
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	20000d48 	.word	0x20000d48
 8003c00:	20000870 	.word	0x20000870
 8003c04:	20000d30 	.word	0x20000d30
 8003c08:	20000d00 	.word	0x20000d00
 8003c0c:	20000cfc 	.word	0x20000cfc
 8003c10:	20000d64 	.word	0x20000d64

08003c14 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b08a      	sub	sp, #40	@ 0x28
 8003c18:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003c1e:	f000 fb13 	bl	8004248 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003c22:	4b1d      	ldr	r3, [pc, #116]	@ (8003c98 <xTimerCreateTimerTask+0x84>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d021      	beq.n	8003c6e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003c32:	1d3a      	adds	r2, r7, #4
 8003c34:	f107 0108 	add.w	r1, r7, #8
 8003c38:	f107 030c 	add.w	r3, r7, #12
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f7fe fae7 	bl	8002210 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003c42:	6879      	ldr	r1, [r7, #4]
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	68fa      	ldr	r2, [r7, #12]
 8003c48:	9202      	str	r2, [sp, #8]
 8003c4a:	9301      	str	r3, [sp, #4]
 8003c4c:	2302      	movs	r3, #2
 8003c4e:	9300      	str	r3, [sp, #0]
 8003c50:	2300      	movs	r3, #0
 8003c52:	460a      	mov	r2, r1
 8003c54:	4911      	ldr	r1, [pc, #68]	@ (8003c9c <xTimerCreateTimerTask+0x88>)
 8003c56:	4812      	ldr	r0, [pc, #72]	@ (8003ca0 <xTimerCreateTimerTask+0x8c>)
 8003c58:	f7ff f8a2 	bl	8002da0 <xTaskCreateStatic>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	4a11      	ldr	r2, [pc, #68]	@ (8003ca4 <xTimerCreateTimerTask+0x90>)
 8003c60:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003c62:	4b10      	ldr	r3, [pc, #64]	@ (8003ca4 <xTimerCreateTimerTask+0x90>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d001      	beq.n	8003c6e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d10b      	bne.n	8003c8c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8003c74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c78:	f383 8811 	msr	BASEPRI, r3
 8003c7c:	f3bf 8f6f 	isb	sy
 8003c80:	f3bf 8f4f 	dsb	sy
 8003c84:	613b      	str	r3, [r7, #16]
}
 8003c86:	bf00      	nop
 8003c88:	bf00      	nop
 8003c8a:	e7fd      	b.n	8003c88 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003c8c:	697b      	ldr	r3, [r7, #20]
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3718      	adds	r7, #24
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}
 8003c96:	bf00      	nop
 8003c98:	20000da0 	.word	0x20000da0
 8003c9c:	080055e4 	.word	0x080055e4
 8003ca0:	08003de1 	.word	0x08003de1
 8003ca4:	20000da4 	.word	0x20000da4

08003ca8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b08a      	sub	sp, #40	@ 0x28
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	60f8      	str	r0, [r7, #12]
 8003cb0:	60b9      	str	r1, [r7, #8]
 8003cb2:	607a      	str	r2, [r7, #4]
 8003cb4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d10b      	bne.n	8003cd8 <xTimerGenericCommand+0x30>
	__asm volatile
 8003cc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cc4:	f383 8811 	msr	BASEPRI, r3
 8003cc8:	f3bf 8f6f 	isb	sy
 8003ccc:	f3bf 8f4f 	dsb	sy
 8003cd0:	623b      	str	r3, [r7, #32]
}
 8003cd2:	bf00      	nop
 8003cd4:	bf00      	nop
 8003cd6:	e7fd      	b.n	8003cd4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003cd8:	4b19      	ldr	r3, [pc, #100]	@ (8003d40 <xTimerGenericCommand+0x98>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d02a      	beq.n	8003d36 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	2b05      	cmp	r3, #5
 8003cf0:	dc18      	bgt.n	8003d24 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003cf2:	f7ff fead 	bl	8003a50 <xTaskGetSchedulerState>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	2b02      	cmp	r3, #2
 8003cfa:	d109      	bne.n	8003d10 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003cfc:	4b10      	ldr	r3, [pc, #64]	@ (8003d40 <xTimerGenericCommand+0x98>)
 8003cfe:	6818      	ldr	r0, [r3, #0]
 8003d00:	f107 0110 	add.w	r1, r7, #16
 8003d04:	2300      	movs	r3, #0
 8003d06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d08:	f7fe fc5a 	bl	80025c0 <xQueueGenericSend>
 8003d0c:	6278      	str	r0, [r7, #36]	@ 0x24
 8003d0e:	e012      	b.n	8003d36 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003d10:	4b0b      	ldr	r3, [pc, #44]	@ (8003d40 <xTimerGenericCommand+0x98>)
 8003d12:	6818      	ldr	r0, [r3, #0]
 8003d14:	f107 0110 	add.w	r1, r7, #16
 8003d18:	2300      	movs	r3, #0
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f7fe fc50 	bl	80025c0 <xQueueGenericSend>
 8003d20:	6278      	str	r0, [r7, #36]	@ 0x24
 8003d22:	e008      	b.n	8003d36 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003d24:	4b06      	ldr	r3, [pc, #24]	@ (8003d40 <xTimerGenericCommand+0x98>)
 8003d26:	6818      	ldr	r0, [r3, #0]
 8003d28:	f107 0110 	add.w	r1, r7, #16
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	683a      	ldr	r2, [r7, #0]
 8003d30:	f7fe fd48 	bl	80027c4 <xQueueGenericSendFromISR>
 8003d34:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3728      	adds	r7, #40	@ 0x28
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}
 8003d40:	20000da0 	.word	0x20000da0

08003d44 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b088      	sub	sp, #32
 8003d48:	af02      	add	r7, sp, #8
 8003d4a:	6078      	str	r0, [r7, #4]
 8003d4c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d4e:	4b23      	ldr	r3, [pc, #140]	@ (8003ddc <prvProcessExpiredTimer+0x98>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	68db      	ldr	r3, [r3, #12]
 8003d56:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	3304      	adds	r3, #4
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f7fe fafb 	bl	8002358 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003d68:	f003 0304 	and.w	r3, r3, #4
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d023      	beq.n	8003db8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	699a      	ldr	r2, [r3, #24]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	18d1      	adds	r1, r2, r3
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	683a      	ldr	r2, [r7, #0]
 8003d7c:	6978      	ldr	r0, [r7, #20]
 8003d7e:	f000 f8d5 	bl	8003f2c <prvInsertTimerInActiveList>
 8003d82:	4603      	mov	r3, r0
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d020      	beq.n	8003dca <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003d88:	2300      	movs	r3, #0
 8003d8a:	9300      	str	r3, [sp, #0]
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	687a      	ldr	r2, [r7, #4]
 8003d90:	2100      	movs	r1, #0
 8003d92:	6978      	ldr	r0, [r7, #20]
 8003d94:	f7ff ff88 	bl	8003ca8 <xTimerGenericCommand>
 8003d98:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d114      	bne.n	8003dca <prvProcessExpiredTimer+0x86>
	__asm volatile
 8003da0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003da4:	f383 8811 	msr	BASEPRI, r3
 8003da8:	f3bf 8f6f 	isb	sy
 8003dac:	f3bf 8f4f 	dsb	sy
 8003db0:	60fb      	str	r3, [r7, #12]
}
 8003db2:	bf00      	nop
 8003db4:	bf00      	nop
 8003db6:	e7fd      	b.n	8003db4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003dbe:	f023 0301 	bic.w	r3, r3, #1
 8003dc2:	b2da      	uxtb	r2, r3
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	6a1b      	ldr	r3, [r3, #32]
 8003dce:	6978      	ldr	r0, [r7, #20]
 8003dd0:	4798      	blx	r3
}
 8003dd2:	bf00      	nop
 8003dd4:	3718      	adds	r7, #24
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}
 8003dda:	bf00      	nop
 8003ddc:	20000d98 	.word	0x20000d98

08003de0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b084      	sub	sp, #16
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003de8:	f107 0308 	add.w	r3, r7, #8
 8003dec:	4618      	mov	r0, r3
 8003dee:	f000 f859 	bl	8003ea4 <prvGetNextExpireTime>
 8003df2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	4619      	mov	r1, r3
 8003df8:	68f8      	ldr	r0, [r7, #12]
 8003dfa:	f000 f805 	bl	8003e08 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003dfe:	f000 f8d7 	bl	8003fb0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003e02:	bf00      	nop
 8003e04:	e7f0      	b.n	8003de8 <prvTimerTask+0x8>
	...

08003e08 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b084      	sub	sp, #16
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
 8003e10:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003e12:	f7ff fa29 	bl	8003268 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003e16:	f107 0308 	add.w	r3, r7, #8
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f000 f866 	bl	8003eec <prvSampleTimeNow>
 8003e20:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d130      	bne.n	8003e8a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d10a      	bne.n	8003e44 <prvProcessTimerOrBlockTask+0x3c>
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d806      	bhi.n	8003e44 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003e36:	f7ff fa25 	bl	8003284 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003e3a:	68f9      	ldr	r1, [r7, #12]
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f7ff ff81 	bl	8003d44 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003e42:	e024      	b.n	8003e8e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d008      	beq.n	8003e5c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003e4a:	4b13      	ldr	r3, [pc, #76]	@ (8003e98 <prvProcessTimerOrBlockTask+0x90>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d101      	bne.n	8003e58 <prvProcessTimerOrBlockTask+0x50>
 8003e54:	2301      	movs	r3, #1
 8003e56:	e000      	b.n	8003e5a <prvProcessTimerOrBlockTask+0x52>
 8003e58:	2300      	movs	r3, #0
 8003e5a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003e5c:	4b0f      	ldr	r3, [pc, #60]	@ (8003e9c <prvProcessTimerOrBlockTask+0x94>)
 8003e5e:	6818      	ldr	r0, [r3, #0]
 8003e60:	687a      	ldr	r2, [r7, #4]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	1ad3      	subs	r3, r2, r3
 8003e66:	683a      	ldr	r2, [r7, #0]
 8003e68:	4619      	mov	r1, r3
 8003e6a:	f7fe ff65 	bl	8002d38 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003e6e:	f7ff fa09 	bl	8003284 <xTaskResumeAll>
 8003e72:	4603      	mov	r3, r0
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d10a      	bne.n	8003e8e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003e78:	4b09      	ldr	r3, [pc, #36]	@ (8003ea0 <prvProcessTimerOrBlockTask+0x98>)
 8003e7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e7e:	601a      	str	r2, [r3, #0]
 8003e80:	f3bf 8f4f 	dsb	sy
 8003e84:	f3bf 8f6f 	isb	sy
}
 8003e88:	e001      	b.n	8003e8e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003e8a:	f7ff f9fb 	bl	8003284 <xTaskResumeAll>
}
 8003e8e:	bf00      	nop
 8003e90:	3710      	adds	r7, #16
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}
 8003e96:	bf00      	nop
 8003e98:	20000d9c 	.word	0x20000d9c
 8003e9c:	20000da0 	.word	0x20000da0
 8003ea0:	e000ed04 	.word	0xe000ed04

08003ea4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b085      	sub	sp, #20
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003eac:	4b0e      	ldr	r3, [pc, #56]	@ (8003ee8 <prvGetNextExpireTime+0x44>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d101      	bne.n	8003eba <prvGetNextExpireTime+0x16>
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	e000      	b.n	8003ebc <prvGetNextExpireTime+0x18>
 8003eba:	2200      	movs	r2, #0
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d105      	bne.n	8003ed4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003ec8:	4b07      	ldr	r3, [pc, #28]	@ (8003ee8 <prvGetNextExpireTime+0x44>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	68db      	ldr	r3, [r3, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	60fb      	str	r3, [r7, #12]
 8003ed2:	e001      	b.n	8003ed8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3714      	adds	r7, #20
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr
 8003ee6:	bf00      	nop
 8003ee8:	20000d98 	.word	0x20000d98

08003eec <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b084      	sub	sp, #16
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003ef4:	f7ff fa64 	bl	80033c0 <xTaskGetTickCount>
 8003ef8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003efa:	4b0b      	ldr	r3, [pc, #44]	@ (8003f28 <prvSampleTimeNow+0x3c>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	68fa      	ldr	r2, [r7, #12]
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d205      	bcs.n	8003f10 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003f04:	f000 f93a 	bl	800417c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	601a      	str	r2, [r3, #0]
 8003f0e:	e002      	b.n	8003f16 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2200      	movs	r2, #0
 8003f14:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003f16:	4a04      	ldr	r2, [pc, #16]	@ (8003f28 <prvSampleTimeNow+0x3c>)
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3710      	adds	r7, #16
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}
 8003f26:	bf00      	nop
 8003f28:	20000da8 	.word	0x20000da8

08003f2c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b086      	sub	sp, #24
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	60f8      	str	r0, [r7, #12]
 8003f34:	60b9      	str	r1, [r7, #8]
 8003f36:	607a      	str	r2, [r7, #4]
 8003f38:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	68ba      	ldr	r2, [r7, #8]
 8003f42:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	68fa      	ldr	r2, [r7, #12]
 8003f48:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003f4a:	68ba      	ldr	r2, [r7, #8]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	d812      	bhi.n	8003f78 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f52:	687a      	ldr	r2, [r7, #4]
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	1ad2      	subs	r2, r2, r3
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	699b      	ldr	r3, [r3, #24]
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d302      	bcc.n	8003f66 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003f60:	2301      	movs	r3, #1
 8003f62:	617b      	str	r3, [r7, #20]
 8003f64:	e01b      	b.n	8003f9e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003f66:	4b10      	ldr	r3, [pc, #64]	@ (8003fa8 <prvInsertTimerInActiveList+0x7c>)
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	3304      	adds	r3, #4
 8003f6e:	4619      	mov	r1, r3
 8003f70:	4610      	mov	r0, r2
 8003f72:	f7fe f9b8 	bl	80022e6 <vListInsert>
 8003f76:	e012      	b.n	8003f9e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003f78:	687a      	ldr	r2, [r7, #4]
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d206      	bcs.n	8003f8e <prvInsertTimerInActiveList+0x62>
 8003f80:	68ba      	ldr	r2, [r7, #8]
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d302      	bcc.n	8003f8e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	617b      	str	r3, [r7, #20]
 8003f8c:	e007      	b.n	8003f9e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003f8e:	4b07      	ldr	r3, [pc, #28]	@ (8003fac <prvInsertTimerInActiveList+0x80>)
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	3304      	adds	r3, #4
 8003f96:	4619      	mov	r1, r3
 8003f98:	4610      	mov	r0, r2
 8003f9a:	f7fe f9a4 	bl	80022e6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003f9e:	697b      	ldr	r3, [r7, #20]
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	3718      	adds	r7, #24
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}
 8003fa8:	20000d9c 	.word	0x20000d9c
 8003fac:	20000d98 	.word	0x20000d98

08003fb0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b08e      	sub	sp, #56	@ 0x38
 8003fb4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003fb6:	e0ce      	b.n	8004156 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	da19      	bge.n	8003ff2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003fbe:	1d3b      	adds	r3, r7, #4
 8003fc0:	3304      	adds	r3, #4
 8003fc2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8003fc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d10b      	bne.n	8003fe2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8003fca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fce:	f383 8811 	msr	BASEPRI, r3
 8003fd2:	f3bf 8f6f 	isb	sy
 8003fd6:	f3bf 8f4f 	dsb	sy
 8003fda:	61fb      	str	r3, [r7, #28]
}
 8003fdc:	bf00      	nop
 8003fde:	bf00      	nop
 8003fe0:	e7fd      	b.n	8003fde <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003fe2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003fe8:	6850      	ldr	r0, [r2, #4]
 8003fea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003fec:	6892      	ldr	r2, [r2, #8]
 8003fee:	4611      	mov	r1, r2
 8003ff0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	f2c0 80ae 	blt.w	8004156 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003ffe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004000:	695b      	ldr	r3, [r3, #20]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d004      	beq.n	8004010 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004006:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004008:	3304      	adds	r3, #4
 800400a:	4618      	mov	r0, r3
 800400c:	f7fe f9a4 	bl	8002358 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004010:	463b      	mov	r3, r7
 8004012:	4618      	mov	r0, r3
 8004014:	f7ff ff6a 	bl	8003eec <prvSampleTimeNow>
 8004018:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2b09      	cmp	r3, #9
 800401e:	f200 8097 	bhi.w	8004150 <prvProcessReceivedCommands+0x1a0>
 8004022:	a201      	add	r2, pc, #4	@ (adr r2, 8004028 <prvProcessReceivedCommands+0x78>)
 8004024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004028:	08004051 	.word	0x08004051
 800402c:	08004051 	.word	0x08004051
 8004030:	08004051 	.word	0x08004051
 8004034:	080040c7 	.word	0x080040c7
 8004038:	080040db 	.word	0x080040db
 800403c:	08004127 	.word	0x08004127
 8004040:	08004051 	.word	0x08004051
 8004044:	08004051 	.word	0x08004051
 8004048:	080040c7 	.word	0x080040c7
 800404c:	080040db 	.word	0x080040db
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004050:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004052:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004056:	f043 0301 	orr.w	r3, r3, #1
 800405a:	b2da      	uxtb	r2, r3
 800405c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800405e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004062:	68ba      	ldr	r2, [r7, #8]
 8004064:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004066:	699b      	ldr	r3, [r3, #24]
 8004068:	18d1      	adds	r1, r2, r3
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800406e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004070:	f7ff ff5c 	bl	8003f2c <prvInsertTimerInActiveList>
 8004074:	4603      	mov	r3, r0
 8004076:	2b00      	cmp	r3, #0
 8004078:	d06c      	beq.n	8004154 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800407a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800407c:	6a1b      	ldr	r3, [r3, #32]
 800407e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004080:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004082:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004084:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004088:	f003 0304 	and.w	r3, r3, #4
 800408c:	2b00      	cmp	r3, #0
 800408e:	d061      	beq.n	8004154 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004090:	68ba      	ldr	r2, [r7, #8]
 8004092:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004094:	699b      	ldr	r3, [r3, #24]
 8004096:	441a      	add	r2, r3
 8004098:	2300      	movs	r3, #0
 800409a:	9300      	str	r3, [sp, #0]
 800409c:	2300      	movs	r3, #0
 800409e:	2100      	movs	r1, #0
 80040a0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80040a2:	f7ff fe01 	bl	8003ca8 <xTimerGenericCommand>
 80040a6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80040a8:	6a3b      	ldr	r3, [r7, #32]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d152      	bne.n	8004154 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80040ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040b2:	f383 8811 	msr	BASEPRI, r3
 80040b6:	f3bf 8f6f 	isb	sy
 80040ba:	f3bf 8f4f 	dsb	sy
 80040be:	61bb      	str	r3, [r7, #24]
}
 80040c0:	bf00      	nop
 80040c2:	bf00      	nop
 80040c4:	e7fd      	b.n	80040c2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80040c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80040cc:	f023 0301 	bic.w	r3, r3, #1
 80040d0:	b2da      	uxtb	r2, r3
 80040d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040d4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80040d8:	e03d      	b.n	8004156 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80040da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040dc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80040e0:	f043 0301 	orr.w	r3, r3, #1
 80040e4:	b2da      	uxtb	r2, r3
 80040e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040e8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80040ec:	68ba      	ldr	r2, [r7, #8]
 80040ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040f0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80040f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040f4:	699b      	ldr	r3, [r3, #24]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d10b      	bne.n	8004112 <prvProcessReceivedCommands+0x162>
	__asm volatile
 80040fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040fe:	f383 8811 	msr	BASEPRI, r3
 8004102:	f3bf 8f6f 	isb	sy
 8004106:	f3bf 8f4f 	dsb	sy
 800410a:	617b      	str	r3, [r7, #20]
}
 800410c:	bf00      	nop
 800410e:	bf00      	nop
 8004110:	e7fd      	b.n	800410e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004112:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004114:	699a      	ldr	r2, [r3, #24]
 8004116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004118:	18d1      	adds	r1, r2, r3
 800411a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800411c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800411e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004120:	f7ff ff04 	bl	8003f2c <prvInsertTimerInActiveList>
					break;
 8004124:	e017      	b.n	8004156 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004126:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004128:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800412c:	f003 0302 	and.w	r3, r3, #2
 8004130:	2b00      	cmp	r3, #0
 8004132:	d103      	bne.n	800413c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8004134:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004136:	f000 fbe7 	bl	8004908 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800413a:	e00c      	b.n	8004156 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800413c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800413e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004142:	f023 0301 	bic.w	r3, r3, #1
 8004146:	b2da      	uxtb	r2, r3
 8004148:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800414a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800414e:	e002      	b.n	8004156 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8004150:	bf00      	nop
 8004152:	e000      	b.n	8004156 <prvProcessReceivedCommands+0x1a6>
					break;
 8004154:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004156:	4b08      	ldr	r3, [pc, #32]	@ (8004178 <prvProcessReceivedCommands+0x1c8>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	1d39      	adds	r1, r7, #4
 800415c:	2200      	movs	r2, #0
 800415e:	4618      	mov	r0, r3
 8004160:	f7fe fbce 	bl	8002900 <xQueueReceive>
 8004164:	4603      	mov	r3, r0
 8004166:	2b00      	cmp	r3, #0
 8004168:	f47f af26 	bne.w	8003fb8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800416c:	bf00      	nop
 800416e:	bf00      	nop
 8004170:	3730      	adds	r7, #48	@ 0x30
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
 8004176:	bf00      	nop
 8004178:	20000da0 	.word	0x20000da0

0800417c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b088      	sub	sp, #32
 8004180:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004182:	e049      	b.n	8004218 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004184:	4b2e      	ldr	r3, [pc, #184]	@ (8004240 <prvSwitchTimerLists+0xc4>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	68db      	ldr	r3, [r3, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800418e:	4b2c      	ldr	r3, [pc, #176]	@ (8004240 <prvSwitchTimerLists+0xc4>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	68db      	ldr	r3, [r3, #12]
 8004194:	68db      	ldr	r3, [r3, #12]
 8004196:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	3304      	adds	r3, #4
 800419c:	4618      	mov	r0, r3
 800419e:	f7fe f8db 	bl	8002358 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	6a1b      	ldr	r3, [r3, #32]
 80041a6:	68f8      	ldr	r0, [r7, #12]
 80041a8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80041b0:	f003 0304 	and.w	r3, r3, #4
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d02f      	beq.n	8004218 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	699b      	ldr	r3, [r3, #24]
 80041bc:	693a      	ldr	r2, [r7, #16]
 80041be:	4413      	add	r3, r2
 80041c0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80041c2:	68ba      	ldr	r2, [r7, #8]
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	429a      	cmp	r2, r3
 80041c8:	d90e      	bls.n	80041e8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	68ba      	ldr	r2, [r7, #8]
 80041ce:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	68fa      	ldr	r2, [r7, #12]
 80041d4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80041d6:	4b1a      	ldr	r3, [pc, #104]	@ (8004240 <prvSwitchTimerLists+0xc4>)
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	3304      	adds	r3, #4
 80041de:	4619      	mov	r1, r3
 80041e0:	4610      	mov	r0, r2
 80041e2:	f7fe f880 	bl	80022e6 <vListInsert>
 80041e6:	e017      	b.n	8004218 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80041e8:	2300      	movs	r3, #0
 80041ea:	9300      	str	r3, [sp, #0]
 80041ec:	2300      	movs	r3, #0
 80041ee:	693a      	ldr	r2, [r7, #16]
 80041f0:	2100      	movs	r1, #0
 80041f2:	68f8      	ldr	r0, [r7, #12]
 80041f4:	f7ff fd58 	bl	8003ca8 <xTimerGenericCommand>
 80041f8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d10b      	bne.n	8004218 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8004200:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004204:	f383 8811 	msr	BASEPRI, r3
 8004208:	f3bf 8f6f 	isb	sy
 800420c:	f3bf 8f4f 	dsb	sy
 8004210:	603b      	str	r3, [r7, #0]
}
 8004212:	bf00      	nop
 8004214:	bf00      	nop
 8004216:	e7fd      	b.n	8004214 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004218:	4b09      	ldr	r3, [pc, #36]	@ (8004240 <prvSwitchTimerLists+0xc4>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d1b0      	bne.n	8004184 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004222:	4b07      	ldr	r3, [pc, #28]	@ (8004240 <prvSwitchTimerLists+0xc4>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004228:	4b06      	ldr	r3, [pc, #24]	@ (8004244 <prvSwitchTimerLists+0xc8>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a04      	ldr	r2, [pc, #16]	@ (8004240 <prvSwitchTimerLists+0xc4>)
 800422e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004230:	4a04      	ldr	r2, [pc, #16]	@ (8004244 <prvSwitchTimerLists+0xc8>)
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	6013      	str	r3, [r2, #0]
}
 8004236:	bf00      	nop
 8004238:	3718      	adds	r7, #24
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}
 800423e:	bf00      	nop
 8004240:	20000d98 	.word	0x20000d98
 8004244:	20000d9c 	.word	0x20000d9c

08004248 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b082      	sub	sp, #8
 800424c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800424e:	f000 f96b 	bl	8004528 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004252:	4b15      	ldr	r3, [pc, #84]	@ (80042a8 <prvCheckForValidListAndQueue+0x60>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d120      	bne.n	800429c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800425a:	4814      	ldr	r0, [pc, #80]	@ (80042ac <prvCheckForValidListAndQueue+0x64>)
 800425c:	f7fd fff2 	bl	8002244 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004260:	4813      	ldr	r0, [pc, #76]	@ (80042b0 <prvCheckForValidListAndQueue+0x68>)
 8004262:	f7fd ffef 	bl	8002244 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004266:	4b13      	ldr	r3, [pc, #76]	@ (80042b4 <prvCheckForValidListAndQueue+0x6c>)
 8004268:	4a10      	ldr	r2, [pc, #64]	@ (80042ac <prvCheckForValidListAndQueue+0x64>)
 800426a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800426c:	4b12      	ldr	r3, [pc, #72]	@ (80042b8 <prvCheckForValidListAndQueue+0x70>)
 800426e:	4a10      	ldr	r2, [pc, #64]	@ (80042b0 <prvCheckForValidListAndQueue+0x68>)
 8004270:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004272:	2300      	movs	r3, #0
 8004274:	9300      	str	r3, [sp, #0]
 8004276:	4b11      	ldr	r3, [pc, #68]	@ (80042bc <prvCheckForValidListAndQueue+0x74>)
 8004278:	4a11      	ldr	r2, [pc, #68]	@ (80042c0 <prvCheckForValidListAndQueue+0x78>)
 800427a:	2110      	movs	r1, #16
 800427c:	200a      	movs	r0, #10
 800427e:	f7fe f8ff 	bl	8002480 <xQueueGenericCreateStatic>
 8004282:	4603      	mov	r3, r0
 8004284:	4a08      	ldr	r2, [pc, #32]	@ (80042a8 <prvCheckForValidListAndQueue+0x60>)
 8004286:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004288:	4b07      	ldr	r3, [pc, #28]	@ (80042a8 <prvCheckForValidListAndQueue+0x60>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d005      	beq.n	800429c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004290:	4b05      	ldr	r3, [pc, #20]	@ (80042a8 <prvCheckForValidListAndQueue+0x60>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	490b      	ldr	r1, [pc, #44]	@ (80042c4 <prvCheckForValidListAndQueue+0x7c>)
 8004296:	4618      	mov	r0, r3
 8004298:	f7fe fd24 	bl	8002ce4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800429c:	f000 f976 	bl	800458c <vPortExitCritical>
}
 80042a0:	bf00      	nop
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}
 80042a6:	bf00      	nop
 80042a8:	20000da0 	.word	0x20000da0
 80042ac:	20000d70 	.word	0x20000d70
 80042b0:	20000d84 	.word	0x20000d84
 80042b4:	20000d98 	.word	0x20000d98
 80042b8:	20000d9c 	.word	0x20000d9c
 80042bc:	20000e4c 	.word	0x20000e4c
 80042c0:	20000dac 	.word	0x20000dac
 80042c4:	080055ec 	.word	0x080055ec

080042c8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80042c8:	b480      	push	{r7}
 80042ca:	b085      	sub	sp, #20
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	60f8      	str	r0, [r7, #12]
 80042d0:	60b9      	str	r1, [r7, #8]
 80042d2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	3b04      	subs	r3, #4
 80042d8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80042e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	3b04      	subs	r3, #4
 80042e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	f023 0201 	bic.w	r2, r3, #1
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	3b04      	subs	r3, #4
 80042f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80042f8:	4a0c      	ldr	r2, [pc, #48]	@ (800432c <pxPortInitialiseStack+0x64>)
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	3b14      	subs	r3, #20
 8004302:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004304:	687a      	ldr	r2, [r7, #4]
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	3b04      	subs	r3, #4
 800430e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f06f 0202 	mvn.w	r2, #2
 8004316:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	3b20      	subs	r3, #32
 800431c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800431e:	68fb      	ldr	r3, [r7, #12]
}
 8004320:	4618      	mov	r0, r3
 8004322:	3714      	adds	r7, #20
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr
 800432c:	08004331 	.word	0x08004331

08004330 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004330:	b480      	push	{r7}
 8004332:	b085      	sub	sp, #20
 8004334:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004336:	2300      	movs	r3, #0
 8004338:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800433a:	4b13      	ldr	r3, [pc, #76]	@ (8004388 <prvTaskExitError+0x58>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004342:	d00b      	beq.n	800435c <prvTaskExitError+0x2c>
	__asm volatile
 8004344:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004348:	f383 8811 	msr	BASEPRI, r3
 800434c:	f3bf 8f6f 	isb	sy
 8004350:	f3bf 8f4f 	dsb	sy
 8004354:	60fb      	str	r3, [r7, #12]
}
 8004356:	bf00      	nop
 8004358:	bf00      	nop
 800435a:	e7fd      	b.n	8004358 <prvTaskExitError+0x28>
	__asm volatile
 800435c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004360:	f383 8811 	msr	BASEPRI, r3
 8004364:	f3bf 8f6f 	isb	sy
 8004368:	f3bf 8f4f 	dsb	sy
 800436c:	60bb      	str	r3, [r7, #8]
}
 800436e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004370:	bf00      	nop
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d0fc      	beq.n	8004372 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004378:	bf00      	nop
 800437a:	bf00      	nop
 800437c:	3714      	adds	r7, #20
 800437e:	46bd      	mov	sp, r7
 8004380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004384:	4770      	bx	lr
 8004386:	bf00      	nop
 8004388:	2000000c 	.word	0x2000000c
 800438c:	00000000 	.word	0x00000000

08004390 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004390:	4b07      	ldr	r3, [pc, #28]	@ (80043b0 <pxCurrentTCBConst2>)
 8004392:	6819      	ldr	r1, [r3, #0]
 8004394:	6808      	ldr	r0, [r1, #0]
 8004396:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800439a:	f380 8809 	msr	PSP, r0
 800439e:	f3bf 8f6f 	isb	sy
 80043a2:	f04f 0000 	mov.w	r0, #0
 80043a6:	f380 8811 	msr	BASEPRI, r0
 80043aa:	4770      	bx	lr
 80043ac:	f3af 8000 	nop.w

080043b0 <pxCurrentTCBConst2>:
 80043b0:	20000870 	.word	0x20000870
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80043b4:	bf00      	nop
 80043b6:	bf00      	nop

080043b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80043b8:	4808      	ldr	r0, [pc, #32]	@ (80043dc <prvPortStartFirstTask+0x24>)
 80043ba:	6800      	ldr	r0, [r0, #0]
 80043bc:	6800      	ldr	r0, [r0, #0]
 80043be:	f380 8808 	msr	MSP, r0
 80043c2:	f04f 0000 	mov.w	r0, #0
 80043c6:	f380 8814 	msr	CONTROL, r0
 80043ca:	b662      	cpsie	i
 80043cc:	b661      	cpsie	f
 80043ce:	f3bf 8f4f 	dsb	sy
 80043d2:	f3bf 8f6f 	isb	sy
 80043d6:	df00      	svc	0
 80043d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80043da:	bf00      	nop
 80043dc:	e000ed08 	.word	0xe000ed08

080043e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b086      	sub	sp, #24
 80043e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80043e6:	4b47      	ldr	r3, [pc, #284]	@ (8004504 <xPortStartScheduler+0x124>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a47      	ldr	r2, [pc, #284]	@ (8004508 <xPortStartScheduler+0x128>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d10b      	bne.n	8004408 <xPortStartScheduler+0x28>
	__asm volatile
 80043f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043f4:	f383 8811 	msr	BASEPRI, r3
 80043f8:	f3bf 8f6f 	isb	sy
 80043fc:	f3bf 8f4f 	dsb	sy
 8004400:	60fb      	str	r3, [r7, #12]
}
 8004402:	bf00      	nop
 8004404:	bf00      	nop
 8004406:	e7fd      	b.n	8004404 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004408:	4b3e      	ldr	r3, [pc, #248]	@ (8004504 <xPortStartScheduler+0x124>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a3f      	ldr	r2, [pc, #252]	@ (800450c <xPortStartScheduler+0x12c>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d10b      	bne.n	800442a <xPortStartScheduler+0x4a>
	__asm volatile
 8004412:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004416:	f383 8811 	msr	BASEPRI, r3
 800441a:	f3bf 8f6f 	isb	sy
 800441e:	f3bf 8f4f 	dsb	sy
 8004422:	613b      	str	r3, [r7, #16]
}
 8004424:	bf00      	nop
 8004426:	bf00      	nop
 8004428:	e7fd      	b.n	8004426 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800442a:	4b39      	ldr	r3, [pc, #228]	@ (8004510 <xPortStartScheduler+0x130>)
 800442c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	781b      	ldrb	r3, [r3, #0]
 8004432:	b2db      	uxtb	r3, r3
 8004434:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	22ff      	movs	r2, #255	@ 0xff
 800443a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	781b      	ldrb	r3, [r3, #0]
 8004440:	b2db      	uxtb	r3, r3
 8004442:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004444:	78fb      	ldrb	r3, [r7, #3]
 8004446:	b2db      	uxtb	r3, r3
 8004448:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800444c:	b2da      	uxtb	r2, r3
 800444e:	4b31      	ldr	r3, [pc, #196]	@ (8004514 <xPortStartScheduler+0x134>)
 8004450:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004452:	4b31      	ldr	r3, [pc, #196]	@ (8004518 <xPortStartScheduler+0x138>)
 8004454:	2207      	movs	r2, #7
 8004456:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004458:	e009      	b.n	800446e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800445a:	4b2f      	ldr	r3, [pc, #188]	@ (8004518 <xPortStartScheduler+0x138>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	3b01      	subs	r3, #1
 8004460:	4a2d      	ldr	r2, [pc, #180]	@ (8004518 <xPortStartScheduler+0x138>)
 8004462:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004464:	78fb      	ldrb	r3, [r7, #3]
 8004466:	b2db      	uxtb	r3, r3
 8004468:	005b      	lsls	r3, r3, #1
 800446a:	b2db      	uxtb	r3, r3
 800446c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800446e:	78fb      	ldrb	r3, [r7, #3]
 8004470:	b2db      	uxtb	r3, r3
 8004472:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004476:	2b80      	cmp	r3, #128	@ 0x80
 8004478:	d0ef      	beq.n	800445a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800447a:	4b27      	ldr	r3, [pc, #156]	@ (8004518 <xPortStartScheduler+0x138>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f1c3 0307 	rsb	r3, r3, #7
 8004482:	2b04      	cmp	r3, #4
 8004484:	d00b      	beq.n	800449e <xPortStartScheduler+0xbe>
	__asm volatile
 8004486:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800448a:	f383 8811 	msr	BASEPRI, r3
 800448e:	f3bf 8f6f 	isb	sy
 8004492:	f3bf 8f4f 	dsb	sy
 8004496:	60bb      	str	r3, [r7, #8]
}
 8004498:	bf00      	nop
 800449a:	bf00      	nop
 800449c:	e7fd      	b.n	800449a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800449e:	4b1e      	ldr	r3, [pc, #120]	@ (8004518 <xPortStartScheduler+0x138>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	021b      	lsls	r3, r3, #8
 80044a4:	4a1c      	ldr	r2, [pc, #112]	@ (8004518 <xPortStartScheduler+0x138>)
 80044a6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80044a8:	4b1b      	ldr	r3, [pc, #108]	@ (8004518 <xPortStartScheduler+0x138>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80044b0:	4a19      	ldr	r2, [pc, #100]	@ (8004518 <xPortStartScheduler+0x138>)
 80044b2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	b2da      	uxtb	r2, r3
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80044bc:	4b17      	ldr	r3, [pc, #92]	@ (800451c <xPortStartScheduler+0x13c>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a16      	ldr	r2, [pc, #88]	@ (800451c <xPortStartScheduler+0x13c>)
 80044c2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80044c6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80044c8:	4b14      	ldr	r3, [pc, #80]	@ (800451c <xPortStartScheduler+0x13c>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a13      	ldr	r2, [pc, #76]	@ (800451c <xPortStartScheduler+0x13c>)
 80044ce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80044d2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80044d4:	f000 f8da 	bl	800468c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80044d8:	4b11      	ldr	r3, [pc, #68]	@ (8004520 <xPortStartScheduler+0x140>)
 80044da:	2200      	movs	r2, #0
 80044dc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80044de:	f000 f8f9 	bl	80046d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80044e2:	4b10      	ldr	r3, [pc, #64]	@ (8004524 <xPortStartScheduler+0x144>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a0f      	ldr	r2, [pc, #60]	@ (8004524 <xPortStartScheduler+0x144>)
 80044e8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80044ec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80044ee:	f7ff ff63 	bl	80043b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80044f2:	f7ff f82f 	bl	8003554 <vTaskSwitchContext>
	prvTaskExitError();
 80044f6:	f7ff ff1b 	bl	8004330 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80044fa:	2300      	movs	r3, #0
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3718      	adds	r7, #24
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}
 8004504:	e000ed00 	.word	0xe000ed00
 8004508:	410fc271 	.word	0x410fc271
 800450c:	410fc270 	.word	0x410fc270
 8004510:	e000e400 	.word	0xe000e400
 8004514:	20000e9c 	.word	0x20000e9c
 8004518:	20000ea0 	.word	0x20000ea0
 800451c:	e000ed20 	.word	0xe000ed20
 8004520:	2000000c 	.word	0x2000000c
 8004524:	e000ef34 	.word	0xe000ef34

08004528 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004528:	b480      	push	{r7}
 800452a:	b083      	sub	sp, #12
 800452c:	af00      	add	r7, sp, #0
	__asm volatile
 800452e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004532:	f383 8811 	msr	BASEPRI, r3
 8004536:	f3bf 8f6f 	isb	sy
 800453a:	f3bf 8f4f 	dsb	sy
 800453e:	607b      	str	r3, [r7, #4]
}
 8004540:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004542:	4b10      	ldr	r3, [pc, #64]	@ (8004584 <vPortEnterCritical+0x5c>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	3301      	adds	r3, #1
 8004548:	4a0e      	ldr	r2, [pc, #56]	@ (8004584 <vPortEnterCritical+0x5c>)
 800454a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800454c:	4b0d      	ldr	r3, [pc, #52]	@ (8004584 <vPortEnterCritical+0x5c>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	2b01      	cmp	r3, #1
 8004552:	d110      	bne.n	8004576 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004554:	4b0c      	ldr	r3, [pc, #48]	@ (8004588 <vPortEnterCritical+0x60>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	b2db      	uxtb	r3, r3
 800455a:	2b00      	cmp	r3, #0
 800455c:	d00b      	beq.n	8004576 <vPortEnterCritical+0x4e>
	__asm volatile
 800455e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004562:	f383 8811 	msr	BASEPRI, r3
 8004566:	f3bf 8f6f 	isb	sy
 800456a:	f3bf 8f4f 	dsb	sy
 800456e:	603b      	str	r3, [r7, #0]
}
 8004570:	bf00      	nop
 8004572:	bf00      	nop
 8004574:	e7fd      	b.n	8004572 <vPortEnterCritical+0x4a>
	}
}
 8004576:	bf00      	nop
 8004578:	370c      	adds	r7, #12
 800457a:	46bd      	mov	sp, r7
 800457c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004580:	4770      	bx	lr
 8004582:	bf00      	nop
 8004584:	2000000c 	.word	0x2000000c
 8004588:	e000ed04 	.word	0xe000ed04

0800458c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800458c:	b480      	push	{r7}
 800458e:	b083      	sub	sp, #12
 8004590:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004592:	4b12      	ldr	r3, [pc, #72]	@ (80045dc <vPortExitCritical+0x50>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d10b      	bne.n	80045b2 <vPortExitCritical+0x26>
	__asm volatile
 800459a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800459e:	f383 8811 	msr	BASEPRI, r3
 80045a2:	f3bf 8f6f 	isb	sy
 80045a6:	f3bf 8f4f 	dsb	sy
 80045aa:	607b      	str	r3, [r7, #4]
}
 80045ac:	bf00      	nop
 80045ae:	bf00      	nop
 80045b0:	e7fd      	b.n	80045ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80045b2:	4b0a      	ldr	r3, [pc, #40]	@ (80045dc <vPortExitCritical+0x50>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	3b01      	subs	r3, #1
 80045b8:	4a08      	ldr	r2, [pc, #32]	@ (80045dc <vPortExitCritical+0x50>)
 80045ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80045bc:	4b07      	ldr	r3, [pc, #28]	@ (80045dc <vPortExitCritical+0x50>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d105      	bne.n	80045d0 <vPortExitCritical+0x44>
 80045c4:	2300      	movs	r3, #0
 80045c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	f383 8811 	msr	BASEPRI, r3
}
 80045ce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80045d0:	bf00      	nop
 80045d2:	370c      	adds	r7, #12
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr
 80045dc:	2000000c 	.word	0x2000000c

080045e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80045e0:	f3ef 8009 	mrs	r0, PSP
 80045e4:	f3bf 8f6f 	isb	sy
 80045e8:	4b15      	ldr	r3, [pc, #84]	@ (8004640 <pxCurrentTCBConst>)
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	f01e 0f10 	tst.w	lr, #16
 80045f0:	bf08      	it	eq
 80045f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80045f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045fa:	6010      	str	r0, [r2, #0]
 80045fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004600:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004604:	f380 8811 	msr	BASEPRI, r0
 8004608:	f3bf 8f4f 	dsb	sy
 800460c:	f3bf 8f6f 	isb	sy
 8004610:	f7fe ffa0 	bl	8003554 <vTaskSwitchContext>
 8004614:	f04f 0000 	mov.w	r0, #0
 8004618:	f380 8811 	msr	BASEPRI, r0
 800461c:	bc09      	pop	{r0, r3}
 800461e:	6819      	ldr	r1, [r3, #0]
 8004620:	6808      	ldr	r0, [r1, #0]
 8004622:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004626:	f01e 0f10 	tst.w	lr, #16
 800462a:	bf08      	it	eq
 800462c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004630:	f380 8809 	msr	PSP, r0
 8004634:	f3bf 8f6f 	isb	sy
 8004638:	4770      	bx	lr
 800463a:	bf00      	nop
 800463c:	f3af 8000 	nop.w

08004640 <pxCurrentTCBConst>:
 8004640:	20000870 	.word	0x20000870
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004644:	bf00      	nop
 8004646:	bf00      	nop

08004648 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b082      	sub	sp, #8
 800464c:	af00      	add	r7, sp, #0
	__asm volatile
 800464e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004652:	f383 8811 	msr	BASEPRI, r3
 8004656:	f3bf 8f6f 	isb	sy
 800465a:	f3bf 8f4f 	dsb	sy
 800465e:	607b      	str	r3, [r7, #4]
}
 8004660:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004662:	f7fe febd 	bl	80033e0 <xTaskIncrementTick>
 8004666:	4603      	mov	r3, r0
 8004668:	2b00      	cmp	r3, #0
 800466a:	d003      	beq.n	8004674 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800466c:	4b06      	ldr	r3, [pc, #24]	@ (8004688 <xPortSysTickHandler+0x40>)
 800466e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004672:	601a      	str	r2, [r3, #0]
 8004674:	2300      	movs	r3, #0
 8004676:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	f383 8811 	msr	BASEPRI, r3
}
 800467e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004680:	bf00      	nop
 8004682:	3708      	adds	r7, #8
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}
 8004688:	e000ed04 	.word	0xe000ed04

0800468c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800468c:	b480      	push	{r7}
 800468e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004690:	4b0b      	ldr	r3, [pc, #44]	@ (80046c0 <vPortSetupTimerInterrupt+0x34>)
 8004692:	2200      	movs	r2, #0
 8004694:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004696:	4b0b      	ldr	r3, [pc, #44]	@ (80046c4 <vPortSetupTimerInterrupt+0x38>)
 8004698:	2200      	movs	r2, #0
 800469a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800469c:	4b0a      	ldr	r3, [pc, #40]	@ (80046c8 <vPortSetupTimerInterrupt+0x3c>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a0a      	ldr	r2, [pc, #40]	@ (80046cc <vPortSetupTimerInterrupt+0x40>)
 80046a2:	fba2 2303 	umull	r2, r3, r2, r3
 80046a6:	099b      	lsrs	r3, r3, #6
 80046a8:	4a09      	ldr	r2, [pc, #36]	@ (80046d0 <vPortSetupTimerInterrupt+0x44>)
 80046aa:	3b01      	subs	r3, #1
 80046ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80046ae:	4b04      	ldr	r3, [pc, #16]	@ (80046c0 <vPortSetupTimerInterrupt+0x34>)
 80046b0:	2207      	movs	r2, #7
 80046b2:	601a      	str	r2, [r3, #0]
}
 80046b4:	bf00      	nop
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr
 80046be:	bf00      	nop
 80046c0:	e000e010 	.word	0xe000e010
 80046c4:	e000e018 	.word	0xe000e018
 80046c8:	20000000 	.word	0x20000000
 80046cc:	10624dd3 	.word	0x10624dd3
 80046d0:	e000e014 	.word	0xe000e014

080046d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80046d4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80046e4 <vPortEnableVFP+0x10>
 80046d8:	6801      	ldr	r1, [r0, #0]
 80046da:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80046de:	6001      	str	r1, [r0, #0]
 80046e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80046e2:	bf00      	nop
 80046e4:	e000ed88 	.word	0xe000ed88

080046e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80046e8:	b480      	push	{r7}
 80046ea:	b085      	sub	sp, #20
 80046ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80046ee:	f3ef 8305 	mrs	r3, IPSR
 80046f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2b0f      	cmp	r3, #15
 80046f8:	d915      	bls.n	8004726 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80046fa:	4a18      	ldr	r2, [pc, #96]	@ (800475c <vPortValidateInterruptPriority+0x74>)
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	4413      	add	r3, r2
 8004700:	781b      	ldrb	r3, [r3, #0]
 8004702:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004704:	4b16      	ldr	r3, [pc, #88]	@ (8004760 <vPortValidateInterruptPriority+0x78>)
 8004706:	781b      	ldrb	r3, [r3, #0]
 8004708:	7afa      	ldrb	r2, [r7, #11]
 800470a:	429a      	cmp	r2, r3
 800470c:	d20b      	bcs.n	8004726 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800470e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004712:	f383 8811 	msr	BASEPRI, r3
 8004716:	f3bf 8f6f 	isb	sy
 800471a:	f3bf 8f4f 	dsb	sy
 800471e:	607b      	str	r3, [r7, #4]
}
 8004720:	bf00      	nop
 8004722:	bf00      	nop
 8004724:	e7fd      	b.n	8004722 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004726:	4b0f      	ldr	r3, [pc, #60]	@ (8004764 <vPortValidateInterruptPriority+0x7c>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800472e:	4b0e      	ldr	r3, [pc, #56]	@ (8004768 <vPortValidateInterruptPriority+0x80>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	429a      	cmp	r2, r3
 8004734:	d90b      	bls.n	800474e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8004736:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800473a:	f383 8811 	msr	BASEPRI, r3
 800473e:	f3bf 8f6f 	isb	sy
 8004742:	f3bf 8f4f 	dsb	sy
 8004746:	603b      	str	r3, [r7, #0]
}
 8004748:	bf00      	nop
 800474a:	bf00      	nop
 800474c:	e7fd      	b.n	800474a <vPortValidateInterruptPriority+0x62>
	}
 800474e:	bf00      	nop
 8004750:	3714      	adds	r7, #20
 8004752:	46bd      	mov	sp, r7
 8004754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004758:	4770      	bx	lr
 800475a:	bf00      	nop
 800475c:	e000e3f0 	.word	0xe000e3f0
 8004760:	20000e9c 	.word	0x20000e9c
 8004764:	e000ed0c 	.word	0xe000ed0c
 8004768:	20000ea0 	.word	0x20000ea0

0800476c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b08a      	sub	sp, #40	@ 0x28
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004774:	2300      	movs	r3, #0
 8004776:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004778:	f7fe fd76 	bl	8003268 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800477c:	4b5c      	ldr	r3, [pc, #368]	@ (80048f0 <pvPortMalloc+0x184>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d101      	bne.n	8004788 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004784:	f000 f924 	bl	80049d0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004788:	4b5a      	ldr	r3, [pc, #360]	@ (80048f4 <pvPortMalloc+0x188>)
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	4013      	ands	r3, r2
 8004790:	2b00      	cmp	r3, #0
 8004792:	f040 8095 	bne.w	80048c0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d01e      	beq.n	80047da <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800479c:	2208      	movs	r2, #8
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	4413      	add	r3, r2
 80047a2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f003 0307 	and.w	r3, r3, #7
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d015      	beq.n	80047da <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	f023 0307 	bic.w	r3, r3, #7
 80047b4:	3308      	adds	r3, #8
 80047b6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	f003 0307 	and.w	r3, r3, #7
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d00b      	beq.n	80047da <pvPortMalloc+0x6e>
	__asm volatile
 80047c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047c6:	f383 8811 	msr	BASEPRI, r3
 80047ca:	f3bf 8f6f 	isb	sy
 80047ce:	f3bf 8f4f 	dsb	sy
 80047d2:	617b      	str	r3, [r7, #20]
}
 80047d4:	bf00      	nop
 80047d6:	bf00      	nop
 80047d8:	e7fd      	b.n	80047d6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d06f      	beq.n	80048c0 <pvPortMalloc+0x154>
 80047e0:	4b45      	ldr	r3, [pc, #276]	@ (80048f8 <pvPortMalloc+0x18c>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	687a      	ldr	r2, [r7, #4]
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d86a      	bhi.n	80048c0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80047ea:	4b44      	ldr	r3, [pc, #272]	@ (80048fc <pvPortMalloc+0x190>)
 80047ec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80047ee:	4b43      	ldr	r3, [pc, #268]	@ (80048fc <pvPortMalloc+0x190>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80047f4:	e004      	b.n	8004800 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80047f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047f8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80047fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	687a      	ldr	r2, [r7, #4]
 8004806:	429a      	cmp	r2, r3
 8004808:	d903      	bls.n	8004812 <pvPortMalloc+0xa6>
 800480a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d1f1      	bne.n	80047f6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004812:	4b37      	ldr	r3, [pc, #220]	@ (80048f0 <pvPortMalloc+0x184>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004818:	429a      	cmp	r2, r3
 800481a:	d051      	beq.n	80048c0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800481c:	6a3b      	ldr	r3, [r7, #32]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	2208      	movs	r2, #8
 8004822:	4413      	add	r3, r2
 8004824:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	6a3b      	ldr	r3, [r7, #32]
 800482c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800482e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004830:	685a      	ldr	r2, [r3, #4]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	1ad2      	subs	r2, r2, r3
 8004836:	2308      	movs	r3, #8
 8004838:	005b      	lsls	r3, r3, #1
 800483a:	429a      	cmp	r2, r3
 800483c:	d920      	bls.n	8004880 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800483e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	4413      	add	r3, r2
 8004844:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004846:	69bb      	ldr	r3, [r7, #24]
 8004848:	f003 0307 	and.w	r3, r3, #7
 800484c:	2b00      	cmp	r3, #0
 800484e:	d00b      	beq.n	8004868 <pvPortMalloc+0xfc>
	__asm volatile
 8004850:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004854:	f383 8811 	msr	BASEPRI, r3
 8004858:	f3bf 8f6f 	isb	sy
 800485c:	f3bf 8f4f 	dsb	sy
 8004860:	613b      	str	r3, [r7, #16]
}
 8004862:	bf00      	nop
 8004864:	bf00      	nop
 8004866:	e7fd      	b.n	8004864 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800486a:	685a      	ldr	r2, [r3, #4]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	1ad2      	subs	r2, r2, r3
 8004870:	69bb      	ldr	r3, [r7, #24]
 8004872:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004876:	687a      	ldr	r2, [r7, #4]
 8004878:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800487a:	69b8      	ldr	r0, [r7, #24]
 800487c:	f000 f90a 	bl	8004a94 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004880:	4b1d      	ldr	r3, [pc, #116]	@ (80048f8 <pvPortMalloc+0x18c>)
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	1ad3      	subs	r3, r2, r3
 800488a:	4a1b      	ldr	r2, [pc, #108]	@ (80048f8 <pvPortMalloc+0x18c>)
 800488c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800488e:	4b1a      	ldr	r3, [pc, #104]	@ (80048f8 <pvPortMalloc+0x18c>)
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	4b1b      	ldr	r3, [pc, #108]	@ (8004900 <pvPortMalloc+0x194>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	429a      	cmp	r2, r3
 8004898:	d203      	bcs.n	80048a2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800489a:	4b17      	ldr	r3, [pc, #92]	@ (80048f8 <pvPortMalloc+0x18c>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a18      	ldr	r2, [pc, #96]	@ (8004900 <pvPortMalloc+0x194>)
 80048a0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80048a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048a4:	685a      	ldr	r2, [r3, #4]
 80048a6:	4b13      	ldr	r3, [pc, #76]	@ (80048f4 <pvPortMalloc+0x188>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	431a      	orrs	r2, r3
 80048ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80048b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048b2:	2200      	movs	r2, #0
 80048b4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80048b6:	4b13      	ldr	r3, [pc, #76]	@ (8004904 <pvPortMalloc+0x198>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	3301      	adds	r3, #1
 80048bc:	4a11      	ldr	r2, [pc, #68]	@ (8004904 <pvPortMalloc+0x198>)
 80048be:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80048c0:	f7fe fce0 	bl	8003284 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80048c4:	69fb      	ldr	r3, [r7, #28]
 80048c6:	f003 0307 	and.w	r3, r3, #7
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d00b      	beq.n	80048e6 <pvPortMalloc+0x17a>
	__asm volatile
 80048ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048d2:	f383 8811 	msr	BASEPRI, r3
 80048d6:	f3bf 8f6f 	isb	sy
 80048da:	f3bf 8f4f 	dsb	sy
 80048de:	60fb      	str	r3, [r7, #12]
}
 80048e0:	bf00      	nop
 80048e2:	bf00      	nop
 80048e4:	e7fd      	b.n	80048e2 <pvPortMalloc+0x176>
	return pvReturn;
 80048e6:	69fb      	ldr	r3, [r7, #28]
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	3728      	adds	r7, #40	@ 0x28
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}
 80048f0:	20004aac 	.word	0x20004aac
 80048f4:	20004ac0 	.word	0x20004ac0
 80048f8:	20004ab0 	.word	0x20004ab0
 80048fc:	20004aa4 	.word	0x20004aa4
 8004900:	20004ab4 	.word	0x20004ab4
 8004904:	20004ab8 	.word	0x20004ab8

08004908 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b086      	sub	sp, #24
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d04f      	beq.n	80049ba <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800491a:	2308      	movs	r3, #8
 800491c:	425b      	negs	r3, r3
 800491e:	697a      	ldr	r2, [r7, #20]
 8004920:	4413      	add	r3, r2
 8004922:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	685a      	ldr	r2, [r3, #4]
 800492c:	4b25      	ldr	r3, [pc, #148]	@ (80049c4 <vPortFree+0xbc>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4013      	ands	r3, r2
 8004932:	2b00      	cmp	r3, #0
 8004934:	d10b      	bne.n	800494e <vPortFree+0x46>
	__asm volatile
 8004936:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800493a:	f383 8811 	msr	BASEPRI, r3
 800493e:	f3bf 8f6f 	isb	sy
 8004942:	f3bf 8f4f 	dsb	sy
 8004946:	60fb      	str	r3, [r7, #12]
}
 8004948:	bf00      	nop
 800494a:	bf00      	nop
 800494c:	e7fd      	b.n	800494a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d00b      	beq.n	800496e <vPortFree+0x66>
	__asm volatile
 8004956:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800495a:	f383 8811 	msr	BASEPRI, r3
 800495e:	f3bf 8f6f 	isb	sy
 8004962:	f3bf 8f4f 	dsb	sy
 8004966:	60bb      	str	r3, [r7, #8]
}
 8004968:	bf00      	nop
 800496a:	bf00      	nop
 800496c:	e7fd      	b.n	800496a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	685a      	ldr	r2, [r3, #4]
 8004972:	4b14      	ldr	r3, [pc, #80]	@ (80049c4 <vPortFree+0xbc>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4013      	ands	r3, r2
 8004978:	2b00      	cmp	r3, #0
 800497a:	d01e      	beq.n	80049ba <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d11a      	bne.n	80049ba <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	685a      	ldr	r2, [r3, #4]
 8004988:	4b0e      	ldr	r3, [pc, #56]	@ (80049c4 <vPortFree+0xbc>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	43db      	mvns	r3, r3
 800498e:	401a      	ands	r2, r3
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004994:	f7fe fc68 	bl	8003268 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	685a      	ldr	r2, [r3, #4]
 800499c:	4b0a      	ldr	r3, [pc, #40]	@ (80049c8 <vPortFree+0xc0>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4413      	add	r3, r2
 80049a2:	4a09      	ldr	r2, [pc, #36]	@ (80049c8 <vPortFree+0xc0>)
 80049a4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80049a6:	6938      	ldr	r0, [r7, #16]
 80049a8:	f000 f874 	bl	8004a94 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80049ac:	4b07      	ldr	r3, [pc, #28]	@ (80049cc <vPortFree+0xc4>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	3301      	adds	r3, #1
 80049b2:	4a06      	ldr	r2, [pc, #24]	@ (80049cc <vPortFree+0xc4>)
 80049b4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80049b6:	f7fe fc65 	bl	8003284 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80049ba:	bf00      	nop
 80049bc:	3718      	adds	r7, #24
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}
 80049c2:	bf00      	nop
 80049c4:	20004ac0 	.word	0x20004ac0
 80049c8:	20004ab0 	.word	0x20004ab0
 80049cc:	20004abc 	.word	0x20004abc

080049d0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80049d0:	b480      	push	{r7}
 80049d2:	b085      	sub	sp, #20
 80049d4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80049d6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80049da:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80049dc:	4b27      	ldr	r3, [pc, #156]	@ (8004a7c <prvHeapInit+0xac>)
 80049de:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f003 0307 	and.w	r3, r3, #7
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d00c      	beq.n	8004a04 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	3307      	adds	r3, #7
 80049ee:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f023 0307 	bic.w	r3, r3, #7
 80049f6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80049f8:	68ba      	ldr	r2, [r7, #8]
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	1ad3      	subs	r3, r2, r3
 80049fe:	4a1f      	ldr	r2, [pc, #124]	@ (8004a7c <prvHeapInit+0xac>)
 8004a00:	4413      	add	r3, r2
 8004a02:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004a08:	4a1d      	ldr	r2, [pc, #116]	@ (8004a80 <prvHeapInit+0xb0>)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004a0e:	4b1c      	ldr	r3, [pc, #112]	@ (8004a80 <prvHeapInit+0xb0>)
 8004a10:	2200      	movs	r2, #0
 8004a12:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	68ba      	ldr	r2, [r7, #8]
 8004a18:	4413      	add	r3, r2
 8004a1a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004a1c:	2208      	movs	r2, #8
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	1a9b      	subs	r3, r3, r2
 8004a22:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	f023 0307 	bic.w	r3, r3, #7
 8004a2a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	4a15      	ldr	r2, [pc, #84]	@ (8004a84 <prvHeapInit+0xb4>)
 8004a30:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004a32:	4b14      	ldr	r3, [pc, #80]	@ (8004a84 <prvHeapInit+0xb4>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	2200      	movs	r2, #0
 8004a38:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004a3a:	4b12      	ldr	r3, [pc, #72]	@ (8004a84 <prvHeapInit+0xb4>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	68fa      	ldr	r2, [r7, #12]
 8004a4a:	1ad2      	subs	r2, r2, r3
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004a50:	4b0c      	ldr	r3, [pc, #48]	@ (8004a84 <prvHeapInit+0xb4>)
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	4a0a      	ldr	r2, [pc, #40]	@ (8004a88 <prvHeapInit+0xb8>)
 8004a5e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	4a09      	ldr	r2, [pc, #36]	@ (8004a8c <prvHeapInit+0xbc>)
 8004a66:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004a68:	4b09      	ldr	r3, [pc, #36]	@ (8004a90 <prvHeapInit+0xc0>)
 8004a6a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004a6e:	601a      	str	r2, [r3, #0]
}
 8004a70:	bf00      	nop
 8004a72:	3714      	adds	r7, #20
 8004a74:	46bd      	mov	sp, r7
 8004a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7a:	4770      	bx	lr
 8004a7c:	20000ea4 	.word	0x20000ea4
 8004a80:	20004aa4 	.word	0x20004aa4
 8004a84:	20004aac 	.word	0x20004aac
 8004a88:	20004ab4 	.word	0x20004ab4
 8004a8c:	20004ab0 	.word	0x20004ab0
 8004a90:	20004ac0 	.word	0x20004ac0

08004a94 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004a94:	b480      	push	{r7}
 8004a96:	b085      	sub	sp, #20
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004a9c:	4b28      	ldr	r3, [pc, #160]	@ (8004b40 <prvInsertBlockIntoFreeList+0xac>)
 8004a9e:	60fb      	str	r3, [r7, #12]
 8004aa0:	e002      	b.n	8004aa8 <prvInsertBlockIntoFreeList+0x14>
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	60fb      	str	r3, [r7, #12]
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	687a      	ldr	r2, [r7, #4]
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d8f7      	bhi.n	8004aa2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	68ba      	ldr	r2, [r7, #8]
 8004abc:	4413      	add	r3, r2
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	d108      	bne.n	8004ad6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	685a      	ldr	r2, [r3, #4]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	441a      	add	r2, r3
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	68ba      	ldr	r2, [r7, #8]
 8004ae0:	441a      	add	r2, r3
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	429a      	cmp	r2, r3
 8004ae8:	d118      	bne.n	8004b1c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	4b15      	ldr	r3, [pc, #84]	@ (8004b44 <prvInsertBlockIntoFreeList+0xb0>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	429a      	cmp	r2, r3
 8004af4:	d00d      	beq.n	8004b12 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	685a      	ldr	r2, [r3, #4]
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	441a      	add	r2, r3
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	601a      	str	r2, [r3, #0]
 8004b10:	e008      	b.n	8004b24 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004b12:	4b0c      	ldr	r3, [pc, #48]	@ (8004b44 <prvInsertBlockIntoFreeList+0xb0>)
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	601a      	str	r2, [r3, #0]
 8004b1a:	e003      	b.n	8004b24 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004b24:	68fa      	ldr	r2, [r7, #12]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	d002      	beq.n	8004b32 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	687a      	ldr	r2, [r7, #4]
 8004b30:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004b32:	bf00      	nop
 8004b34:	3714      	adds	r7, #20
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr
 8004b3e:	bf00      	nop
 8004b40:	20004aa4 	.word	0x20004aa4
 8004b44:	20004aac 	.word	0x20004aac

08004b48 <std>:
 8004b48:	2300      	movs	r3, #0
 8004b4a:	b510      	push	{r4, lr}
 8004b4c:	4604      	mov	r4, r0
 8004b4e:	e9c0 3300 	strd	r3, r3, [r0]
 8004b52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004b56:	6083      	str	r3, [r0, #8]
 8004b58:	8181      	strh	r1, [r0, #12]
 8004b5a:	6643      	str	r3, [r0, #100]	@ 0x64
 8004b5c:	81c2      	strh	r2, [r0, #14]
 8004b5e:	6183      	str	r3, [r0, #24]
 8004b60:	4619      	mov	r1, r3
 8004b62:	2208      	movs	r2, #8
 8004b64:	305c      	adds	r0, #92	@ 0x5c
 8004b66:	f000 f9e7 	bl	8004f38 <memset>
 8004b6a:	4b0d      	ldr	r3, [pc, #52]	@ (8004ba0 <std+0x58>)
 8004b6c:	6263      	str	r3, [r4, #36]	@ 0x24
 8004b6e:	4b0d      	ldr	r3, [pc, #52]	@ (8004ba4 <std+0x5c>)
 8004b70:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004b72:	4b0d      	ldr	r3, [pc, #52]	@ (8004ba8 <std+0x60>)
 8004b74:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004b76:	4b0d      	ldr	r3, [pc, #52]	@ (8004bac <std+0x64>)
 8004b78:	6323      	str	r3, [r4, #48]	@ 0x30
 8004b7a:	4b0d      	ldr	r3, [pc, #52]	@ (8004bb0 <std+0x68>)
 8004b7c:	6224      	str	r4, [r4, #32]
 8004b7e:	429c      	cmp	r4, r3
 8004b80:	d006      	beq.n	8004b90 <std+0x48>
 8004b82:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004b86:	4294      	cmp	r4, r2
 8004b88:	d002      	beq.n	8004b90 <std+0x48>
 8004b8a:	33d0      	adds	r3, #208	@ 0xd0
 8004b8c:	429c      	cmp	r4, r3
 8004b8e:	d105      	bne.n	8004b9c <std+0x54>
 8004b90:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004b94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b98:	f000 baa4 	b.w	80050e4 <__retarget_lock_init_recursive>
 8004b9c:	bd10      	pop	{r4, pc}
 8004b9e:	bf00      	nop
 8004ba0:	08004d89 	.word	0x08004d89
 8004ba4:	08004dab 	.word	0x08004dab
 8004ba8:	08004de3 	.word	0x08004de3
 8004bac:	08004e07 	.word	0x08004e07
 8004bb0:	20004ac4 	.word	0x20004ac4

08004bb4 <stdio_exit_handler>:
 8004bb4:	4a02      	ldr	r2, [pc, #8]	@ (8004bc0 <stdio_exit_handler+0xc>)
 8004bb6:	4903      	ldr	r1, [pc, #12]	@ (8004bc4 <stdio_exit_handler+0x10>)
 8004bb8:	4803      	ldr	r0, [pc, #12]	@ (8004bc8 <stdio_exit_handler+0x14>)
 8004bba:	f000 b869 	b.w	8004c90 <_fwalk_sglue>
 8004bbe:	bf00      	nop
 8004bc0:	20000010 	.word	0x20000010
 8004bc4:	08005401 	.word	0x08005401
 8004bc8:	20000020 	.word	0x20000020

08004bcc <cleanup_stdio>:
 8004bcc:	6841      	ldr	r1, [r0, #4]
 8004bce:	4b0c      	ldr	r3, [pc, #48]	@ (8004c00 <cleanup_stdio+0x34>)
 8004bd0:	4299      	cmp	r1, r3
 8004bd2:	b510      	push	{r4, lr}
 8004bd4:	4604      	mov	r4, r0
 8004bd6:	d001      	beq.n	8004bdc <cleanup_stdio+0x10>
 8004bd8:	f000 fc12 	bl	8005400 <_fflush_r>
 8004bdc:	68a1      	ldr	r1, [r4, #8]
 8004bde:	4b09      	ldr	r3, [pc, #36]	@ (8004c04 <cleanup_stdio+0x38>)
 8004be0:	4299      	cmp	r1, r3
 8004be2:	d002      	beq.n	8004bea <cleanup_stdio+0x1e>
 8004be4:	4620      	mov	r0, r4
 8004be6:	f000 fc0b 	bl	8005400 <_fflush_r>
 8004bea:	68e1      	ldr	r1, [r4, #12]
 8004bec:	4b06      	ldr	r3, [pc, #24]	@ (8004c08 <cleanup_stdio+0x3c>)
 8004bee:	4299      	cmp	r1, r3
 8004bf0:	d004      	beq.n	8004bfc <cleanup_stdio+0x30>
 8004bf2:	4620      	mov	r0, r4
 8004bf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004bf8:	f000 bc02 	b.w	8005400 <_fflush_r>
 8004bfc:	bd10      	pop	{r4, pc}
 8004bfe:	bf00      	nop
 8004c00:	20004ac4 	.word	0x20004ac4
 8004c04:	20004b2c 	.word	0x20004b2c
 8004c08:	20004b94 	.word	0x20004b94

08004c0c <global_stdio_init.part.0>:
 8004c0c:	b510      	push	{r4, lr}
 8004c0e:	4b0b      	ldr	r3, [pc, #44]	@ (8004c3c <global_stdio_init.part.0+0x30>)
 8004c10:	4c0b      	ldr	r4, [pc, #44]	@ (8004c40 <global_stdio_init.part.0+0x34>)
 8004c12:	4a0c      	ldr	r2, [pc, #48]	@ (8004c44 <global_stdio_init.part.0+0x38>)
 8004c14:	601a      	str	r2, [r3, #0]
 8004c16:	4620      	mov	r0, r4
 8004c18:	2200      	movs	r2, #0
 8004c1a:	2104      	movs	r1, #4
 8004c1c:	f7ff ff94 	bl	8004b48 <std>
 8004c20:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004c24:	2201      	movs	r2, #1
 8004c26:	2109      	movs	r1, #9
 8004c28:	f7ff ff8e 	bl	8004b48 <std>
 8004c2c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004c30:	2202      	movs	r2, #2
 8004c32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c36:	2112      	movs	r1, #18
 8004c38:	f7ff bf86 	b.w	8004b48 <std>
 8004c3c:	20004bfc 	.word	0x20004bfc
 8004c40:	20004ac4 	.word	0x20004ac4
 8004c44:	08004bb5 	.word	0x08004bb5

08004c48 <__sfp_lock_acquire>:
 8004c48:	4801      	ldr	r0, [pc, #4]	@ (8004c50 <__sfp_lock_acquire+0x8>)
 8004c4a:	f000 ba4c 	b.w	80050e6 <__retarget_lock_acquire_recursive>
 8004c4e:	bf00      	nop
 8004c50:	20004c05 	.word	0x20004c05

08004c54 <__sfp_lock_release>:
 8004c54:	4801      	ldr	r0, [pc, #4]	@ (8004c5c <__sfp_lock_release+0x8>)
 8004c56:	f000 ba47 	b.w	80050e8 <__retarget_lock_release_recursive>
 8004c5a:	bf00      	nop
 8004c5c:	20004c05 	.word	0x20004c05

08004c60 <__sinit>:
 8004c60:	b510      	push	{r4, lr}
 8004c62:	4604      	mov	r4, r0
 8004c64:	f7ff fff0 	bl	8004c48 <__sfp_lock_acquire>
 8004c68:	6a23      	ldr	r3, [r4, #32]
 8004c6a:	b11b      	cbz	r3, 8004c74 <__sinit+0x14>
 8004c6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c70:	f7ff bff0 	b.w	8004c54 <__sfp_lock_release>
 8004c74:	4b04      	ldr	r3, [pc, #16]	@ (8004c88 <__sinit+0x28>)
 8004c76:	6223      	str	r3, [r4, #32]
 8004c78:	4b04      	ldr	r3, [pc, #16]	@ (8004c8c <__sinit+0x2c>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d1f5      	bne.n	8004c6c <__sinit+0xc>
 8004c80:	f7ff ffc4 	bl	8004c0c <global_stdio_init.part.0>
 8004c84:	e7f2      	b.n	8004c6c <__sinit+0xc>
 8004c86:	bf00      	nop
 8004c88:	08004bcd 	.word	0x08004bcd
 8004c8c:	20004bfc 	.word	0x20004bfc

08004c90 <_fwalk_sglue>:
 8004c90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c94:	4607      	mov	r7, r0
 8004c96:	4688      	mov	r8, r1
 8004c98:	4614      	mov	r4, r2
 8004c9a:	2600      	movs	r6, #0
 8004c9c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004ca0:	f1b9 0901 	subs.w	r9, r9, #1
 8004ca4:	d505      	bpl.n	8004cb2 <_fwalk_sglue+0x22>
 8004ca6:	6824      	ldr	r4, [r4, #0]
 8004ca8:	2c00      	cmp	r4, #0
 8004caa:	d1f7      	bne.n	8004c9c <_fwalk_sglue+0xc>
 8004cac:	4630      	mov	r0, r6
 8004cae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004cb2:	89ab      	ldrh	r3, [r5, #12]
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	d907      	bls.n	8004cc8 <_fwalk_sglue+0x38>
 8004cb8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004cbc:	3301      	adds	r3, #1
 8004cbe:	d003      	beq.n	8004cc8 <_fwalk_sglue+0x38>
 8004cc0:	4629      	mov	r1, r5
 8004cc2:	4638      	mov	r0, r7
 8004cc4:	47c0      	blx	r8
 8004cc6:	4306      	orrs	r6, r0
 8004cc8:	3568      	adds	r5, #104	@ 0x68
 8004cca:	e7e9      	b.n	8004ca0 <_fwalk_sglue+0x10>

08004ccc <_puts_r>:
 8004ccc:	6a03      	ldr	r3, [r0, #32]
 8004cce:	b570      	push	{r4, r5, r6, lr}
 8004cd0:	6884      	ldr	r4, [r0, #8]
 8004cd2:	4605      	mov	r5, r0
 8004cd4:	460e      	mov	r6, r1
 8004cd6:	b90b      	cbnz	r3, 8004cdc <_puts_r+0x10>
 8004cd8:	f7ff ffc2 	bl	8004c60 <__sinit>
 8004cdc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004cde:	07db      	lsls	r3, r3, #31
 8004ce0:	d405      	bmi.n	8004cee <_puts_r+0x22>
 8004ce2:	89a3      	ldrh	r3, [r4, #12]
 8004ce4:	0598      	lsls	r0, r3, #22
 8004ce6:	d402      	bmi.n	8004cee <_puts_r+0x22>
 8004ce8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004cea:	f000 f9fc 	bl	80050e6 <__retarget_lock_acquire_recursive>
 8004cee:	89a3      	ldrh	r3, [r4, #12]
 8004cf0:	0719      	lsls	r1, r3, #28
 8004cf2:	d502      	bpl.n	8004cfa <_puts_r+0x2e>
 8004cf4:	6923      	ldr	r3, [r4, #16]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d135      	bne.n	8004d66 <_puts_r+0x9a>
 8004cfa:	4621      	mov	r1, r4
 8004cfc:	4628      	mov	r0, r5
 8004cfe:	f000 f8c5 	bl	8004e8c <__swsetup_r>
 8004d02:	b380      	cbz	r0, 8004d66 <_puts_r+0x9a>
 8004d04:	f04f 35ff 	mov.w	r5, #4294967295
 8004d08:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004d0a:	07da      	lsls	r2, r3, #31
 8004d0c:	d405      	bmi.n	8004d1a <_puts_r+0x4e>
 8004d0e:	89a3      	ldrh	r3, [r4, #12]
 8004d10:	059b      	lsls	r3, r3, #22
 8004d12:	d402      	bmi.n	8004d1a <_puts_r+0x4e>
 8004d14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004d16:	f000 f9e7 	bl	80050e8 <__retarget_lock_release_recursive>
 8004d1a:	4628      	mov	r0, r5
 8004d1c:	bd70      	pop	{r4, r5, r6, pc}
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	da04      	bge.n	8004d2c <_puts_r+0x60>
 8004d22:	69a2      	ldr	r2, [r4, #24]
 8004d24:	429a      	cmp	r2, r3
 8004d26:	dc17      	bgt.n	8004d58 <_puts_r+0x8c>
 8004d28:	290a      	cmp	r1, #10
 8004d2a:	d015      	beq.n	8004d58 <_puts_r+0x8c>
 8004d2c:	6823      	ldr	r3, [r4, #0]
 8004d2e:	1c5a      	adds	r2, r3, #1
 8004d30:	6022      	str	r2, [r4, #0]
 8004d32:	7019      	strb	r1, [r3, #0]
 8004d34:	68a3      	ldr	r3, [r4, #8]
 8004d36:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004d3a:	3b01      	subs	r3, #1
 8004d3c:	60a3      	str	r3, [r4, #8]
 8004d3e:	2900      	cmp	r1, #0
 8004d40:	d1ed      	bne.n	8004d1e <_puts_r+0x52>
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	da11      	bge.n	8004d6a <_puts_r+0x9e>
 8004d46:	4622      	mov	r2, r4
 8004d48:	210a      	movs	r1, #10
 8004d4a:	4628      	mov	r0, r5
 8004d4c:	f000 f85f 	bl	8004e0e <__swbuf_r>
 8004d50:	3001      	adds	r0, #1
 8004d52:	d0d7      	beq.n	8004d04 <_puts_r+0x38>
 8004d54:	250a      	movs	r5, #10
 8004d56:	e7d7      	b.n	8004d08 <_puts_r+0x3c>
 8004d58:	4622      	mov	r2, r4
 8004d5a:	4628      	mov	r0, r5
 8004d5c:	f000 f857 	bl	8004e0e <__swbuf_r>
 8004d60:	3001      	adds	r0, #1
 8004d62:	d1e7      	bne.n	8004d34 <_puts_r+0x68>
 8004d64:	e7ce      	b.n	8004d04 <_puts_r+0x38>
 8004d66:	3e01      	subs	r6, #1
 8004d68:	e7e4      	b.n	8004d34 <_puts_r+0x68>
 8004d6a:	6823      	ldr	r3, [r4, #0]
 8004d6c:	1c5a      	adds	r2, r3, #1
 8004d6e:	6022      	str	r2, [r4, #0]
 8004d70:	220a      	movs	r2, #10
 8004d72:	701a      	strb	r2, [r3, #0]
 8004d74:	e7ee      	b.n	8004d54 <_puts_r+0x88>
	...

08004d78 <puts>:
 8004d78:	4b02      	ldr	r3, [pc, #8]	@ (8004d84 <puts+0xc>)
 8004d7a:	4601      	mov	r1, r0
 8004d7c:	6818      	ldr	r0, [r3, #0]
 8004d7e:	f7ff bfa5 	b.w	8004ccc <_puts_r>
 8004d82:	bf00      	nop
 8004d84:	2000001c 	.word	0x2000001c

08004d88 <__sread>:
 8004d88:	b510      	push	{r4, lr}
 8004d8a:	460c      	mov	r4, r1
 8004d8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d90:	f000 f95a 	bl	8005048 <_read_r>
 8004d94:	2800      	cmp	r0, #0
 8004d96:	bfab      	itete	ge
 8004d98:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004d9a:	89a3      	ldrhlt	r3, [r4, #12]
 8004d9c:	181b      	addge	r3, r3, r0
 8004d9e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004da2:	bfac      	ite	ge
 8004da4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004da6:	81a3      	strhlt	r3, [r4, #12]
 8004da8:	bd10      	pop	{r4, pc}

08004daa <__swrite>:
 8004daa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004dae:	461f      	mov	r7, r3
 8004db0:	898b      	ldrh	r3, [r1, #12]
 8004db2:	05db      	lsls	r3, r3, #23
 8004db4:	4605      	mov	r5, r0
 8004db6:	460c      	mov	r4, r1
 8004db8:	4616      	mov	r6, r2
 8004dba:	d505      	bpl.n	8004dc8 <__swrite+0x1e>
 8004dbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004dc0:	2302      	movs	r3, #2
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	f000 f92e 	bl	8005024 <_lseek_r>
 8004dc8:	89a3      	ldrh	r3, [r4, #12]
 8004dca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004dce:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004dd2:	81a3      	strh	r3, [r4, #12]
 8004dd4:	4632      	mov	r2, r6
 8004dd6:	463b      	mov	r3, r7
 8004dd8:	4628      	mov	r0, r5
 8004dda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004dde:	f000 b945 	b.w	800506c <_write_r>

08004de2 <__sseek>:
 8004de2:	b510      	push	{r4, lr}
 8004de4:	460c      	mov	r4, r1
 8004de6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004dea:	f000 f91b 	bl	8005024 <_lseek_r>
 8004dee:	1c43      	adds	r3, r0, #1
 8004df0:	89a3      	ldrh	r3, [r4, #12]
 8004df2:	bf15      	itete	ne
 8004df4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004df6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004dfa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004dfe:	81a3      	strheq	r3, [r4, #12]
 8004e00:	bf18      	it	ne
 8004e02:	81a3      	strhne	r3, [r4, #12]
 8004e04:	bd10      	pop	{r4, pc}

08004e06 <__sclose>:
 8004e06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e0a:	f000 b89d 	b.w	8004f48 <_close_r>

08004e0e <__swbuf_r>:
 8004e0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e10:	460e      	mov	r6, r1
 8004e12:	4614      	mov	r4, r2
 8004e14:	4605      	mov	r5, r0
 8004e16:	b118      	cbz	r0, 8004e20 <__swbuf_r+0x12>
 8004e18:	6a03      	ldr	r3, [r0, #32]
 8004e1a:	b90b      	cbnz	r3, 8004e20 <__swbuf_r+0x12>
 8004e1c:	f7ff ff20 	bl	8004c60 <__sinit>
 8004e20:	69a3      	ldr	r3, [r4, #24]
 8004e22:	60a3      	str	r3, [r4, #8]
 8004e24:	89a3      	ldrh	r3, [r4, #12]
 8004e26:	071a      	lsls	r2, r3, #28
 8004e28:	d501      	bpl.n	8004e2e <__swbuf_r+0x20>
 8004e2a:	6923      	ldr	r3, [r4, #16]
 8004e2c:	b943      	cbnz	r3, 8004e40 <__swbuf_r+0x32>
 8004e2e:	4621      	mov	r1, r4
 8004e30:	4628      	mov	r0, r5
 8004e32:	f000 f82b 	bl	8004e8c <__swsetup_r>
 8004e36:	b118      	cbz	r0, 8004e40 <__swbuf_r+0x32>
 8004e38:	f04f 37ff 	mov.w	r7, #4294967295
 8004e3c:	4638      	mov	r0, r7
 8004e3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e40:	6823      	ldr	r3, [r4, #0]
 8004e42:	6922      	ldr	r2, [r4, #16]
 8004e44:	1a98      	subs	r0, r3, r2
 8004e46:	6963      	ldr	r3, [r4, #20]
 8004e48:	b2f6      	uxtb	r6, r6
 8004e4a:	4283      	cmp	r3, r0
 8004e4c:	4637      	mov	r7, r6
 8004e4e:	dc05      	bgt.n	8004e5c <__swbuf_r+0x4e>
 8004e50:	4621      	mov	r1, r4
 8004e52:	4628      	mov	r0, r5
 8004e54:	f000 fad4 	bl	8005400 <_fflush_r>
 8004e58:	2800      	cmp	r0, #0
 8004e5a:	d1ed      	bne.n	8004e38 <__swbuf_r+0x2a>
 8004e5c:	68a3      	ldr	r3, [r4, #8]
 8004e5e:	3b01      	subs	r3, #1
 8004e60:	60a3      	str	r3, [r4, #8]
 8004e62:	6823      	ldr	r3, [r4, #0]
 8004e64:	1c5a      	adds	r2, r3, #1
 8004e66:	6022      	str	r2, [r4, #0]
 8004e68:	701e      	strb	r6, [r3, #0]
 8004e6a:	6962      	ldr	r2, [r4, #20]
 8004e6c:	1c43      	adds	r3, r0, #1
 8004e6e:	429a      	cmp	r2, r3
 8004e70:	d004      	beq.n	8004e7c <__swbuf_r+0x6e>
 8004e72:	89a3      	ldrh	r3, [r4, #12]
 8004e74:	07db      	lsls	r3, r3, #31
 8004e76:	d5e1      	bpl.n	8004e3c <__swbuf_r+0x2e>
 8004e78:	2e0a      	cmp	r6, #10
 8004e7a:	d1df      	bne.n	8004e3c <__swbuf_r+0x2e>
 8004e7c:	4621      	mov	r1, r4
 8004e7e:	4628      	mov	r0, r5
 8004e80:	f000 fabe 	bl	8005400 <_fflush_r>
 8004e84:	2800      	cmp	r0, #0
 8004e86:	d0d9      	beq.n	8004e3c <__swbuf_r+0x2e>
 8004e88:	e7d6      	b.n	8004e38 <__swbuf_r+0x2a>
	...

08004e8c <__swsetup_r>:
 8004e8c:	b538      	push	{r3, r4, r5, lr}
 8004e8e:	4b29      	ldr	r3, [pc, #164]	@ (8004f34 <__swsetup_r+0xa8>)
 8004e90:	4605      	mov	r5, r0
 8004e92:	6818      	ldr	r0, [r3, #0]
 8004e94:	460c      	mov	r4, r1
 8004e96:	b118      	cbz	r0, 8004ea0 <__swsetup_r+0x14>
 8004e98:	6a03      	ldr	r3, [r0, #32]
 8004e9a:	b90b      	cbnz	r3, 8004ea0 <__swsetup_r+0x14>
 8004e9c:	f7ff fee0 	bl	8004c60 <__sinit>
 8004ea0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ea4:	0719      	lsls	r1, r3, #28
 8004ea6:	d422      	bmi.n	8004eee <__swsetup_r+0x62>
 8004ea8:	06da      	lsls	r2, r3, #27
 8004eaa:	d407      	bmi.n	8004ebc <__swsetup_r+0x30>
 8004eac:	2209      	movs	r2, #9
 8004eae:	602a      	str	r2, [r5, #0]
 8004eb0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004eb4:	81a3      	strh	r3, [r4, #12]
 8004eb6:	f04f 30ff 	mov.w	r0, #4294967295
 8004eba:	e033      	b.n	8004f24 <__swsetup_r+0x98>
 8004ebc:	0758      	lsls	r0, r3, #29
 8004ebe:	d512      	bpl.n	8004ee6 <__swsetup_r+0x5a>
 8004ec0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004ec2:	b141      	cbz	r1, 8004ed6 <__swsetup_r+0x4a>
 8004ec4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004ec8:	4299      	cmp	r1, r3
 8004eca:	d002      	beq.n	8004ed2 <__swsetup_r+0x46>
 8004ecc:	4628      	mov	r0, r5
 8004ece:	f000 f91b 	bl	8005108 <_free_r>
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	6363      	str	r3, [r4, #52]	@ 0x34
 8004ed6:	89a3      	ldrh	r3, [r4, #12]
 8004ed8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004edc:	81a3      	strh	r3, [r4, #12]
 8004ede:	2300      	movs	r3, #0
 8004ee0:	6063      	str	r3, [r4, #4]
 8004ee2:	6923      	ldr	r3, [r4, #16]
 8004ee4:	6023      	str	r3, [r4, #0]
 8004ee6:	89a3      	ldrh	r3, [r4, #12]
 8004ee8:	f043 0308 	orr.w	r3, r3, #8
 8004eec:	81a3      	strh	r3, [r4, #12]
 8004eee:	6923      	ldr	r3, [r4, #16]
 8004ef0:	b94b      	cbnz	r3, 8004f06 <__swsetup_r+0x7a>
 8004ef2:	89a3      	ldrh	r3, [r4, #12]
 8004ef4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004ef8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004efc:	d003      	beq.n	8004f06 <__swsetup_r+0x7a>
 8004efe:	4621      	mov	r1, r4
 8004f00:	4628      	mov	r0, r5
 8004f02:	f000 facb 	bl	800549c <__smakebuf_r>
 8004f06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f0a:	f013 0201 	ands.w	r2, r3, #1
 8004f0e:	d00a      	beq.n	8004f26 <__swsetup_r+0x9a>
 8004f10:	2200      	movs	r2, #0
 8004f12:	60a2      	str	r2, [r4, #8]
 8004f14:	6962      	ldr	r2, [r4, #20]
 8004f16:	4252      	negs	r2, r2
 8004f18:	61a2      	str	r2, [r4, #24]
 8004f1a:	6922      	ldr	r2, [r4, #16]
 8004f1c:	b942      	cbnz	r2, 8004f30 <__swsetup_r+0xa4>
 8004f1e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004f22:	d1c5      	bne.n	8004eb0 <__swsetup_r+0x24>
 8004f24:	bd38      	pop	{r3, r4, r5, pc}
 8004f26:	0799      	lsls	r1, r3, #30
 8004f28:	bf58      	it	pl
 8004f2a:	6962      	ldrpl	r2, [r4, #20]
 8004f2c:	60a2      	str	r2, [r4, #8]
 8004f2e:	e7f4      	b.n	8004f1a <__swsetup_r+0x8e>
 8004f30:	2000      	movs	r0, #0
 8004f32:	e7f7      	b.n	8004f24 <__swsetup_r+0x98>
 8004f34:	2000001c 	.word	0x2000001c

08004f38 <memset>:
 8004f38:	4402      	add	r2, r0
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d100      	bne.n	8004f42 <memset+0xa>
 8004f40:	4770      	bx	lr
 8004f42:	f803 1b01 	strb.w	r1, [r3], #1
 8004f46:	e7f9      	b.n	8004f3c <memset+0x4>

08004f48 <_close_r>:
 8004f48:	b538      	push	{r3, r4, r5, lr}
 8004f4a:	4d06      	ldr	r5, [pc, #24]	@ (8004f64 <_close_r+0x1c>)
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	4604      	mov	r4, r0
 8004f50:	4608      	mov	r0, r1
 8004f52:	602b      	str	r3, [r5, #0]
 8004f54:	f7fb fd73 	bl	8000a3e <_close>
 8004f58:	1c43      	adds	r3, r0, #1
 8004f5a:	d102      	bne.n	8004f62 <_close_r+0x1a>
 8004f5c:	682b      	ldr	r3, [r5, #0]
 8004f5e:	b103      	cbz	r3, 8004f62 <_close_r+0x1a>
 8004f60:	6023      	str	r3, [r4, #0]
 8004f62:	bd38      	pop	{r3, r4, r5, pc}
 8004f64:	20004c00 	.word	0x20004c00

08004f68 <_reclaim_reent>:
 8004f68:	4b2d      	ldr	r3, [pc, #180]	@ (8005020 <_reclaim_reent+0xb8>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4283      	cmp	r3, r0
 8004f6e:	b570      	push	{r4, r5, r6, lr}
 8004f70:	4604      	mov	r4, r0
 8004f72:	d053      	beq.n	800501c <_reclaim_reent+0xb4>
 8004f74:	69c3      	ldr	r3, [r0, #28]
 8004f76:	b31b      	cbz	r3, 8004fc0 <_reclaim_reent+0x58>
 8004f78:	68db      	ldr	r3, [r3, #12]
 8004f7a:	b163      	cbz	r3, 8004f96 <_reclaim_reent+0x2e>
 8004f7c:	2500      	movs	r5, #0
 8004f7e:	69e3      	ldr	r3, [r4, #28]
 8004f80:	68db      	ldr	r3, [r3, #12]
 8004f82:	5959      	ldr	r1, [r3, r5]
 8004f84:	b9b1      	cbnz	r1, 8004fb4 <_reclaim_reent+0x4c>
 8004f86:	3504      	adds	r5, #4
 8004f88:	2d80      	cmp	r5, #128	@ 0x80
 8004f8a:	d1f8      	bne.n	8004f7e <_reclaim_reent+0x16>
 8004f8c:	69e3      	ldr	r3, [r4, #28]
 8004f8e:	4620      	mov	r0, r4
 8004f90:	68d9      	ldr	r1, [r3, #12]
 8004f92:	f000 f8b9 	bl	8005108 <_free_r>
 8004f96:	69e3      	ldr	r3, [r4, #28]
 8004f98:	6819      	ldr	r1, [r3, #0]
 8004f9a:	b111      	cbz	r1, 8004fa2 <_reclaim_reent+0x3a>
 8004f9c:	4620      	mov	r0, r4
 8004f9e:	f000 f8b3 	bl	8005108 <_free_r>
 8004fa2:	69e3      	ldr	r3, [r4, #28]
 8004fa4:	689d      	ldr	r5, [r3, #8]
 8004fa6:	b15d      	cbz	r5, 8004fc0 <_reclaim_reent+0x58>
 8004fa8:	4629      	mov	r1, r5
 8004faa:	4620      	mov	r0, r4
 8004fac:	682d      	ldr	r5, [r5, #0]
 8004fae:	f000 f8ab 	bl	8005108 <_free_r>
 8004fb2:	e7f8      	b.n	8004fa6 <_reclaim_reent+0x3e>
 8004fb4:	680e      	ldr	r6, [r1, #0]
 8004fb6:	4620      	mov	r0, r4
 8004fb8:	f000 f8a6 	bl	8005108 <_free_r>
 8004fbc:	4631      	mov	r1, r6
 8004fbe:	e7e1      	b.n	8004f84 <_reclaim_reent+0x1c>
 8004fc0:	6961      	ldr	r1, [r4, #20]
 8004fc2:	b111      	cbz	r1, 8004fca <_reclaim_reent+0x62>
 8004fc4:	4620      	mov	r0, r4
 8004fc6:	f000 f89f 	bl	8005108 <_free_r>
 8004fca:	69e1      	ldr	r1, [r4, #28]
 8004fcc:	b111      	cbz	r1, 8004fd4 <_reclaim_reent+0x6c>
 8004fce:	4620      	mov	r0, r4
 8004fd0:	f000 f89a 	bl	8005108 <_free_r>
 8004fd4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8004fd6:	b111      	cbz	r1, 8004fde <_reclaim_reent+0x76>
 8004fd8:	4620      	mov	r0, r4
 8004fda:	f000 f895 	bl	8005108 <_free_r>
 8004fde:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004fe0:	b111      	cbz	r1, 8004fe8 <_reclaim_reent+0x80>
 8004fe2:	4620      	mov	r0, r4
 8004fe4:	f000 f890 	bl	8005108 <_free_r>
 8004fe8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8004fea:	b111      	cbz	r1, 8004ff2 <_reclaim_reent+0x8a>
 8004fec:	4620      	mov	r0, r4
 8004fee:	f000 f88b 	bl	8005108 <_free_r>
 8004ff2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8004ff4:	b111      	cbz	r1, 8004ffc <_reclaim_reent+0x94>
 8004ff6:	4620      	mov	r0, r4
 8004ff8:	f000 f886 	bl	8005108 <_free_r>
 8004ffc:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8004ffe:	b111      	cbz	r1, 8005006 <_reclaim_reent+0x9e>
 8005000:	4620      	mov	r0, r4
 8005002:	f000 f881 	bl	8005108 <_free_r>
 8005006:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8005008:	b111      	cbz	r1, 8005010 <_reclaim_reent+0xa8>
 800500a:	4620      	mov	r0, r4
 800500c:	f000 f87c 	bl	8005108 <_free_r>
 8005010:	6a23      	ldr	r3, [r4, #32]
 8005012:	b11b      	cbz	r3, 800501c <_reclaim_reent+0xb4>
 8005014:	4620      	mov	r0, r4
 8005016:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800501a:	4718      	bx	r3
 800501c:	bd70      	pop	{r4, r5, r6, pc}
 800501e:	bf00      	nop
 8005020:	2000001c 	.word	0x2000001c

08005024 <_lseek_r>:
 8005024:	b538      	push	{r3, r4, r5, lr}
 8005026:	4d07      	ldr	r5, [pc, #28]	@ (8005044 <_lseek_r+0x20>)
 8005028:	4604      	mov	r4, r0
 800502a:	4608      	mov	r0, r1
 800502c:	4611      	mov	r1, r2
 800502e:	2200      	movs	r2, #0
 8005030:	602a      	str	r2, [r5, #0]
 8005032:	461a      	mov	r2, r3
 8005034:	f7fb fd2a 	bl	8000a8c <_lseek>
 8005038:	1c43      	adds	r3, r0, #1
 800503a:	d102      	bne.n	8005042 <_lseek_r+0x1e>
 800503c:	682b      	ldr	r3, [r5, #0]
 800503e:	b103      	cbz	r3, 8005042 <_lseek_r+0x1e>
 8005040:	6023      	str	r3, [r4, #0]
 8005042:	bd38      	pop	{r3, r4, r5, pc}
 8005044:	20004c00 	.word	0x20004c00

08005048 <_read_r>:
 8005048:	b538      	push	{r3, r4, r5, lr}
 800504a:	4d07      	ldr	r5, [pc, #28]	@ (8005068 <_read_r+0x20>)
 800504c:	4604      	mov	r4, r0
 800504e:	4608      	mov	r0, r1
 8005050:	4611      	mov	r1, r2
 8005052:	2200      	movs	r2, #0
 8005054:	602a      	str	r2, [r5, #0]
 8005056:	461a      	mov	r2, r3
 8005058:	f7fb fcb8 	bl	80009cc <_read>
 800505c:	1c43      	adds	r3, r0, #1
 800505e:	d102      	bne.n	8005066 <_read_r+0x1e>
 8005060:	682b      	ldr	r3, [r5, #0]
 8005062:	b103      	cbz	r3, 8005066 <_read_r+0x1e>
 8005064:	6023      	str	r3, [r4, #0]
 8005066:	bd38      	pop	{r3, r4, r5, pc}
 8005068:	20004c00 	.word	0x20004c00

0800506c <_write_r>:
 800506c:	b538      	push	{r3, r4, r5, lr}
 800506e:	4d07      	ldr	r5, [pc, #28]	@ (800508c <_write_r+0x20>)
 8005070:	4604      	mov	r4, r0
 8005072:	4608      	mov	r0, r1
 8005074:	4611      	mov	r1, r2
 8005076:	2200      	movs	r2, #0
 8005078:	602a      	str	r2, [r5, #0]
 800507a:	461a      	mov	r2, r3
 800507c:	f7fb fcc3 	bl	8000a06 <_write>
 8005080:	1c43      	adds	r3, r0, #1
 8005082:	d102      	bne.n	800508a <_write_r+0x1e>
 8005084:	682b      	ldr	r3, [r5, #0]
 8005086:	b103      	cbz	r3, 800508a <_write_r+0x1e>
 8005088:	6023      	str	r3, [r4, #0]
 800508a:	bd38      	pop	{r3, r4, r5, pc}
 800508c:	20004c00 	.word	0x20004c00

08005090 <__errno>:
 8005090:	4b01      	ldr	r3, [pc, #4]	@ (8005098 <__errno+0x8>)
 8005092:	6818      	ldr	r0, [r3, #0]
 8005094:	4770      	bx	lr
 8005096:	bf00      	nop
 8005098:	2000001c 	.word	0x2000001c

0800509c <__libc_init_array>:
 800509c:	b570      	push	{r4, r5, r6, lr}
 800509e:	4d0d      	ldr	r5, [pc, #52]	@ (80050d4 <__libc_init_array+0x38>)
 80050a0:	4c0d      	ldr	r4, [pc, #52]	@ (80050d8 <__libc_init_array+0x3c>)
 80050a2:	1b64      	subs	r4, r4, r5
 80050a4:	10a4      	asrs	r4, r4, #2
 80050a6:	2600      	movs	r6, #0
 80050a8:	42a6      	cmp	r6, r4
 80050aa:	d109      	bne.n	80050c0 <__libc_init_array+0x24>
 80050ac:	4d0b      	ldr	r5, [pc, #44]	@ (80050dc <__libc_init_array+0x40>)
 80050ae:	4c0c      	ldr	r4, [pc, #48]	@ (80050e0 <__libc_init_array+0x44>)
 80050b0:	f000 fa62 	bl	8005578 <_init>
 80050b4:	1b64      	subs	r4, r4, r5
 80050b6:	10a4      	asrs	r4, r4, #2
 80050b8:	2600      	movs	r6, #0
 80050ba:	42a6      	cmp	r6, r4
 80050bc:	d105      	bne.n	80050ca <__libc_init_array+0x2e>
 80050be:	bd70      	pop	{r4, r5, r6, pc}
 80050c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80050c4:	4798      	blx	r3
 80050c6:	3601      	adds	r6, #1
 80050c8:	e7ee      	b.n	80050a8 <__libc_init_array+0xc>
 80050ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80050ce:	4798      	blx	r3
 80050d0:	3601      	adds	r6, #1
 80050d2:	e7f2      	b.n	80050ba <__libc_init_array+0x1e>
 80050d4:	08005638 	.word	0x08005638
 80050d8:	08005638 	.word	0x08005638
 80050dc:	08005638 	.word	0x08005638
 80050e0:	0800563c 	.word	0x0800563c

080050e4 <__retarget_lock_init_recursive>:
 80050e4:	4770      	bx	lr

080050e6 <__retarget_lock_acquire_recursive>:
 80050e6:	4770      	bx	lr

080050e8 <__retarget_lock_release_recursive>:
 80050e8:	4770      	bx	lr

080050ea <memcpy>:
 80050ea:	440a      	add	r2, r1
 80050ec:	4291      	cmp	r1, r2
 80050ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80050f2:	d100      	bne.n	80050f6 <memcpy+0xc>
 80050f4:	4770      	bx	lr
 80050f6:	b510      	push	{r4, lr}
 80050f8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80050fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005100:	4291      	cmp	r1, r2
 8005102:	d1f9      	bne.n	80050f8 <memcpy+0xe>
 8005104:	bd10      	pop	{r4, pc}
	...

08005108 <_free_r>:
 8005108:	b538      	push	{r3, r4, r5, lr}
 800510a:	4605      	mov	r5, r0
 800510c:	2900      	cmp	r1, #0
 800510e:	d041      	beq.n	8005194 <_free_r+0x8c>
 8005110:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005114:	1f0c      	subs	r4, r1, #4
 8005116:	2b00      	cmp	r3, #0
 8005118:	bfb8      	it	lt
 800511a:	18e4      	addlt	r4, r4, r3
 800511c:	f000 f8e0 	bl	80052e0 <__malloc_lock>
 8005120:	4a1d      	ldr	r2, [pc, #116]	@ (8005198 <_free_r+0x90>)
 8005122:	6813      	ldr	r3, [r2, #0]
 8005124:	b933      	cbnz	r3, 8005134 <_free_r+0x2c>
 8005126:	6063      	str	r3, [r4, #4]
 8005128:	6014      	str	r4, [r2, #0]
 800512a:	4628      	mov	r0, r5
 800512c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005130:	f000 b8dc 	b.w	80052ec <__malloc_unlock>
 8005134:	42a3      	cmp	r3, r4
 8005136:	d908      	bls.n	800514a <_free_r+0x42>
 8005138:	6820      	ldr	r0, [r4, #0]
 800513a:	1821      	adds	r1, r4, r0
 800513c:	428b      	cmp	r3, r1
 800513e:	bf01      	itttt	eq
 8005140:	6819      	ldreq	r1, [r3, #0]
 8005142:	685b      	ldreq	r3, [r3, #4]
 8005144:	1809      	addeq	r1, r1, r0
 8005146:	6021      	streq	r1, [r4, #0]
 8005148:	e7ed      	b.n	8005126 <_free_r+0x1e>
 800514a:	461a      	mov	r2, r3
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	b10b      	cbz	r3, 8005154 <_free_r+0x4c>
 8005150:	42a3      	cmp	r3, r4
 8005152:	d9fa      	bls.n	800514a <_free_r+0x42>
 8005154:	6811      	ldr	r1, [r2, #0]
 8005156:	1850      	adds	r0, r2, r1
 8005158:	42a0      	cmp	r0, r4
 800515a:	d10b      	bne.n	8005174 <_free_r+0x6c>
 800515c:	6820      	ldr	r0, [r4, #0]
 800515e:	4401      	add	r1, r0
 8005160:	1850      	adds	r0, r2, r1
 8005162:	4283      	cmp	r3, r0
 8005164:	6011      	str	r1, [r2, #0]
 8005166:	d1e0      	bne.n	800512a <_free_r+0x22>
 8005168:	6818      	ldr	r0, [r3, #0]
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	6053      	str	r3, [r2, #4]
 800516e:	4408      	add	r0, r1
 8005170:	6010      	str	r0, [r2, #0]
 8005172:	e7da      	b.n	800512a <_free_r+0x22>
 8005174:	d902      	bls.n	800517c <_free_r+0x74>
 8005176:	230c      	movs	r3, #12
 8005178:	602b      	str	r3, [r5, #0]
 800517a:	e7d6      	b.n	800512a <_free_r+0x22>
 800517c:	6820      	ldr	r0, [r4, #0]
 800517e:	1821      	adds	r1, r4, r0
 8005180:	428b      	cmp	r3, r1
 8005182:	bf04      	itt	eq
 8005184:	6819      	ldreq	r1, [r3, #0]
 8005186:	685b      	ldreq	r3, [r3, #4]
 8005188:	6063      	str	r3, [r4, #4]
 800518a:	bf04      	itt	eq
 800518c:	1809      	addeq	r1, r1, r0
 800518e:	6021      	streq	r1, [r4, #0]
 8005190:	6054      	str	r4, [r2, #4]
 8005192:	e7ca      	b.n	800512a <_free_r+0x22>
 8005194:	bd38      	pop	{r3, r4, r5, pc}
 8005196:	bf00      	nop
 8005198:	20004c0c 	.word	0x20004c0c

0800519c <sbrk_aligned>:
 800519c:	b570      	push	{r4, r5, r6, lr}
 800519e:	4e0f      	ldr	r6, [pc, #60]	@ (80051dc <sbrk_aligned+0x40>)
 80051a0:	460c      	mov	r4, r1
 80051a2:	6831      	ldr	r1, [r6, #0]
 80051a4:	4605      	mov	r5, r0
 80051a6:	b911      	cbnz	r1, 80051ae <sbrk_aligned+0x12>
 80051a8:	f000 f9d6 	bl	8005558 <_sbrk_r>
 80051ac:	6030      	str	r0, [r6, #0]
 80051ae:	4621      	mov	r1, r4
 80051b0:	4628      	mov	r0, r5
 80051b2:	f000 f9d1 	bl	8005558 <_sbrk_r>
 80051b6:	1c43      	adds	r3, r0, #1
 80051b8:	d103      	bne.n	80051c2 <sbrk_aligned+0x26>
 80051ba:	f04f 34ff 	mov.w	r4, #4294967295
 80051be:	4620      	mov	r0, r4
 80051c0:	bd70      	pop	{r4, r5, r6, pc}
 80051c2:	1cc4      	adds	r4, r0, #3
 80051c4:	f024 0403 	bic.w	r4, r4, #3
 80051c8:	42a0      	cmp	r0, r4
 80051ca:	d0f8      	beq.n	80051be <sbrk_aligned+0x22>
 80051cc:	1a21      	subs	r1, r4, r0
 80051ce:	4628      	mov	r0, r5
 80051d0:	f000 f9c2 	bl	8005558 <_sbrk_r>
 80051d4:	3001      	adds	r0, #1
 80051d6:	d1f2      	bne.n	80051be <sbrk_aligned+0x22>
 80051d8:	e7ef      	b.n	80051ba <sbrk_aligned+0x1e>
 80051da:	bf00      	nop
 80051dc:	20004c08 	.word	0x20004c08

080051e0 <_malloc_r>:
 80051e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80051e4:	1ccd      	adds	r5, r1, #3
 80051e6:	f025 0503 	bic.w	r5, r5, #3
 80051ea:	3508      	adds	r5, #8
 80051ec:	2d0c      	cmp	r5, #12
 80051ee:	bf38      	it	cc
 80051f0:	250c      	movcc	r5, #12
 80051f2:	2d00      	cmp	r5, #0
 80051f4:	4606      	mov	r6, r0
 80051f6:	db01      	blt.n	80051fc <_malloc_r+0x1c>
 80051f8:	42a9      	cmp	r1, r5
 80051fa:	d904      	bls.n	8005206 <_malloc_r+0x26>
 80051fc:	230c      	movs	r3, #12
 80051fe:	6033      	str	r3, [r6, #0]
 8005200:	2000      	movs	r0, #0
 8005202:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005206:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80052dc <_malloc_r+0xfc>
 800520a:	f000 f869 	bl	80052e0 <__malloc_lock>
 800520e:	f8d8 3000 	ldr.w	r3, [r8]
 8005212:	461c      	mov	r4, r3
 8005214:	bb44      	cbnz	r4, 8005268 <_malloc_r+0x88>
 8005216:	4629      	mov	r1, r5
 8005218:	4630      	mov	r0, r6
 800521a:	f7ff ffbf 	bl	800519c <sbrk_aligned>
 800521e:	1c43      	adds	r3, r0, #1
 8005220:	4604      	mov	r4, r0
 8005222:	d158      	bne.n	80052d6 <_malloc_r+0xf6>
 8005224:	f8d8 4000 	ldr.w	r4, [r8]
 8005228:	4627      	mov	r7, r4
 800522a:	2f00      	cmp	r7, #0
 800522c:	d143      	bne.n	80052b6 <_malloc_r+0xd6>
 800522e:	2c00      	cmp	r4, #0
 8005230:	d04b      	beq.n	80052ca <_malloc_r+0xea>
 8005232:	6823      	ldr	r3, [r4, #0]
 8005234:	4639      	mov	r1, r7
 8005236:	4630      	mov	r0, r6
 8005238:	eb04 0903 	add.w	r9, r4, r3
 800523c:	f000 f98c 	bl	8005558 <_sbrk_r>
 8005240:	4581      	cmp	r9, r0
 8005242:	d142      	bne.n	80052ca <_malloc_r+0xea>
 8005244:	6821      	ldr	r1, [r4, #0]
 8005246:	1a6d      	subs	r5, r5, r1
 8005248:	4629      	mov	r1, r5
 800524a:	4630      	mov	r0, r6
 800524c:	f7ff ffa6 	bl	800519c <sbrk_aligned>
 8005250:	3001      	adds	r0, #1
 8005252:	d03a      	beq.n	80052ca <_malloc_r+0xea>
 8005254:	6823      	ldr	r3, [r4, #0]
 8005256:	442b      	add	r3, r5
 8005258:	6023      	str	r3, [r4, #0]
 800525a:	f8d8 3000 	ldr.w	r3, [r8]
 800525e:	685a      	ldr	r2, [r3, #4]
 8005260:	bb62      	cbnz	r2, 80052bc <_malloc_r+0xdc>
 8005262:	f8c8 7000 	str.w	r7, [r8]
 8005266:	e00f      	b.n	8005288 <_malloc_r+0xa8>
 8005268:	6822      	ldr	r2, [r4, #0]
 800526a:	1b52      	subs	r2, r2, r5
 800526c:	d420      	bmi.n	80052b0 <_malloc_r+0xd0>
 800526e:	2a0b      	cmp	r2, #11
 8005270:	d917      	bls.n	80052a2 <_malloc_r+0xc2>
 8005272:	1961      	adds	r1, r4, r5
 8005274:	42a3      	cmp	r3, r4
 8005276:	6025      	str	r5, [r4, #0]
 8005278:	bf18      	it	ne
 800527a:	6059      	strne	r1, [r3, #4]
 800527c:	6863      	ldr	r3, [r4, #4]
 800527e:	bf08      	it	eq
 8005280:	f8c8 1000 	streq.w	r1, [r8]
 8005284:	5162      	str	r2, [r4, r5]
 8005286:	604b      	str	r3, [r1, #4]
 8005288:	4630      	mov	r0, r6
 800528a:	f000 f82f 	bl	80052ec <__malloc_unlock>
 800528e:	f104 000b 	add.w	r0, r4, #11
 8005292:	1d23      	adds	r3, r4, #4
 8005294:	f020 0007 	bic.w	r0, r0, #7
 8005298:	1ac2      	subs	r2, r0, r3
 800529a:	bf1c      	itt	ne
 800529c:	1a1b      	subne	r3, r3, r0
 800529e:	50a3      	strne	r3, [r4, r2]
 80052a0:	e7af      	b.n	8005202 <_malloc_r+0x22>
 80052a2:	6862      	ldr	r2, [r4, #4]
 80052a4:	42a3      	cmp	r3, r4
 80052a6:	bf0c      	ite	eq
 80052a8:	f8c8 2000 	streq.w	r2, [r8]
 80052ac:	605a      	strne	r2, [r3, #4]
 80052ae:	e7eb      	b.n	8005288 <_malloc_r+0xa8>
 80052b0:	4623      	mov	r3, r4
 80052b2:	6864      	ldr	r4, [r4, #4]
 80052b4:	e7ae      	b.n	8005214 <_malloc_r+0x34>
 80052b6:	463c      	mov	r4, r7
 80052b8:	687f      	ldr	r7, [r7, #4]
 80052ba:	e7b6      	b.n	800522a <_malloc_r+0x4a>
 80052bc:	461a      	mov	r2, r3
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	42a3      	cmp	r3, r4
 80052c2:	d1fb      	bne.n	80052bc <_malloc_r+0xdc>
 80052c4:	2300      	movs	r3, #0
 80052c6:	6053      	str	r3, [r2, #4]
 80052c8:	e7de      	b.n	8005288 <_malloc_r+0xa8>
 80052ca:	230c      	movs	r3, #12
 80052cc:	6033      	str	r3, [r6, #0]
 80052ce:	4630      	mov	r0, r6
 80052d0:	f000 f80c 	bl	80052ec <__malloc_unlock>
 80052d4:	e794      	b.n	8005200 <_malloc_r+0x20>
 80052d6:	6005      	str	r5, [r0, #0]
 80052d8:	e7d6      	b.n	8005288 <_malloc_r+0xa8>
 80052da:	bf00      	nop
 80052dc:	20004c0c 	.word	0x20004c0c

080052e0 <__malloc_lock>:
 80052e0:	4801      	ldr	r0, [pc, #4]	@ (80052e8 <__malloc_lock+0x8>)
 80052e2:	f7ff bf00 	b.w	80050e6 <__retarget_lock_acquire_recursive>
 80052e6:	bf00      	nop
 80052e8:	20004c04 	.word	0x20004c04

080052ec <__malloc_unlock>:
 80052ec:	4801      	ldr	r0, [pc, #4]	@ (80052f4 <__malloc_unlock+0x8>)
 80052ee:	f7ff befb 	b.w	80050e8 <__retarget_lock_release_recursive>
 80052f2:	bf00      	nop
 80052f4:	20004c04 	.word	0x20004c04

080052f8 <__sflush_r>:
 80052f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80052fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005300:	0716      	lsls	r6, r2, #28
 8005302:	4605      	mov	r5, r0
 8005304:	460c      	mov	r4, r1
 8005306:	d454      	bmi.n	80053b2 <__sflush_r+0xba>
 8005308:	684b      	ldr	r3, [r1, #4]
 800530a:	2b00      	cmp	r3, #0
 800530c:	dc02      	bgt.n	8005314 <__sflush_r+0x1c>
 800530e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005310:	2b00      	cmp	r3, #0
 8005312:	dd48      	ble.n	80053a6 <__sflush_r+0xae>
 8005314:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005316:	2e00      	cmp	r6, #0
 8005318:	d045      	beq.n	80053a6 <__sflush_r+0xae>
 800531a:	2300      	movs	r3, #0
 800531c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005320:	682f      	ldr	r7, [r5, #0]
 8005322:	6a21      	ldr	r1, [r4, #32]
 8005324:	602b      	str	r3, [r5, #0]
 8005326:	d030      	beq.n	800538a <__sflush_r+0x92>
 8005328:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800532a:	89a3      	ldrh	r3, [r4, #12]
 800532c:	0759      	lsls	r1, r3, #29
 800532e:	d505      	bpl.n	800533c <__sflush_r+0x44>
 8005330:	6863      	ldr	r3, [r4, #4]
 8005332:	1ad2      	subs	r2, r2, r3
 8005334:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005336:	b10b      	cbz	r3, 800533c <__sflush_r+0x44>
 8005338:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800533a:	1ad2      	subs	r2, r2, r3
 800533c:	2300      	movs	r3, #0
 800533e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005340:	6a21      	ldr	r1, [r4, #32]
 8005342:	4628      	mov	r0, r5
 8005344:	47b0      	blx	r6
 8005346:	1c43      	adds	r3, r0, #1
 8005348:	89a3      	ldrh	r3, [r4, #12]
 800534a:	d106      	bne.n	800535a <__sflush_r+0x62>
 800534c:	6829      	ldr	r1, [r5, #0]
 800534e:	291d      	cmp	r1, #29
 8005350:	d82b      	bhi.n	80053aa <__sflush_r+0xb2>
 8005352:	4a2a      	ldr	r2, [pc, #168]	@ (80053fc <__sflush_r+0x104>)
 8005354:	40ca      	lsrs	r2, r1
 8005356:	07d6      	lsls	r6, r2, #31
 8005358:	d527      	bpl.n	80053aa <__sflush_r+0xb2>
 800535a:	2200      	movs	r2, #0
 800535c:	6062      	str	r2, [r4, #4]
 800535e:	04d9      	lsls	r1, r3, #19
 8005360:	6922      	ldr	r2, [r4, #16]
 8005362:	6022      	str	r2, [r4, #0]
 8005364:	d504      	bpl.n	8005370 <__sflush_r+0x78>
 8005366:	1c42      	adds	r2, r0, #1
 8005368:	d101      	bne.n	800536e <__sflush_r+0x76>
 800536a:	682b      	ldr	r3, [r5, #0]
 800536c:	b903      	cbnz	r3, 8005370 <__sflush_r+0x78>
 800536e:	6560      	str	r0, [r4, #84]	@ 0x54
 8005370:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005372:	602f      	str	r7, [r5, #0]
 8005374:	b1b9      	cbz	r1, 80053a6 <__sflush_r+0xae>
 8005376:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800537a:	4299      	cmp	r1, r3
 800537c:	d002      	beq.n	8005384 <__sflush_r+0x8c>
 800537e:	4628      	mov	r0, r5
 8005380:	f7ff fec2 	bl	8005108 <_free_r>
 8005384:	2300      	movs	r3, #0
 8005386:	6363      	str	r3, [r4, #52]	@ 0x34
 8005388:	e00d      	b.n	80053a6 <__sflush_r+0xae>
 800538a:	2301      	movs	r3, #1
 800538c:	4628      	mov	r0, r5
 800538e:	47b0      	blx	r6
 8005390:	4602      	mov	r2, r0
 8005392:	1c50      	adds	r0, r2, #1
 8005394:	d1c9      	bne.n	800532a <__sflush_r+0x32>
 8005396:	682b      	ldr	r3, [r5, #0]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d0c6      	beq.n	800532a <__sflush_r+0x32>
 800539c:	2b1d      	cmp	r3, #29
 800539e:	d001      	beq.n	80053a4 <__sflush_r+0xac>
 80053a0:	2b16      	cmp	r3, #22
 80053a2:	d11e      	bne.n	80053e2 <__sflush_r+0xea>
 80053a4:	602f      	str	r7, [r5, #0]
 80053a6:	2000      	movs	r0, #0
 80053a8:	e022      	b.n	80053f0 <__sflush_r+0xf8>
 80053aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80053ae:	b21b      	sxth	r3, r3
 80053b0:	e01b      	b.n	80053ea <__sflush_r+0xf2>
 80053b2:	690f      	ldr	r7, [r1, #16]
 80053b4:	2f00      	cmp	r7, #0
 80053b6:	d0f6      	beq.n	80053a6 <__sflush_r+0xae>
 80053b8:	0793      	lsls	r3, r2, #30
 80053ba:	680e      	ldr	r6, [r1, #0]
 80053bc:	bf08      	it	eq
 80053be:	694b      	ldreq	r3, [r1, #20]
 80053c0:	600f      	str	r7, [r1, #0]
 80053c2:	bf18      	it	ne
 80053c4:	2300      	movne	r3, #0
 80053c6:	eba6 0807 	sub.w	r8, r6, r7
 80053ca:	608b      	str	r3, [r1, #8]
 80053cc:	f1b8 0f00 	cmp.w	r8, #0
 80053d0:	dde9      	ble.n	80053a6 <__sflush_r+0xae>
 80053d2:	6a21      	ldr	r1, [r4, #32]
 80053d4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80053d6:	4643      	mov	r3, r8
 80053d8:	463a      	mov	r2, r7
 80053da:	4628      	mov	r0, r5
 80053dc:	47b0      	blx	r6
 80053de:	2800      	cmp	r0, #0
 80053e0:	dc08      	bgt.n	80053f4 <__sflush_r+0xfc>
 80053e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80053e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80053ea:	81a3      	strh	r3, [r4, #12]
 80053ec:	f04f 30ff 	mov.w	r0, #4294967295
 80053f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80053f4:	4407      	add	r7, r0
 80053f6:	eba8 0800 	sub.w	r8, r8, r0
 80053fa:	e7e7      	b.n	80053cc <__sflush_r+0xd4>
 80053fc:	20400001 	.word	0x20400001

08005400 <_fflush_r>:
 8005400:	b538      	push	{r3, r4, r5, lr}
 8005402:	690b      	ldr	r3, [r1, #16]
 8005404:	4605      	mov	r5, r0
 8005406:	460c      	mov	r4, r1
 8005408:	b913      	cbnz	r3, 8005410 <_fflush_r+0x10>
 800540a:	2500      	movs	r5, #0
 800540c:	4628      	mov	r0, r5
 800540e:	bd38      	pop	{r3, r4, r5, pc}
 8005410:	b118      	cbz	r0, 800541a <_fflush_r+0x1a>
 8005412:	6a03      	ldr	r3, [r0, #32]
 8005414:	b90b      	cbnz	r3, 800541a <_fflush_r+0x1a>
 8005416:	f7ff fc23 	bl	8004c60 <__sinit>
 800541a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d0f3      	beq.n	800540a <_fflush_r+0xa>
 8005422:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005424:	07d0      	lsls	r0, r2, #31
 8005426:	d404      	bmi.n	8005432 <_fflush_r+0x32>
 8005428:	0599      	lsls	r1, r3, #22
 800542a:	d402      	bmi.n	8005432 <_fflush_r+0x32>
 800542c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800542e:	f7ff fe5a 	bl	80050e6 <__retarget_lock_acquire_recursive>
 8005432:	4628      	mov	r0, r5
 8005434:	4621      	mov	r1, r4
 8005436:	f7ff ff5f 	bl	80052f8 <__sflush_r>
 800543a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800543c:	07da      	lsls	r2, r3, #31
 800543e:	4605      	mov	r5, r0
 8005440:	d4e4      	bmi.n	800540c <_fflush_r+0xc>
 8005442:	89a3      	ldrh	r3, [r4, #12]
 8005444:	059b      	lsls	r3, r3, #22
 8005446:	d4e1      	bmi.n	800540c <_fflush_r+0xc>
 8005448:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800544a:	f7ff fe4d 	bl	80050e8 <__retarget_lock_release_recursive>
 800544e:	e7dd      	b.n	800540c <_fflush_r+0xc>

08005450 <__swhatbuf_r>:
 8005450:	b570      	push	{r4, r5, r6, lr}
 8005452:	460c      	mov	r4, r1
 8005454:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005458:	2900      	cmp	r1, #0
 800545a:	b096      	sub	sp, #88	@ 0x58
 800545c:	4615      	mov	r5, r2
 800545e:	461e      	mov	r6, r3
 8005460:	da0d      	bge.n	800547e <__swhatbuf_r+0x2e>
 8005462:	89a3      	ldrh	r3, [r4, #12]
 8005464:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005468:	f04f 0100 	mov.w	r1, #0
 800546c:	bf14      	ite	ne
 800546e:	2340      	movne	r3, #64	@ 0x40
 8005470:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005474:	2000      	movs	r0, #0
 8005476:	6031      	str	r1, [r6, #0]
 8005478:	602b      	str	r3, [r5, #0]
 800547a:	b016      	add	sp, #88	@ 0x58
 800547c:	bd70      	pop	{r4, r5, r6, pc}
 800547e:	466a      	mov	r2, sp
 8005480:	f000 f848 	bl	8005514 <_fstat_r>
 8005484:	2800      	cmp	r0, #0
 8005486:	dbec      	blt.n	8005462 <__swhatbuf_r+0x12>
 8005488:	9901      	ldr	r1, [sp, #4]
 800548a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800548e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005492:	4259      	negs	r1, r3
 8005494:	4159      	adcs	r1, r3
 8005496:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800549a:	e7eb      	b.n	8005474 <__swhatbuf_r+0x24>

0800549c <__smakebuf_r>:
 800549c:	898b      	ldrh	r3, [r1, #12]
 800549e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80054a0:	079d      	lsls	r5, r3, #30
 80054a2:	4606      	mov	r6, r0
 80054a4:	460c      	mov	r4, r1
 80054a6:	d507      	bpl.n	80054b8 <__smakebuf_r+0x1c>
 80054a8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80054ac:	6023      	str	r3, [r4, #0]
 80054ae:	6123      	str	r3, [r4, #16]
 80054b0:	2301      	movs	r3, #1
 80054b2:	6163      	str	r3, [r4, #20]
 80054b4:	b003      	add	sp, #12
 80054b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80054b8:	ab01      	add	r3, sp, #4
 80054ba:	466a      	mov	r2, sp
 80054bc:	f7ff ffc8 	bl	8005450 <__swhatbuf_r>
 80054c0:	9f00      	ldr	r7, [sp, #0]
 80054c2:	4605      	mov	r5, r0
 80054c4:	4639      	mov	r1, r7
 80054c6:	4630      	mov	r0, r6
 80054c8:	f7ff fe8a 	bl	80051e0 <_malloc_r>
 80054cc:	b948      	cbnz	r0, 80054e2 <__smakebuf_r+0x46>
 80054ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80054d2:	059a      	lsls	r2, r3, #22
 80054d4:	d4ee      	bmi.n	80054b4 <__smakebuf_r+0x18>
 80054d6:	f023 0303 	bic.w	r3, r3, #3
 80054da:	f043 0302 	orr.w	r3, r3, #2
 80054de:	81a3      	strh	r3, [r4, #12]
 80054e0:	e7e2      	b.n	80054a8 <__smakebuf_r+0xc>
 80054e2:	89a3      	ldrh	r3, [r4, #12]
 80054e4:	6020      	str	r0, [r4, #0]
 80054e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80054ea:	81a3      	strh	r3, [r4, #12]
 80054ec:	9b01      	ldr	r3, [sp, #4]
 80054ee:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80054f2:	b15b      	cbz	r3, 800550c <__smakebuf_r+0x70>
 80054f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80054f8:	4630      	mov	r0, r6
 80054fa:	f000 f81d 	bl	8005538 <_isatty_r>
 80054fe:	b128      	cbz	r0, 800550c <__smakebuf_r+0x70>
 8005500:	89a3      	ldrh	r3, [r4, #12]
 8005502:	f023 0303 	bic.w	r3, r3, #3
 8005506:	f043 0301 	orr.w	r3, r3, #1
 800550a:	81a3      	strh	r3, [r4, #12]
 800550c:	89a3      	ldrh	r3, [r4, #12]
 800550e:	431d      	orrs	r5, r3
 8005510:	81a5      	strh	r5, [r4, #12]
 8005512:	e7cf      	b.n	80054b4 <__smakebuf_r+0x18>

08005514 <_fstat_r>:
 8005514:	b538      	push	{r3, r4, r5, lr}
 8005516:	4d07      	ldr	r5, [pc, #28]	@ (8005534 <_fstat_r+0x20>)
 8005518:	2300      	movs	r3, #0
 800551a:	4604      	mov	r4, r0
 800551c:	4608      	mov	r0, r1
 800551e:	4611      	mov	r1, r2
 8005520:	602b      	str	r3, [r5, #0]
 8005522:	f7fb fa98 	bl	8000a56 <_fstat>
 8005526:	1c43      	adds	r3, r0, #1
 8005528:	d102      	bne.n	8005530 <_fstat_r+0x1c>
 800552a:	682b      	ldr	r3, [r5, #0]
 800552c:	b103      	cbz	r3, 8005530 <_fstat_r+0x1c>
 800552e:	6023      	str	r3, [r4, #0]
 8005530:	bd38      	pop	{r3, r4, r5, pc}
 8005532:	bf00      	nop
 8005534:	20004c00 	.word	0x20004c00

08005538 <_isatty_r>:
 8005538:	b538      	push	{r3, r4, r5, lr}
 800553a:	4d06      	ldr	r5, [pc, #24]	@ (8005554 <_isatty_r+0x1c>)
 800553c:	2300      	movs	r3, #0
 800553e:	4604      	mov	r4, r0
 8005540:	4608      	mov	r0, r1
 8005542:	602b      	str	r3, [r5, #0]
 8005544:	f7fb fa97 	bl	8000a76 <_isatty>
 8005548:	1c43      	adds	r3, r0, #1
 800554a:	d102      	bne.n	8005552 <_isatty_r+0x1a>
 800554c:	682b      	ldr	r3, [r5, #0]
 800554e:	b103      	cbz	r3, 8005552 <_isatty_r+0x1a>
 8005550:	6023      	str	r3, [r4, #0]
 8005552:	bd38      	pop	{r3, r4, r5, pc}
 8005554:	20004c00 	.word	0x20004c00

08005558 <_sbrk_r>:
 8005558:	b538      	push	{r3, r4, r5, lr}
 800555a:	4d06      	ldr	r5, [pc, #24]	@ (8005574 <_sbrk_r+0x1c>)
 800555c:	2300      	movs	r3, #0
 800555e:	4604      	mov	r4, r0
 8005560:	4608      	mov	r0, r1
 8005562:	602b      	str	r3, [r5, #0]
 8005564:	f7fb faa0 	bl	8000aa8 <_sbrk>
 8005568:	1c43      	adds	r3, r0, #1
 800556a:	d102      	bne.n	8005572 <_sbrk_r+0x1a>
 800556c:	682b      	ldr	r3, [r5, #0]
 800556e:	b103      	cbz	r3, 8005572 <_sbrk_r+0x1a>
 8005570:	6023      	str	r3, [r4, #0]
 8005572:	bd38      	pop	{r3, r4, r5, pc}
 8005574:	20004c00 	.word	0x20004c00

08005578 <_init>:
 8005578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800557a:	bf00      	nop
 800557c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800557e:	bc08      	pop	{r3}
 8005580:	469e      	mov	lr, r3
 8005582:	4770      	bx	lr

08005584 <_fini>:
 8005584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005586:	bf00      	nop
 8005588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800558a:	bc08      	pop	{r3}
 800558c:	469e      	mov	lr, r3
 800558e:	4770      	bx	lr
