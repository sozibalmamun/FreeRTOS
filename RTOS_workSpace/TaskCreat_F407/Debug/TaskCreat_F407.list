
TaskCreat_F407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005370  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08005500  08005500  00006500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080055a0  080055a0  0000706c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080055a0  080055a0  000065a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080055a8  080055a8  0000706c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080055a8  080055a8  000065a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080055ac  080055ac  000065ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  080055b0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000706c  2**0
                  CONTENTS
 10 .bss          00004ba4  2000006c  2000006c  0000706c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004c10  20004c10  0000706c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000706c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014790  00000000  00000000  0000709c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003007  00000000  00000000  0001b82c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001268  00000000  00000000  0001e838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e1f  00000000  00000000  0001faa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003f3e  00000000  00000000  000208bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013ae2  00000000  00000000  000247fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d52a7  00000000  00000000  000382df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010d586  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005320  00000000  00000000  0010d5cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000060  00000000  00000000  001128ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080054e8 	.word	0x080054e8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	080054e8 	.word	0x080054e8

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b988 	b.w	80004f8 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	468e      	mov	lr, r1
 8000208:	4604      	mov	r4, r0
 800020a:	4688      	mov	r8, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14a      	bne.n	80002a6 <__udivmoddi4+0xa6>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d962      	bls.n	80002dc <__udivmoddi4+0xdc>
 8000216:	fab2 f682 	clz	r6, r2
 800021a:	b14e      	cbz	r6, 8000230 <__udivmoddi4+0x30>
 800021c:	f1c6 0320 	rsb	r3, r6, #32
 8000220:	fa01 f806 	lsl.w	r8, r1, r6
 8000224:	fa20 f303 	lsr.w	r3, r0, r3
 8000228:	40b7      	lsls	r7, r6
 800022a:	ea43 0808 	orr.w	r8, r3, r8
 800022e:	40b4      	lsls	r4, r6
 8000230:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000234:	fa1f fc87 	uxth.w	ip, r7
 8000238:	fbb8 f1fe 	udiv	r1, r8, lr
 800023c:	0c23      	lsrs	r3, r4, #16
 800023e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000242:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000246:	fb01 f20c 	mul.w	r2, r1, ip
 800024a:	429a      	cmp	r2, r3
 800024c:	d909      	bls.n	8000262 <__udivmoddi4+0x62>
 800024e:	18fb      	adds	r3, r7, r3
 8000250:	f101 30ff 	add.w	r0, r1, #4294967295
 8000254:	f080 80ea 	bcs.w	800042c <__udivmoddi4+0x22c>
 8000258:	429a      	cmp	r2, r3
 800025a:	f240 80e7 	bls.w	800042c <__udivmoddi4+0x22c>
 800025e:	3902      	subs	r1, #2
 8000260:	443b      	add	r3, r7
 8000262:	1a9a      	subs	r2, r3, r2
 8000264:	b2a3      	uxth	r3, r4
 8000266:	fbb2 f0fe 	udiv	r0, r2, lr
 800026a:	fb0e 2210 	mls	r2, lr, r0, r2
 800026e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000272:	fb00 fc0c 	mul.w	ip, r0, ip
 8000276:	459c      	cmp	ip, r3
 8000278:	d909      	bls.n	800028e <__udivmoddi4+0x8e>
 800027a:	18fb      	adds	r3, r7, r3
 800027c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000280:	f080 80d6 	bcs.w	8000430 <__udivmoddi4+0x230>
 8000284:	459c      	cmp	ip, r3
 8000286:	f240 80d3 	bls.w	8000430 <__udivmoddi4+0x230>
 800028a:	443b      	add	r3, r7
 800028c:	3802      	subs	r0, #2
 800028e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000292:	eba3 030c 	sub.w	r3, r3, ip
 8000296:	2100      	movs	r1, #0
 8000298:	b11d      	cbz	r5, 80002a2 <__udivmoddi4+0xa2>
 800029a:	40f3      	lsrs	r3, r6
 800029c:	2200      	movs	r2, #0
 800029e:	e9c5 3200 	strd	r3, r2, [r5]
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d905      	bls.n	80002b6 <__udivmoddi4+0xb6>
 80002aa:	b10d      	cbz	r5, 80002b0 <__udivmoddi4+0xb0>
 80002ac:	e9c5 0100 	strd	r0, r1, [r5]
 80002b0:	2100      	movs	r1, #0
 80002b2:	4608      	mov	r0, r1
 80002b4:	e7f5      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002b6:	fab3 f183 	clz	r1, r3
 80002ba:	2900      	cmp	r1, #0
 80002bc:	d146      	bne.n	800034c <__udivmoddi4+0x14c>
 80002be:	4573      	cmp	r3, lr
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xc8>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 8105 	bhi.w	80004d2 <__udivmoddi4+0x2d2>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb6e 0203 	sbc.w	r2, lr, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4690      	mov	r8, r2
 80002d2:	2d00      	cmp	r5, #0
 80002d4:	d0e5      	beq.n	80002a2 <__udivmoddi4+0xa2>
 80002d6:	e9c5 4800 	strd	r4, r8, [r5]
 80002da:	e7e2      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002dc:	2a00      	cmp	r2, #0
 80002de:	f000 8090 	beq.w	8000402 <__udivmoddi4+0x202>
 80002e2:	fab2 f682 	clz	r6, r2
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	f040 80a4 	bne.w	8000434 <__udivmoddi4+0x234>
 80002ec:	1a8a      	subs	r2, r1, r2
 80002ee:	0c03      	lsrs	r3, r0, #16
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	b280      	uxth	r0, r0
 80002f6:	b2bc      	uxth	r4, r7
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb2 fcfe 	udiv	ip, r2, lr
 80002fe:	fb0e 221c 	mls	r2, lr, ip, r2
 8000302:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000306:	fb04 f20c 	mul.w	r2, r4, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d907      	bls.n	800031e <__udivmoddi4+0x11e>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000314:	d202      	bcs.n	800031c <__udivmoddi4+0x11c>
 8000316:	429a      	cmp	r2, r3
 8000318:	f200 80e0 	bhi.w	80004dc <__udivmoddi4+0x2dc>
 800031c:	46c4      	mov	ip, r8
 800031e:	1a9b      	subs	r3, r3, r2
 8000320:	fbb3 f2fe 	udiv	r2, r3, lr
 8000324:	fb0e 3312 	mls	r3, lr, r2, r3
 8000328:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800032c:	fb02 f404 	mul.w	r4, r2, r4
 8000330:	429c      	cmp	r4, r3
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x144>
 8000334:	18fb      	adds	r3, r7, r3
 8000336:	f102 30ff 	add.w	r0, r2, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x142>
 800033c:	429c      	cmp	r4, r3
 800033e:	f200 80ca 	bhi.w	80004d6 <__udivmoddi4+0x2d6>
 8000342:	4602      	mov	r2, r0
 8000344:	1b1b      	subs	r3, r3, r4
 8000346:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0x98>
 800034c:	f1c1 0620 	rsb	r6, r1, #32
 8000350:	408b      	lsls	r3, r1
 8000352:	fa22 f706 	lsr.w	r7, r2, r6
 8000356:	431f      	orrs	r7, r3
 8000358:	fa0e f401 	lsl.w	r4, lr, r1
 800035c:	fa20 f306 	lsr.w	r3, r0, r6
 8000360:	fa2e fe06 	lsr.w	lr, lr, r6
 8000364:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000368:	4323      	orrs	r3, r4
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	fa1f fc87 	uxth.w	ip, r7
 8000372:	fbbe f0f9 	udiv	r0, lr, r9
 8000376:	0c1c      	lsrs	r4, r3, #16
 8000378:	fb09 ee10 	mls	lr, r9, r0, lr
 800037c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000380:	fb00 fe0c 	mul.w	lr, r0, ip
 8000384:	45a6      	cmp	lr, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x1a0>
 800038c:	193c      	adds	r4, r7, r4
 800038e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000392:	f080 809c 	bcs.w	80004ce <__udivmoddi4+0x2ce>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f240 8099 	bls.w	80004ce <__udivmoddi4+0x2ce>
 800039c:	3802      	subs	r0, #2
 800039e:	443c      	add	r4, r7
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	fa1f fe83 	uxth.w	lr, r3
 80003a8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ac:	fb09 4413 	mls	r4, r9, r3, r4
 80003b0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003b4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b8:	45a4      	cmp	ip, r4
 80003ba:	d908      	bls.n	80003ce <__udivmoddi4+0x1ce>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f103 3eff 	add.w	lr, r3, #4294967295
 80003c2:	f080 8082 	bcs.w	80004ca <__udivmoddi4+0x2ca>
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d97f      	bls.n	80004ca <__udivmoddi4+0x2ca>
 80003ca:	3b02      	subs	r3, #2
 80003cc:	443c      	add	r4, r7
 80003ce:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	fba0 ec02 	umull	lr, ip, r0, r2
 80003da:	4564      	cmp	r4, ip
 80003dc:	4673      	mov	r3, lr
 80003de:	46e1      	mov	r9, ip
 80003e0:	d362      	bcc.n	80004a8 <__udivmoddi4+0x2a8>
 80003e2:	d05f      	beq.n	80004a4 <__udivmoddi4+0x2a4>
 80003e4:	b15d      	cbz	r5, 80003fe <__udivmoddi4+0x1fe>
 80003e6:	ebb8 0203 	subs.w	r2, r8, r3
 80003ea:	eb64 0409 	sbc.w	r4, r4, r9
 80003ee:	fa04 f606 	lsl.w	r6, r4, r6
 80003f2:	fa22 f301 	lsr.w	r3, r2, r1
 80003f6:	431e      	orrs	r6, r3
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	e9c5 6400 	strd	r6, r4, [r5]
 80003fe:	2100      	movs	r1, #0
 8000400:	e74f      	b.n	80002a2 <__udivmoddi4+0xa2>
 8000402:	fbb1 fcf2 	udiv	ip, r1, r2
 8000406:	0c01      	lsrs	r1, r0, #16
 8000408:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800040c:	b280      	uxth	r0, r0
 800040e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000412:	463b      	mov	r3, r7
 8000414:	4638      	mov	r0, r7
 8000416:	463c      	mov	r4, r7
 8000418:	46b8      	mov	r8, r7
 800041a:	46be      	mov	lr, r7
 800041c:	2620      	movs	r6, #32
 800041e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000422:	eba2 0208 	sub.w	r2, r2, r8
 8000426:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800042a:	e766      	b.n	80002fa <__udivmoddi4+0xfa>
 800042c:	4601      	mov	r1, r0
 800042e:	e718      	b.n	8000262 <__udivmoddi4+0x62>
 8000430:	4610      	mov	r0, r2
 8000432:	e72c      	b.n	800028e <__udivmoddi4+0x8e>
 8000434:	f1c6 0220 	rsb	r2, r6, #32
 8000438:	fa2e f302 	lsr.w	r3, lr, r2
 800043c:	40b7      	lsls	r7, r6
 800043e:	40b1      	lsls	r1, r6
 8000440:	fa20 f202 	lsr.w	r2, r0, r2
 8000444:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000448:	430a      	orrs	r2, r1
 800044a:	fbb3 f8fe 	udiv	r8, r3, lr
 800044e:	b2bc      	uxth	r4, r7
 8000450:	fb0e 3318 	mls	r3, lr, r8, r3
 8000454:	0c11      	lsrs	r1, r2, #16
 8000456:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045a:	fb08 f904 	mul.w	r9, r8, r4
 800045e:	40b0      	lsls	r0, r6
 8000460:	4589      	cmp	r9, r1
 8000462:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000466:	b280      	uxth	r0, r0
 8000468:	d93e      	bls.n	80004e8 <__udivmoddi4+0x2e8>
 800046a:	1879      	adds	r1, r7, r1
 800046c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000470:	d201      	bcs.n	8000476 <__udivmoddi4+0x276>
 8000472:	4589      	cmp	r9, r1
 8000474:	d81f      	bhi.n	80004b6 <__udivmoddi4+0x2b6>
 8000476:	eba1 0109 	sub.w	r1, r1, r9
 800047a:	fbb1 f9fe 	udiv	r9, r1, lr
 800047e:	fb09 f804 	mul.w	r8, r9, r4
 8000482:	fb0e 1119 	mls	r1, lr, r9, r1
 8000486:	b292      	uxth	r2, r2
 8000488:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800048c:	4542      	cmp	r2, r8
 800048e:	d229      	bcs.n	80004e4 <__udivmoddi4+0x2e4>
 8000490:	18ba      	adds	r2, r7, r2
 8000492:	f109 31ff 	add.w	r1, r9, #4294967295
 8000496:	d2c4      	bcs.n	8000422 <__udivmoddi4+0x222>
 8000498:	4542      	cmp	r2, r8
 800049a:	d2c2      	bcs.n	8000422 <__udivmoddi4+0x222>
 800049c:	f1a9 0102 	sub.w	r1, r9, #2
 80004a0:	443a      	add	r2, r7
 80004a2:	e7be      	b.n	8000422 <__udivmoddi4+0x222>
 80004a4:	45f0      	cmp	r8, lr
 80004a6:	d29d      	bcs.n	80003e4 <__udivmoddi4+0x1e4>
 80004a8:	ebbe 0302 	subs.w	r3, lr, r2
 80004ac:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b0:	3801      	subs	r0, #1
 80004b2:	46e1      	mov	r9, ip
 80004b4:	e796      	b.n	80003e4 <__udivmoddi4+0x1e4>
 80004b6:	eba7 0909 	sub.w	r9, r7, r9
 80004ba:	4449      	add	r1, r9
 80004bc:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c0:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c4:	fb09 f804 	mul.w	r8, r9, r4
 80004c8:	e7db      	b.n	8000482 <__udivmoddi4+0x282>
 80004ca:	4673      	mov	r3, lr
 80004cc:	e77f      	b.n	80003ce <__udivmoddi4+0x1ce>
 80004ce:	4650      	mov	r0, sl
 80004d0:	e766      	b.n	80003a0 <__udivmoddi4+0x1a0>
 80004d2:	4608      	mov	r0, r1
 80004d4:	e6fd      	b.n	80002d2 <__udivmoddi4+0xd2>
 80004d6:	443b      	add	r3, r7
 80004d8:	3a02      	subs	r2, #2
 80004da:	e733      	b.n	8000344 <__udivmoddi4+0x144>
 80004dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e0:	443b      	add	r3, r7
 80004e2:	e71c      	b.n	800031e <__udivmoddi4+0x11e>
 80004e4:	4649      	mov	r1, r9
 80004e6:	e79c      	b.n	8000422 <__udivmoddi4+0x222>
 80004e8:	eba1 0109 	sub.w	r1, r1, r9
 80004ec:	46c4      	mov	ip, r8
 80004ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f2:	fb09 f804 	mul.w	r8, r9, r4
 80004f6:	e7c4      	b.n	8000482 <__udivmoddi4+0x282>

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b088      	sub	sp, #32
 8000500:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
	TaskHandle_t task_1_handel=NULL;
 8000502:	2300      	movs	r3, #0
 8000504:	60bb      	str	r3, [r7, #8]
	TaskHandle_t task_2_handel=NULL;
 8000506:	2300      	movs	r3, #0
 8000508:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050a:	f000 fb69 	bl	8000be0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050e:	f000 f85f 	bl	80005d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000512:	f000 f8c7 	bl	80006a4 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

	/* USER CODE BEGIN 2 */
	status=xTaskCreate(task_1_Handler, "Task_1", 200, "Hello world from task 1", 2, &task_1_handel);
 8000516:	f107 0308 	add.w	r3, r7, #8
 800051a:	9301      	str	r3, [sp, #4]
 800051c:	2302      	movs	r3, #2
 800051e:	9300      	str	r3, [sp, #0]
 8000520:	4b21      	ldr	r3, [pc, #132]	@ (80005a8 <main+0xac>)
 8000522:	22c8      	movs	r2, #200	@ 0xc8
 8000524:	4921      	ldr	r1, [pc, #132]	@ (80005ac <main+0xb0>)
 8000526:	4822      	ldr	r0, [pc, #136]	@ (80005b0 <main+0xb4>)
 8000528:	f002 fc94 	bl	8002e54 <xTaskCreate>
 800052c:	6178      	str	r0, [r7, #20]
	configASSERT(status==pdPASS);//if task creat fail then code will hang here
 800052e:	697b      	ldr	r3, [r7, #20]
 8000530:	2b01      	cmp	r3, #1
 8000532:	d00b      	beq.n	800054c <main+0x50>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000534:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000538:	f383 8811 	msr	BASEPRI, r3
 800053c:	f3bf 8f6f 	isb	sy
 8000540:	f3bf 8f4f 	dsb	sy
 8000544:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000546:	bf00      	nop
 8000548:	bf00      	nop
 800054a:	e7fd      	b.n	8000548 <main+0x4c>

	status=xTaskCreate(task_2_Handler, "Task_2", 200, "Hello world from task 2", 2, &task_2_handel);
 800054c:	1d3b      	adds	r3, r7, #4
 800054e:	9301      	str	r3, [sp, #4]
 8000550:	2302      	movs	r3, #2
 8000552:	9300      	str	r3, [sp, #0]
 8000554:	4b17      	ldr	r3, [pc, #92]	@ (80005b4 <main+0xb8>)
 8000556:	22c8      	movs	r2, #200	@ 0xc8
 8000558:	4917      	ldr	r1, [pc, #92]	@ (80005b8 <main+0xbc>)
 800055a:	4818      	ldr	r0, [pc, #96]	@ (80005bc <main+0xc0>)
 800055c:	f002 fc7a 	bl	8002e54 <xTaskCreate>
 8000560:	6178      	str	r0, [r7, #20]
	configASSERT(status==pdPASS);//if task creation fails, then the code will hang here
 8000562:	697b      	ldr	r3, [r7, #20]
 8000564:	2b01      	cmp	r3, #1
 8000566:	d00b      	beq.n	8000580 <main+0x84>
	__asm volatile
 8000568:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800056c:	f383 8811 	msr	BASEPRI, r3
 8000570:	f3bf 8f6f 	isb	sy
 8000574:	f3bf 8f4f 	dsb	sy
 8000578:	60fb      	str	r3, [r7, #12]
}
 800057a:	bf00      	nop
 800057c:	bf00      	nop
 800057e:	e7fd      	b.n	800057c <main+0x80>

	vTaskStartScheduler();//start the freeRTOS scheduler
 8000580:	f002 fdec 	bl	800315c <vTaskStartScheduler>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000584:	f001 fd5c 	bl	8002040 <osKernelInitialize>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000588:	4a0d      	ldr	r2, [pc, #52]	@ (80005c0 <main+0xc4>)
 800058a:	2100      	movs	r1, #0
 800058c:	480d      	ldr	r0, [pc, #52]	@ (80005c4 <main+0xc8>)
 800058e:	f001 fda1 	bl	80020d4 <osThreadNew>
 8000592:	4603      	mov	r3, r0
 8000594:	4a0c      	ldr	r2, [pc, #48]	@ (80005c8 <main+0xcc>)
 8000596:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000598:	f001 fd76 	bl	8002088 <osKernelStart>
  /* USER CODE BEGIN WHILE */
	while (1)
	{
    /* USER CODE END WHILE */

	HAL_GPIO_WritePin(redLed_GPIO_Port, redLed_Pin, 1);
 800059c:	2201      	movs	r2, #1
 800059e:	2120      	movs	r1, #32
 80005a0:	480a      	ldr	r0, [pc, #40]	@ (80005cc <main+0xd0>)
 80005a2:	f000 fddd 	bl	8001160 <HAL_GPIO_WritePin>
 80005a6:	e7f9      	b.n	800059c <main+0xa0>
 80005a8:	0800550c 	.word	0x0800550c
 80005ac:	08005524 	.word	0x08005524
 80005b0:	0800078d 	.word	0x0800078d
 80005b4:	0800552c 	.word	0x0800552c
 80005b8:	08005544 	.word	0x08005544
 80005bc:	080007c1 	.word	0x080007c1
 80005c0:	08005564 	.word	0x08005564
 80005c4:	080007f5 	.word	0x080007f5
 80005c8:	20000088 	.word	0x20000088
 80005cc:	40020800 	.word	0x40020800

080005d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b094      	sub	sp, #80	@ 0x50
 80005d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d6:	f107 0320 	add.w	r3, r7, #32
 80005da:	2230      	movs	r2, #48	@ 0x30
 80005dc:	2100      	movs	r1, #0
 80005de:	4618      	mov	r0, r3
 80005e0:	f004 fc62 	bl	8004ea8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e4:	f107 030c 	add.w	r3, r7, #12
 80005e8:	2200      	movs	r2, #0
 80005ea:	601a      	str	r2, [r3, #0]
 80005ec:	605a      	str	r2, [r3, #4]
 80005ee:	609a      	str	r2, [r3, #8]
 80005f0:	60da      	str	r2, [r3, #12]
 80005f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f4:	2300      	movs	r3, #0
 80005f6:	60bb      	str	r3, [r7, #8]
 80005f8:	4b28      	ldr	r3, [pc, #160]	@ (800069c <SystemClock_Config+0xcc>)
 80005fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005fc:	4a27      	ldr	r2, [pc, #156]	@ (800069c <SystemClock_Config+0xcc>)
 80005fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000602:	6413      	str	r3, [r2, #64]	@ 0x40
 8000604:	4b25      	ldr	r3, [pc, #148]	@ (800069c <SystemClock_Config+0xcc>)
 8000606:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000608:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800060c:	60bb      	str	r3, [r7, #8]
 800060e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000610:	2300      	movs	r3, #0
 8000612:	607b      	str	r3, [r7, #4]
 8000614:	4b22      	ldr	r3, [pc, #136]	@ (80006a0 <SystemClock_Config+0xd0>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a21      	ldr	r2, [pc, #132]	@ (80006a0 <SystemClock_Config+0xd0>)
 800061a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800061e:	6013      	str	r3, [r2, #0]
 8000620:	4b1f      	ldr	r3, [pc, #124]	@ (80006a0 <SystemClock_Config+0xd0>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000628:	607b      	str	r3, [r7, #4]
 800062a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800062c:	2302      	movs	r3, #2
 800062e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000630:	2301      	movs	r3, #1
 8000632:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000634:	2310      	movs	r3, #16
 8000636:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000638:	2302      	movs	r3, #2
 800063a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800063c:	2300      	movs	r3, #0
 800063e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000640:	2308      	movs	r3, #8
 8000642:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000644:	2332      	movs	r3, #50	@ 0x32
 8000646:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000648:	2304      	movs	r3, #4
 800064a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800064c:	2304      	movs	r3, #4
 800064e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000650:	f107 0320 	add.w	r3, r7, #32
 8000654:	4618      	mov	r0, r3
 8000656:	f000 fd9d 	bl	8001194 <HAL_RCC_OscConfig>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000660:	f000 f8e2 	bl	8000828 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000664:	230f      	movs	r3, #15
 8000666:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000668:	2302      	movs	r3, #2
 800066a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800066c:	2300      	movs	r3, #0
 800066e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000670:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000674:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000676:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800067a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800067c:	f107 030c 	add.w	r3, r7, #12
 8000680:	2100      	movs	r1, #0
 8000682:	4618      	mov	r0, r3
 8000684:	f000 fffe 	bl	8001684 <HAL_RCC_ClockConfig>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800068e:	f000 f8cb 	bl	8000828 <Error_Handler>
  }
}
 8000692:	bf00      	nop
 8000694:	3750      	adds	r7, #80	@ 0x50
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	40023800 	.word	0x40023800
 80006a0:	40007000 	.word	0x40007000

080006a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b088      	sub	sp, #32
 80006a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006aa:	f107 030c 	add.w	r3, r7, #12
 80006ae:	2200      	movs	r2, #0
 80006b0:	601a      	str	r2, [r3, #0]
 80006b2:	605a      	str	r2, [r3, #4]
 80006b4:	609a      	str	r2, [r3, #8]
 80006b6:	60da      	str	r2, [r3, #12]
 80006b8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ba:	2300      	movs	r3, #0
 80006bc:	60bb      	str	r3, [r7, #8]
 80006be:	4b2f      	ldr	r3, [pc, #188]	@ (800077c <MX_GPIO_Init+0xd8>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006c2:	4a2e      	ldr	r2, [pc, #184]	@ (800077c <MX_GPIO_Init+0xd8>)
 80006c4:	f043 0301 	orr.w	r3, r3, #1
 80006c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ca:	4b2c      	ldr	r3, [pc, #176]	@ (800077c <MX_GPIO_Init+0xd8>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ce:	f003 0301 	and.w	r3, r3, #1
 80006d2:	60bb      	str	r3, [r7, #8]
 80006d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006d6:	2300      	movs	r3, #0
 80006d8:	607b      	str	r3, [r7, #4]
 80006da:	4b28      	ldr	r3, [pc, #160]	@ (800077c <MX_GPIO_Init+0xd8>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006de:	4a27      	ldr	r2, [pc, #156]	@ (800077c <MX_GPIO_Init+0xd8>)
 80006e0:	f043 0304 	orr.w	r3, r3, #4
 80006e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006e6:	4b25      	ldr	r3, [pc, #148]	@ (800077c <MX_GPIO_Init+0xd8>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ea:	f003 0304 	and.w	r3, r3, #4
 80006ee:	607b      	str	r3, [r7, #4]
 80006f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006f2:	2300      	movs	r3, #0
 80006f4:	603b      	str	r3, [r7, #0]
 80006f6:	4b21      	ldr	r3, [pc, #132]	@ (800077c <MX_GPIO_Init+0xd8>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006fa:	4a20      	ldr	r2, [pc, #128]	@ (800077c <MX_GPIO_Init+0xd8>)
 80006fc:	f043 0302 	orr.w	r3, r3, #2
 8000700:	6313      	str	r3, [r2, #48]	@ 0x30
 8000702:	4b1e      	ldr	r3, [pc, #120]	@ (800077c <MX_GPIO_Init+0xd8>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000706:	f003 0302 	and.w	r3, r3, #2
 800070a:	603b      	str	r3, [r7, #0]
 800070c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(redLed_GPIO_Port, redLed_Pin, GPIO_PIN_RESET);
 800070e:	2200      	movs	r2, #0
 8000710:	2120      	movs	r1, #32
 8000712:	481b      	ldr	r0, [pc, #108]	@ (8000780 <MX_GPIO_Init+0xdc>)
 8000714:	f000 fd24 	bl	8001160 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(blueLed_GPIO_Port, blueLed_Pin, GPIO_PIN_RESET);
 8000718:	2200      	movs	r2, #0
 800071a:	2104      	movs	r1, #4
 800071c:	4819      	ldr	r0, [pc, #100]	@ (8000784 <MX_GPIO_Init+0xe0>)
 800071e:	f000 fd1f 	bl	8001160 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : switch_Pin */
  GPIO_InitStruct.Pin = switch_Pin;
 8000722:	2301      	movs	r3, #1
 8000724:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000726:	2300      	movs	r3, #0
 8000728:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072a:	2300      	movs	r3, #0
 800072c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(switch_GPIO_Port, &GPIO_InitStruct);
 800072e:	f107 030c 	add.w	r3, r7, #12
 8000732:	4619      	mov	r1, r3
 8000734:	4814      	ldr	r0, [pc, #80]	@ (8000788 <MX_GPIO_Init+0xe4>)
 8000736:	f000 fb77 	bl	8000e28 <HAL_GPIO_Init>

  /*Configure GPIO pin : redLed_Pin */
  GPIO_InitStruct.Pin = redLed_Pin;
 800073a:	2320      	movs	r3, #32
 800073c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800073e:	2301      	movs	r3, #1
 8000740:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000742:	2300      	movs	r3, #0
 8000744:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000746:	2300      	movs	r3, #0
 8000748:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(redLed_GPIO_Port, &GPIO_InitStruct);
 800074a:	f107 030c 	add.w	r3, r7, #12
 800074e:	4619      	mov	r1, r3
 8000750:	480b      	ldr	r0, [pc, #44]	@ (8000780 <MX_GPIO_Init+0xdc>)
 8000752:	f000 fb69 	bl	8000e28 <HAL_GPIO_Init>

  /*Configure GPIO pin : blueLed_Pin */
  GPIO_InitStruct.Pin = blueLed_Pin;
 8000756:	2304      	movs	r3, #4
 8000758:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800075a:	2301      	movs	r3, #1
 800075c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075e:	2300      	movs	r3, #0
 8000760:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000762:	2300      	movs	r3, #0
 8000764:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(blueLed_GPIO_Port, &GPIO_InitStruct);
 8000766:	f107 030c 	add.w	r3, r7, #12
 800076a:	4619      	mov	r1, r3
 800076c:	4805      	ldr	r0, [pc, #20]	@ (8000784 <MX_GPIO_Init+0xe0>)
 800076e:	f000 fb5b 	bl	8000e28 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000772:	bf00      	nop
 8000774:	3720      	adds	r7, #32
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	40023800 	.word	0x40023800
 8000780:	40020800 	.word	0x40020800
 8000784:	40020400 	.word	0x40020400
 8000788:	40020000 	.word	0x40020000

0800078c <task_1_Handler>:

/* USER CODE BEGIN 4 */

static void task_1_Handler (void* arg){
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]

	while(1){

		printf("%s\n",(char*)arg);
 8000794:	6878      	ldr	r0, [r7, #4]
 8000796:	f004 faa7 	bl	8004ce8 <puts>
		HAL_GPIO_WritePin(redLed_GPIO_Port, redLed_Pin, 1);
 800079a:	2201      	movs	r2, #1
 800079c:	2120      	movs	r1, #32
 800079e:	4806      	ldr	r0, [pc, #24]	@ (80007b8 <task_1_Handler+0x2c>)
 80007a0:	f000 fcde 	bl	8001160 <HAL_GPIO_WritePin>
		taskYIELD();
 80007a4:	4b05      	ldr	r3, [pc, #20]	@ (80007bc <task_1_Handler+0x30>)
 80007a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80007aa:	601a      	str	r2, [r3, #0]
 80007ac:	f3bf 8f4f 	dsb	sy
 80007b0:	f3bf 8f6f 	isb	sy
		printf("%s\n",(char*)arg);
 80007b4:	bf00      	nop
 80007b6:	e7ed      	b.n	8000794 <task_1_Handler+0x8>
 80007b8:	40020800 	.word	0x40020800
 80007bc:	e000ed04 	.word	0xe000ed04

080007c0 <task_2_Handler>:


	}
}

static void task_2_Handler (void* arg){
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]

	while(1){

		printf("%s\n",(char*)arg);
 80007c8:	6878      	ldr	r0, [r7, #4]
 80007ca:	f004 fa8d 	bl	8004ce8 <puts>
		HAL_GPIO_WritePin(blueLed_GPIO_Port, blueLed_Pin, 1);
 80007ce:	2201      	movs	r2, #1
 80007d0:	2104      	movs	r1, #4
 80007d2:	4806      	ldr	r0, [pc, #24]	@ (80007ec <task_2_Handler+0x2c>)
 80007d4:	f000 fcc4 	bl	8001160 <HAL_GPIO_WritePin>
		taskYIELD();
 80007d8:	4b05      	ldr	r3, [pc, #20]	@ (80007f0 <task_2_Handler+0x30>)
 80007da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80007de:	601a      	str	r2, [r3, #0]
 80007e0:	f3bf 8f4f 	dsb	sy
 80007e4:	f3bf 8f6f 	isb	sy
		printf("%s\n",(char*)arg);
 80007e8:	bf00      	nop
 80007ea:	e7ed      	b.n	80007c8 <task_2_Handler+0x8>
 80007ec:	40020400 	.word	0x40020400
 80007f0:	e000ed04 	.word	0xe000ed04

080007f4 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for(;;)
	{
		osDelay(1);
 80007fc:	2001      	movs	r0, #1
 80007fe:	f001 fcfb 	bl	80021f8 <osDelay>
 8000802:	e7fb      	b.n	80007fc <StartDefaultTask+0x8>

08000804 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	4a04      	ldr	r2, [pc, #16]	@ (8000824 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000812:	4293      	cmp	r3, r2
 8000814:	d101      	bne.n	800081a <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000816:	f000 fa05 	bl	8000c24 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800081a:	bf00      	nop
 800081c:	3708      	adds	r7, #8
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	40001000 	.word	0x40001000

08000828 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800082c:	b672      	cpsid	i
}
 800082e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000830:	bf00      	nop
 8000832:	e7fd      	b.n	8000830 <Error_Handler+0x8>

08000834 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	607b      	str	r3, [r7, #4]
 800083e:	4b12      	ldr	r3, [pc, #72]	@ (8000888 <HAL_MspInit+0x54>)
 8000840:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000842:	4a11      	ldr	r2, [pc, #68]	@ (8000888 <HAL_MspInit+0x54>)
 8000844:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000848:	6453      	str	r3, [r2, #68]	@ 0x44
 800084a:	4b0f      	ldr	r3, [pc, #60]	@ (8000888 <HAL_MspInit+0x54>)
 800084c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800084e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000852:	607b      	str	r3, [r7, #4]
 8000854:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	603b      	str	r3, [r7, #0]
 800085a:	4b0b      	ldr	r3, [pc, #44]	@ (8000888 <HAL_MspInit+0x54>)
 800085c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800085e:	4a0a      	ldr	r2, [pc, #40]	@ (8000888 <HAL_MspInit+0x54>)
 8000860:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000864:	6413      	str	r3, [r2, #64]	@ 0x40
 8000866:	4b08      	ldr	r3, [pc, #32]	@ (8000888 <HAL_MspInit+0x54>)
 8000868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800086a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800086e:	603b      	str	r3, [r7, #0]
 8000870:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000872:	2200      	movs	r2, #0
 8000874:	210f      	movs	r1, #15
 8000876:	f06f 0001 	mvn.w	r0, #1
 800087a:	f000 faab 	bl	8000dd4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800087e:	bf00      	nop
 8000880:	3708      	adds	r7, #8
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	40023800 	.word	0x40023800

0800088c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b08e      	sub	sp, #56	@ 0x38
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000894:	2300      	movs	r3, #0
 8000896:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000898:	2300      	movs	r3, #0
 800089a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800089c:	2300      	movs	r3, #0
 800089e:	60fb      	str	r3, [r7, #12]
 80008a0:	4b33      	ldr	r3, [pc, #204]	@ (8000970 <HAL_InitTick+0xe4>)
 80008a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008a4:	4a32      	ldr	r2, [pc, #200]	@ (8000970 <HAL_InitTick+0xe4>)
 80008a6:	f043 0310 	orr.w	r3, r3, #16
 80008aa:	6413      	str	r3, [r2, #64]	@ 0x40
 80008ac:	4b30      	ldr	r3, [pc, #192]	@ (8000970 <HAL_InitTick+0xe4>)
 80008ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008b0:	f003 0310 	and.w	r3, r3, #16
 80008b4:	60fb      	str	r3, [r7, #12]
 80008b6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008b8:	f107 0210 	add.w	r2, r7, #16
 80008bc:	f107 0314 	add.w	r3, r7, #20
 80008c0:	4611      	mov	r1, r2
 80008c2:	4618      	mov	r0, r3
 80008c4:	f001 f8aa 	bl	8001a1c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80008c8:	6a3b      	ldr	r3, [r7, #32]
 80008ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80008cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d103      	bne.n	80008da <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80008d2:	f001 f88f 	bl	80019f4 <HAL_RCC_GetPCLK1Freq>
 80008d6:	6378      	str	r0, [r7, #52]	@ 0x34
 80008d8:	e004      	b.n	80008e4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80008da:	f001 f88b 	bl	80019f4 <HAL_RCC_GetPCLK1Freq>
 80008de:	4603      	mov	r3, r0
 80008e0:	005b      	lsls	r3, r3, #1
 80008e2:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80008e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80008e6:	4a23      	ldr	r2, [pc, #140]	@ (8000974 <HAL_InitTick+0xe8>)
 80008e8:	fba2 2303 	umull	r2, r3, r2, r3
 80008ec:	0c9b      	lsrs	r3, r3, #18
 80008ee:	3b01      	subs	r3, #1
 80008f0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80008f2:	4b21      	ldr	r3, [pc, #132]	@ (8000978 <HAL_InitTick+0xec>)
 80008f4:	4a21      	ldr	r2, [pc, #132]	@ (800097c <HAL_InitTick+0xf0>)
 80008f6:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80008f8:	4b1f      	ldr	r3, [pc, #124]	@ (8000978 <HAL_InitTick+0xec>)
 80008fa:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80008fe:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000900:	4a1d      	ldr	r2, [pc, #116]	@ (8000978 <HAL_InitTick+0xec>)
 8000902:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000904:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000906:	4b1c      	ldr	r3, [pc, #112]	@ (8000978 <HAL_InitTick+0xec>)
 8000908:	2200      	movs	r2, #0
 800090a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800090c:	4b1a      	ldr	r3, [pc, #104]	@ (8000978 <HAL_InitTick+0xec>)
 800090e:	2200      	movs	r2, #0
 8000910:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000912:	4b19      	ldr	r3, [pc, #100]	@ (8000978 <HAL_InitTick+0xec>)
 8000914:	2200      	movs	r2, #0
 8000916:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000918:	4817      	ldr	r0, [pc, #92]	@ (8000978 <HAL_InitTick+0xec>)
 800091a:	f001 f8b1 	bl	8001a80 <HAL_TIM_Base_Init>
 800091e:	4603      	mov	r3, r0
 8000920:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000924:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000928:	2b00      	cmp	r3, #0
 800092a:	d11b      	bne.n	8000964 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800092c:	4812      	ldr	r0, [pc, #72]	@ (8000978 <HAL_InitTick+0xec>)
 800092e:	f001 f901 	bl	8001b34 <HAL_TIM_Base_Start_IT>
 8000932:	4603      	mov	r3, r0
 8000934:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000938:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800093c:	2b00      	cmp	r3, #0
 800093e:	d111      	bne.n	8000964 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000940:	2036      	movs	r0, #54	@ 0x36
 8000942:	f000 fa63 	bl	8000e0c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	2b0f      	cmp	r3, #15
 800094a:	d808      	bhi.n	800095e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800094c:	2200      	movs	r2, #0
 800094e:	6879      	ldr	r1, [r7, #4]
 8000950:	2036      	movs	r0, #54	@ 0x36
 8000952:	f000 fa3f 	bl	8000dd4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000956:	4a0a      	ldr	r2, [pc, #40]	@ (8000980 <HAL_InitTick+0xf4>)
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	6013      	str	r3, [r2, #0]
 800095c:	e002      	b.n	8000964 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800095e:	2301      	movs	r3, #1
 8000960:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000964:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000968:	4618      	mov	r0, r3
 800096a:	3738      	adds	r7, #56	@ 0x38
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	40023800 	.word	0x40023800
 8000974:	431bde83 	.word	0x431bde83
 8000978:	2000008c 	.word	0x2000008c
 800097c:	40001000 	.word	0x40001000
 8000980:	20000004 	.word	0x20000004

08000984 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000988:	bf00      	nop
 800098a:	e7fd      	b.n	8000988 <NMI_Handler+0x4>

0800098c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000990:	bf00      	nop
 8000992:	e7fd      	b.n	8000990 <HardFault_Handler+0x4>

08000994 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000998:	bf00      	nop
 800099a:	e7fd      	b.n	8000998 <MemManage_Handler+0x4>

0800099c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009a0:	bf00      	nop
 80009a2:	e7fd      	b.n	80009a0 <BusFault_Handler+0x4>

080009a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009a8:	bf00      	nop
 80009aa:	e7fd      	b.n	80009a8 <UsageFault_Handler+0x4>

080009ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009b0:	bf00      	nop
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr
	...

080009bc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80009c0:	4802      	ldr	r0, [pc, #8]	@ (80009cc <TIM6_DAC_IRQHandler+0x10>)
 80009c2:	f001 f927 	bl	8001c14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80009c6:	bf00      	nop
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	2000008c 	.word	0x2000008c

080009d0 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b083      	sub	sp, #12
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	4603      	mov	r3, r0
 80009d8:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80009da:	4b0f      	ldr	r3, [pc, #60]	@ (8000a18 <ITM_SendChar+0x48>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	4a0e      	ldr	r2, [pc, #56]	@ (8000a18 <ITM_SendChar+0x48>)
 80009e0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80009e4:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80009e6:	4b0d      	ldr	r3, [pc, #52]	@ (8000a1c <ITM_SendChar+0x4c>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	4a0c      	ldr	r2, [pc, #48]	@ (8000a1c <ITM_SendChar+0x4c>)
 80009ec:	f043 0301 	orr.w	r3, r3, #1
 80009f0:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80009f2:	bf00      	nop
 80009f4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	f003 0301 	and.w	r3, r3, #1
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d0f8      	beq.n	80009f4 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000a02:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 8000a06:	79fb      	ldrb	r3, [r7, #7]
 8000a08:	6013      	str	r3, [r2, #0]
}
 8000a0a:	bf00      	nop
 8000a0c:	370c      	adds	r7, #12
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	e000edfc 	.word	0xe000edfc
 8000a1c:	e0000e00 	.word	0xe0000e00

08000a20 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b086      	sub	sp, #24
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	60f8      	str	r0, [r7, #12]
 8000a28:	60b9      	str	r1, [r7, #8]
 8000a2a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	617b      	str	r3, [r7, #20]
 8000a30:	e00a      	b.n	8000a48 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a32:	f3af 8000 	nop.w
 8000a36:	4601      	mov	r1, r0
 8000a38:	68bb      	ldr	r3, [r7, #8]
 8000a3a:	1c5a      	adds	r2, r3, #1
 8000a3c:	60ba      	str	r2, [r7, #8]
 8000a3e:	b2ca      	uxtb	r2, r1
 8000a40:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a42:	697b      	ldr	r3, [r7, #20]
 8000a44:	3301      	adds	r3, #1
 8000a46:	617b      	str	r3, [r7, #20]
 8000a48:	697a      	ldr	r2, [r7, #20]
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	429a      	cmp	r2, r3
 8000a4e:	dbf0      	blt.n	8000a32 <_read+0x12>
  }

  return len;
 8000a50:	687b      	ldr	r3, [r7, #4]
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	3718      	adds	r7, #24
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}

08000a5a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a5a:	b580      	push	{r7, lr}
 8000a5c:	b086      	sub	sp, #24
 8000a5e:	af00      	add	r7, sp, #0
 8000a60:	60f8      	str	r0, [r7, #12]
 8000a62:	60b9      	str	r1, [r7, #8]
 8000a64:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a66:	2300      	movs	r3, #0
 8000a68:	617b      	str	r3, [r7, #20]
 8000a6a:	e009      	b.n	8000a80 <_write+0x26>
  {
//    __io_putchar(*ptr++);

	  ITM_SendChar(*ptr++);// printf over SWO
 8000a6c:	68bb      	ldr	r3, [r7, #8]
 8000a6e:	1c5a      	adds	r2, r3, #1
 8000a70:	60ba      	str	r2, [r7, #8]
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	4618      	mov	r0, r3
 8000a76:	f7ff ffab 	bl	80009d0 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a7a:	697b      	ldr	r3, [r7, #20]
 8000a7c:	3301      	adds	r3, #1
 8000a7e:	617b      	str	r3, [r7, #20]
 8000a80:	697a      	ldr	r2, [r7, #20]
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	429a      	cmp	r2, r3
 8000a86:	dbf1      	blt.n	8000a6c <_write+0x12>


  }
  return len;
 8000a88:	687b      	ldr	r3, [r7, #4]
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	3718      	adds	r7, #24
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}

08000a92 <_close>:

int _close(int file)
{
 8000a92:	b480      	push	{r7}
 8000a94:	b083      	sub	sp, #12
 8000a96:	af00      	add	r7, sp, #0
 8000a98:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a9a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	370c      	adds	r7, #12
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr

08000aaa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000aaa:	b480      	push	{r7}
 8000aac:	b083      	sub	sp, #12
 8000aae:	af00      	add	r7, sp, #0
 8000ab0:	6078      	str	r0, [r7, #4]
 8000ab2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000aba:	605a      	str	r2, [r3, #4]
  return 0;
 8000abc:	2300      	movs	r3, #0
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	370c      	adds	r7, #12
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr

08000aca <_isatty>:

int _isatty(int file)
{
 8000aca:	b480      	push	{r7}
 8000acc:	b083      	sub	sp, #12
 8000ace:	af00      	add	r7, sp, #0
 8000ad0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ad2:	2301      	movs	r3, #1
}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	370c      	adds	r7, #12
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr

08000ae0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b085      	sub	sp, #20
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	60f8      	str	r0, [r7, #12]
 8000ae8:	60b9      	str	r1, [r7, #8]
 8000aea:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000aec:	2300      	movs	r3, #0
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	3714      	adds	r7, #20
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
	...

08000afc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b086      	sub	sp, #24
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b04:	4a14      	ldr	r2, [pc, #80]	@ (8000b58 <_sbrk+0x5c>)
 8000b06:	4b15      	ldr	r3, [pc, #84]	@ (8000b5c <_sbrk+0x60>)
 8000b08:	1ad3      	subs	r3, r2, r3
 8000b0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b0c:	697b      	ldr	r3, [r7, #20]
 8000b0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b10:	4b13      	ldr	r3, [pc, #76]	@ (8000b60 <_sbrk+0x64>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d102      	bne.n	8000b1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b18:	4b11      	ldr	r3, [pc, #68]	@ (8000b60 <_sbrk+0x64>)
 8000b1a:	4a12      	ldr	r2, [pc, #72]	@ (8000b64 <_sbrk+0x68>)
 8000b1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b1e:	4b10      	ldr	r3, [pc, #64]	@ (8000b60 <_sbrk+0x64>)
 8000b20:	681a      	ldr	r2, [r3, #0]
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	4413      	add	r3, r2
 8000b26:	693a      	ldr	r2, [r7, #16]
 8000b28:	429a      	cmp	r2, r3
 8000b2a:	d207      	bcs.n	8000b3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b2c:	f004 fa68 	bl	8005000 <__errno>
 8000b30:	4603      	mov	r3, r0
 8000b32:	220c      	movs	r2, #12
 8000b34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b36:	f04f 33ff 	mov.w	r3, #4294967295
 8000b3a:	e009      	b.n	8000b50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b3c:	4b08      	ldr	r3, [pc, #32]	@ (8000b60 <_sbrk+0x64>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b42:	4b07      	ldr	r3, [pc, #28]	@ (8000b60 <_sbrk+0x64>)
 8000b44:	681a      	ldr	r2, [r3, #0]
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	4413      	add	r3, r2
 8000b4a:	4a05      	ldr	r2, [pc, #20]	@ (8000b60 <_sbrk+0x64>)
 8000b4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b4e:	68fb      	ldr	r3, [r7, #12]
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	3718      	adds	r7, #24
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	20020000 	.word	0x20020000
 8000b5c:	00000400 	.word	0x00000400
 8000b60:	200000d4 	.word	0x200000d4
 8000b64:	20004c10 	.word	0x20004c10

08000b68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b6c:	4b06      	ldr	r3, [pc, #24]	@ (8000b88 <SystemInit+0x20>)
 8000b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b72:	4a05      	ldr	r2, [pc, #20]	@ (8000b88 <SystemInit+0x20>)
 8000b74:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b78:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b7c:	bf00      	nop
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	e000ed00 	.word	0xe000ed00

08000b8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000b8c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000bc4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000b90:	f7ff ffea 	bl	8000b68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b94:	480c      	ldr	r0, [pc, #48]	@ (8000bc8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b96:	490d      	ldr	r1, [pc, #52]	@ (8000bcc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b98:	4a0d      	ldr	r2, [pc, #52]	@ (8000bd0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b9c:	e002      	b.n	8000ba4 <LoopCopyDataInit>

08000b9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ba0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ba2:	3304      	adds	r3, #4

08000ba4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ba4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ba6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ba8:	d3f9      	bcc.n	8000b9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000baa:	4a0a      	ldr	r2, [pc, #40]	@ (8000bd4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000bac:	4c0a      	ldr	r4, [pc, #40]	@ (8000bd8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bb0:	e001      	b.n	8000bb6 <LoopFillZerobss>

08000bb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bb4:	3204      	adds	r2, #4

08000bb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bb8:	d3fb      	bcc.n	8000bb2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bba:	f004 fa27 	bl	800500c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bbe:	f7ff fc9d 	bl	80004fc <main>
  bx  lr    
 8000bc2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000bc4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bcc:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000bd0:	080055b0 	.word	0x080055b0
  ldr r2, =_sbss
 8000bd4:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000bd8:	20004c10 	.word	0x20004c10

08000bdc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bdc:	e7fe      	b.n	8000bdc <ADC_IRQHandler>
	...

08000be0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000be4:	4b0e      	ldr	r3, [pc, #56]	@ (8000c20 <HAL_Init+0x40>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a0d      	ldr	r2, [pc, #52]	@ (8000c20 <HAL_Init+0x40>)
 8000bea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000bee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bf0:	4b0b      	ldr	r3, [pc, #44]	@ (8000c20 <HAL_Init+0x40>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a0a      	ldr	r2, [pc, #40]	@ (8000c20 <HAL_Init+0x40>)
 8000bf6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000bfa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bfc:	4b08      	ldr	r3, [pc, #32]	@ (8000c20 <HAL_Init+0x40>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a07      	ldr	r2, [pc, #28]	@ (8000c20 <HAL_Init+0x40>)
 8000c02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c08:	2003      	movs	r0, #3
 8000c0a:	f000 f8d8 	bl	8000dbe <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c0e:	200f      	movs	r0, #15
 8000c10:	f7ff fe3c 	bl	800088c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c14:	f7ff fe0e 	bl	8000834 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c18:	2300      	movs	r3, #0
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	40023c00 	.word	0x40023c00

08000c24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c28:	4b06      	ldr	r3, [pc, #24]	@ (8000c44 <HAL_IncTick+0x20>)
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	461a      	mov	r2, r3
 8000c2e:	4b06      	ldr	r3, [pc, #24]	@ (8000c48 <HAL_IncTick+0x24>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	4413      	add	r3, r2
 8000c34:	4a04      	ldr	r2, [pc, #16]	@ (8000c48 <HAL_IncTick+0x24>)
 8000c36:	6013      	str	r3, [r2, #0]
}
 8000c38:	bf00      	nop
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	20000008 	.word	0x20000008
 8000c48:	200000d8 	.word	0x200000d8

08000c4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c50:	4b03      	ldr	r3, [pc, #12]	@ (8000c60 <HAL_GetTick+0x14>)
 8000c52:	681b      	ldr	r3, [r3, #0]
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	200000d8 	.word	0x200000d8

08000c64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b085      	sub	sp, #20
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	f003 0307 	and.w	r3, r3, #7
 8000c72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c74:	4b0c      	ldr	r3, [pc, #48]	@ (8000ca8 <__NVIC_SetPriorityGrouping+0x44>)
 8000c76:	68db      	ldr	r3, [r3, #12]
 8000c78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c7a:	68ba      	ldr	r2, [r7, #8]
 8000c7c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c80:	4013      	ands	r3, r2
 8000c82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c88:	68bb      	ldr	r3, [r7, #8]
 8000c8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c8c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c96:	4a04      	ldr	r2, [pc, #16]	@ (8000ca8 <__NVIC_SetPriorityGrouping+0x44>)
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	60d3      	str	r3, [r2, #12]
}
 8000c9c:	bf00      	nop
 8000c9e:	3714      	adds	r7, #20
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr
 8000ca8:	e000ed00 	.word	0xe000ed00

08000cac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cb0:	4b04      	ldr	r3, [pc, #16]	@ (8000cc4 <__NVIC_GetPriorityGrouping+0x18>)
 8000cb2:	68db      	ldr	r3, [r3, #12]
 8000cb4:	0a1b      	lsrs	r3, r3, #8
 8000cb6:	f003 0307 	and.w	r3, r3, #7
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr
 8000cc4:	e000ed00 	.word	0xe000ed00

08000cc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	4603      	mov	r3, r0
 8000cd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	db0b      	blt.n	8000cf2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cda:	79fb      	ldrb	r3, [r7, #7]
 8000cdc:	f003 021f 	and.w	r2, r3, #31
 8000ce0:	4907      	ldr	r1, [pc, #28]	@ (8000d00 <__NVIC_EnableIRQ+0x38>)
 8000ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce6:	095b      	lsrs	r3, r3, #5
 8000ce8:	2001      	movs	r0, #1
 8000cea:	fa00 f202 	lsl.w	r2, r0, r2
 8000cee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000cf2:	bf00      	nop
 8000cf4:	370c      	adds	r7, #12
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	e000e100 	.word	0xe000e100

08000d04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	6039      	str	r1, [r7, #0]
 8000d0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	db0a      	blt.n	8000d2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	b2da      	uxtb	r2, r3
 8000d1c:	490c      	ldr	r1, [pc, #48]	@ (8000d50 <__NVIC_SetPriority+0x4c>)
 8000d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d22:	0112      	lsls	r2, r2, #4
 8000d24:	b2d2      	uxtb	r2, r2
 8000d26:	440b      	add	r3, r1
 8000d28:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d2c:	e00a      	b.n	8000d44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	b2da      	uxtb	r2, r3
 8000d32:	4908      	ldr	r1, [pc, #32]	@ (8000d54 <__NVIC_SetPriority+0x50>)
 8000d34:	79fb      	ldrb	r3, [r7, #7]
 8000d36:	f003 030f 	and.w	r3, r3, #15
 8000d3a:	3b04      	subs	r3, #4
 8000d3c:	0112      	lsls	r2, r2, #4
 8000d3e:	b2d2      	uxtb	r2, r2
 8000d40:	440b      	add	r3, r1
 8000d42:	761a      	strb	r2, [r3, #24]
}
 8000d44:	bf00      	nop
 8000d46:	370c      	adds	r7, #12
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr
 8000d50:	e000e100 	.word	0xe000e100
 8000d54:	e000ed00 	.word	0xe000ed00

08000d58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b089      	sub	sp, #36	@ 0x24
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	60f8      	str	r0, [r7, #12]
 8000d60:	60b9      	str	r1, [r7, #8]
 8000d62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	f003 0307 	and.w	r3, r3, #7
 8000d6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d6c:	69fb      	ldr	r3, [r7, #28]
 8000d6e:	f1c3 0307 	rsb	r3, r3, #7
 8000d72:	2b04      	cmp	r3, #4
 8000d74:	bf28      	it	cs
 8000d76:	2304      	movcs	r3, #4
 8000d78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	3304      	adds	r3, #4
 8000d7e:	2b06      	cmp	r3, #6
 8000d80:	d902      	bls.n	8000d88 <NVIC_EncodePriority+0x30>
 8000d82:	69fb      	ldr	r3, [r7, #28]
 8000d84:	3b03      	subs	r3, #3
 8000d86:	e000      	b.n	8000d8a <NVIC_EncodePriority+0x32>
 8000d88:	2300      	movs	r3, #0
 8000d8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d8c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d90:	69bb      	ldr	r3, [r7, #24]
 8000d92:	fa02 f303 	lsl.w	r3, r2, r3
 8000d96:	43da      	mvns	r2, r3
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	401a      	ands	r2, r3
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000da0:	f04f 31ff 	mov.w	r1, #4294967295
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	fa01 f303 	lsl.w	r3, r1, r3
 8000daa:	43d9      	mvns	r1, r3
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000db0:	4313      	orrs	r3, r2
         );
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3724      	adds	r7, #36	@ 0x24
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr

08000dbe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dbe:	b580      	push	{r7, lr}
 8000dc0:	b082      	sub	sp, #8
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dc6:	6878      	ldr	r0, [r7, #4]
 8000dc8:	f7ff ff4c 	bl	8000c64 <__NVIC_SetPriorityGrouping>
}
 8000dcc:	bf00      	nop
 8000dce:	3708      	adds	r7, #8
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b086      	sub	sp, #24
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	4603      	mov	r3, r0
 8000ddc:	60b9      	str	r1, [r7, #8]
 8000dde:	607a      	str	r2, [r7, #4]
 8000de0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000de2:	2300      	movs	r3, #0
 8000de4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000de6:	f7ff ff61 	bl	8000cac <__NVIC_GetPriorityGrouping>
 8000dea:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dec:	687a      	ldr	r2, [r7, #4]
 8000dee:	68b9      	ldr	r1, [r7, #8]
 8000df0:	6978      	ldr	r0, [r7, #20]
 8000df2:	f7ff ffb1 	bl	8000d58 <NVIC_EncodePriority>
 8000df6:	4602      	mov	r2, r0
 8000df8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dfc:	4611      	mov	r1, r2
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f7ff ff80 	bl	8000d04 <__NVIC_SetPriority>
}
 8000e04:	bf00      	nop
 8000e06:	3718      	adds	r7, #24
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}

08000e0c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	4603      	mov	r3, r0
 8000e14:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f7ff ff54 	bl	8000cc8 <__NVIC_EnableIRQ>
}
 8000e20:	bf00      	nop
 8000e22:	3708      	adds	r7, #8
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}

08000e28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b089      	sub	sp, #36	@ 0x24
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
 8000e30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e32:	2300      	movs	r3, #0
 8000e34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e36:	2300      	movs	r3, #0
 8000e38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e3e:	2300      	movs	r3, #0
 8000e40:	61fb      	str	r3, [r7, #28]
 8000e42:	e16b      	b.n	800111c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e44:	2201      	movs	r2, #1
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	697a      	ldr	r2, [r7, #20]
 8000e54:	4013      	ands	r3, r2
 8000e56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e58:	693a      	ldr	r2, [r7, #16]
 8000e5a:	697b      	ldr	r3, [r7, #20]
 8000e5c:	429a      	cmp	r2, r3
 8000e5e:	f040 815a 	bne.w	8001116 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	f003 0303 	and.w	r3, r3, #3
 8000e6a:	2b01      	cmp	r3, #1
 8000e6c:	d005      	beq.n	8000e7a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e76:	2b02      	cmp	r3, #2
 8000e78:	d130      	bne.n	8000edc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	689b      	ldr	r3, [r3, #8]
 8000e7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e80:	69fb      	ldr	r3, [r7, #28]
 8000e82:	005b      	lsls	r3, r3, #1
 8000e84:	2203      	movs	r2, #3
 8000e86:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8a:	43db      	mvns	r3, r3
 8000e8c:	69ba      	ldr	r2, [r7, #24]
 8000e8e:	4013      	ands	r3, r2
 8000e90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	68da      	ldr	r2, [r3, #12]
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	005b      	lsls	r3, r3, #1
 8000e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9e:	69ba      	ldr	r2, [r7, #24]
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	69ba      	ldr	r2, [r7, #24]
 8000ea8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb8:	43db      	mvns	r3, r3
 8000eba:	69ba      	ldr	r2, [r7, #24]
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	091b      	lsrs	r3, r3, #4
 8000ec6:	f003 0201 	and.w	r2, r3, #1
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed0:	69ba      	ldr	r2, [r7, #24]
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	69ba      	ldr	r2, [r7, #24]
 8000eda:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	f003 0303 	and.w	r3, r3, #3
 8000ee4:	2b03      	cmp	r3, #3
 8000ee6:	d017      	beq.n	8000f18 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	68db      	ldr	r3, [r3, #12]
 8000eec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	005b      	lsls	r3, r3, #1
 8000ef2:	2203      	movs	r2, #3
 8000ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef8:	43db      	mvns	r3, r3
 8000efa:	69ba      	ldr	r2, [r7, #24]
 8000efc:	4013      	ands	r3, r2
 8000efe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	689a      	ldr	r2, [r3, #8]
 8000f04:	69fb      	ldr	r3, [r7, #28]
 8000f06:	005b      	lsls	r3, r3, #1
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	69ba      	ldr	r2, [r7, #24]
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	69ba      	ldr	r2, [r7, #24]
 8000f16:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	f003 0303 	and.w	r3, r3, #3
 8000f20:	2b02      	cmp	r3, #2
 8000f22:	d123      	bne.n	8000f6c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f24:	69fb      	ldr	r3, [r7, #28]
 8000f26:	08da      	lsrs	r2, r3, #3
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	3208      	adds	r2, #8
 8000f2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f30:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	f003 0307 	and.w	r3, r3, #7
 8000f38:	009b      	lsls	r3, r3, #2
 8000f3a:	220f      	movs	r2, #15
 8000f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f40:	43db      	mvns	r3, r3
 8000f42:	69ba      	ldr	r2, [r7, #24]
 8000f44:	4013      	ands	r3, r2
 8000f46:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	691a      	ldr	r2, [r3, #16]
 8000f4c:	69fb      	ldr	r3, [r7, #28]
 8000f4e:	f003 0307 	and.w	r3, r3, #7
 8000f52:	009b      	lsls	r3, r3, #2
 8000f54:	fa02 f303 	lsl.w	r3, r2, r3
 8000f58:	69ba      	ldr	r2, [r7, #24]
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	08da      	lsrs	r2, r3, #3
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	3208      	adds	r2, #8
 8000f66:	69b9      	ldr	r1, [r7, #24]
 8000f68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	005b      	lsls	r3, r3, #1
 8000f76:	2203      	movs	r2, #3
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	43db      	mvns	r3, r3
 8000f7e:	69ba      	ldr	r2, [r7, #24]
 8000f80:	4013      	ands	r3, r2
 8000f82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	f003 0203 	and.w	r2, r3, #3
 8000f8c:	69fb      	ldr	r3, [r7, #28]
 8000f8e:	005b      	lsls	r3, r3, #1
 8000f90:	fa02 f303 	lsl.w	r3, r2, r3
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	4313      	orrs	r3, r2
 8000f98:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	69ba      	ldr	r2, [r7, #24]
 8000f9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	f000 80b4 	beq.w	8001116 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fae:	2300      	movs	r3, #0
 8000fb0:	60fb      	str	r3, [r7, #12]
 8000fb2:	4b60      	ldr	r3, [pc, #384]	@ (8001134 <HAL_GPIO_Init+0x30c>)
 8000fb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fb6:	4a5f      	ldr	r2, [pc, #380]	@ (8001134 <HAL_GPIO_Init+0x30c>)
 8000fb8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fbc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fbe:	4b5d      	ldr	r3, [pc, #372]	@ (8001134 <HAL_GPIO_Init+0x30c>)
 8000fc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fc2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fc6:	60fb      	str	r3, [r7, #12]
 8000fc8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fca:	4a5b      	ldr	r2, [pc, #364]	@ (8001138 <HAL_GPIO_Init+0x310>)
 8000fcc:	69fb      	ldr	r3, [r7, #28]
 8000fce:	089b      	lsrs	r3, r3, #2
 8000fd0:	3302      	adds	r3, #2
 8000fd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fd8:	69fb      	ldr	r3, [r7, #28]
 8000fda:	f003 0303 	and.w	r3, r3, #3
 8000fde:	009b      	lsls	r3, r3, #2
 8000fe0:	220f      	movs	r2, #15
 8000fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe6:	43db      	mvns	r3, r3
 8000fe8:	69ba      	ldr	r2, [r7, #24]
 8000fea:	4013      	ands	r3, r2
 8000fec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4a52      	ldr	r2, [pc, #328]	@ (800113c <HAL_GPIO_Init+0x314>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d02b      	beq.n	800104e <HAL_GPIO_Init+0x226>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4a51      	ldr	r2, [pc, #324]	@ (8001140 <HAL_GPIO_Init+0x318>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d025      	beq.n	800104a <HAL_GPIO_Init+0x222>
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4a50      	ldr	r2, [pc, #320]	@ (8001144 <HAL_GPIO_Init+0x31c>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d01f      	beq.n	8001046 <HAL_GPIO_Init+0x21e>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4a4f      	ldr	r2, [pc, #316]	@ (8001148 <HAL_GPIO_Init+0x320>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d019      	beq.n	8001042 <HAL_GPIO_Init+0x21a>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4a4e      	ldr	r2, [pc, #312]	@ (800114c <HAL_GPIO_Init+0x324>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d013      	beq.n	800103e <HAL_GPIO_Init+0x216>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4a4d      	ldr	r2, [pc, #308]	@ (8001150 <HAL_GPIO_Init+0x328>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d00d      	beq.n	800103a <HAL_GPIO_Init+0x212>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4a4c      	ldr	r2, [pc, #304]	@ (8001154 <HAL_GPIO_Init+0x32c>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d007      	beq.n	8001036 <HAL_GPIO_Init+0x20e>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4a4b      	ldr	r2, [pc, #300]	@ (8001158 <HAL_GPIO_Init+0x330>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d101      	bne.n	8001032 <HAL_GPIO_Init+0x20a>
 800102e:	2307      	movs	r3, #7
 8001030:	e00e      	b.n	8001050 <HAL_GPIO_Init+0x228>
 8001032:	2308      	movs	r3, #8
 8001034:	e00c      	b.n	8001050 <HAL_GPIO_Init+0x228>
 8001036:	2306      	movs	r3, #6
 8001038:	e00a      	b.n	8001050 <HAL_GPIO_Init+0x228>
 800103a:	2305      	movs	r3, #5
 800103c:	e008      	b.n	8001050 <HAL_GPIO_Init+0x228>
 800103e:	2304      	movs	r3, #4
 8001040:	e006      	b.n	8001050 <HAL_GPIO_Init+0x228>
 8001042:	2303      	movs	r3, #3
 8001044:	e004      	b.n	8001050 <HAL_GPIO_Init+0x228>
 8001046:	2302      	movs	r3, #2
 8001048:	e002      	b.n	8001050 <HAL_GPIO_Init+0x228>
 800104a:	2301      	movs	r3, #1
 800104c:	e000      	b.n	8001050 <HAL_GPIO_Init+0x228>
 800104e:	2300      	movs	r3, #0
 8001050:	69fa      	ldr	r2, [r7, #28]
 8001052:	f002 0203 	and.w	r2, r2, #3
 8001056:	0092      	lsls	r2, r2, #2
 8001058:	4093      	lsls	r3, r2
 800105a:	69ba      	ldr	r2, [r7, #24]
 800105c:	4313      	orrs	r3, r2
 800105e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001060:	4935      	ldr	r1, [pc, #212]	@ (8001138 <HAL_GPIO_Init+0x310>)
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	089b      	lsrs	r3, r3, #2
 8001066:	3302      	adds	r3, #2
 8001068:	69ba      	ldr	r2, [r7, #24]
 800106a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800106e:	4b3b      	ldr	r3, [pc, #236]	@ (800115c <HAL_GPIO_Init+0x334>)
 8001070:	689b      	ldr	r3, [r3, #8]
 8001072:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001074:	693b      	ldr	r3, [r7, #16]
 8001076:	43db      	mvns	r3, r3
 8001078:	69ba      	ldr	r2, [r7, #24]
 800107a:	4013      	ands	r3, r2
 800107c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001086:	2b00      	cmp	r3, #0
 8001088:	d003      	beq.n	8001092 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800108a:	69ba      	ldr	r2, [r7, #24]
 800108c:	693b      	ldr	r3, [r7, #16]
 800108e:	4313      	orrs	r3, r2
 8001090:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001092:	4a32      	ldr	r2, [pc, #200]	@ (800115c <HAL_GPIO_Init+0x334>)
 8001094:	69bb      	ldr	r3, [r7, #24]
 8001096:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001098:	4b30      	ldr	r3, [pc, #192]	@ (800115c <HAL_GPIO_Init+0x334>)
 800109a:	68db      	ldr	r3, [r3, #12]
 800109c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800109e:	693b      	ldr	r3, [r7, #16]
 80010a0:	43db      	mvns	r3, r3
 80010a2:	69ba      	ldr	r2, [r7, #24]
 80010a4:	4013      	ands	r3, r2
 80010a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d003      	beq.n	80010bc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	693b      	ldr	r3, [r7, #16]
 80010b8:	4313      	orrs	r3, r2
 80010ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010bc:	4a27      	ldr	r2, [pc, #156]	@ (800115c <HAL_GPIO_Init+0x334>)
 80010be:	69bb      	ldr	r3, [r7, #24]
 80010c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010c2:	4b26      	ldr	r3, [pc, #152]	@ (800115c <HAL_GPIO_Init+0x334>)
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	43db      	mvns	r3, r3
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	4013      	ands	r3, r2
 80010d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d003      	beq.n	80010e6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80010de:	69ba      	ldr	r2, [r7, #24]
 80010e0:	693b      	ldr	r3, [r7, #16]
 80010e2:	4313      	orrs	r3, r2
 80010e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010e6:	4a1d      	ldr	r2, [pc, #116]	@ (800115c <HAL_GPIO_Init+0x334>)
 80010e8:	69bb      	ldr	r3, [r7, #24]
 80010ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010ec:	4b1b      	ldr	r3, [pc, #108]	@ (800115c <HAL_GPIO_Init+0x334>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	43db      	mvns	r3, r3
 80010f6:	69ba      	ldr	r2, [r7, #24]
 80010f8:	4013      	ands	r3, r2
 80010fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001104:	2b00      	cmp	r3, #0
 8001106:	d003      	beq.n	8001110 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	693b      	ldr	r3, [r7, #16]
 800110c:	4313      	orrs	r3, r2
 800110e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001110:	4a12      	ldr	r2, [pc, #72]	@ (800115c <HAL_GPIO_Init+0x334>)
 8001112:	69bb      	ldr	r3, [r7, #24]
 8001114:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	3301      	adds	r3, #1
 800111a:	61fb      	str	r3, [r7, #28]
 800111c:	69fb      	ldr	r3, [r7, #28]
 800111e:	2b0f      	cmp	r3, #15
 8001120:	f67f ae90 	bls.w	8000e44 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001124:	bf00      	nop
 8001126:	bf00      	nop
 8001128:	3724      	adds	r7, #36	@ 0x24
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	40023800 	.word	0x40023800
 8001138:	40013800 	.word	0x40013800
 800113c:	40020000 	.word	0x40020000
 8001140:	40020400 	.word	0x40020400
 8001144:	40020800 	.word	0x40020800
 8001148:	40020c00 	.word	0x40020c00
 800114c:	40021000 	.word	0x40021000
 8001150:	40021400 	.word	0x40021400
 8001154:	40021800 	.word	0x40021800
 8001158:	40021c00 	.word	0x40021c00
 800115c:	40013c00 	.word	0x40013c00

08001160 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	460b      	mov	r3, r1
 800116a:	807b      	strh	r3, [r7, #2]
 800116c:	4613      	mov	r3, r2
 800116e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001170:	787b      	ldrb	r3, [r7, #1]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d003      	beq.n	800117e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001176:	887a      	ldrh	r2, [r7, #2]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800117c:	e003      	b.n	8001186 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800117e:	887b      	ldrh	r3, [r7, #2]
 8001180:	041a      	lsls	r2, r3, #16
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	619a      	str	r2, [r3, #24]
}
 8001186:	bf00      	nop
 8001188:	370c      	adds	r7, #12
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
	...

08001194 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b086      	sub	sp, #24
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d101      	bne.n	80011a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	e267      	b.n	8001676 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f003 0301 	and.w	r3, r3, #1
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d075      	beq.n	800129e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80011b2:	4b88      	ldr	r3, [pc, #544]	@ (80013d4 <HAL_RCC_OscConfig+0x240>)
 80011b4:	689b      	ldr	r3, [r3, #8]
 80011b6:	f003 030c 	and.w	r3, r3, #12
 80011ba:	2b04      	cmp	r3, #4
 80011bc:	d00c      	beq.n	80011d8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011be:	4b85      	ldr	r3, [pc, #532]	@ (80013d4 <HAL_RCC_OscConfig+0x240>)
 80011c0:	689b      	ldr	r3, [r3, #8]
 80011c2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80011c6:	2b08      	cmp	r3, #8
 80011c8:	d112      	bne.n	80011f0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011ca:	4b82      	ldr	r3, [pc, #520]	@ (80013d4 <HAL_RCC_OscConfig+0x240>)
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80011d2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80011d6:	d10b      	bne.n	80011f0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011d8:	4b7e      	ldr	r3, [pc, #504]	@ (80013d4 <HAL_RCC_OscConfig+0x240>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d05b      	beq.n	800129c <HAL_RCC_OscConfig+0x108>
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d157      	bne.n	800129c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80011ec:	2301      	movs	r3, #1
 80011ee:	e242      	b.n	8001676 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80011f8:	d106      	bne.n	8001208 <HAL_RCC_OscConfig+0x74>
 80011fa:	4b76      	ldr	r3, [pc, #472]	@ (80013d4 <HAL_RCC_OscConfig+0x240>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a75      	ldr	r2, [pc, #468]	@ (80013d4 <HAL_RCC_OscConfig+0x240>)
 8001200:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001204:	6013      	str	r3, [r2, #0]
 8001206:	e01d      	b.n	8001244 <HAL_RCC_OscConfig+0xb0>
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001210:	d10c      	bne.n	800122c <HAL_RCC_OscConfig+0x98>
 8001212:	4b70      	ldr	r3, [pc, #448]	@ (80013d4 <HAL_RCC_OscConfig+0x240>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4a6f      	ldr	r2, [pc, #444]	@ (80013d4 <HAL_RCC_OscConfig+0x240>)
 8001218:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800121c:	6013      	str	r3, [r2, #0]
 800121e:	4b6d      	ldr	r3, [pc, #436]	@ (80013d4 <HAL_RCC_OscConfig+0x240>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4a6c      	ldr	r2, [pc, #432]	@ (80013d4 <HAL_RCC_OscConfig+0x240>)
 8001224:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001228:	6013      	str	r3, [r2, #0]
 800122a:	e00b      	b.n	8001244 <HAL_RCC_OscConfig+0xb0>
 800122c:	4b69      	ldr	r3, [pc, #420]	@ (80013d4 <HAL_RCC_OscConfig+0x240>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a68      	ldr	r2, [pc, #416]	@ (80013d4 <HAL_RCC_OscConfig+0x240>)
 8001232:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001236:	6013      	str	r3, [r2, #0]
 8001238:	4b66      	ldr	r3, [pc, #408]	@ (80013d4 <HAL_RCC_OscConfig+0x240>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a65      	ldr	r2, [pc, #404]	@ (80013d4 <HAL_RCC_OscConfig+0x240>)
 800123e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001242:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d013      	beq.n	8001274 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800124c:	f7ff fcfe 	bl	8000c4c <HAL_GetTick>
 8001250:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001252:	e008      	b.n	8001266 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001254:	f7ff fcfa 	bl	8000c4c <HAL_GetTick>
 8001258:	4602      	mov	r2, r0
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	2b64      	cmp	r3, #100	@ 0x64
 8001260:	d901      	bls.n	8001266 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001262:	2303      	movs	r3, #3
 8001264:	e207      	b.n	8001676 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001266:	4b5b      	ldr	r3, [pc, #364]	@ (80013d4 <HAL_RCC_OscConfig+0x240>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800126e:	2b00      	cmp	r3, #0
 8001270:	d0f0      	beq.n	8001254 <HAL_RCC_OscConfig+0xc0>
 8001272:	e014      	b.n	800129e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001274:	f7ff fcea 	bl	8000c4c <HAL_GetTick>
 8001278:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800127a:	e008      	b.n	800128e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800127c:	f7ff fce6 	bl	8000c4c <HAL_GetTick>
 8001280:	4602      	mov	r2, r0
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	2b64      	cmp	r3, #100	@ 0x64
 8001288:	d901      	bls.n	800128e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800128a:	2303      	movs	r3, #3
 800128c:	e1f3      	b.n	8001676 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800128e:	4b51      	ldr	r3, [pc, #324]	@ (80013d4 <HAL_RCC_OscConfig+0x240>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001296:	2b00      	cmp	r3, #0
 8001298:	d1f0      	bne.n	800127c <HAL_RCC_OscConfig+0xe8>
 800129a:	e000      	b.n	800129e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800129c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f003 0302 	and.w	r3, r3, #2
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d063      	beq.n	8001372 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80012aa:	4b4a      	ldr	r3, [pc, #296]	@ (80013d4 <HAL_RCC_OscConfig+0x240>)
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	f003 030c 	and.w	r3, r3, #12
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d00b      	beq.n	80012ce <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012b6:	4b47      	ldr	r3, [pc, #284]	@ (80013d4 <HAL_RCC_OscConfig+0x240>)
 80012b8:	689b      	ldr	r3, [r3, #8]
 80012ba:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80012be:	2b08      	cmp	r3, #8
 80012c0:	d11c      	bne.n	80012fc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012c2:	4b44      	ldr	r3, [pc, #272]	@ (80013d4 <HAL_RCC_OscConfig+0x240>)
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d116      	bne.n	80012fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012ce:	4b41      	ldr	r3, [pc, #260]	@ (80013d4 <HAL_RCC_OscConfig+0x240>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f003 0302 	and.w	r3, r3, #2
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d005      	beq.n	80012e6 <HAL_RCC_OscConfig+0x152>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	68db      	ldr	r3, [r3, #12]
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d001      	beq.n	80012e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	e1c7      	b.n	8001676 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012e6:	4b3b      	ldr	r3, [pc, #236]	@ (80013d4 <HAL_RCC_OscConfig+0x240>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	691b      	ldr	r3, [r3, #16]
 80012f2:	00db      	lsls	r3, r3, #3
 80012f4:	4937      	ldr	r1, [pc, #220]	@ (80013d4 <HAL_RCC_OscConfig+0x240>)
 80012f6:	4313      	orrs	r3, r2
 80012f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012fa:	e03a      	b.n	8001372 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	68db      	ldr	r3, [r3, #12]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d020      	beq.n	8001346 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001304:	4b34      	ldr	r3, [pc, #208]	@ (80013d8 <HAL_RCC_OscConfig+0x244>)
 8001306:	2201      	movs	r2, #1
 8001308:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800130a:	f7ff fc9f 	bl	8000c4c <HAL_GetTick>
 800130e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001310:	e008      	b.n	8001324 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001312:	f7ff fc9b 	bl	8000c4c <HAL_GetTick>
 8001316:	4602      	mov	r2, r0
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	1ad3      	subs	r3, r2, r3
 800131c:	2b02      	cmp	r3, #2
 800131e:	d901      	bls.n	8001324 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001320:	2303      	movs	r3, #3
 8001322:	e1a8      	b.n	8001676 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001324:	4b2b      	ldr	r3, [pc, #172]	@ (80013d4 <HAL_RCC_OscConfig+0x240>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f003 0302 	and.w	r3, r3, #2
 800132c:	2b00      	cmp	r3, #0
 800132e:	d0f0      	beq.n	8001312 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001330:	4b28      	ldr	r3, [pc, #160]	@ (80013d4 <HAL_RCC_OscConfig+0x240>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	691b      	ldr	r3, [r3, #16]
 800133c:	00db      	lsls	r3, r3, #3
 800133e:	4925      	ldr	r1, [pc, #148]	@ (80013d4 <HAL_RCC_OscConfig+0x240>)
 8001340:	4313      	orrs	r3, r2
 8001342:	600b      	str	r3, [r1, #0]
 8001344:	e015      	b.n	8001372 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001346:	4b24      	ldr	r3, [pc, #144]	@ (80013d8 <HAL_RCC_OscConfig+0x244>)
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800134c:	f7ff fc7e 	bl	8000c4c <HAL_GetTick>
 8001350:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001352:	e008      	b.n	8001366 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001354:	f7ff fc7a 	bl	8000c4c <HAL_GetTick>
 8001358:	4602      	mov	r2, r0
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	2b02      	cmp	r3, #2
 8001360:	d901      	bls.n	8001366 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001362:	2303      	movs	r3, #3
 8001364:	e187      	b.n	8001676 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001366:	4b1b      	ldr	r3, [pc, #108]	@ (80013d4 <HAL_RCC_OscConfig+0x240>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f003 0302 	and.w	r3, r3, #2
 800136e:	2b00      	cmp	r3, #0
 8001370:	d1f0      	bne.n	8001354 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f003 0308 	and.w	r3, r3, #8
 800137a:	2b00      	cmp	r3, #0
 800137c:	d036      	beq.n	80013ec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	695b      	ldr	r3, [r3, #20]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d016      	beq.n	80013b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001386:	4b15      	ldr	r3, [pc, #84]	@ (80013dc <HAL_RCC_OscConfig+0x248>)
 8001388:	2201      	movs	r2, #1
 800138a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800138c:	f7ff fc5e 	bl	8000c4c <HAL_GetTick>
 8001390:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001392:	e008      	b.n	80013a6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001394:	f7ff fc5a 	bl	8000c4c <HAL_GetTick>
 8001398:	4602      	mov	r2, r0
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	2b02      	cmp	r3, #2
 80013a0:	d901      	bls.n	80013a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80013a2:	2303      	movs	r3, #3
 80013a4:	e167      	b.n	8001676 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013a6:	4b0b      	ldr	r3, [pc, #44]	@ (80013d4 <HAL_RCC_OscConfig+0x240>)
 80013a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80013aa:	f003 0302 	and.w	r3, r3, #2
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d0f0      	beq.n	8001394 <HAL_RCC_OscConfig+0x200>
 80013b2:	e01b      	b.n	80013ec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013b4:	4b09      	ldr	r3, [pc, #36]	@ (80013dc <HAL_RCC_OscConfig+0x248>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013ba:	f7ff fc47 	bl	8000c4c <HAL_GetTick>
 80013be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013c0:	e00e      	b.n	80013e0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013c2:	f7ff fc43 	bl	8000c4c <HAL_GetTick>
 80013c6:	4602      	mov	r2, r0
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	1ad3      	subs	r3, r2, r3
 80013cc:	2b02      	cmp	r3, #2
 80013ce:	d907      	bls.n	80013e0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80013d0:	2303      	movs	r3, #3
 80013d2:	e150      	b.n	8001676 <HAL_RCC_OscConfig+0x4e2>
 80013d4:	40023800 	.word	0x40023800
 80013d8:	42470000 	.word	0x42470000
 80013dc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013e0:	4b88      	ldr	r3, [pc, #544]	@ (8001604 <HAL_RCC_OscConfig+0x470>)
 80013e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80013e4:	f003 0302 	and.w	r3, r3, #2
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d1ea      	bne.n	80013c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f003 0304 	and.w	r3, r3, #4
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	f000 8097 	beq.w	8001528 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013fa:	2300      	movs	r3, #0
 80013fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013fe:	4b81      	ldr	r3, [pc, #516]	@ (8001604 <HAL_RCC_OscConfig+0x470>)
 8001400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001402:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001406:	2b00      	cmp	r3, #0
 8001408:	d10f      	bne.n	800142a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800140a:	2300      	movs	r3, #0
 800140c:	60bb      	str	r3, [r7, #8]
 800140e:	4b7d      	ldr	r3, [pc, #500]	@ (8001604 <HAL_RCC_OscConfig+0x470>)
 8001410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001412:	4a7c      	ldr	r2, [pc, #496]	@ (8001604 <HAL_RCC_OscConfig+0x470>)
 8001414:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001418:	6413      	str	r3, [r2, #64]	@ 0x40
 800141a:	4b7a      	ldr	r3, [pc, #488]	@ (8001604 <HAL_RCC_OscConfig+0x470>)
 800141c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800141e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001422:	60bb      	str	r3, [r7, #8]
 8001424:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001426:	2301      	movs	r3, #1
 8001428:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800142a:	4b77      	ldr	r3, [pc, #476]	@ (8001608 <HAL_RCC_OscConfig+0x474>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001432:	2b00      	cmp	r3, #0
 8001434:	d118      	bne.n	8001468 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001436:	4b74      	ldr	r3, [pc, #464]	@ (8001608 <HAL_RCC_OscConfig+0x474>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a73      	ldr	r2, [pc, #460]	@ (8001608 <HAL_RCC_OscConfig+0x474>)
 800143c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001440:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001442:	f7ff fc03 	bl	8000c4c <HAL_GetTick>
 8001446:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001448:	e008      	b.n	800145c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800144a:	f7ff fbff 	bl	8000c4c <HAL_GetTick>
 800144e:	4602      	mov	r2, r0
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	1ad3      	subs	r3, r2, r3
 8001454:	2b02      	cmp	r3, #2
 8001456:	d901      	bls.n	800145c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001458:	2303      	movs	r3, #3
 800145a:	e10c      	b.n	8001676 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800145c:	4b6a      	ldr	r3, [pc, #424]	@ (8001608 <HAL_RCC_OscConfig+0x474>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001464:	2b00      	cmp	r3, #0
 8001466:	d0f0      	beq.n	800144a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	2b01      	cmp	r3, #1
 800146e:	d106      	bne.n	800147e <HAL_RCC_OscConfig+0x2ea>
 8001470:	4b64      	ldr	r3, [pc, #400]	@ (8001604 <HAL_RCC_OscConfig+0x470>)
 8001472:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001474:	4a63      	ldr	r2, [pc, #396]	@ (8001604 <HAL_RCC_OscConfig+0x470>)
 8001476:	f043 0301 	orr.w	r3, r3, #1
 800147a:	6713      	str	r3, [r2, #112]	@ 0x70
 800147c:	e01c      	b.n	80014b8 <HAL_RCC_OscConfig+0x324>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	2b05      	cmp	r3, #5
 8001484:	d10c      	bne.n	80014a0 <HAL_RCC_OscConfig+0x30c>
 8001486:	4b5f      	ldr	r3, [pc, #380]	@ (8001604 <HAL_RCC_OscConfig+0x470>)
 8001488:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800148a:	4a5e      	ldr	r2, [pc, #376]	@ (8001604 <HAL_RCC_OscConfig+0x470>)
 800148c:	f043 0304 	orr.w	r3, r3, #4
 8001490:	6713      	str	r3, [r2, #112]	@ 0x70
 8001492:	4b5c      	ldr	r3, [pc, #368]	@ (8001604 <HAL_RCC_OscConfig+0x470>)
 8001494:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001496:	4a5b      	ldr	r2, [pc, #364]	@ (8001604 <HAL_RCC_OscConfig+0x470>)
 8001498:	f043 0301 	orr.w	r3, r3, #1
 800149c:	6713      	str	r3, [r2, #112]	@ 0x70
 800149e:	e00b      	b.n	80014b8 <HAL_RCC_OscConfig+0x324>
 80014a0:	4b58      	ldr	r3, [pc, #352]	@ (8001604 <HAL_RCC_OscConfig+0x470>)
 80014a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014a4:	4a57      	ldr	r2, [pc, #348]	@ (8001604 <HAL_RCC_OscConfig+0x470>)
 80014a6:	f023 0301 	bic.w	r3, r3, #1
 80014aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80014ac:	4b55      	ldr	r3, [pc, #340]	@ (8001604 <HAL_RCC_OscConfig+0x470>)
 80014ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014b0:	4a54      	ldr	r2, [pc, #336]	@ (8001604 <HAL_RCC_OscConfig+0x470>)
 80014b2:	f023 0304 	bic.w	r3, r3, #4
 80014b6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d015      	beq.n	80014ec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014c0:	f7ff fbc4 	bl	8000c4c <HAL_GetTick>
 80014c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014c6:	e00a      	b.n	80014de <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014c8:	f7ff fbc0 	bl	8000c4c <HAL_GetTick>
 80014cc:	4602      	mov	r2, r0
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d901      	bls.n	80014de <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80014da:	2303      	movs	r3, #3
 80014dc:	e0cb      	b.n	8001676 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014de:	4b49      	ldr	r3, [pc, #292]	@ (8001604 <HAL_RCC_OscConfig+0x470>)
 80014e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014e2:	f003 0302 	and.w	r3, r3, #2
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d0ee      	beq.n	80014c8 <HAL_RCC_OscConfig+0x334>
 80014ea:	e014      	b.n	8001516 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ec:	f7ff fbae 	bl	8000c4c <HAL_GetTick>
 80014f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014f2:	e00a      	b.n	800150a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014f4:	f7ff fbaa 	bl	8000c4c <HAL_GetTick>
 80014f8:	4602      	mov	r2, r0
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001502:	4293      	cmp	r3, r2
 8001504:	d901      	bls.n	800150a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001506:	2303      	movs	r3, #3
 8001508:	e0b5      	b.n	8001676 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800150a:	4b3e      	ldr	r3, [pc, #248]	@ (8001604 <HAL_RCC_OscConfig+0x470>)
 800150c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800150e:	f003 0302 	and.w	r3, r3, #2
 8001512:	2b00      	cmp	r3, #0
 8001514:	d1ee      	bne.n	80014f4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001516:	7dfb      	ldrb	r3, [r7, #23]
 8001518:	2b01      	cmp	r3, #1
 800151a:	d105      	bne.n	8001528 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800151c:	4b39      	ldr	r3, [pc, #228]	@ (8001604 <HAL_RCC_OscConfig+0x470>)
 800151e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001520:	4a38      	ldr	r2, [pc, #224]	@ (8001604 <HAL_RCC_OscConfig+0x470>)
 8001522:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001526:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	699b      	ldr	r3, [r3, #24]
 800152c:	2b00      	cmp	r3, #0
 800152e:	f000 80a1 	beq.w	8001674 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001532:	4b34      	ldr	r3, [pc, #208]	@ (8001604 <HAL_RCC_OscConfig+0x470>)
 8001534:	689b      	ldr	r3, [r3, #8]
 8001536:	f003 030c 	and.w	r3, r3, #12
 800153a:	2b08      	cmp	r3, #8
 800153c:	d05c      	beq.n	80015f8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	699b      	ldr	r3, [r3, #24]
 8001542:	2b02      	cmp	r3, #2
 8001544:	d141      	bne.n	80015ca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001546:	4b31      	ldr	r3, [pc, #196]	@ (800160c <HAL_RCC_OscConfig+0x478>)
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800154c:	f7ff fb7e 	bl	8000c4c <HAL_GetTick>
 8001550:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001552:	e008      	b.n	8001566 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001554:	f7ff fb7a 	bl	8000c4c <HAL_GetTick>
 8001558:	4602      	mov	r2, r0
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	2b02      	cmp	r3, #2
 8001560:	d901      	bls.n	8001566 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001562:	2303      	movs	r3, #3
 8001564:	e087      	b.n	8001676 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001566:	4b27      	ldr	r3, [pc, #156]	@ (8001604 <HAL_RCC_OscConfig+0x470>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800156e:	2b00      	cmp	r3, #0
 8001570:	d1f0      	bne.n	8001554 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	69da      	ldr	r2, [r3, #28]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6a1b      	ldr	r3, [r3, #32]
 800157a:	431a      	orrs	r2, r3
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001580:	019b      	lsls	r3, r3, #6
 8001582:	431a      	orrs	r2, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001588:	085b      	lsrs	r3, r3, #1
 800158a:	3b01      	subs	r3, #1
 800158c:	041b      	lsls	r3, r3, #16
 800158e:	431a      	orrs	r2, r3
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001594:	061b      	lsls	r3, r3, #24
 8001596:	491b      	ldr	r1, [pc, #108]	@ (8001604 <HAL_RCC_OscConfig+0x470>)
 8001598:	4313      	orrs	r3, r2
 800159a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800159c:	4b1b      	ldr	r3, [pc, #108]	@ (800160c <HAL_RCC_OscConfig+0x478>)
 800159e:	2201      	movs	r2, #1
 80015a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015a2:	f7ff fb53 	bl	8000c4c <HAL_GetTick>
 80015a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015a8:	e008      	b.n	80015bc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015aa:	f7ff fb4f 	bl	8000c4c <HAL_GetTick>
 80015ae:	4602      	mov	r2, r0
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	1ad3      	subs	r3, r2, r3
 80015b4:	2b02      	cmp	r3, #2
 80015b6:	d901      	bls.n	80015bc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80015b8:	2303      	movs	r3, #3
 80015ba:	e05c      	b.n	8001676 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015bc:	4b11      	ldr	r3, [pc, #68]	@ (8001604 <HAL_RCC_OscConfig+0x470>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d0f0      	beq.n	80015aa <HAL_RCC_OscConfig+0x416>
 80015c8:	e054      	b.n	8001674 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015ca:	4b10      	ldr	r3, [pc, #64]	@ (800160c <HAL_RCC_OscConfig+0x478>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015d0:	f7ff fb3c 	bl	8000c4c <HAL_GetTick>
 80015d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015d6:	e008      	b.n	80015ea <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015d8:	f7ff fb38 	bl	8000c4c <HAL_GetTick>
 80015dc:	4602      	mov	r2, r0
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	2b02      	cmp	r3, #2
 80015e4:	d901      	bls.n	80015ea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80015e6:	2303      	movs	r3, #3
 80015e8:	e045      	b.n	8001676 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015ea:	4b06      	ldr	r3, [pc, #24]	@ (8001604 <HAL_RCC_OscConfig+0x470>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d1f0      	bne.n	80015d8 <HAL_RCC_OscConfig+0x444>
 80015f6:	e03d      	b.n	8001674 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	699b      	ldr	r3, [r3, #24]
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d107      	bne.n	8001610 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	e038      	b.n	8001676 <HAL_RCC_OscConfig+0x4e2>
 8001604:	40023800 	.word	0x40023800
 8001608:	40007000 	.word	0x40007000
 800160c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001610:	4b1b      	ldr	r3, [pc, #108]	@ (8001680 <HAL_RCC_OscConfig+0x4ec>)
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	699b      	ldr	r3, [r3, #24]
 800161a:	2b01      	cmp	r3, #1
 800161c:	d028      	beq.n	8001670 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001628:	429a      	cmp	r2, r3
 800162a:	d121      	bne.n	8001670 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001636:	429a      	cmp	r2, r3
 8001638:	d11a      	bne.n	8001670 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800163a:	68fa      	ldr	r2, [r7, #12]
 800163c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001640:	4013      	ands	r3, r2
 8001642:	687a      	ldr	r2, [r7, #4]
 8001644:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001646:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001648:	4293      	cmp	r3, r2
 800164a:	d111      	bne.n	8001670 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001656:	085b      	lsrs	r3, r3, #1
 8001658:	3b01      	subs	r3, #1
 800165a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800165c:	429a      	cmp	r2, r3
 800165e:	d107      	bne.n	8001670 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800166a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800166c:	429a      	cmp	r2, r3
 800166e:	d001      	beq.n	8001674 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001670:	2301      	movs	r3, #1
 8001672:	e000      	b.n	8001676 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001674:	2300      	movs	r3, #0
}
 8001676:	4618      	mov	r0, r3
 8001678:	3718      	adds	r7, #24
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	40023800 	.word	0x40023800

08001684 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
 800168c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d101      	bne.n	8001698 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001694:	2301      	movs	r3, #1
 8001696:	e0cc      	b.n	8001832 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001698:	4b68      	ldr	r3, [pc, #416]	@ (800183c <HAL_RCC_ClockConfig+0x1b8>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 0307 	and.w	r3, r3, #7
 80016a0:	683a      	ldr	r2, [r7, #0]
 80016a2:	429a      	cmp	r2, r3
 80016a4:	d90c      	bls.n	80016c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016a6:	4b65      	ldr	r3, [pc, #404]	@ (800183c <HAL_RCC_ClockConfig+0x1b8>)
 80016a8:	683a      	ldr	r2, [r7, #0]
 80016aa:	b2d2      	uxtb	r2, r2
 80016ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016ae:	4b63      	ldr	r3, [pc, #396]	@ (800183c <HAL_RCC_ClockConfig+0x1b8>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f003 0307 	and.w	r3, r3, #7
 80016b6:	683a      	ldr	r2, [r7, #0]
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d001      	beq.n	80016c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80016bc:	2301      	movs	r3, #1
 80016be:	e0b8      	b.n	8001832 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f003 0302 	and.w	r3, r3, #2
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d020      	beq.n	800170e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 0304 	and.w	r3, r3, #4
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d005      	beq.n	80016e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016d8:	4b59      	ldr	r3, [pc, #356]	@ (8001840 <HAL_RCC_ClockConfig+0x1bc>)
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	4a58      	ldr	r2, [pc, #352]	@ (8001840 <HAL_RCC_ClockConfig+0x1bc>)
 80016de:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80016e2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f003 0308 	and.w	r3, r3, #8
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d005      	beq.n	80016fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016f0:	4b53      	ldr	r3, [pc, #332]	@ (8001840 <HAL_RCC_ClockConfig+0x1bc>)
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	4a52      	ldr	r2, [pc, #328]	@ (8001840 <HAL_RCC_ClockConfig+0x1bc>)
 80016f6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80016fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016fc:	4b50      	ldr	r3, [pc, #320]	@ (8001840 <HAL_RCC_ClockConfig+0x1bc>)
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	494d      	ldr	r1, [pc, #308]	@ (8001840 <HAL_RCC_ClockConfig+0x1bc>)
 800170a:	4313      	orrs	r3, r2
 800170c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 0301 	and.w	r3, r3, #1
 8001716:	2b00      	cmp	r3, #0
 8001718:	d044      	beq.n	80017a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	2b01      	cmp	r3, #1
 8001720:	d107      	bne.n	8001732 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001722:	4b47      	ldr	r3, [pc, #284]	@ (8001840 <HAL_RCC_ClockConfig+0x1bc>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800172a:	2b00      	cmp	r3, #0
 800172c:	d119      	bne.n	8001762 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e07f      	b.n	8001832 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	2b02      	cmp	r3, #2
 8001738:	d003      	beq.n	8001742 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800173e:	2b03      	cmp	r3, #3
 8001740:	d107      	bne.n	8001752 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001742:	4b3f      	ldr	r3, [pc, #252]	@ (8001840 <HAL_RCC_ClockConfig+0x1bc>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800174a:	2b00      	cmp	r3, #0
 800174c:	d109      	bne.n	8001762 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e06f      	b.n	8001832 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001752:	4b3b      	ldr	r3, [pc, #236]	@ (8001840 <HAL_RCC_ClockConfig+0x1bc>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 0302 	and.w	r3, r3, #2
 800175a:	2b00      	cmp	r3, #0
 800175c:	d101      	bne.n	8001762 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e067      	b.n	8001832 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001762:	4b37      	ldr	r3, [pc, #220]	@ (8001840 <HAL_RCC_ClockConfig+0x1bc>)
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	f023 0203 	bic.w	r2, r3, #3
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	4934      	ldr	r1, [pc, #208]	@ (8001840 <HAL_RCC_ClockConfig+0x1bc>)
 8001770:	4313      	orrs	r3, r2
 8001772:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001774:	f7ff fa6a 	bl	8000c4c <HAL_GetTick>
 8001778:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800177a:	e00a      	b.n	8001792 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800177c:	f7ff fa66 	bl	8000c4c <HAL_GetTick>
 8001780:	4602      	mov	r2, r0
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	f241 3288 	movw	r2, #5000	@ 0x1388
 800178a:	4293      	cmp	r3, r2
 800178c:	d901      	bls.n	8001792 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800178e:	2303      	movs	r3, #3
 8001790:	e04f      	b.n	8001832 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001792:	4b2b      	ldr	r3, [pc, #172]	@ (8001840 <HAL_RCC_ClockConfig+0x1bc>)
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	f003 020c 	and.w	r2, r3, #12
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d1eb      	bne.n	800177c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80017a4:	4b25      	ldr	r3, [pc, #148]	@ (800183c <HAL_RCC_ClockConfig+0x1b8>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 0307 	and.w	r3, r3, #7
 80017ac:	683a      	ldr	r2, [r7, #0]
 80017ae:	429a      	cmp	r2, r3
 80017b0:	d20c      	bcs.n	80017cc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017b2:	4b22      	ldr	r3, [pc, #136]	@ (800183c <HAL_RCC_ClockConfig+0x1b8>)
 80017b4:	683a      	ldr	r2, [r7, #0]
 80017b6:	b2d2      	uxtb	r2, r2
 80017b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017ba:	4b20      	ldr	r3, [pc, #128]	@ (800183c <HAL_RCC_ClockConfig+0x1b8>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 0307 	and.w	r3, r3, #7
 80017c2:	683a      	ldr	r2, [r7, #0]
 80017c4:	429a      	cmp	r2, r3
 80017c6:	d001      	beq.n	80017cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80017c8:	2301      	movs	r3, #1
 80017ca:	e032      	b.n	8001832 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f003 0304 	and.w	r3, r3, #4
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d008      	beq.n	80017ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017d8:	4b19      	ldr	r3, [pc, #100]	@ (8001840 <HAL_RCC_ClockConfig+0x1bc>)
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	4916      	ldr	r1, [pc, #88]	@ (8001840 <HAL_RCC_ClockConfig+0x1bc>)
 80017e6:	4313      	orrs	r3, r2
 80017e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 0308 	and.w	r3, r3, #8
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d009      	beq.n	800180a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017f6:	4b12      	ldr	r3, [pc, #72]	@ (8001840 <HAL_RCC_ClockConfig+0x1bc>)
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	691b      	ldr	r3, [r3, #16]
 8001802:	00db      	lsls	r3, r3, #3
 8001804:	490e      	ldr	r1, [pc, #56]	@ (8001840 <HAL_RCC_ClockConfig+0x1bc>)
 8001806:	4313      	orrs	r3, r2
 8001808:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800180a:	f000 f821 	bl	8001850 <HAL_RCC_GetSysClockFreq>
 800180e:	4602      	mov	r2, r0
 8001810:	4b0b      	ldr	r3, [pc, #44]	@ (8001840 <HAL_RCC_ClockConfig+0x1bc>)
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	091b      	lsrs	r3, r3, #4
 8001816:	f003 030f 	and.w	r3, r3, #15
 800181a:	490a      	ldr	r1, [pc, #40]	@ (8001844 <HAL_RCC_ClockConfig+0x1c0>)
 800181c:	5ccb      	ldrb	r3, [r1, r3]
 800181e:	fa22 f303 	lsr.w	r3, r2, r3
 8001822:	4a09      	ldr	r2, [pc, #36]	@ (8001848 <HAL_RCC_ClockConfig+0x1c4>)
 8001824:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001826:	4b09      	ldr	r3, [pc, #36]	@ (800184c <HAL_RCC_ClockConfig+0x1c8>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4618      	mov	r0, r3
 800182c:	f7ff f82e 	bl	800088c <HAL_InitTick>

  return HAL_OK;
 8001830:	2300      	movs	r3, #0
}
 8001832:	4618      	mov	r0, r3
 8001834:	3710      	adds	r7, #16
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	40023c00 	.word	0x40023c00
 8001840:	40023800 	.word	0x40023800
 8001844:	08005588 	.word	0x08005588
 8001848:	20000000 	.word	0x20000000
 800184c:	20000004 	.word	0x20000004

08001850 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001850:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001854:	b090      	sub	sp, #64	@ 0x40
 8001856:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001858:	2300      	movs	r3, #0
 800185a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800185c:	2300      	movs	r3, #0
 800185e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8001860:	2300      	movs	r3, #0
 8001862:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001864:	2300      	movs	r3, #0
 8001866:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001868:	4b59      	ldr	r3, [pc, #356]	@ (80019d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	f003 030c 	and.w	r3, r3, #12
 8001870:	2b08      	cmp	r3, #8
 8001872:	d00d      	beq.n	8001890 <HAL_RCC_GetSysClockFreq+0x40>
 8001874:	2b08      	cmp	r3, #8
 8001876:	f200 80a1 	bhi.w	80019bc <HAL_RCC_GetSysClockFreq+0x16c>
 800187a:	2b00      	cmp	r3, #0
 800187c:	d002      	beq.n	8001884 <HAL_RCC_GetSysClockFreq+0x34>
 800187e:	2b04      	cmp	r3, #4
 8001880:	d003      	beq.n	800188a <HAL_RCC_GetSysClockFreq+0x3a>
 8001882:	e09b      	b.n	80019bc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001884:	4b53      	ldr	r3, [pc, #332]	@ (80019d4 <HAL_RCC_GetSysClockFreq+0x184>)
 8001886:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001888:	e09b      	b.n	80019c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800188a:	4b53      	ldr	r3, [pc, #332]	@ (80019d8 <HAL_RCC_GetSysClockFreq+0x188>)
 800188c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800188e:	e098      	b.n	80019c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001890:	4b4f      	ldr	r3, [pc, #316]	@ (80019d0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001898:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800189a:	4b4d      	ldr	r3, [pc, #308]	@ (80019d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d028      	beq.n	80018f8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018a6:	4b4a      	ldr	r3, [pc, #296]	@ (80019d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	099b      	lsrs	r3, r3, #6
 80018ac:	2200      	movs	r2, #0
 80018ae:	623b      	str	r3, [r7, #32]
 80018b0:	627a      	str	r2, [r7, #36]	@ 0x24
 80018b2:	6a3b      	ldr	r3, [r7, #32]
 80018b4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80018b8:	2100      	movs	r1, #0
 80018ba:	4b47      	ldr	r3, [pc, #284]	@ (80019d8 <HAL_RCC_GetSysClockFreq+0x188>)
 80018bc:	fb03 f201 	mul.w	r2, r3, r1
 80018c0:	2300      	movs	r3, #0
 80018c2:	fb00 f303 	mul.w	r3, r0, r3
 80018c6:	4413      	add	r3, r2
 80018c8:	4a43      	ldr	r2, [pc, #268]	@ (80019d8 <HAL_RCC_GetSysClockFreq+0x188>)
 80018ca:	fba0 1202 	umull	r1, r2, r0, r2
 80018ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80018d0:	460a      	mov	r2, r1
 80018d2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80018d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80018d6:	4413      	add	r3, r2
 80018d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80018da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80018dc:	2200      	movs	r2, #0
 80018de:	61bb      	str	r3, [r7, #24]
 80018e0:	61fa      	str	r2, [r7, #28]
 80018e2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80018e6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80018ea:	f7fe fc71 	bl	80001d0 <__aeabi_uldivmod>
 80018ee:	4602      	mov	r2, r0
 80018f0:	460b      	mov	r3, r1
 80018f2:	4613      	mov	r3, r2
 80018f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80018f6:	e053      	b.n	80019a0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018f8:	4b35      	ldr	r3, [pc, #212]	@ (80019d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	099b      	lsrs	r3, r3, #6
 80018fe:	2200      	movs	r2, #0
 8001900:	613b      	str	r3, [r7, #16]
 8001902:	617a      	str	r2, [r7, #20]
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800190a:	f04f 0b00 	mov.w	fp, #0
 800190e:	4652      	mov	r2, sl
 8001910:	465b      	mov	r3, fp
 8001912:	f04f 0000 	mov.w	r0, #0
 8001916:	f04f 0100 	mov.w	r1, #0
 800191a:	0159      	lsls	r1, r3, #5
 800191c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001920:	0150      	lsls	r0, r2, #5
 8001922:	4602      	mov	r2, r0
 8001924:	460b      	mov	r3, r1
 8001926:	ebb2 080a 	subs.w	r8, r2, sl
 800192a:	eb63 090b 	sbc.w	r9, r3, fp
 800192e:	f04f 0200 	mov.w	r2, #0
 8001932:	f04f 0300 	mov.w	r3, #0
 8001936:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800193a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800193e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001942:	ebb2 0408 	subs.w	r4, r2, r8
 8001946:	eb63 0509 	sbc.w	r5, r3, r9
 800194a:	f04f 0200 	mov.w	r2, #0
 800194e:	f04f 0300 	mov.w	r3, #0
 8001952:	00eb      	lsls	r3, r5, #3
 8001954:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001958:	00e2      	lsls	r2, r4, #3
 800195a:	4614      	mov	r4, r2
 800195c:	461d      	mov	r5, r3
 800195e:	eb14 030a 	adds.w	r3, r4, sl
 8001962:	603b      	str	r3, [r7, #0]
 8001964:	eb45 030b 	adc.w	r3, r5, fp
 8001968:	607b      	str	r3, [r7, #4]
 800196a:	f04f 0200 	mov.w	r2, #0
 800196e:	f04f 0300 	mov.w	r3, #0
 8001972:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001976:	4629      	mov	r1, r5
 8001978:	028b      	lsls	r3, r1, #10
 800197a:	4621      	mov	r1, r4
 800197c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001980:	4621      	mov	r1, r4
 8001982:	028a      	lsls	r2, r1, #10
 8001984:	4610      	mov	r0, r2
 8001986:	4619      	mov	r1, r3
 8001988:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800198a:	2200      	movs	r2, #0
 800198c:	60bb      	str	r3, [r7, #8]
 800198e:	60fa      	str	r2, [r7, #12]
 8001990:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001994:	f7fe fc1c 	bl	80001d0 <__aeabi_uldivmod>
 8001998:	4602      	mov	r2, r0
 800199a:	460b      	mov	r3, r1
 800199c:	4613      	mov	r3, r2
 800199e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80019a0:	4b0b      	ldr	r3, [pc, #44]	@ (80019d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	0c1b      	lsrs	r3, r3, #16
 80019a6:	f003 0303 	and.w	r3, r3, #3
 80019aa:	3301      	adds	r3, #1
 80019ac:	005b      	lsls	r3, r3, #1
 80019ae:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80019b0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80019b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80019b8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80019ba:	e002      	b.n	80019c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80019bc:	4b05      	ldr	r3, [pc, #20]	@ (80019d4 <HAL_RCC_GetSysClockFreq+0x184>)
 80019be:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80019c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3740      	adds	r7, #64	@ 0x40
 80019c8:	46bd      	mov	sp, r7
 80019ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80019ce:	bf00      	nop
 80019d0:	40023800 	.word	0x40023800
 80019d4:	00f42400 	.word	0x00f42400
 80019d8:	017d7840 	.word	0x017d7840

080019dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019e0:	4b03      	ldr	r3, [pc, #12]	@ (80019f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80019e2:	681b      	ldr	r3, [r3, #0]
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	20000000 	.word	0x20000000

080019f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80019f8:	f7ff fff0 	bl	80019dc <HAL_RCC_GetHCLKFreq>
 80019fc:	4602      	mov	r2, r0
 80019fe:	4b05      	ldr	r3, [pc, #20]	@ (8001a14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	0a9b      	lsrs	r3, r3, #10
 8001a04:	f003 0307 	and.w	r3, r3, #7
 8001a08:	4903      	ldr	r1, [pc, #12]	@ (8001a18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a0a:	5ccb      	ldrb	r3, [r1, r3]
 8001a0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	40023800 	.word	0x40023800
 8001a18:	08005598 	.word	0x08005598

08001a1c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	220f      	movs	r2, #15
 8001a2a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001a2c:	4b12      	ldr	r3, [pc, #72]	@ (8001a78 <HAL_RCC_GetClockConfig+0x5c>)
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	f003 0203 	and.w	r2, r3, #3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001a38:	4b0f      	ldr	r3, [pc, #60]	@ (8001a78 <HAL_RCC_GetClockConfig+0x5c>)
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001a44:	4b0c      	ldr	r3, [pc, #48]	@ (8001a78 <HAL_RCC_GetClockConfig+0x5c>)
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001a50:	4b09      	ldr	r3, [pc, #36]	@ (8001a78 <HAL_RCC_GetClockConfig+0x5c>)
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	08db      	lsrs	r3, r3, #3
 8001a56:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001a5e:	4b07      	ldr	r3, [pc, #28]	@ (8001a7c <HAL_RCC_GetClockConfig+0x60>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 0207 	and.w	r2, r3, #7
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	601a      	str	r2, [r3, #0]
}
 8001a6a:	bf00      	nop
 8001a6c:	370c      	adds	r7, #12
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	40023800 	.word	0x40023800
 8001a7c:	40023c00 	.word	0x40023c00

08001a80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d101      	bne.n	8001a92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e041      	b.n	8001b16 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d106      	bne.n	8001aac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f000 f839 	bl	8001b1e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2202      	movs	r2, #2
 8001ab0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	3304      	adds	r3, #4
 8001abc:	4619      	mov	r1, r3
 8001abe:	4610      	mov	r0, r2
 8001ac0:	f000 f9c0 	bl	8001e44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2201      	movs	r2, #1
 8001ad0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2201      	movs	r2, #1
 8001ae0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2201      	movs	r2, #1
 8001af0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2201      	movs	r2, #1
 8001af8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2201      	movs	r2, #1
 8001b00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2201      	movs	r2, #1
 8001b08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2201      	movs	r2, #1
 8001b10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001b14:	2300      	movs	r3, #0
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}

08001b1e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	b083      	sub	sp, #12
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001b26:	bf00      	nop
 8001b28:	370c      	adds	r7, #12
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
	...

08001b34 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b085      	sub	sp, #20
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d001      	beq.n	8001b4c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e04e      	b.n	8001bea <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2202      	movs	r2, #2
 8001b50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	68da      	ldr	r2, [r3, #12]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f042 0201 	orr.w	r2, r2, #1
 8001b62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a23      	ldr	r2, [pc, #140]	@ (8001bf8 <HAL_TIM_Base_Start_IT+0xc4>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d022      	beq.n	8001bb4 <HAL_TIM_Base_Start_IT+0x80>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b76:	d01d      	beq.n	8001bb4 <HAL_TIM_Base_Start_IT+0x80>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a1f      	ldr	r2, [pc, #124]	@ (8001bfc <HAL_TIM_Base_Start_IT+0xc8>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d018      	beq.n	8001bb4 <HAL_TIM_Base_Start_IT+0x80>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a1e      	ldr	r2, [pc, #120]	@ (8001c00 <HAL_TIM_Base_Start_IT+0xcc>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d013      	beq.n	8001bb4 <HAL_TIM_Base_Start_IT+0x80>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a1c      	ldr	r2, [pc, #112]	@ (8001c04 <HAL_TIM_Base_Start_IT+0xd0>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d00e      	beq.n	8001bb4 <HAL_TIM_Base_Start_IT+0x80>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a1b      	ldr	r2, [pc, #108]	@ (8001c08 <HAL_TIM_Base_Start_IT+0xd4>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d009      	beq.n	8001bb4 <HAL_TIM_Base_Start_IT+0x80>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a19      	ldr	r2, [pc, #100]	@ (8001c0c <HAL_TIM_Base_Start_IT+0xd8>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d004      	beq.n	8001bb4 <HAL_TIM_Base_Start_IT+0x80>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a18      	ldr	r2, [pc, #96]	@ (8001c10 <HAL_TIM_Base_Start_IT+0xdc>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d111      	bne.n	8001bd8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	f003 0307 	and.w	r3, r3, #7
 8001bbe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	2b06      	cmp	r3, #6
 8001bc4:	d010      	beq.n	8001be8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f042 0201 	orr.w	r2, r2, #1
 8001bd4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bd6:	e007      	b.n	8001be8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f042 0201 	orr.w	r2, r2, #1
 8001be6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001be8:	2300      	movs	r3, #0
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3714      	adds	r7, #20
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	40010000 	.word	0x40010000
 8001bfc:	40000400 	.word	0x40000400
 8001c00:	40000800 	.word	0x40000800
 8001c04:	40000c00 	.word	0x40000c00
 8001c08:	40010400 	.word	0x40010400
 8001c0c:	40014000 	.word	0x40014000
 8001c10:	40001800 	.word	0x40001800

08001c14 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b084      	sub	sp, #16
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	68db      	ldr	r3, [r3, #12]
 8001c22:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	691b      	ldr	r3, [r3, #16]
 8001c2a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	f003 0302 	and.w	r3, r3, #2
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d020      	beq.n	8001c78 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	f003 0302 	and.w	r3, r3, #2
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d01b      	beq.n	8001c78 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f06f 0202 	mvn.w	r2, #2
 8001c48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	699b      	ldr	r3, [r3, #24]
 8001c56:	f003 0303 	and.w	r3, r3, #3
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d003      	beq.n	8001c66 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f000 f8d2 	bl	8001e08 <HAL_TIM_IC_CaptureCallback>
 8001c64:	e005      	b.n	8001c72 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f000 f8c4 	bl	8001df4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c6c:	6878      	ldr	r0, [r7, #4]
 8001c6e:	f000 f8d5 	bl	8001e1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2200      	movs	r2, #0
 8001c76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	f003 0304 	and.w	r3, r3, #4
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d020      	beq.n	8001cc4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	f003 0304 	and.w	r3, r3, #4
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d01b      	beq.n	8001cc4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f06f 0204 	mvn.w	r2, #4
 8001c94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2202      	movs	r2, #2
 8001c9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	699b      	ldr	r3, [r3, #24]
 8001ca2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d003      	beq.n	8001cb2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f000 f8ac 	bl	8001e08 <HAL_TIM_IC_CaptureCallback>
 8001cb0:	e005      	b.n	8001cbe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f000 f89e 	bl	8001df4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f000 f8af 	bl	8001e1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	f003 0308 	and.w	r3, r3, #8
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d020      	beq.n	8001d10 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	f003 0308 	and.w	r3, r3, #8
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d01b      	beq.n	8001d10 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f06f 0208 	mvn.w	r2, #8
 8001ce0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2204      	movs	r2, #4
 8001ce6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	69db      	ldr	r3, [r3, #28]
 8001cee:	f003 0303 	and.w	r3, r3, #3
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d003      	beq.n	8001cfe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f000 f886 	bl	8001e08 <HAL_TIM_IC_CaptureCallback>
 8001cfc:	e005      	b.n	8001d0a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f000 f878 	bl	8001df4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	f000 f889 	bl	8001e1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	f003 0310 	and.w	r3, r3, #16
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d020      	beq.n	8001d5c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	f003 0310 	and.w	r3, r3, #16
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d01b      	beq.n	8001d5c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f06f 0210 	mvn.w	r2, #16
 8001d2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2208      	movs	r2, #8
 8001d32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	69db      	ldr	r3, [r3, #28]
 8001d3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d003      	beq.n	8001d4a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f000 f860 	bl	8001e08 <HAL_TIM_IC_CaptureCallback>
 8001d48:	e005      	b.n	8001d56 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f000 f852 	bl	8001df4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	f000 f863 	bl	8001e1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	f003 0301 	and.w	r3, r3, #1
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d00c      	beq.n	8001d80 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	f003 0301 	and.w	r3, r3, #1
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d007      	beq.n	8001d80 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f06f 0201 	mvn.w	r2, #1
 8001d78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f7fe fd42 	bl	8000804 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d00c      	beq.n	8001da4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d007      	beq.n	8001da4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001d9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f000 f900 	bl	8001fa4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d00c      	beq.n	8001dc8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d007      	beq.n	8001dc8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001dc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f000 f834 	bl	8001e30 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	f003 0320 	and.w	r3, r3, #32
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d00c      	beq.n	8001dec <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	f003 0320 	and.w	r3, r3, #32
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d007      	beq.n	8001dec <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f06f 0220 	mvn.w	r2, #32
 8001de4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f000 f8d2 	bl	8001f90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001dec:	bf00      	nop
 8001dee:	3710      	adds	r7, #16
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}

08001df4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001dfc:	bf00      	nop
 8001dfe:	370c      	adds	r7, #12
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr

08001e08 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e10:	bf00      	nop
 8001e12:	370c      	adds	r7, #12
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr

08001e1c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001e24:	bf00      	nop
 8001e26:	370c      	adds	r7, #12
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr

08001e30 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001e38:	bf00      	nop
 8001e3a:	370c      	adds	r7, #12
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr

08001e44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b085      	sub	sp, #20
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	4a43      	ldr	r2, [pc, #268]	@ (8001f64 <TIM_Base_SetConfig+0x120>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d013      	beq.n	8001e84 <TIM_Base_SetConfig+0x40>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e62:	d00f      	beq.n	8001e84 <TIM_Base_SetConfig+0x40>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	4a40      	ldr	r2, [pc, #256]	@ (8001f68 <TIM_Base_SetConfig+0x124>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d00b      	beq.n	8001e84 <TIM_Base_SetConfig+0x40>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	4a3f      	ldr	r2, [pc, #252]	@ (8001f6c <TIM_Base_SetConfig+0x128>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d007      	beq.n	8001e84 <TIM_Base_SetConfig+0x40>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	4a3e      	ldr	r2, [pc, #248]	@ (8001f70 <TIM_Base_SetConfig+0x12c>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d003      	beq.n	8001e84 <TIM_Base_SetConfig+0x40>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	4a3d      	ldr	r2, [pc, #244]	@ (8001f74 <TIM_Base_SetConfig+0x130>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d108      	bne.n	8001e96 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001e8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	68fa      	ldr	r2, [r7, #12]
 8001e92:	4313      	orrs	r3, r2
 8001e94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4a32      	ldr	r2, [pc, #200]	@ (8001f64 <TIM_Base_SetConfig+0x120>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d02b      	beq.n	8001ef6 <TIM_Base_SetConfig+0xb2>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ea4:	d027      	beq.n	8001ef6 <TIM_Base_SetConfig+0xb2>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4a2f      	ldr	r2, [pc, #188]	@ (8001f68 <TIM_Base_SetConfig+0x124>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d023      	beq.n	8001ef6 <TIM_Base_SetConfig+0xb2>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4a2e      	ldr	r2, [pc, #184]	@ (8001f6c <TIM_Base_SetConfig+0x128>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d01f      	beq.n	8001ef6 <TIM_Base_SetConfig+0xb2>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4a2d      	ldr	r2, [pc, #180]	@ (8001f70 <TIM_Base_SetConfig+0x12c>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d01b      	beq.n	8001ef6 <TIM_Base_SetConfig+0xb2>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4a2c      	ldr	r2, [pc, #176]	@ (8001f74 <TIM_Base_SetConfig+0x130>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d017      	beq.n	8001ef6 <TIM_Base_SetConfig+0xb2>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4a2b      	ldr	r2, [pc, #172]	@ (8001f78 <TIM_Base_SetConfig+0x134>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d013      	beq.n	8001ef6 <TIM_Base_SetConfig+0xb2>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4a2a      	ldr	r2, [pc, #168]	@ (8001f7c <TIM_Base_SetConfig+0x138>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d00f      	beq.n	8001ef6 <TIM_Base_SetConfig+0xb2>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4a29      	ldr	r2, [pc, #164]	@ (8001f80 <TIM_Base_SetConfig+0x13c>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d00b      	beq.n	8001ef6 <TIM_Base_SetConfig+0xb2>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4a28      	ldr	r2, [pc, #160]	@ (8001f84 <TIM_Base_SetConfig+0x140>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d007      	beq.n	8001ef6 <TIM_Base_SetConfig+0xb2>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a27      	ldr	r2, [pc, #156]	@ (8001f88 <TIM_Base_SetConfig+0x144>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d003      	beq.n	8001ef6 <TIM_Base_SetConfig+0xb2>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4a26      	ldr	r2, [pc, #152]	@ (8001f8c <TIM_Base_SetConfig+0x148>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d108      	bne.n	8001f08 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001efc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	68db      	ldr	r3, [r3, #12]
 8001f02:	68fa      	ldr	r2, [r7, #12]
 8001f04:	4313      	orrs	r3, r2
 8001f06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	695b      	ldr	r3, [r3, #20]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	689a      	ldr	r2, [r3, #8]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4a0e      	ldr	r2, [pc, #56]	@ (8001f64 <TIM_Base_SetConfig+0x120>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d003      	beq.n	8001f36 <TIM_Base_SetConfig+0xf2>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4a10      	ldr	r2, [pc, #64]	@ (8001f74 <TIM_Base_SetConfig+0x130>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d103      	bne.n	8001f3e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	691a      	ldr	r2, [r3, #16]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f043 0204 	orr.w	r2, r3, #4
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	68fa      	ldr	r2, [r7, #12]
 8001f54:	601a      	str	r2, [r3, #0]
}
 8001f56:	bf00      	nop
 8001f58:	3714      	adds	r7, #20
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	40010000 	.word	0x40010000
 8001f68:	40000400 	.word	0x40000400
 8001f6c:	40000800 	.word	0x40000800
 8001f70:	40000c00 	.word	0x40000c00
 8001f74:	40010400 	.word	0x40010400
 8001f78:	40014000 	.word	0x40014000
 8001f7c:	40014400 	.word	0x40014400
 8001f80:	40014800 	.word	0x40014800
 8001f84:	40001800 	.word	0x40001800
 8001f88:	40001c00 	.word	0x40001c00
 8001f8c:	40002000 	.word	0x40002000

08001f90 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001f98:	bf00      	nop
 8001f9a:	370c      	adds	r7, #12
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr

08001fa4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001fac:	bf00      	nop
 8001fae:	370c      	adds	r7, #12
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr

08001fb8 <__NVIC_SetPriority>:
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	6039      	str	r1, [r7, #0]
 8001fc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	db0a      	blt.n	8001fe2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	b2da      	uxtb	r2, r3
 8001fd0:	490c      	ldr	r1, [pc, #48]	@ (8002004 <__NVIC_SetPriority+0x4c>)
 8001fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd6:	0112      	lsls	r2, r2, #4
 8001fd8:	b2d2      	uxtb	r2, r2
 8001fda:	440b      	add	r3, r1
 8001fdc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001fe0:	e00a      	b.n	8001ff8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	b2da      	uxtb	r2, r3
 8001fe6:	4908      	ldr	r1, [pc, #32]	@ (8002008 <__NVIC_SetPriority+0x50>)
 8001fe8:	79fb      	ldrb	r3, [r7, #7]
 8001fea:	f003 030f 	and.w	r3, r3, #15
 8001fee:	3b04      	subs	r3, #4
 8001ff0:	0112      	lsls	r2, r2, #4
 8001ff2:	b2d2      	uxtb	r2, r2
 8001ff4:	440b      	add	r3, r1
 8001ff6:	761a      	strb	r2, [r3, #24]
}
 8001ff8:	bf00      	nop
 8001ffa:	370c      	adds	r7, #12
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr
 8002004:	e000e100 	.word	0xe000e100
 8002008:	e000ed00 	.word	0xe000ed00

0800200c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800200c:	b580      	push	{r7, lr}
 800200e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002010:	4b05      	ldr	r3, [pc, #20]	@ (8002028 <SysTick_Handler+0x1c>)
 8002012:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002014:	f001 fcd0 	bl	80039b8 <xTaskGetSchedulerState>
 8002018:	4603      	mov	r3, r0
 800201a:	2b01      	cmp	r3, #1
 800201c:	d001      	beq.n	8002022 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800201e:	f002 facb 	bl	80045b8 <xPortSysTickHandler>
  }
}
 8002022:	bf00      	nop
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	e000e010 	.word	0xe000e010

0800202c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800202c:	b580      	push	{r7, lr}
 800202e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002030:	2100      	movs	r1, #0
 8002032:	f06f 0004 	mvn.w	r0, #4
 8002036:	f7ff ffbf 	bl	8001fb8 <__NVIC_SetPriority>
#endif
}
 800203a:	bf00      	nop
 800203c:	bd80      	pop	{r7, pc}
	...

08002040 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002046:	f3ef 8305 	mrs	r3, IPSR
 800204a:	603b      	str	r3, [r7, #0]
  return(result);
 800204c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800204e:	2b00      	cmp	r3, #0
 8002050:	d003      	beq.n	800205a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002052:	f06f 0305 	mvn.w	r3, #5
 8002056:	607b      	str	r3, [r7, #4]
 8002058:	e00c      	b.n	8002074 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800205a:	4b0a      	ldr	r3, [pc, #40]	@ (8002084 <osKernelInitialize+0x44>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d105      	bne.n	800206e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002062:	4b08      	ldr	r3, [pc, #32]	@ (8002084 <osKernelInitialize+0x44>)
 8002064:	2201      	movs	r2, #1
 8002066:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002068:	2300      	movs	r3, #0
 800206a:	607b      	str	r3, [r7, #4]
 800206c:	e002      	b.n	8002074 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800206e:	f04f 33ff 	mov.w	r3, #4294967295
 8002072:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002074:	687b      	ldr	r3, [r7, #4]
}
 8002076:	4618      	mov	r0, r3
 8002078:	370c      	adds	r7, #12
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr
 8002082:	bf00      	nop
 8002084:	200000dc 	.word	0x200000dc

08002088 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800208e:	f3ef 8305 	mrs	r3, IPSR
 8002092:	603b      	str	r3, [r7, #0]
  return(result);
 8002094:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002096:	2b00      	cmp	r3, #0
 8002098:	d003      	beq.n	80020a2 <osKernelStart+0x1a>
    stat = osErrorISR;
 800209a:	f06f 0305 	mvn.w	r3, #5
 800209e:	607b      	str	r3, [r7, #4]
 80020a0:	e010      	b.n	80020c4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80020a2:	4b0b      	ldr	r3, [pc, #44]	@ (80020d0 <osKernelStart+0x48>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d109      	bne.n	80020be <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80020aa:	f7ff ffbf 	bl	800202c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80020ae:	4b08      	ldr	r3, [pc, #32]	@ (80020d0 <osKernelStart+0x48>)
 80020b0:	2202      	movs	r2, #2
 80020b2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80020b4:	f001 f852 	bl	800315c <vTaskStartScheduler>
      stat = osOK;
 80020b8:	2300      	movs	r3, #0
 80020ba:	607b      	str	r3, [r7, #4]
 80020bc:	e002      	b.n	80020c4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80020be:	f04f 33ff 	mov.w	r3, #4294967295
 80020c2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80020c4:	687b      	ldr	r3, [r7, #4]
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3708      	adds	r7, #8
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	200000dc 	.word	0x200000dc

080020d4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b08e      	sub	sp, #56	@ 0x38
 80020d8:	af04      	add	r7, sp, #16
 80020da:	60f8      	str	r0, [r7, #12]
 80020dc:	60b9      	str	r1, [r7, #8]
 80020de:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80020e0:	2300      	movs	r3, #0
 80020e2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80020e4:	f3ef 8305 	mrs	r3, IPSR
 80020e8:	617b      	str	r3, [r7, #20]
  return(result);
 80020ea:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d17e      	bne.n	80021ee <osThreadNew+0x11a>
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d07b      	beq.n	80021ee <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80020f6:	2380      	movs	r3, #128	@ 0x80
 80020f8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80020fa:	2318      	movs	r3, #24
 80020fc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80020fe:	2300      	movs	r3, #0
 8002100:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8002102:	f04f 33ff 	mov.w	r3, #4294967295
 8002106:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d045      	beq.n	800219a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d002      	beq.n	800211c <osThreadNew+0x48>
        name = attr->name;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	699b      	ldr	r3, [r3, #24]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d002      	beq.n	800212a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	699b      	ldr	r3, [r3, #24]
 8002128:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d008      	beq.n	8002142 <osThreadNew+0x6e>
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	2b38      	cmp	r3, #56	@ 0x38
 8002134:	d805      	bhi.n	8002142 <osThreadNew+0x6e>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	f003 0301 	and.w	r3, r3, #1
 800213e:	2b00      	cmp	r3, #0
 8002140:	d001      	beq.n	8002146 <osThreadNew+0x72>
        return (NULL);
 8002142:	2300      	movs	r3, #0
 8002144:	e054      	b.n	80021f0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	695b      	ldr	r3, [r3, #20]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d003      	beq.n	8002156 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	695b      	ldr	r3, [r3, #20]
 8002152:	089b      	lsrs	r3, r3, #2
 8002154:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d00e      	beq.n	800217c <osThreadNew+0xa8>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	68db      	ldr	r3, [r3, #12]
 8002162:	2ba7      	cmp	r3, #167	@ 0xa7
 8002164:	d90a      	bls.n	800217c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800216a:	2b00      	cmp	r3, #0
 800216c:	d006      	beq.n	800217c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	695b      	ldr	r3, [r3, #20]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d002      	beq.n	800217c <osThreadNew+0xa8>
        mem = 1;
 8002176:	2301      	movs	r3, #1
 8002178:	61bb      	str	r3, [r7, #24]
 800217a:	e010      	b.n	800219e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d10c      	bne.n	800219e <osThreadNew+0xca>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d108      	bne.n	800219e <osThreadNew+0xca>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	691b      	ldr	r3, [r3, #16]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d104      	bne.n	800219e <osThreadNew+0xca>
          mem = 0;
 8002194:	2300      	movs	r3, #0
 8002196:	61bb      	str	r3, [r7, #24]
 8002198:	e001      	b.n	800219e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800219a:	2300      	movs	r3, #0
 800219c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800219e:	69bb      	ldr	r3, [r7, #24]
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d110      	bne.n	80021c6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80021a8:	687a      	ldr	r2, [r7, #4]
 80021aa:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80021ac:	9202      	str	r2, [sp, #8]
 80021ae:	9301      	str	r3, [sp, #4]
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	9300      	str	r3, [sp, #0]
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	6a3a      	ldr	r2, [r7, #32]
 80021b8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80021ba:	68f8      	ldr	r0, [r7, #12]
 80021bc:	f000 fdea 	bl	8002d94 <xTaskCreateStatic>
 80021c0:	4603      	mov	r3, r0
 80021c2:	613b      	str	r3, [r7, #16]
 80021c4:	e013      	b.n	80021ee <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80021c6:	69bb      	ldr	r3, [r7, #24]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d110      	bne.n	80021ee <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80021cc:	6a3b      	ldr	r3, [r7, #32]
 80021ce:	b29a      	uxth	r2, r3
 80021d0:	f107 0310 	add.w	r3, r7, #16
 80021d4:	9301      	str	r3, [sp, #4]
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	9300      	str	r3, [sp, #0]
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80021de:	68f8      	ldr	r0, [r7, #12]
 80021e0:	f000 fe38 	bl	8002e54 <xTaskCreate>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d001      	beq.n	80021ee <osThreadNew+0x11a>
            hTask = NULL;
 80021ea:	2300      	movs	r3, #0
 80021ec:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80021ee:	693b      	ldr	r3, [r7, #16]
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3728      	adds	r7, #40	@ 0x28
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}

080021f8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b084      	sub	sp, #16
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002200:	f3ef 8305 	mrs	r3, IPSR
 8002204:	60bb      	str	r3, [r7, #8]
  return(result);
 8002206:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002208:	2b00      	cmp	r3, #0
 800220a:	d003      	beq.n	8002214 <osDelay+0x1c>
    stat = osErrorISR;
 800220c:	f06f 0305 	mvn.w	r3, #5
 8002210:	60fb      	str	r3, [r7, #12]
 8002212:	e007      	b.n	8002224 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002214:	2300      	movs	r3, #0
 8002216:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d002      	beq.n	8002224 <osDelay+0x2c>
      vTaskDelay(ticks);
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f000 ff66 	bl	80030f0 <vTaskDelay>
    }
  }

  return (stat);
 8002224:	68fb      	ldr	r3, [r7, #12]
}
 8002226:	4618      	mov	r0, r3
 8002228:	3710      	adds	r7, #16
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
	...

08002230 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002230:	b480      	push	{r7}
 8002232:	b085      	sub	sp, #20
 8002234:	af00      	add	r7, sp, #0
 8002236:	60f8      	str	r0, [r7, #12]
 8002238:	60b9      	str	r1, [r7, #8]
 800223a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	4a07      	ldr	r2, [pc, #28]	@ (800225c <vApplicationGetIdleTaskMemory+0x2c>)
 8002240:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	4a06      	ldr	r2, [pc, #24]	@ (8002260 <vApplicationGetIdleTaskMemory+0x30>)
 8002246:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2280      	movs	r2, #128	@ 0x80
 800224c:	601a      	str	r2, [r3, #0]
}
 800224e:	bf00      	nop
 8002250:	3714      	adds	r7, #20
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop
 800225c:	200000e0 	.word	0x200000e0
 8002260:	20000188 	.word	0x20000188

08002264 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002264:	b480      	push	{r7}
 8002266:	b085      	sub	sp, #20
 8002268:	af00      	add	r7, sp, #0
 800226a:	60f8      	str	r0, [r7, #12]
 800226c:	60b9      	str	r1, [r7, #8]
 800226e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	4a07      	ldr	r2, [pc, #28]	@ (8002290 <vApplicationGetTimerTaskMemory+0x2c>)
 8002274:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	4a06      	ldr	r2, [pc, #24]	@ (8002294 <vApplicationGetTimerTaskMemory+0x30>)
 800227a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002282:	601a      	str	r2, [r3, #0]
}
 8002284:	bf00      	nop
 8002286:	3714      	adds	r7, #20
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr
 8002290:	20000388 	.word	0x20000388
 8002294:	20000430 	.word	0x20000430

08002298 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	f103 0208 	add.w	r2, r3, #8
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f04f 32ff 	mov.w	r2, #4294967295
 80022b0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	f103 0208 	add.w	r2, r3, #8
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	f103 0208 	add.w	r2, r3, #8
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2200      	movs	r2, #0
 80022ca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80022cc:	bf00      	nop
 80022ce:	370c      	adds	r7, #12
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr

080022d8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2200      	movs	r2, #0
 80022e4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80022e6:	bf00      	nop
 80022e8:	370c      	adds	r7, #12
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr

080022f2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80022f2:	b480      	push	{r7}
 80022f4:	b085      	sub	sp, #20
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	6078      	str	r0, [r7, #4]
 80022fa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	68fa      	ldr	r2, [r7, #12]
 8002306:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	689a      	ldr	r2, [r3, #8]
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	683a      	ldr	r2, [r7, #0]
 8002316:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	683a      	ldr	r2, [r7, #0]
 800231c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	1c5a      	adds	r2, r3, #1
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	601a      	str	r2, [r3, #0]
}
 800232e:	bf00      	nop
 8002330:	3714      	adds	r7, #20
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr

0800233a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800233a:	b480      	push	{r7}
 800233c:	b085      	sub	sp, #20
 800233e:	af00      	add	r7, sp, #0
 8002340:	6078      	str	r0, [r7, #4]
 8002342:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002350:	d103      	bne.n	800235a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	691b      	ldr	r3, [r3, #16]
 8002356:	60fb      	str	r3, [r7, #12]
 8002358:	e00c      	b.n	8002374 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	3308      	adds	r3, #8
 800235e:	60fb      	str	r3, [r7, #12]
 8002360:	e002      	b.n	8002368 <vListInsert+0x2e>
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	60fb      	str	r3, [r7, #12]
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	68ba      	ldr	r2, [r7, #8]
 8002370:	429a      	cmp	r2, r3
 8002372:	d2f6      	bcs.n	8002362 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	685a      	ldr	r2, [r3, #4]
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	683a      	ldr	r2, [r7, #0]
 8002382:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	68fa      	ldr	r2, [r7, #12]
 8002388:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	683a      	ldr	r2, [r7, #0]
 800238e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	687a      	ldr	r2, [r7, #4]
 8002394:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	1c5a      	adds	r2, r3, #1
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	601a      	str	r2, [r3, #0]
}
 80023a0:	bf00      	nop
 80023a2:	3714      	adds	r7, #20
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr

080023ac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80023ac:	b480      	push	{r7}
 80023ae:	b085      	sub	sp, #20
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	691b      	ldr	r3, [r3, #16]
 80023b8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	6892      	ldr	r2, [r2, #8]
 80023c2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	687a      	ldr	r2, [r7, #4]
 80023ca:	6852      	ldr	r2, [r2, #4]
 80023cc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d103      	bne.n	80023e0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	689a      	ldr	r2, [r3, #8]
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2200      	movs	r2, #0
 80023e4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	1e5a      	subs	r2, r3, #1
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3714      	adds	r7, #20
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr

08002400 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b084      	sub	sp, #16
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d10b      	bne.n	800242c <xQueueGenericReset+0x2c>
	__asm volatile
 8002414:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002418:	f383 8811 	msr	BASEPRI, r3
 800241c:	f3bf 8f6f 	isb	sy
 8002420:	f3bf 8f4f 	dsb	sy
 8002424:	60bb      	str	r3, [r7, #8]
}
 8002426:	bf00      	nop
 8002428:	bf00      	nop
 800242a:	e7fd      	b.n	8002428 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800242c:	f002 f834 	bl	8004498 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002438:	68f9      	ldr	r1, [r7, #12]
 800243a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800243c:	fb01 f303 	mul.w	r3, r1, r3
 8002440:	441a      	add	r2, r3
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2200      	movs	r2, #0
 800244a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800245c:	3b01      	subs	r3, #1
 800245e:	68f9      	ldr	r1, [r7, #12]
 8002460:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002462:	fb01 f303 	mul.w	r3, r1, r3
 8002466:	441a      	add	r2, r3
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	22ff      	movs	r2, #255	@ 0xff
 8002470:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	22ff      	movs	r2, #255	@ 0xff
 8002478:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d109      	bne.n	8002496 <xQueueGenericReset+0x96>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	691b      	ldr	r3, [r3, #16]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d00f      	beq.n	80024aa <xQueueGenericReset+0xaa>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	3310      	adds	r3, #16
 800248e:	4618      	mov	r0, r3
 8002490:	f001 f8d2 	bl	8003638 <xTaskRemoveFromEventList>
 8002494:	e009      	b.n	80024aa <xQueueGenericReset+0xaa>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	3310      	adds	r3, #16
 800249a:	4618      	mov	r0, r3
 800249c:	f7ff fefc 	bl	8002298 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	3324      	adds	r3, #36	@ 0x24
 80024a4:	4618      	mov	r0, r3
 80024a6:	f7ff fef7 	bl	8002298 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80024aa:	f002 f827 	bl	80044fc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80024ae:	2301      	movs	r3, #1
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3710      	adds	r7, #16
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}

080024b8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b08e      	sub	sp, #56	@ 0x38
 80024bc:	af02      	add	r7, sp, #8
 80024be:	60f8      	str	r0, [r7, #12]
 80024c0:	60b9      	str	r1, [r7, #8]
 80024c2:	607a      	str	r2, [r7, #4]
 80024c4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d10b      	bne.n	80024e4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80024cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024d0:	f383 8811 	msr	BASEPRI, r3
 80024d4:	f3bf 8f6f 	isb	sy
 80024d8:	f3bf 8f4f 	dsb	sy
 80024dc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80024de:	bf00      	nop
 80024e0:	bf00      	nop
 80024e2:	e7fd      	b.n	80024e0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d10b      	bne.n	8002502 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80024ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024ee:	f383 8811 	msr	BASEPRI, r3
 80024f2:	f3bf 8f6f 	isb	sy
 80024f6:	f3bf 8f4f 	dsb	sy
 80024fa:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80024fc:	bf00      	nop
 80024fe:	bf00      	nop
 8002500:	e7fd      	b.n	80024fe <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d002      	beq.n	800250e <xQueueGenericCreateStatic+0x56>
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d001      	beq.n	8002512 <xQueueGenericCreateStatic+0x5a>
 800250e:	2301      	movs	r3, #1
 8002510:	e000      	b.n	8002514 <xQueueGenericCreateStatic+0x5c>
 8002512:	2300      	movs	r3, #0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d10b      	bne.n	8002530 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8002518:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800251c:	f383 8811 	msr	BASEPRI, r3
 8002520:	f3bf 8f6f 	isb	sy
 8002524:	f3bf 8f4f 	dsb	sy
 8002528:	623b      	str	r3, [r7, #32]
}
 800252a:	bf00      	nop
 800252c:	bf00      	nop
 800252e:	e7fd      	b.n	800252c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d102      	bne.n	800253c <xQueueGenericCreateStatic+0x84>
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d101      	bne.n	8002540 <xQueueGenericCreateStatic+0x88>
 800253c:	2301      	movs	r3, #1
 800253e:	e000      	b.n	8002542 <xQueueGenericCreateStatic+0x8a>
 8002540:	2300      	movs	r3, #0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d10b      	bne.n	800255e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8002546:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800254a:	f383 8811 	msr	BASEPRI, r3
 800254e:	f3bf 8f6f 	isb	sy
 8002552:	f3bf 8f4f 	dsb	sy
 8002556:	61fb      	str	r3, [r7, #28]
}
 8002558:	bf00      	nop
 800255a:	bf00      	nop
 800255c:	e7fd      	b.n	800255a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800255e:	2350      	movs	r3, #80	@ 0x50
 8002560:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	2b50      	cmp	r3, #80	@ 0x50
 8002566:	d00b      	beq.n	8002580 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8002568:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800256c:	f383 8811 	msr	BASEPRI, r3
 8002570:	f3bf 8f6f 	isb	sy
 8002574:	f3bf 8f4f 	dsb	sy
 8002578:	61bb      	str	r3, [r7, #24]
}
 800257a:	bf00      	nop
 800257c:	bf00      	nop
 800257e:	e7fd      	b.n	800257c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002580:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8002586:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002588:	2b00      	cmp	r3, #0
 800258a:	d00d      	beq.n	80025a8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800258c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800258e:	2201      	movs	r2, #1
 8002590:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002594:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8002598:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800259a:	9300      	str	r3, [sp, #0]
 800259c:	4613      	mov	r3, r2
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	68b9      	ldr	r1, [r7, #8]
 80025a2:	68f8      	ldr	r0, [r7, #12]
 80025a4:	f000 f805 	bl	80025b2 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80025a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3730      	adds	r7, #48	@ 0x30
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}

080025b2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80025b2:	b580      	push	{r7, lr}
 80025b4:	b084      	sub	sp, #16
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	60f8      	str	r0, [r7, #12]
 80025ba:	60b9      	str	r1, [r7, #8]
 80025bc:	607a      	str	r2, [r7, #4]
 80025be:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d103      	bne.n	80025ce <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80025c6:	69bb      	ldr	r3, [r7, #24]
 80025c8:	69ba      	ldr	r2, [r7, #24]
 80025ca:	601a      	str	r2, [r3, #0]
 80025cc:	e002      	b.n	80025d4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80025ce:	69bb      	ldr	r3, [r7, #24]
 80025d0:	687a      	ldr	r2, [r7, #4]
 80025d2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80025d4:	69bb      	ldr	r3, [r7, #24]
 80025d6:	68fa      	ldr	r2, [r7, #12]
 80025d8:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80025da:	69bb      	ldr	r3, [r7, #24]
 80025dc:	68ba      	ldr	r2, [r7, #8]
 80025de:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80025e0:	2101      	movs	r1, #1
 80025e2:	69b8      	ldr	r0, [r7, #24]
 80025e4:	f7ff ff0c 	bl	8002400 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80025e8:	69bb      	ldr	r3, [r7, #24]
 80025ea:	78fa      	ldrb	r2, [r7, #3]
 80025ec:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80025f0:	bf00      	nop
 80025f2:	3710      	adds	r7, #16
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}

080025f8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b08e      	sub	sp, #56	@ 0x38
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	60f8      	str	r0, [r7, #12]
 8002600:	60b9      	str	r1, [r7, #8]
 8002602:	607a      	str	r2, [r7, #4]
 8002604:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002606:	2300      	movs	r3, #0
 8002608:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800260e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002610:	2b00      	cmp	r3, #0
 8002612:	d10b      	bne.n	800262c <xQueueGenericSend+0x34>
	__asm volatile
 8002614:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002618:	f383 8811 	msr	BASEPRI, r3
 800261c:	f3bf 8f6f 	isb	sy
 8002620:	f3bf 8f4f 	dsb	sy
 8002624:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002626:	bf00      	nop
 8002628:	bf00      	nop
 800262a:	e7fd      	b.n	8002628 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d103      	bne.n	800263a <xQueueGenericSend+0x42>
 8002632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002636:	2b00      	cmp	r3, #0
 8002638:	d101      	bne.n	800263e <xQueueGenericSend+0x46>
 800263a:	2301      	movs	r3, #1
 800263c:	e000      	b.n	8002640 <xQueueGenericSend+0x48>
 800263e:	2300      	movs	r3, #0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d10b      	bne.n	800265c <xQueueGenericSend+0x64>
	__asm volatile
 8002644:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002648:	f383 8811 	msr	BASEPRI, r3
 800264c:	f3bf 8f6f 	isb	sy
 8002650:	f3bf 8f4f 	dsb	sy
 8002654:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002656:	bf00      	nop
 8002658:	bf00      	nop
 800265a:	e7fd      	b.n	8002658 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	2b02      	cmp	r3, #2
 8002660:	d103      	bne.n	800266a <xQueueGenericSend+0x72>
 8002662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002664:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002666:	2b01      	cmp	r3, #1
 8002668:	d101      	bne.n	800266e <xQueueGenericSend+0x76>
 800266a:	2301      	movs	r3, #1
 800266c:	e000      	b.n	8002670 <xQueueGenericSend+0x78>
 800266e:	2300      	movs	r3, #0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d10b      	bne.n	800268c <xQueueGenericSend+0x94>
	__asm volatile
 8002674:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002678:	f383 8811 	msr	BASEPRI, r3
 800267c:	f3bf 8f6f 	isb	sy
 8002680:	f3bf 8f4f 	dsb	sy
 8002684:	623b      	str	r3, [r7, #32]
}
 8002686:	bf00      	nop
 8002688:	bf00      	nop
 800268a:	e7fd      	b.n	8002688 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800268c:	f001 f994 	bl	80039b8 <xTaskGetSchedulerState>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d102      	bne.n	800269c <xQueueGenericSend+0xa4>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d101      	bne.n	80026a0 <xQueueGenericSend+0xa8>
 800269c:	2301      	movs	r3, #1
 800269e:	e000      	b.n	80026a2 <xQueueGenericSend+0xaa>
 80026a0:	2300      	movs	r3, #0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d10b      	bne.n	80026be <xQueueGenericSend+0xc6>
	__asm volatile
 80026a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026aa:	f383 8811 	msr	BASEPRI, r3
 80026ae:	f3bf 8f6f 	isb	sy
 80026b2:	f3bf 8f4f 	dsb	sy
 80026b6:	61fb      	str	r3, [r7, #28]
}
 80026b8:	bf00      	nop
 80026ba:	bf00      	nop
 80026bc:	e7fd      	b.n	80026ba <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80026be:	f001 feeb 	bl	8004498 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80026c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80026c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d302      	bcc.n	80026d4 <xQueueGenericSend+0xdc>
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	2b02      	cmp	r3, #2
 80026d2:	d112      	bne.n	80026fa <xQueueGenericSend+0x102>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80026d4:	683a      	ldr	r2, [r7, #0]
 80026d6:	68b9      	ldr	r1, [r7, #8]
 80026d8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80026da:	f000 f9ed 	bl	8002ab8 <prvCopyDataToQueue>
 80026de:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80026e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d004      	beq.n	80026f2 <xQueueGenericSend+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80026e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026ea:	3324      	adds	r3, #36	@ 0x24
 80026ec:	4618      	mov	r0, r3
 80026ee:	f000 ffa3 	bl	8003638 <xTaskRemoveFromEventList>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80026f2:	f001 ff03 	bl	80044fc <vPortExitCritical>
				return pdPASS;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e062      	b.n	80027c0 <xQueueGenericSend+0x1c8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d103      	bne.n	8002708 <xQueueGenericSend+0x110>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002700:	f001 fefc 	bl	80044fc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002704:	2300      	movs	r3, #0
 8002706:	e05b      	b.n	80027c0 <xQueueGenericSend+0x1c8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002708:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800270a:	2b00      	cmp	r3, #0
 800270c:	d106      	bne.n	800271c <xQueueGenericSend+0x124>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800270e:	f107 0314 	add.w	r3, r7, #20
 8002712:	4618      	mov	r0, r3
 8002714:	f000 fff4 	bl	8003700 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002718:	2301      	movs	r3, #1
 800271a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800271c:	f001 feee 	bl	80044fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002720:	f000 fd8c 	bl	800323c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002724:	f001 feb8 	bl	8004498 <vPortEnterCritical>
 8002728:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800272a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800272e:	b25b      	sxtb	r3, r3
 8002730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002734:	d103      	bne.n	800273e <xQueueGenericSend+0x146>
 8002736:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002738:	2200      	movs	r2, #0
 800273a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800273e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002740:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002744:	b25b      	sxtb	r3, r3
 8002746:	f1b3 3fff 	cmp.w	r3, #4294967295
 800274a:	d103      	bne.n	8002754 <xQueueGenericSend+0x15c>
 800274c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800274e:	2200      	movs	r2, #0
 8002750:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002754:	f001 fed2 	bl	80044fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002758:	1d3a      	adds	r2, r7, #4
 800275a:	f107 0314 	add.w	r3, r7, #20
 800275e:	4611      	mov	r1, r2
 8002760:	4618      	mov	r0, r3
 8002762:	f000 ffe3 	bl	800372c <xTaskCheckForTimeOut>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d123      	bne.n	80027b4 <xQueueGenericSend+0x1bc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800276c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800276e:	f000 fa9b 	bl	8002ca8 <prvIsQueueFull>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d017      	beq.n	80027a8 <xQueueGenericSend+0x1b0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002778:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800277a:	3310      	adds	r3, #16
 800277c:	687a      	ldr	r2, [r7, #4]
 800277e:	4611      	mov	r1, r2
 8002780:	4618      	mov	r0, r3
 8002782:	f000 ff07 	bl	8003594 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002786:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002788:	f000 fa26 	bl	8002bd8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800278c:	f000 fd64 	bl	8003258 <xTaskResumeAll>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d193      	bne.n	80026be <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8002796:	4b0c      	ldr	r3, [pc, #48]	@ (80027c8 <xQueueGenericSend+0x1d0>)
 8002798:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800279c:	601a      	str	r2, [r3, #0]
 800279e:	f3bf 8f4f 	dsb	sy
 80027a2:	f3bf 8f6f 	isb	sy
 80027a6:	e78a      	b.n	80026be <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80027a8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80027aa:	f000 fa15 	bl	8002bd8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80027ae:	f000 fd53 	bl	8003258 <xTaskResumeAll>
 80027b2:	e784      	b.n	80026be <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80027b4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80027b6:	f000 fa0f 	bl	8002bd8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80027ba:	f000 fd4d 	bl	8003258 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80027be:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3738      	adds	r7, #56	@ 0x38
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	e000ed04 	.word	0xe000ed04

080027cc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b090      	sub	sp, #64	@ 0x40
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	60f8      	str	r0, [r7, #12]
 80027d4:	60b9      	str	r1, [r7, #8]
 80027d6:	607a      	str	r2, [r7, #4]
 80027d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80027de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d10b      	bne.n	80027fc <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80027e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027e8:	f383 8811 	msr	BASEPRI, r3
 80027ec:	f3bf 8f6f 	isb	sy
 80027f0:	f3bf 8f4f 	dsb	sy
 80027f4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80027f6:	bf00      	nop
 80027f8:	bf00      	nop
 80027fa:	e7fd      	b.n	80027f8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d103      	bne.n	800280a <xQueueGenericSendFromISR+0x3e>
 8002802:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002806:	2b00      	cmp	r3, #0
 8002808:	d101      	bne.n	800280e <xQueueGenericSendFromISR+0x42>
 800280a:	2301      	movs	r3, #1
 800280c:	e000      	b.n	8002810 <xQueueGenericSendFromISR+0x44>
 800280e:	2300      	movs	r3, #0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d10b      	bne.n	800282c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8002814:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002818:	f383 8811 	msr	BASEPRI, r3
 800281c:	f3bf 8f6f 	isb	sy
 8002820:	f3bf 8f4f 	dsb	sy
 8002824:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002826:	bf00      	nop
 8002828:	bf00      	nop
 800282a:	e7fd      	b.n	8002828 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	2b02      	cmp	r3, #2
 8002830:	d103      	bne.n	800283a <xQueueGenericSendFromISR+0x6e>
 8002832:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002834:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002836:	2b01      	cmp	r3, #1
 8002838:	d101      	bne.n	800283e <xQueueGenericSendFromISR+0x72>
 800283a:	2301      	movs	r3, #1
 800283c:	e000      	b.n	8002840 <xQueueGenericSendFromISR+0x74>
 800283e:	2300      	movs	r3, #0
 8002840:	2b00      	cmp	r3, #0
 8002842:	d10b      	bne.n	800285c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8002844:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002848:	f383 8811 	msr	BASEPRI, r3
 800284c:	f3bf 8f6f 	isb	sy
 8002850:	f3bf 8f4f 	dsb	sy
 8002854:	623b      	str	r3, [r7, #32]
}
 8002856:	bf00      	nop
 8002858:	bf00      	nop
 800285a:	e7fd      	b.n	8002858 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800285c:	f001 fefc 	bl	8004658 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002860:	f3ef 8211 	mrs	r2, BASEPRI
 8002864:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002868:	f383 8811 	msr	BASEPRI, r3
 800286c:	f3bf 8f6f 	isb	sy
 8002870:	f3bf 8f4f 	dsb	sy
 8002874:	61fa      	str	r2, [r7, #28]
 8002876:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002878:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800287a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800287c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800287e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002880:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002882:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002884:	429a      	cmp	r2, r3
 8002886:	d302      	bcc.n	800288e <xQueueGenericSendFromISR+0xc2>
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	2b02      	cmp	r3, #2
 800288c:	d12f      	bne.n	80028ee <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800288e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002890:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002894:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002898:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800289a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800289c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800289e:	683a      	ldr	r2, [r7, #0]
 80028a0:	68b9      	ldr	r1, [r7, #8]
 80028a2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80028a4:	f000 f908 	bl	8002ab8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80028a8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80028ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028b0:	d112      	bne.n	80028d8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80028b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d016      	beq.n	80028e8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80028ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028bc:	3324      	adds	r3, #36	@ 0x24
 80028be:	4618      	mov	r0, r3
 80028c0:	f000 feba 	bl	8003638 <xTaskRemoveFromEventList>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d00e      	beq.n	80028e8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d00b      	beq.n	80028e8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2201      	movs	r2, #1
 80028d4:	601a      	str	r2, [r3, #0]
 80028d6:	e007      	b.n	80028e8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80028d8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80028dc:	3301      	adds	r3, #1
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	b25a      	sxtb	r2, r3
 80028e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80028e8:	2301      	movs	r3, #1
 80028ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80028ec:	e001      	b.n	80028f2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80028ee:	2300      	movs	r3, #0
 80028f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80028f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028f4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80028fc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80028fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8002900:	4618      	mov	r0, r3
 8002902:	3740      	adds	r7, #64	@ 0x40
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}

08002908 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b08c      	sub	sp, #48	@ 0x30
 800290c:	af00      	add	r7, sp, #0
 800290e:	60f8      	str	r0, [r7, #12]
 8002910:	60b9      	str	r1, [r7, #8]
 8002912:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002914:	2300      	movs	r3, #0
 8002916:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800291c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800291e:	2b00      	cmp	r3, #0
 8002920:	d10b      	bne.n	800293a <xQueueReceive+0x32>
	__asm volatile
 8002922:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002926:	f383 8811 	msr	BASEPRI, r3
 800292a:	f3bf 8f6f 	isb	sy
 800292e:	f3bf 8f4f 	dsb	sy
 8002932:	623b      	str	r3, [r7, #32]
}
 8002934:	bf00      	nop
 8002936:	bf00      	nop
 8002938:	e7fd      	b.n	8002936 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d103      	bne.n	8002948 <xQueueReceive+0x40>
 8002940:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002944:	2b00      	cmp	r3, #0
 8002946:	d101      	bne.n	800294c <xQueueReceive+0x44>
 8002948:	2301      	movs	r3, #1
 800294a:	e000      	b.n	800294e <xQueueReceive+0x46>
 800294c:	2300      	movs	r3, #0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d10b      	bne.n	800296a <xQueueReceive+0x62>
	__asm volatile
 8002952:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002956:	f383 8811 	msr	BASEPRI, r3
 800295a:	f3bf 8f6f 	isb	sy
 800295e:	f3bf 8f4f 	dsb	sy
 8002962:	61fb      	str	r3, [r7, #28]
}
 8002964:	bf00      	nop
 8002966:	bf00      	nop
 8002968:	e7fd      	b.n	8002966 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800296a:	f001 f825 	bl	80039b8 <xTaskGetSchedulerState>
 800296e:	4603      	mov	r3, r0
 8002970:	2b00      	cmp	r3, #0
 8002972:	d102      	bne.n	800297a <xQueueReceive+0x72>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d101      	bne.n	800297e <xQueueReceive+0x76>
 800297a:	2301      	movs	r3, #1
 800297c:	e000      	b.n	8002980 <xQueueReceive+0x78>
 800297e:	2300      	movs	r3, #0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d10b      	bne.n	800299c <xQueueReceive+0x94>
	__asm volatile
 8002984:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002988:	f383 8811 	msr	BASEPRI, r3
 800298c:	f3bf 8f6f 	isb	sy
 8002990:	f3bf 8f4f 	dsb	sy
 8002994:	61bb      	str	r3, [r7, #24]
}
 8002996:	bf00      	nop
 8002998:	bf00      	nop
 800299a:	e7fd      	b.n	8002998 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800299c:	f001 fd7c 	bl	8004498 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80029a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029a4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80029a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d014      	beq.n	80029d6 <xQueueReceive+0xce>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80029ac:	68b9      	ldr	r1, [r7, #8]
 80029ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80029b0:	f000 f8ec 	bl	8002b8c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80029b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029b6:	1e5a      	subs	r2, r3, #1
 80029b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029ba:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80029bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029be:	691b      	ldr	r3, [r3, #16]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d004      	beq.n	80029ce <xQueueReceive+0xc6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80029c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029c6:	3310      	adds	r3, #16
 80029c8:	4618      	mov	r0, r3
 80029ca:	f000 fe35 	bl	8003638 <xTaskRemoveFromEventList>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80029ce:	f001 fd95 	bl	80044fc <vPortExitCritical>
				return pdPASS;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e069      	b.n	8002aaa <xQueueReceive+0x1a2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d103      	bne.n	80029e4 <xQueueReceive+0xdc>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80029dc:	f001 fd8e 	bl	80044fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80029e0:	2300      	movs	r3, #0
 80029e2:	e062      	b.n	8002aaa <xQueueReceive+0x1a2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80029e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d106      	bne.n	80029f8 <xQueueReceive+0xf0>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80029ea:	f107 0310 	add.w	r3, r7, #16
 80029ee:	4618      	mov	r0, r3
 80029f0:	f000 fe86 	bl	8003700 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80029f4:	2301      	movs	r3, #1
 80029f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80029f8:	f001 fd80 	bl	80044fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80029fc:	f000 fc1e 	bl	800323c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002a00:	f001 fd4a 	bl	8004498 <vPortEnterCritical>
 8002a04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a06:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002a0a:	b25b      	sxtb	r3, r3
 8002a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a10:	d103      	bne.n	8002a1a <xQueueReceive+0x112>
 8002a12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a14:	2200      	movs	r2, #0
 8002a16:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002a1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a1c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002a20:	b25b      	sxtb	r3, r3
 8002a22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a26:	d103      	bne.n	8002a30 <xQueueReceive+0x128>
 8002a28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002a30:	f001 fd64 	bl	80044fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002a34:	1d3a      	adds	r2, r7, #4
 8002a36:	f107 0310 	add.w	r3, r7, #16
 8002a3a:	4611      	mov	r1, r2
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f000 fe75 	bl	800372c <xTaskCheckForTimeOut>
 8002a42:	4603      	mov	r3, r0
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d123      	bne.n	8002a90 <xQueueReceive+0x188>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002a48:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002a4a:	f000 f917 	bl	8002c7c <prvIsQueueEmpty>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d017      	beq.n	8002a84 <xQueueReceive+0x17c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002a54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a56:	3324      	adds	r3, #36	@ 0x24
 8002a58:	687a      	ldr	r2, [r7, #4]
 8002a5a:	4611      	mov	r1, r2
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f000 fd99 	bl	8003594 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002a62:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002a64:	f000 f8b8 	bl	8002bd8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002a68:	f000 fbf6 	bl	8003258 <xTaskResumeAll>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d194      	bne.n	800299c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8002a72:	4b10      	ldr	r3, [pc, #64]	@ (8002ab4 <xQueueReceive+0x1ac>)
 8002a74:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002a78:	601a      	str	r2, [r3, #0]
 8002a7a:	f3bf 8f4f 	dsb	sy
 8002a7e:	f3bf 8f6f 	isb	sy
 8002a82:	e78b      	b.n	800299c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002a84:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002a86:	f000 f8a7 	bl	8002bd8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002a8a:	f000 fbe5 	bl	8003258 <xTaskResumeAll>
 8002a8e:	e785      	b.n	800299c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002a90:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002a92:	f000 f8a1 	bl	8002bd8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002a96:	f000 fbdf 	bl	8003258 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002a9a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002a9c:	f000 f8ee 	bl	8002c7c <prvIsQueueEmpty>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	f43f af7a 	beq.w	800299c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002aa8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3730      	adds	r7, #48	@ 0x30
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	e000ed04 	.word	0xe000ed04

08002ab8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b086      	sub	sp, #24
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	60f8      	str	r0, [r7, #12]
 8002ac0:	60b9      	str	r1, [r7, #8]
 8002ac2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002acc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d10d      	bne.n	8002af2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d14d      	bne.n	8002b7a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f000 ff86 	bl	80039f4 <xTaskPriorityDisinherit>
 8002ae8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2200      	movs	r2, #0
 8002aee:	609a      	str	r2, [r3, #8]
 8002af0:	e043      	b.n	8002b7a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d119      	bne.n	8002b2c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	6858      	ldr	r0, [r3, #4]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b00:	461a      	mov	r2, r3
 8002b02:	68b9      	ldr	r1, [r7, #8]
 8002b04:	f002 faa9 	bl	800505a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	685a      	ldr	r2, [r3, #4]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b10:	441a      	add	r2, r3
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	685a      	ldr	r2, [r3, #4]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	d32b      	bcc.n	8002b7a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	605a      	str	r2, [r3, #4]
 8002b2a:	e026      	b.n	8002b7a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	68d8      	ldr	r0, [r3, #12]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b34:	461a      	mov	r2, r3
 8002b36:	68b9      	ldr	r1, [r7, #8]
 8002b38:	f002 fa8f 	bl	800505a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	68da      	ldr	r2, [r3, #12]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b44:	425b      	negs	r3, r3
 8002b46:	441a      	add	r2, r3
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	68da      	ldr	r2, [r3, #12]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d207      	bcs.n	8002b68 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	689a      	ldr	r2, [r3, #8]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b60:	425b      	negs	r3, r3
 8002b62:	441a      	add	r2, r3
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d105      	bne.n	8002b7a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d002      	beq.n	8002b7a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	3b01      	subs	r3, #1
 8002b78:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	1c5a      	adds	r2, r3, #1
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8002b82:	697b      	ldr	r3, [r7, #20]
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	3718      	adds	r7, #24
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}

08002b8c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b082      	sub	sp, #8
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d018      	beq.n	8002bd0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	68da      	ldr	r2, [r3, #12]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ba6:	441a      	add	r2, r3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	68da      	ldr	r2, [r3, #12]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d303      	bcc.n	8002bc0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	68d9      	ldr	r1, [r3, #12]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bc8:	461a      	mov	r2, r3
 8002bca:	6838      	ldr	r0, [r7, #0]
 8002bcc:	f002 fa45 	bl	800505a <memcpy>
	}
}
 8002bd0:	bf00      	nop
 8002bd2:	3708      	adds	r7, #8
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}

08002bd8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b084      	sub	sp, #16
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002be0:	f001 fc5a 	bl	8004498 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002bea:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002bec:	e011      	b.n	8002c12 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d012      	beq.n	8002c1c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	3324      	adds	r3, #36	@ 0x24
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f000 fd1c 	bl	8003638 <xTaskRemoveFromEventList>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d001      	beq.n	8002c0a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002c06:	f000 fdf5 	bl	80037f4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002c0a:	7bfb      	ldrb	r3, [r7, #15]
 8002c0c:	3b01      	subs	r3, #1
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002c12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	dce9      	bgt.n	8002bee <prvUnlockQueue+0x16>
 8002c1a:	e000      	b.n	8002c1e <prvUnlockQueue+0x46>
					break;
 8002c1c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	22ff      	movs	r2, #255	@ 0xff
 8002c22:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8002c26:	f001 fc69 	bl	80044fc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002c2a:	f001 fc35 	bl	8004498 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002c34:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002c36:	e011      	b.n	8002c5c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	691b      	ldr	r3, [r3, #16]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d012      	beq.n	8002c66 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	3310      	adds	r3, #16
 8002c44:	4618      	mov	r0, r3
 8002c46:	f000 fcf7 	bl	8003638 <xTaskRemoveFromEventList>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d001      	beq.n	8002c54 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002c50:	f000 fdd0 	bl	80037f4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002c54:	7bbb      	ldrb	r3, [r7, #14]
 8002c56:	3b01      	subs	r3, #1
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002c5c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	dce9      	bgt.n	8002c38 <prvUnlockQueue+0x60>
 8002c64:	e000      	b.n	8002c68 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002c66:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	22ff      	movs	r2, #255	@ 0xff
 8002c6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8002c70:	f001 fc44 	bl	80044fc <vPortExitCritical>
}
 8002c74:	bf00      	nop
 8002c76:	3710      	adds	r7, #16
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}

08002c7c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b084      	sub	sp, #16
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002c84:	f001 fc08 	bl	8004498 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d102      	bne.n	8002c96 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002c90:	2301      	movs	r3, #1
 8002c92:	60fb      	str	r3, [r7, #12]
 8002c94:	e001      	b.n	8002c9a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002c96:	2300      	movs	r3, #0
 8002c98:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002c9a:	f001 fc2f 	bl	80044fc <vPortExitCritical>

	return xReturn;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3710      	adds	r7, #16
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}

08002ca8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b084      	sub	sp, #16
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002cb0:	f001 fbf2 	bl	8004498 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d102      	bne.n	8002cc6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	60fb      	str	r3, [r7, #12]
 8002cc4:	e001      	b.n	8002cca <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002cca:	f001 fc17 	bl	80044fc <vPortExitCritical>

	return xReturn;
 8002cce:	68fb      	ldr	r3, [r7, #12]
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3710      	adds	r7, #16
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}

08002cd8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002cd8:	b480      	push	{r7}
 8002cda:	b085      	sub	sp, #20
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	60fb      	str	r3, [r7, #12]
 8002ce6:	e014      	b.n	8002d12 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002ce8:	4a0f      	ldr	r2, [pc, #60]	@ (8002d28 <vQueueAddToRegistry+0x50>)
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d10b      	bne.n	8002d0c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002cf4:	490c      	ldr	r1, [pc, #48]	@ (8002d28 <vQueueAddToRegistry+0x50>)
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	683a      	ldr	r2, [r7, #0]
 8002cfa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002cfe:	4a0a      	ldr	r2, [pc, #40]	@ (8002d28 <vQueueAddToRegistry+0x50>)
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	00db      	lsls	r3, r3, #3
 8002d04:	4413      	add	r3, r2
 8002d06:	687a      	ldr	r2, [r7, #4]
 8002d08:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002d0a:	e006      	b.n	8002d1a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	3301      	adds	r3, #1
 8002d10:	60fb      	str	r3, [r7, #12]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2b07      	cmp	r3, #7
 8002d16:	d9e7      	bls.n	8002ce8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002d18:	bf00      	nop
 8002d1a:	bf00      	nop
 8002d1c:	3714      	adds	r7, #20
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr
 8002d26:	bf00      	nop
 8002d28:	20000830 	.word	0x20000830

08002d2c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b086      	sub	sp, #24
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	60f8      	str	r0, [r7, #12]
 8002d34:	60b9      	str	r1, [r7, #8]
 8002d36:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002d3c:	f001 fbac 	bl	8004498 <vPortEnterCritical>
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002d46:	b25b      	sxtb	r3, r3
 8002d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d4c:	d103      	bne.n	8002d56 <vQueueWaitForMessageRestricted+0x2a>
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	2200      	movs	r2, #0
 8002d52:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002d5c:	b25b      	sxtb	r3, r3
 8002d5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d62:	d103      	bne.n	8002d6c <vQueueWaitForMessageRestricted+0x40>
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	2200      	movs	r2, #0
 8002d68:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002d6c:	f001 fbc6 	bl	80044fc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d106      	bne.n	8002d86 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	3324      	adds	r3, #36	@ 0x24
 8002d7c:	687a      	ldr	r2, [r7, #4]
 8002d7e:	68b9      	ldr	r1, [r7, #8]
 8002d80:	4618      	mov	r0, r3
 8002d82:	f000 fc2d 	bl	80035e0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002d86:	6978      	ldr	r0, [r7, #20]
 8002d88:	f7ff ff26 	bl	8002bd8 <prvUnlockQueue>
	}
 8002d8c:	bf00      	nop
 8002d8e:	3718      	adds	r7, #24
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b08e      	sub	sp, #56	@ 0x38
 8002d98:	af04      	add	r7, sp, #16
 8002d9a:	60f8      	str	r0, [r7, #12]
 8002d9c:	60b9      	str	r1, [r7, #8]
 8002d9e:	607a      	str	r2, [r7, #4]
 8002da0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002da2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d10b      	bne.n	8002dc0 <xTaskCreateStatic+0x2c>
	__asm volatile
 8002da8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002dac:	f383 8811 	msr	BASEPRI, r3
 8002db0:	f3bf 8f6f 	isb	sy
 8002db4:	f3bf 8f4f 	dsb	sy
 8002db8:	623b      	str	r3, [r7, #32]
}
 8002dba:	bf00      	nop
 8002dbc:	bf00      	nop
 8002dbe:	e7fd      	b.n	8002dbc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002dc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d10b      	bne.n	8002dde <xTaskCreateStatic+0x4a>
	__asm volatile
 8002dc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002dca:	f383 8811 	msr	BASEPRI, r3
 8002dce:	f3bf 8f6f 	isb	sy
 8002dd2:	f3bf 8f4f 	dsb	sy
 8002dd6:	61fb      	str	r3, [r7, #28]
}
 8002dd8:	bf00      	nop
 8002dda:	bf00      	nop
 8002ddc:	e7fd      	b.n	8002dda <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002dde:	23a8      	movs	r3, #168	@ 0xa8
 8002de0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	2ba8      	cmp	r3, #168	@ 0xa8
 8002de6:	d00b      	beq.n	8002e00 <xTaskCreateStatic+0x6c>
	__asm volatile
 8002de8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002dec:	f383 8811 	msr	BASEPRI, r3
 8002df0:	f3bf 8f6f 	isb	sy
 8002df4:	f3bf 8f4f 	dsb	sy
 8002df8:	61bb      	str	r3, [r7, #24]
}
 8002dfa:	bf00      	nop
 8002dfc:	bf00      	nop
 8002dfe:	e7fd      	b.n	8002dfc <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002e00:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002e02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d01e      	beq.n	8002e46 <xTaskCreateStatic+0xb2>
 8002e08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d01b      	beq.n	8002e46 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002e0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e10:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e14:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002e16:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002e18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e1a:	2202      	movs	r2, #2
 8002e1c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002e20:	2300      	movs	r3, #0
 8002e22:	9303      	str	r3, [sp, #12]
 8002e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e26:	9302      	str	r3, [sp, #8]
 8002e28:	f107 0314 	add.w	r3, r7, #20
 8002e2c:	9301      	str	r3, [sp, #4]
 8002e2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e30:	9300      	str	r3, [sp, #0]
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	687a      	ldr	r2, [r7, #4]
 8002e36:	68b9      	ldr	r1, [r7, #8]
 8002e38:	68f8      	ldr	r0, [r7, #12]
 8002e3a:	f000 f851 	bl	8002ee0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002e3e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002e40:	f000 f8f6 	bl	8003030 <prvAddNewTaskToReadyList>
 8002e44:	e001      	b.n	8002e4a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8002e46:	2300      	movs	r3, #0
 8002e48:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002e4a:	697b      	ldr	r3, [r7, #20]
	}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3728      	adds	r7, #40	@ 0x28
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}

08002e54 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b08c      	sub	sp, #48	@ 0x30
 8002e58:	af04      	add	r7, sp, #16
 8002e5a:	60f8      	str	r0, [r7, #12]
 8002e5c:	60b9      	str	r1, [r7, #8]
 8002e5e:	603b      	str	r3, [r7, #0]
 8002e60:	4613      	mov	r3, r2
 8002e62:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002e64:	88fb      	ldrh	r3, [r7, #6]
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f001 fc37 	bl	80046dc <pvPortMalloc>
 8002e6e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d00e      	beq.n	8002e94 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002e76:	20a8      	movs	r0, #168	@ 0xa8
 8002e78:	f001 fc30 	bl	80046dc <pvPortMalloc>
 8002e7c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d003      	beq.n	8002e8c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002e84:	69fb      	ldr	r3, [r7, #28]
 8002e86:	697a      	ldr	r2, [r7, #20]
 8002e88:	631a      	str	r2, [r3, #48]	@ 0x30
 8002e8a:	e005      	b.n	8002e98 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002e8c:	6978      	ldr	r0, [r7, #20]
 8002e8e:	f001 fcf3 	bl	8004878 <vPortFree>
 8002e92:	e001      	b.n	8002e98 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002e94:	2300      	movs	r3, #0
 8002e96:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d017      	beq.n	8002ece <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002ea6:	88fa      	ldrh	r2, [r7, #6]
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	9303      	str	r3, [sp, #12]
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	9302      	str	r3, [sp, #8]
 8002eb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002eb2:	9301      	str	r3, [sp, #4]
 8002eb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002eb6:	9300      	str	r3, [sp, #0]
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	68b9      	ldr	r1, [r7, #8]
 8002ebc:	68f8      	ldr	r0, [r7, #12]
 8002ebe:	f000 f80f 	bl	8002ee0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002ec2:	69f8      	ldr	r0, [r7, #28]
 8002ec4:	f000 f8b4 	bl	8003030 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	61bb      	str	r3, [r7, #24]
 8002ecc:	e002      	b.n	8002ed4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002ece:	f04f 33ff 	mov.w	r3, #4294967295
 8002ed2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002ed4:	69bb      	ldr	r3, [r7, #24]
	}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3720      	adds	r7, #32
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
	...

08002ee0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b088      	sub	sp, #32
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	60f8      	str	r0, [r7, #12]
 8002ee8:	60b9      	str	r1, [r7, #8]
 8002eea:	607a      	str	r2, [r7, #4]
 8002eec:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002eee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ef0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	21a5      	movs	r1, #165	@ 0xa5
 8002efa:	f001 ffd5 	bl	8004ea8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002efe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f00:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002f08:	3b01      	subs	r3, #1
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	4413      	add	r3, r2
 8002f0e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002f10:	69bb      	ldr	r3, [r7, #24]
 8002f12:	f023 0307 	bic.w	r3, r3, #7
 8002f16:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002f18:	69bb      	ldr	r3, [r7, #24]
 8002f1a:	f003 0307 	and.w	r3, r3, #7
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d00b      	beq.n	8002f3a <prvInitialiseNewTask+0x5a>
	__asm volatile
 8002f22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f26:	f383 8811 	msr	BASEPRI, r3
 8002f2a:	f3bf 8f6f 	isb	sy
 8002f2e:	f3bf 8f4f 	dsb	sy
 8002f32:	617b      	str	r3, [r7, #20]
}
 8002f34:	bf00      	nop
 8002f36:	bf00      	nop
 8002f38:	e7fd      	b.n	8002f36 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d01f      	beq.n	8002f80 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002f40:	2300      	movs	r3, #0
 8002f42:	61fb      	str	r3, [r7, #28]
 8002f44:	e012      	b.n	8002f6c <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002f46:	68ba      	ldr	r2, [r7, #8]
 8002f48:	69fb      	ldr	r3, [r7, #28]
 8002f4a:	4413      	add	r3, r2
 8002f4c:	7819      	ldrb	r1, [r3, #0]
 8002f4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f50:	69fb      	ldr	r3, [r7, #28]
 8002f52:	4413      	add	r3, r2
 8002f54:	3334      	adds	r3, #52	@ 0x34
 8002f56:	460a      	mov	r2, r1
 8002f58:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002f5a:	68ba      	ldr	r2, [r7, #8]
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	4413      	add	r3, r2
 8002f60:	781b      	ldrb	r3, [r3, #0]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d006      	beq.n	8002f74 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	3301      	adds	r3, #1
 8002f6a:	61fb      	str	r3, [r7, #28]
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	2b0f      	cmp	r3, #15
 8002f70:	d9e9      	bls.n	8002f46 <prvInitialiseNewTask+0x66>
 8002f72:	e000      	b.n	8002f76 <prvInitialiseNewTask+0x96>
			{
				break;
 8002f74:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002f76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002f7e:	e003      	b.n	8002f88 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002f80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f82:	2200      	movs	r2, #0
 8002f84:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002f88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f8a:	2b37      	cmp	r3, #55	@ 0x37
 8002f8c:	d901      	bls.n	8002f92 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002f8e:	2337      	movs	r3, #55	@ 0x37
 8002f90:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002f92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f94:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002f96:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002f98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f9a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002f9c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002f9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002fa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fa6:	3304      	adds	r3, #4
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f7ff f995 	bl	80022d8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002fae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fb0:	3318      	adds	r3, #24
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f7ff f990 	bl	80022d8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002fb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002fbc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002fbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fc0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8002fc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fc6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002fc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002fcc:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002fce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002fd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8002fde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fe0:	3354      	adds	r3, #84	@ 0x54
 8002fe2:	224c      	movs	r2, #76	@ 0x4c
 8002fe4:	2100      	movs	r1, #0
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f001 ff5e 	bl	8004ea8 <memset>
 8002fec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fee:	4a0d      	ldr	r2, [pc, #52]	@ (8003024 <prvInitialiseNewTask+0x144>)
 8002ff0:	659a      	str	r2, [r3, #88]	@ 0x58
 8002ff2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ff4:	4a0c      	ldr	r2, [pc, #48]	@ (8003028 <prvInitialiseNewTask+0x148>)
 8002ff6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002ff8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ffa:	4a0c      	ldr	r2, [pc, #48]	@ (800302c <prvInitialiseNewTask+0x14c>)
 8002ffc:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002ffe:	683a      	ldr	r2, [r7, #0]
 8003000:	68f9      	ldr	r1, [r7, #12]
 8003002:	69b8      	ldr	r0, [r7, #24]
 8003004:	f001 f914 	bl	8004230 <pxPortInitialiseStack>
 8003008:	4602      	mov	r2, r0
 800300a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800300c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800300e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003010:	2b00      	cmp	r3, #0
 8003012:	d002      	beq.n	800301a <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003014:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003016:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003018:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800301a:	bf00      	nop
 800301c:	3720      	adds	r7, #32
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	20004ac4 	.word	0x20004ac4
 8003028:	20004b2c 	.word	0x20004b2c
 800302c:	20004b94 	.word	0x20004b94

08003030 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b082      	sub	sp, #8
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003038:	f001 fa2e 	bl	8004498 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800303c:	4b26      	ldr	r3, [pc, #152]	@ (80030d8 <prvAddNewTaskToReadyList+0xa8>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	3301      	adds	r3, #1
 8003042:	4a25      	ldr	r2, [pc, #148]	@ (80030d8 <prvAddNewTaskToReadyList+0xa8>)
 8003044:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003046:	4b25      	ldr	r3, [pc, #148]	@ (80030dc <prvAddNewTaskToReadyList+0xac>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d109      	bne.n	8003062 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800304e:	4a23      	ldr	r2, [pc, #140]	@ (80030dc <prvAddNewTaskToReadyList+0xac>)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003054:	4b20      	ldr	r3, [pc, #128]	@ (80030d8 <prvAddNewTaskToReadyList+0xa8>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	2b01      	cmp	r3, #1
 800305a:	d110      	bne.n	800307e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800305c:	f000 fbe8 	bl	8003830 <prvInitialiseTaskLists>
 8003060:	e00d      	b.n	800307e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003062:	4b1f      	ldr	r3, [pc, #124]	@ (80030e0 <prvAddNewTaskToReadyList+0xb0>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d109      	bne.n	800307e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800306a:	4b1c      	ldr	r3, [pc, #112]	@ (80030dc <prvAddNewTaskToReadyList+0xac>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003074:	429a      	cmp	r2, r3
 8003076:	d802      	bhi.n	800307e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003078:	4a18      	ldr	r2, [pc, #96]	@ (80030dc <prvAddNewTaskToReadyList+0xac>)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800307e:	4b19      	ldr	r3, [pc, #100]	@ (80030e4 <prvAddNewTaskToReadyList+0xb4>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	3301      	adds	r3, #1
 8003084:	4a17      	ldr	r2, [pc, #92]	@ (80030e4 <prvAddNewTaskToReadyList+0xb4>)
 8003086:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003088:	4b16      	ldr	r3, [pc, #88]	@ (80030e4 <prvAddNewTaskToReadyList+0xb4>)
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003094:	4b14      	ldr	r3, [pc, #80]	@ (80030e8 <prvAddNewTaskToReadyList+0xb8>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	429a      	cmp	r2, r3
 800309a:	d903      	bls.n	80030a4 <prvAddNewTaskToReadyList+0x74>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030a0:	4a11      	ldr	r2, [pc, #68]	@ (80030e8 <prvAddNewTaskToReadyList+0xb8>)
 80030a2:	6013      	str	r3, [r2, #0]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030a8:	4613      	mov	r3, r2
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	4413      	add	r3, r2
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	4a0e      	ldr	r2, [pc, #56]	@ (80030ec <prvAddNewTaskToReadyList+0xbc>)
 80030b2:	441a      	add	r2, r3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	3304      	adds	r3, #4
 80030b8:	4619      	mov	r1, r3
 80030ba:	4610      	mov	r0, r2
 80030bc:	f7ff f919 	bl	80022f2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80030c0:	f001 fa1c 	bl	80044fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80030c4:	4b06      	ldr	r3, [pc, #24]	@ (80030e0 <prvAddNewTaskToReadyList+0xb0>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d001      	beq.n	80030d0 <prvAddNewTaskToReadyList+0xa0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80030cc:	4b03      	ldr	r3, [pc, #12]	@ (80030dc <prvAddNewTaskToReadyList+0xac>)
 80030ce:	681b      	ldr	r3, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80030d0:	bf00      	nop
 80030d2:	3708      	adds	r7, #8
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}
 80030d8:	20000d44 	.word	0x20000d44
 80030dc:	20000870 	.word	0x20000870
 80030e0:	20000d50 	.word	0x20000d50
 80030e4:	20000d60 	.word	0x20000d60
 80030e8:	20000d4c 	.word	0x20000d4c
 80030ec:	20000874 	.word	0x20000874

080030f0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b084      	sub	sp, #16
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80030f8:	2300      	movs	r3, #0
 80030fa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d018      	beq.n	8003134 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003102:	4b14      	ldr	r3, [pc, #80]	@ (8003154 <vTaskDelay+0x64>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d00b      	beq.n	8003122 <vTaskDelay+0x32>
	__asm volatile
 800310a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800310e:	f383 8811 	msr	BASEPRI, r3
 8003112:	f3bf 8f6f 	isb	sy
 8003116:	f3bf 8f4f 	dsb	sy
 800311a:	60bb      	str	r3, [r7, #8]
}
 800311c:	bf00      	nop
 800311e:	bf00      	nop
 8003120:	e7fd      	b.n	800311e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003122:	f000 f88b 	bl	800323c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003126:	2100      	movs	r1, #0
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	f000 fcd3 	bl	8003ad4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800312e:	f000 f893 	bl	8003258 <xTaskResumeAll>
 8003132:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d107      	bne.n	800314a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800313a:	4b07      	ldr	r3, [pc, #28]	@ (8003158 <vTaskDelay+0x68>)
 800313c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003140:	601a      	str	r2, [r3, #0]
 8003142:	f3bf 8f4f 	dsb	sy
 8003146:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800314a:	bf00      	nop
 800314c:	3710      	adds	r7, #16
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	20000d6c 	.word	0x20000d6c
 8003158:	e000ed04 	.word	0xe000ed04

0800315c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b08a      	sub	sp, #40	@ 0x28
 8003160:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003162:	2300      	movs	r3, #0
 8003164:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003166:	2300      	movs	r3, #0
 8003168:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800316a:	463a      	mov	r2, r7
 800316c:	1d39      	adds	r1, r7, #4
 800316e:	f107 0308 	add.w	r3, r7, #8
 8003172:	4618      	mov	r0, r3
 8003174:	f7ff f85c 	bl	8002230 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003178:	6839      	ldr	r1, [r7, #0]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	68ba      	ldr	r2, [r7, #8]
 800317e:	9202      	str	r2, [sp, #8]
 8003180:	9301      	str	r3, [sp, #4]
 8003182:	2300      	movs	r3, #0
 8003184:	9300      	str	r3, [sp, #0]
 8003186:	2300      	movs	r3, #0
 8003188:	460a      	mov	r2, r1
 800318a:	4924      	ldr	r1, [pc, #144]	@ (800321c <vTaskStartScheduler+0xc0>)
 800318c:	4824      	ldr	r0, [pc, #144]	@ (8003220 <vTaskStartScheduler+0xc4>)
 800318e:	f7ff fe01 	bl	8002d94 <xTaskCreateStatic>
 8003192:	4603      	mov	r3, r0
 8003194:	4a23      	ldr	r2, [pc, #140]	@ (8003224 <vTaskStartScheduler+0xc8>)
 8003196:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003198:	4b22      	ldr	r3, [pc, #136]	@ (8003224 <vTaskStartScheduler+0xc8>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d002      	beq.n	80031a6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80031a0:	2301      	movs	r3, #1
 80031a2:	617b      	str	r3, [r7, #20]
 80031a4:	e001      	b.n	80031aa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80031a6:	2300      	movs	r3, #0
 80031a8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d102      	bne.n	80031b6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80031b0:	f000 fce4 	bl	8003b7c <xTimerCreateTimerTask>
 80031b4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d11b      	bne.n	80031f4 <vTaskStartScheduler+0x98>
	__asm volatile
 80031bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031c0:	f383 8811 	msr	BASEPRI, r3
 80031c4:	f3bf 8f6f 	isb	sy
 80031c8:	f3bf 8f4f 	dsb	sy
 80031cc:	613b      	str	r3, [r7, #16]
}
 80031ce:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80031d0:	4b15      	ldr	r3, [pc, #84]	@ (8003228 <vTaskStartScheduler+0xcc>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	3354      	adds	r3, #84	@ 0x54
 80031d6:	4a15      	ldr	r2, [pc, #84]	@ (800322c <vTaskStartScheduler+0xd0>)
 80031d8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80031da:	4b15      	ldr	r3, [pc, #84]	@ (8003230 <vTaskStartScheduler+0xd4>)
 80031dc:	f04f 32ff 	mov.w	r2, #4294967295
 80031e0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80031e2:	4b14      	ldr	r3, [pc, #80]	@ (8003234 <vTaskStartScheduler+0xd8>)
 80031e4:	2201      	movs	r2, #1
 80031e6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80031e8:	4b13      	ldr	r3, [pc, #76]	@ (8003238 <vTaskStartScheduler+0xdc>)
 80031ea:	2200      	movs	r2, #0
 80031ec:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80031ee:	f001 f8af 	bl	8004350 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80031f2:	e00f      	b.n	8003214 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031fa:	d10b      	bne.n	8003214 <vTaskStartScheduler+0xb8>
	__asm volatile
 80031fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003200:	f383 8811 	msr	BASEPRI, r3
 8003204:	f3bf 8f6f 	isb	sy
 8003208:	f3bf 8f4f 	dsb	sy
 800320c:	60fb      	str	r3, [r7, #12]
}
 800320e:	bf00      	nop
 8003210:	bf00      	nop
 8003212:	e7fd      	b.n	8003210 <vTaskStartScheduler+0xb4>
}
 8003214:	bf00      	nop
 8003216:	3718      	adds	r7, #24
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}
 800321c:	0800554c 	.word	0x0800554c
 8003220:	0800380d 	.word	0x0800380d
 8003224:	20000d68 	.word	0x20000d68
 8003228:	20000870 	.word	0x20000870
 800322c:	2000001c 	.word	0x2000001c
 8003230:	20000d64 	.word	0x20000d64
 8003234:	20000d50 	.word	0x20000d50
 8003238:	20000d48 	.word	0x20000d48

0800323c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800323c:	b480      	push	{r7}
 800323e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003240:	4b04      	ldr	r3, [pc, #16]	@ (8003254 <vTaskSuspendAll+0x18>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	3301      	adds	r3, #1
 8003246:	4a03      	ldr	r2, [pc, #12]	@ (8003254 <vTaskSuspendAll+0x18>)
 8003248:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800324a:	bf00      	nop
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr
 8003254:	20000d6c 	.word	0x20000d6c

08003258 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b084      	sub	sp, #16
 800325c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800325e:	2300      	movs	r3, #0
 8003260:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003262:	2300      	movs	r3, #0
 8003264:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003266:	4b3c      	ldr	r3, [pc, #240]	@ (8003358 <xTaskResumeAll+0x100>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d10b      	bne.n	8003286 <xTaskResumeAll+0x2e>
	__asm volatile
 800326e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003272:	f383 8811 	msr	BASEPRI, r3
 8003276:	f3bf 8f6f 	isb	sy
 800327a:	f3bf 8f4f 	dsb	sy
 800327e:	603b      	str	r3, [r7, #0]
}
 8003280:	bf00      	nop
 8003282:	bf00      	nop
 8003284:	e7fd      	b.n	8003282 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003286:	f001 f907 	bl	8004498 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800328a:	4b33      	ldr	r3, [pc, #204]	@ (8003358 <xTaskResumeAll+0x100>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	3b01      	subs	r3, #1
 8003290:	4a31      	ldr	r2, [pc, #196]	@ (8003358 <xTaskResumeAll+0x100>)
 8003292:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003294:	4b30      	ldr	r3, [pc, #192]	@ (8003358 <xTaskResumeAll+0x100>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d156      	bne.n	800334a <xTaskResumeAll+0xf2>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800329c:	4b2f      	ldr	r3, [pc, #188]	@ (800335c <xTaskResumeAll+0x104>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d052      	beq.n	800334a <xTaskResumeAll+0xf2>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80032a4:	e02f      	b.n	8003306 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80032a6:	4b2e      	ldr	r3, [pc, #184]	@ (8003360 <xTaskResumeAll+0x108>)
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	3318      	adds	r3, #24
 80032b2:	4618      	mov	r0, r3
 80032b4:	f7ff f87a 	bl	80023ac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	3304      	adds	r3, #4
 80032bc:	4618      	mov	r0, r3
 80032be:	f7ff f875 	bl	80023ac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032c6:	4b27      	ldr	r3, [pc, #156]	@ (8003364 <xTaskResumeAll+0x10c>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d903      	bls.n	80032d6 <xTaskResumeAll+0x7e>
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032d2:	4a24      	ldr	r2, [pc, #144]	@ (8003364 <xTaskResumeAll+0x10c>)
 80032d4:	6013      	str	r3, [r2, #0]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032da:	4613      	mov	r3, r2
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	4413      	add	r3, r2
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	4a21      	ldr	r2, [pc, #132]	@ (8003368 <xTaskResumeAll+0x110>)
 80032e4:	441a      	add	r2, r3
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	3304      	adds	r3, #4
 80032ea:	4619      	mov	r1, r3
 80032ec:	4610      	mov	r0, r2
 80032ee:	f7ff f800 	bl	80022f2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032f6:	4b1d      	ldr	r3, [pc, #116]	@ (800336c <xTaskResumeAll+0x114>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d302      	bcc.n	8003306 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8003300:	4b1b      	ldr	r3, [pc, #108]	@ (8003370 <xTaskResumeAll+0x118>)
 8003302:	2201      	movs	r2, #1
 8003304:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003306:	4b16      	ldr	r3, [pc, #88]	@ (8003360 <xTaskResumeAll+0x108>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d1cb      	bne.n	80032a6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d001      	beq.n	8003318 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003314:	f000 fb30 	bl	8003978 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003318:	4b16      	ldr	r3, [pc, #88]	@ (8003374 <xTaskResumeAll+0x11c>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	60bb      	str	r3, [r7, #8]

					if( xPendedCounts > ( TickType_t ) 0U )
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d010      	beq.n	8003346 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003324:	f000 f838 	bl	8003398 <xTaskIncrementTick>
 8003328:	4603      	mov	r3, r0
 800332a:	2b00      	cmp	r3, #0
 800332c:	d002      	beq.n	8003334 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800332e:	4b10      	ldr	r3, [pc, #64]	@ (8003370 <xTaskResumeAll+0x118>)
 8003330:	2201      	movs	r2, #1
 8003332:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	3b01      	subs	r3, #1
 8003338:	60bb      	str	r3, [r7, #8]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d1f1      	bne.n	8003324 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8003340:	4b0c      	ldr	r3, [pc, #48]	@ (8003374 <xTaskResumeAll+0x11c>)
 8003342:	2200      	movs	r2, #0
 8003344:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003346:	4b0a      	ldr	r3, [pc, #40]	@ (8003370 <xTaskResumeAll+0x118>)
 8003348:	681b      	ldr	r3, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800334a:	f001 f8d7 	bl	80044fc <vPortExitCritical>

	return xAlreadyYielded;
 800334e:	687b      	ldr	r3, [r7, #4]
}
 8003350:	4618      	mov	r0, r3
 8003352:	3710      	adds	r7, #16
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}
 8003358:	20000d6c 	.word	0x20000d6c
 800335c:	20000d44 	.word	0x20000d44
 8003360:	20000d04 	.word	0x20000d04
 8003364:	20000d4c 	.word	0x20000d4c
 8003368:	20000874 	.word	0x20000874
 800336c:	20000870 	.word	0x20000870
 8003370:	20000d58 	.word	0x20000d58
 8003374:	20000d54 	.word	0x20000d54

08003378 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800337e:	4b05      	ldr	r3, [pc, #20]	@ (8003394 <xTaskGetTickCount+0x1c>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003384:	687b      	ldr	r3, [r7, #4]
}
 8003386:	4618      	mov	r0, r3
 8003388:	370c      	adds	r7, #12
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr
 8003392:	bf00      	nop
 8003394:	20000d48 	.word	0x20000d48

08003398 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b086      	sub	sp, #24
 800339c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800339e:	2300      	movs	r3, #0
 80033a0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80033a2:	4b40      	ldr	r3, [pc, #256]	@ (80034a4 <xTaskIncrementTick+0x10c>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d171      	bne.n	800348e <xTaskIncrementTick+0xf6>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80033aa:	4b3f      	ldr	r3, [pc, #252]	@ (80034a8 <xTaskIncrementTick+0x110>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	3301      	adds	r3, #1
 80033b0:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80033b2:	4a3d      	ldr	r2, [pc, #244]	@ (80034a8 <xTaskIncrementTick+0x110>)
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d121      	bne.n	8003402 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80033be:	4b3b      	ldr	r3, [pc, #236]	@ (80034ac <xTaskIncrementTick+0x114>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d00b      	beq.n	80033e0 <xTaskIncrementTick+0x48>
	__asm volatile
 80033c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033cc:	f383 8811 	msr	BASEPRI, r3
 80033d0:	f3bf 8f6f 	isb	sy
 80033d4:	f3bf 8f4f 	dsb	sy
 80033d8:	603b      	str	r3, [r7, #0]
}
 80033da:	bf00      	nop
 80033dc:	bf00      	nop
 80033de:	e7fd      	b.n	80033dc <xTaskIncrementTick+0x44>
 80033e0:	4b32      	ldr	r3, [pc, #200]	@ (80034ac <xTaskIncrementTick+0x114>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	60fb      	str	r3, [r7, #12]
 80033e6:	4b32      	ldr	r3, [pc, #200]	@ (80034b0 <xTaskIncrementTick+0x118>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a30      	ldr	r2, [pc, #192]	@ (80034ac <xTaskIncrementTick+0x114>)
 80033ec:	6013      	str	r3, [r2, #0]
 80033ee:	4a30      	ldr	r2, [pc, #192]	@ (80034b0 <xTaskIncrementTick+0x118>)
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	6013      	str	r3, [r2, #0]
 80033f4:	4b2f      	ldr	r3, [pc, #188]	@ (80034b4 <xTaskIncrementTick+0x11c>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	3301      	adds	r3, #1
 80033fa:	4a2e      	ldr	r2, [pc, #184]	@ (80034b4 <xTaskIncrementTick+0x11c>)
 80033fc:	6013      	str	r3, [r2, #0]
 80033fe:	f000 fabb 	bl	8003978 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003402:	4b2d      	ldr	r3, [pc, #180]	@ (80034b8 <xTaskIncrementTick+0x120>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	693a      	ldr	r2, [r7, #16]
 8003408:	429a      	cmp	r2, r3
 800340a:	d345      	bcc.n	8003498 <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800340c:	4b27      	ldr	r3, [pc, #156]	@ (80034ac <xTaskIncrementTick+0x114>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d104      	bne.n	8003420 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003416:	4b28      	ldr	r3, [pc, #160]	@ (80034b8 <xTaskIncrementTick+0x120>)
 8003418:	f04f 32ff 	mov.w	r2, #4294967295
 800341c:	601a      	str	r2, [r3, #0]
					break;
 800341e:	e03b      	b.n	8003498 <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003420:	4b22      	ldr	r3, [pc, #136]	@ (80034ac <xTaskIncrementTick+0x114>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	68db      	ldr	r3, [r3, #12]
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003430:	693a      	ldr	r2, [r7, #16]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	429a      	cmp	r2, r3
 8003436:	d203      	bcs.n	8003440 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003438:	4a1f      	ldr	r2, [pc, #124]	@ (80034b8 <xTaskIncrementTick+0x120>)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800343e:	e02b      	b.n	8003498 <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	3304      	adds	r3, #4
 8003444:	4618      	mov	r0, r3
 8003446:	f7fe ffb1 	bl	80023ac <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800344e:	2b00      	cmp	r3, #0
 8003450:	d004      	beq.n	800345c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	3318      	adds	r3, #24
 8003456:	4618      	mov	r0, r3
 8003458:	f7fe ffa8 	bl	80023ac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003460:	4b16      	ldr	r3, [pc, #88]	@ (80034bc <xTaskIncrementTick+0x124>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	429a      	cmp	r2, r3
 8003466:	d903      	bls.n	8003470 <xTaskIncrementTick+0xd8>
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800346c:	4a13      	ldr	r2, [pc, #76]	@ (80034bc <xTaskIncrementTick+0x124>)
 800346e:	6013      	str	r3, [r2, #0]
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003474:	4613      	mov	r3, r2
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	4413      	add	r3, r2
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	4a10      	ldr	r2, [pc, #64]	@ (80034c0 <xTaskIncrementTick+0x128>)
 800347e:	441a      	add	r2, r3
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	3304      	adds	r3, #4
 8003484:	4619      	mov	r1, r3
 8003486:	4610      	mov	r0, r2
 8003488:	f7fe ff33 	bl	80022f2 <vListInsertEnd>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800348c:	e7be      	b.n	800340c <xTaskIncrementTick+0x74>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800348e:	4b0d      	ldr	r3, [pc, #52]	@ (80034c4 <xTaskIncrementTick+0x12c>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	3301      	adds	r3, #1
 8003494:	4a0b      	ldr	r2, [pc, #44]	@ (80034c4 <xTaskIncrementTick+0x12c>)
 8003496:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003498:	697b      	ldr	r3, [r7, #20]
}
 800349a:	4618      	mov	r0, r3
 800349c:	3718      	adds	r7, #24
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	20000d6c 	.word	0x20000d6c
 80034a8:	20000d48 	.word	0x20000d48
 80034ac:	20000cfc 	.word	0x20000cfc
 80034b0:	20000d00 	.word	0x20000d00
 80034b4:	20000d5c 	.word	0x20000d5c
 80034b8:	20000d64 	.word	0x20000d64
 80034bc:	20000d4c 	.word	0x20000d4c
 80034c0:	20000874 	.word	0x20000874
 80034c4:	20000d54 	.word	0x20000d54

080034c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80034c8:	b480      	push	{r7}
 80034ca:	b085      	sub	sp, #20
 80034cc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80034ce:	4b2b      	ldr	r3, [pc, #172]	@ (800357c <vTaskSwitchContext+0xb4>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d003      	beq.n	80034de <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80034d6:	4b2a      	ldr	r3, [pc, #168]	@ (8003580 <vTaskSwitchContext+0xb8>)
 80034d8:	2201      	movs	r2, #1
 80034da:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80034dc:	e047      	b.n	800356e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 80034de:	4b28      	ldr	r3, [pc, #160]	@ (8003580 <vTaskSwitchContext+0xb8>)
 80034e0:	2200      	movs	r2, #0
 80034e2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80034e4:	4b27      	ldr	r3, [pc, #156]	@ (8003584 <vTaskSwitchContext+0xbc>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	60fb      	str	r3, [r7, #12]
 80034ea:	e011      	b.n	8003510 <vTaskSwitchContext+0x48>
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d10b      	bne.n	800350a <vTaskSwitchContext+0x42>
	__asm volatile
 80034f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034f6:	f383 8811 	msr	BASEPRI, r3
 80034fa:	f3bf 8f6f 	isb	sy
 80034fe:	f3bf 8f4f 	dsb	sy
 8003502:	607b      	str	r3, [r7, #4]
}
 8003504:	bf00      	nop
 8003506:	bf00      	nop
 8003508:	e7fd      	b.n	8003506 <vTaskSwitchContext+0x3e>
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	3b01      	subs	r3, #1
 800350e:	60fb      	str	r3, [r7, #12]
 8003510:	491d      	ldr	r1, [pc, #116]	@ (8003588 <vTaskSwitchContext+0xc0>)
 8003512:	68fa      	ldr	r2, [r7, #12]
 8003514:	4613      	mov	r3, r2
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	4413      	add	r3, r2
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	440b      	add	r3, r1
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d0e3      	beq.n	80034ec <vTaskSwitchContext+0x24>
 8003524:	68fa      	ldr	r2, [r7, #12]
 8003526:	4613      	mov	r3, r2
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	4413      	add	r3, r2
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	4a16      	ldr	r2, [pc, #88]	@ (8003588 <vTaskSwitchContext+0xc0>)
 8003530:	4413      	add	r3, r2
 8003532:	60bb      	str	r3, [r7, #8]
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	685a      	ldr	r2, [r3, #4]
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	605a      	str	r2, [r3, #4]
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	685a      	ldr	r2, [r3, #4]
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	3308      	adds	r3, #8
 8003546:	429a      	cmp	r2, r3
 8003548:	d104      	bne.n	8003554 <vTaskSwitchContext+0x8c>
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	685a      	ldr	r2, [r3, #4]
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	605a      	str	r2, [r3, #4]
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	68db      	ldr	r3, [r3, #12]
 800355a:	4a0c      	ldr	r2, [pc, #48]	@ (800358c <vTaskSwitchContext+0xc4>)
 800355c:	6013      	str	r3, [r2, #0]
 800355e:	4a09      	ldr	r2, [pc, #36]	@ (8003584 <vTaskSwitchContext+0xbc>)
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003564:	4b09      	ldr	r3, [pc, #36]	@ (800358c <vTaskSwitchContext+0xc4>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	3354      	adds	r3, #84	@ 0x54
 800356a:	4a09      	ldr	r2, [pc, #36]	@ (8003590 <vTaskSwitchContext+0xc8>)
 800356c:	6013      	str	r3, [r2, #0]
}
 800356e:	bf00      	nop
 8003570:	3714      	adds	r7, #20
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr
 800357a:	bf00      	nop
 800357c:	20000d6c 	.word	0x20000d6c
 8003580:	20000d58 	.word	0x20000d58
 8003584:	20000d4c 	.word	0x20000d4c
 8003588:	20000874 	.word	0x20000874
 800358c:	20000870 	.word	0x20000870
 8003590:	2000001c 	.word	0x2000001c

08003594 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d10b      	bne.n	80035bc <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80035a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035a8:	f383 8811 	msr	BASEPRI, r3
 80035ac:	f3bf 8f6f 	isb	sy
 80035b0:	f3bf 8f4f 	dsb	sy
 80035b4:	60fb      	str	r3, [r7, #12]
}
 80035b6:	bf00      	nop
 80035b8:	bf00      	nop
 80035ba:	e7fd      	b.n	80035b8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80035bc:	4b07      	ldr	r3, [pc, #28]	@ (80035dc <vTaskPlaceOnEventList+0x48>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	3318      	adds	r3, #24
 80035c2:	4619      	mov	r1, r3
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f7fe feb8 	bl	800233a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80035ca:	2101      	movs	r1, #1
 80035cc:	6838      	ldr	r0, [r7, #0]
 80035ce:	f000 fa81 	bl	8003ad4 <prvAddCurrentTaskToDelayedList>
}
 80035d2:	bf00      	nop
 80035d4:	3710      	adds	r7, #16
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	20000870 	.word	0x20000870

080035e0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b086      	sub	sp, #24
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	60b9      	str	r1, [r7, #8]
 80035ea:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d10b      	bne.n	800360a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80035f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035f6:	f383 8811 	msr	BASEPRI, r3
 80035fa:	f3bf 8f6f 	isb	sy
 80035fe:	f3bf 8f4f 	dsb	sy
 8003602:	617b      	str	r3, [r7, #20]
}
 8003604:	bf00      	nop
 8003606:	bf00      	nop
 8003608:	e7fd      	b.n	8003606 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800360a:	4b0a      	ldr	r3, [pc, #40]	@ (8003634 <vTaskPlaceOnEventListRestricted+0x54>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	3318      	adds	r3, #24
 8003610:	4619      	mov	r1, r3
 8003612:	68f8      	ldr	r0, [r7, #12]
 8003614:	f7fe fe6d 	bl	80022f2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d002      	beq.n	8003624 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800361e:	f04f 33ff 	mov.w	r3, #4294967295
 8003622:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003624:	6879      	ldr	r1, [r7, #4]
 8003626:	68b8      	ldr	r0, [r7, #8]
 8003628:	f000 fa54 	bl	8003ad4 <prvAddCurrentTaskToDelayedList>
	}
 800362c:	bf00      	nop
 800362e:	3718      	adds	r7, #24
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}
 8003634:	20000870 	.word	0x20000870

08003638 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b086      	sub	sp, #24
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d10b      	bne.n	8003666 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800364e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003652:	f383 8811 	msr	BASEPRI, r3
 8003656:	f3bf 8f6f 	isb	sy
 800365a:	f3bf 8f4f 	dsb	sy
 800365e:	60fb      	str	r3, [r7, #12]
}
 8003660:	bf00      	nop
 8003662:	bf00      	nop
 8003664:	e7fd      	b.n	8003662 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	3318      	adds	r3, #24
 800366a:	4618      	mov	r0, r3
 800366c:	f7fe fe9e 	bl	80023ac <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003670:	4b1d      	ldr	r3, [pc, #116]	@ (80036e8 <xTaskRemoveFromEventList+0xb0>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d11d      	bne.n	80036b4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	3304      	adds	r3, #4
 800367c:	4618      	mov	r0, r3
 800367e:	f7fe fe95 	bl	80023ac <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003686:	4b19      	ldr	r3, [pc, #100]	@ (80036ec <xTaskRemoveFromEventList+0xb4>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	429a      	cmp	r2, r3
 800368c:	d903      	bls.n	8003696 <xTaskRemoveFromEventList+0x5e>
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003692:	4a16      	ldr	r2, [pc, #88]	@ (80036ec <xTaskRemoveFromEventList+0xb4>)
 8003694:	6013      	str	r3, [r2, #0]
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800369a:	4613      	mov	r3, r2
 800369c:	009b      	lsls	r3, r3, #2
 800369e:	4413      	add	r3, r2
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	4a13      	ldr	r2, [pc, #76]	@ (80036f0 <xTaskRemoveFromEventList+0xb8>)
 80036a4:	441a      	add	r2, r3
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	3304      	adds	r3, #4
 80036aa:	4619      	mov	r1, r3
 80036ac:	4610      	mov	r0, r2
 80036ae:	f7fe fe20 	bl	80022f2 <vListInsertEnd>
 80036b2:	e005      	b.n	80036c0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	3318      	adds	r3, #24
 80036b8:	4619      	mov	r1, r3
 80036ba:	480e      	ldr	r0, [pc, #56]	@ (80036f4 <xTaskRemoveFromEventList+0xbc>)
 80036bc:	f7fe fe19 	bl	80022f2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036c4:	4b0c      	ldr	r3, [pc, #48]	@ (80036f8 <xTaskRemoveFromEventList+0xc0>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d905      	bls.n	80036da <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80036ce:	2301      	movs	r3, #1
 80036d0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80036d2:	4b0a      	ldr	r3, [pc, #40]	@ (80036fc <xTaskRemoveFromEventList+0xc4>)
 80036d4:	2201      	movs	r2, #1
 80036d6:	601a      	str	r2, [r3, #0]
 80036d8:	e001      	b.n	80036de <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80036da:	2300      	movs	r3, #0
 80036dc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80036de:	697b      	ldr	r3, [r7, #20]
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	3718      	adds	r7, #24
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}
 80036e8:	20000d6c 	.word	0x20000d6c
 80036ec:	20000d4c 	.word	0x20000d4c
 80036f0:	20000874 	.word	0x20000874
 80036f4:	20000d04 	.word	0x20000d04
 80036f8:	20000870 	.word	0x20000870
 80036fc:	20000d58 	.word	0x20000d58

08003700 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003700:	b480      	push	{r7}
 8003702:	b083      	sub	sp, #12
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003708:	4b06      	ldr	r3, [pc, #24]	@ (8003724 <vTaskInternalSetTimeOutState+0x24>)
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003710:	4b05      	ldr	r3, [pc, #20]	@ (8003728 <vTaskInternalSetTimeOutState+0x28>)
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	605a      	str	r2, [r3, #4]
}
 8003718:	bf00      	nop
 800371a:	370c      	adds	r7, #12
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr
 8003724:	20000d5c 	.word	0x20000d5c
 8003728:	20000d48 	.word	0x20000d48

0800372c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b088      	sub	sp, #32
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d10b      	bne.n	8003754 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800373c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003740:	f383 8811 	msr	BASEPRI, r3
 8003744:	f3bf 8f6f 	isb	sy
 8003748:	f3bf 8f4f 	dsb	sy
 800374c:	613b      	str	r3, [r7, #16]
}
 800374e:	bf00      	nop
 8003750:	bf00      	nop
 8003752:	e7fd      	b.n	8003750 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d10b      	bne.n	8003772 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800375a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800375e:	f383 8811 	msr	BASEPRI, r3
 8003762:	f3bf 8f6f 	isb	sy
 8003766:	f3bf 8f4f 	dsb	sy
 800376a:	60fb      	str	r3, [r7, #12]
}
 800376c:	bf00      	nop
 800376e:	bf00      	nop
 8003770:	e7fd      	b.n	800376e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8003772:	f000 fe91 	bl	8004498 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003776:	4b1d      	ldr	r3, [pc, #116]	@ (80037ec <xTaskCheckForTimeOut+0xc0>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	69ba      	ldr	r2, [r7, #24]
 8003782:	1ad3      	subs	r3, r2, r3
 8003784:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800378e:	d102      	bne.n	8003796 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003790:	2300      	movs	r3, #0
 8003792:	61fb      	str	r3, [r7, #28]
 8003794:	e023      	b.n	80037de <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	4b15      	ldr	r3, [pc, #84]	@ (80037f0 <xTaskCheckForTimeOut+0xc4>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	429a      	cmp	r2, r3
 80037a0:	d007      	beq.n	80037b2 <xTaskCheckForTimeOut+0x86>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	69ba      	ldr	r2, [r7, #24]
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d302      	bcc.n	80037b2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80037ac:	2301      	movs	r3, #1
 80037ae:	61fb      	str	r3, [r7, #28]
 80037b0:	e015      	b.n	80037de <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	697a      	ldr	r2, [r7, #20]
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d20b      	bcs.n	80037d4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	1ad2      	subs	r2, r2, r3
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f7ff ff99 	bl	8003700 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80037ce:	2300      	movs	r3, #0
 80037d0:	61fb      	str	r3, [r7, #28]
 80037d2:	e004      	b.n	80037de <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	2200      	movs	r2, #0
 80037d8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80037da:	2301      	movs	r3, #1
 80037dc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80037de:	f000 fe8d 	bl	80044fc <vPortExitCritical>

	return xReturn;
 80037e2:	69fb      	ldr	r3, [r7, #28]
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	3720      	adds	r7, #32
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}
 80037ec:	20000d48 	.word	0x20000d48
 80037f0:	20000d5c 	.word	0x20000d5c

080037f4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80037f4:	b480      	push	{r7}
 80037f6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80037f8:	4b03      	ldr	r3, [pc, #12]	@ (8003808 <vTaskMissedYield+0x14>)
 80037fa:	2201      	movs	r2, #1
 80037fc:	601a      	str	r2, [r3, #0]
}
 80037fe:	bf00      	nop
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr
 8003808:	20000d58 	.word	0x20000d58

0800380c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b082      	sub	sp, #8
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003814:	f000 f84c 	bl	80038b0 <prvCheckTasksWaitingTermination>
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
 8003818:	4b04      	ldr	r3, [pc, #16]	@ (800382c <prvIdleTask+0x20>)
 800381a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800381e:	601a      	str	r2, [r3, #0]
 8003820:	f3bf 8f4f 	dsb	sy
 8003824:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003828:	bf00      	nop
 800382a:	e7f3      	b.n	8003814 <prvIdleTask+0x8>
 800382c:	e000ed04 	.word	0xe000ed04

08003830 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b082      	sub	sp, #8
 8003834:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003836:	2300      	movs	r3, #0
 8003838:	607b      	str	r3, [r7, #4]
 800383a:	e00c      	b.n	8003856 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800383c:	687a      	ldr	r2, [r7, #4]
 800383e:	4613      	mov	r3, r2
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	4413      	add	r3, r2
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	4a12      	ldr	r2, [pc, #72]	@ (8003890 <prvInitialiseTaskLists+0x60>)
 8003848:	4413      	add	r3, r2
 800384a:	4618      	mov	r0, r3
 800384c:	f7fe fd24 	bl	8002298 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	3301      	adds	r3, #1
 8003854:	607b      	str	r3, [r7, #4]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2b37      	cmp	r3, #55	@ 0x37
 800385a:	d9ef      	bls.n	800383c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800385c:	480d      	ldr	r0, [pc, #52]	@ (8003894 <prvInitialiseTaskLists+0x64>)
 800385e:	f7fe fd1b 	bl	8002298 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003862:	480d      	ldr	r0, [pc, #52]	@ (8003898 <prvInitialiseTaskLists+0x68>)
 8003864:	f7fe fd18 	bl	8002298 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003868:	480c      	ldr	r0, [pc, #48]	@ (800389c <prvInitialiseTaskLists+0x6c>)
 800386a:	f7fe fd15 	bl	8002298 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800386e:	480c      	ldr	r0, [pc, #48]	@ (80038a0 <prvInitialiseTaskLists+0x70>)
 8003870:	f7fe fd12 	bl	8002298 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003874:	480b      	ldr	r0, [pc, #44]	@ (80038a4 <prvInitialiseTaskLists+0x74>)
 8003876:	f7fe fd0f 	bl	8002298 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800387a:	4b0b      	ldr	r3, [pc, #44]	@ (80038a8 <prvInitialiseTaskLists+0x78>)
 800387c:	4a05      	ldr	r2, [pc, #20]	@ (8003894 <prvInitialiseTaskLists+0x64>)
 800387e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003880:	4b0a      	ldr	r3, [pc, #40]	@ (80038ac <prvInitialiseTaskLists+0x7c>)
 8003882:	4a05      	ldr	r2, [pc, #20]	@ (8003898 <prvInitialiseTaskLists+0x68>)
 8003884:	601a      	str	r2, [r3, #0]
}
 8003886:	bf00      	nop
 8003888:	3708      	adds	r7, #8
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}
 800388e:	bf00      	nop
 8003890:	20000874 	.word	0x20000874
 8003894:	20000cd4 	.word	0x20000cd4
 8003898:	20000ce8 	.word	0x20000ce8
 800389c:	20000d04 	.word	0x20000d04
 80038a0:	20000d18 	.word	0x20000d18
 80038a4:	20000d30 	.word	0x20000d30
 80038a8:	20000cfc 	.word	0x20000cfc
 80038ac:	20000d00 	.word	0x20000d00

080038b0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b082      	sub	sp, #8
 80038b4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80038b6:	e019      	b.n	80038ec <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80038b8:	f000 fdee 	bl	8004498 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80038bc:	4b10      	ldr	r3, [pc, #64]	@ (8003900 <prvCheckTasksWaitingTermination+0x50>)
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	68db      	ldr	r3, [r3, #12]
 80038c2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	3304      	adds	r3, #4
 80038c8:	4618      	mov	r0, r3
 80038ca:	f7fe fd6f 	bl	80023ac <uxListRemove>
				--uxCurrentNumberOfTasks;
 80038ce:	4b0d      	ldr	r3, [pc, #52]	@ (8003904 <prvCheckTasksWaitingTermination+0x54>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	3b01      	subs	r3, #1
 80038d4:	4a0b      	ldr	r2, [pc, #44]	@ (8003904 <prvCheckTasksWaitingTermination+0x54>)
 80038d6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80038d8:	4b0b      	ldr	r3, [pc, #44]	@ (8003908 <prvCheckTasksWaitingTermination+0x58>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	3b01      	subs	r3, #1
 80038de:	4a0a      	ldr	r2, [pc, #40]	@ (8003908 <prvCheckTasksWaitingTermination+0x58>)
 80038e0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80038e2:	f000 fe0b 	bl	80044fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f000 f810 	bl	800390c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80038ec:	4b06      	ldr	r3, [pc, #24]	@ (8003908 <prvCheckTasksWaitingTermination+0x58>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d1e1      	bne.n	80038b8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80038f4:	bf00      	nop
 80038f6:	bf00      	nop
 80038f8:	3708      	adds	r7, #8
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	bf00      	nop
 8003900:	20000d18 	.word	0x20000d18
 8003904:	20000d44 	.word	0x20000d44
 8003908:	20000d2c 	.word	0x20000d2c

0800390c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800390c:	b580      	push	{r7, lr}
 800390e:	b084      	sub	sp, #16
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	3354      	adds	r3, #84	@ 0x54
 8003918:	4618      	mov	r0, r3
 800391a:	f001 fadd 	bl	8004ed8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8003924:	2b00      	cmp	r3, #0
 8003926:	d108      	bne.n	800393a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800392c:	4618      	mov	r0, r3
 800392e:	f000 ffa3 	bl	8004878 <vPortFree>
				vPortFree( pxTCB );
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f000 ffa0 	bl	8004878 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003938:	e019      	b.n	800396e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8003940:	2b01      	cmp	r3, #1
 8003942:	d103      	bne.n	800394c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f000 ff97 	bl	8004878 <vPortFree>
	}
 800394a:	e010      	b.n	800396e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8003952:	2b02      	cmp	r3, #2
 8003954:	d00b      	beq.n	800396e <prvDeleteTCB+0x62>
	__asm volatile
 8003956:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800395a:	f383 8811 	msr	BASEPRI, r3
 800395e:	f3bf 8f6f 	isb	sy
 8003962:	f3bf 8f4f 	dsb	sy
 8003966:	60fb      	str	r3, [r7, #12]
}
 8003968:	bf00      	nop
 800396a:	bf00      	nop
 800396c:	e7fd      	b.n	800396a <prvDeleteTCB+0x5e>
	}
 800396e:	bf00      	nop
 8003970:	3710      	adds	r7, #16
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
	...

08003978 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003978:	b480      	push	{r7}
 800397a:	b083      	sub	sp, #12
 800397c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800397e:	4b0c      	ldr	r3, [pc, #48]	@ (80039b0 <prvResetNextTaskUnblockTime+0x38>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d104      	bne.n	8003992 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003988:	4b0a      	ldr	r3, [pc, #40]	@ (80039b4 <prvResetNextTaskUnblockTime+0x3c>)
 800398a:	f04f 32ff 	mov.w	r2, #4294967295
 800398e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003990:	e008      	b.n	80039a4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003992:	4b07      	ldr	r3, [pc, #28]	@ (80039b0 <prvResetNextTaskUnblockTime+0x38>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	68db      	ldr	r3, [r3, #12]
 800399a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	4a04      	ldr	r2, [pc, #16]	@ (80039b4 <prvResetNextTaskUnblockTime+0x3c>)
 80039a2:	6013      	str	r3, [r2, #0]
}
 80039a4:	bf00      	nop
 80039a6:	370c      	adds	r7, #12
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr
 80039b0:	20000cfc 	.word	0x20000cfc
 80039b4:	20000d64 	.word	0x20000d64

080039b8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80039b8:	b480      	push	{r7}
 80039ba:	b083      	sub	sp, #12
 80039bc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80039be:	4b0b      	ldr	r3, [pc, #44]	@ (80039ec <xTaskGetSchedulerState+0x34>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d102      	bne.n	80039cc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80039c6:	2301      	movs	r3, #1
 80039c8:	607b      	str	r3, [r7, #4]
 80039ca:	e008      	b.n	80039de <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80039cc:	4b08      	ldr	r3, [pc, #32]	@ (80039f0 <xTaskGetSchedulerState+0x38>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d102      	bne.n	80039da <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80039d4:	2302      	movs	r3, #2
 80039d6:	607b      	str	r3, [r7, #4]
 80039d8:	e001      	b.n	80039de <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80039da:	2300      	movs	r3, #0
 80039dc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80039de:	687b      	ldr	r3, [r7, #4]
	}
 80039e0:	4618      	mov	r0, r3
 80039e2:	370c      	adds	r7, #12
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr
 80039ec:	20000d50 	.word	0x20000d50
 80039f0:	20000d6c 	.word	0x20000d6c

080039f4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b086      	sub	sp, #24
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003a00:	2300      	movs	r3, #0
 8003a02:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d058      	beq.n	8003abc <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003a0a:	4b2f      	ldr	r3, [pc, #188]	@ (8003ac8 <xTaskPriorityDisinherit+0xd4>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	693a      	ldr	r2, [r7, #16]
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d00b      	beq.n	8003a2c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8003a14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a18:	f383 8811 	msr	BASEPRI, r3
 8003a1c:	f3bf 8f6f 	isb	sy
 8003a20:	f3bf 8f4f 	dsb	sy
 8003a24:	60fb      	str	r3, [r7, #12]
}
 8003a26:	bf00      	nop
 8003a28:	bf00      	nop
 8003a2a:	e7fd      	b.n	8003a28 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d10b      	bne.n	8003a4c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8003a34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a38:	f383 8811 	msr	BASEPRI, r3
 8003a3c:	f3bf 8f6f 	isb	sy
 8003a40:	f3bf 8f4f 	dsb	sy
 8003a44:	60bb      	str	r3, [r7, #8]
}
 8003a46:	bf00      	nop
 8003a48:	bf00      	nop
 8003a4a:	e7fd      	b.n	8003a48 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a50:	1e5a      	subs	r2, r3, #1
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	d02c      	beq.n	8003abc <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d128      	bne.n	8003abc <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	3304      	adds	r3, #4
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f7fe fc9c 	bl	80023ac <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a80:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a8c:	4b0f      	ldr	r3, [pc, #60]	@ (8003acc <xTaskPriorityDisinherit+0xd8>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d903      	bls.n	8003a9c <xTaskPriorityDisinherit+0xa8>
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a98:	4a0c      	ldr	r2, [pc, #48]	@ (8003acc <xTaskPriorityDisinherit+0xd8>)
 8003a9a:	6013      	str	r3, [r2, #0]
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003aa0:	4613      	mov	r3, r2
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	4413      	add	r3, r2
 8003aa6:	009b      	lsls	r3, r3, #2
 8003aa8:	4a09      	ldr	r2, [pc, #36]	@ (8003ad0 <xTaskPriorityDisinherit+0xdc>)
 8003aaa:	441a      	add	r2, r3
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	3304      	adds	r3, #4
 8003ab0:	4619      	mov	r1, r3
 8003ab2:	4610      	mov	r0, r2
 8003ab4:	f7fe fc1d 	bl	80022f2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003abc:	697b      	ldr	r3, [r7, #20]
	}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3718      	adds	r7, #24
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	20000870 	.word	0x20000870
 8003acc:	20000d4c 	.word	0x20000d4c
 8003ad0:	20000874 	.word	0x20000874

08003ad4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b084      	sub	sp, #16
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
 8003adc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003ade:	4b21      	ldr	r3, [pc, #132]	@ (8003b64 <prvAddCurrentTaskToDelayedList+0x90>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003ae4:	4b20      	ldr	r3, [pc, #128]	@ (8003b68 <prvAddCurrentTaskToDelayedList+0x94>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	3304      	adds	r3, #4
 8003aea:	4618      	mov	r0, r3
 8003aec:	f7fe fc5e 	bl	80023ac <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003af6:	d10a      	bne.n	8003b0e <prvAddCurrentTaskToDelayedList+0x3a>
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d007      	beq.n	8003b0e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003afe:	4b1a      	ldr	r3, [pc, #104]	@ (8003b68 <prvAddCurrentTaskToDelayedList+0x94>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	3304      	adds	r3, #4
 8003b04:	4619      	mov	r1, r3
 8003b06:	4819      	ldr	r0, [pc, #100]	@ (8003b6c <prvAddCurrentTaskToDelayedList+0x98>)
 8003b08:	f7fe fbf3 	bl	80022f2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003b0c:	e026      	b.n	8003b5c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003b0e:	68fa      	ldr	r2, [r7, #12]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	4413      	add	r3, r2
 8003b14:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003b16:	4b14      	ldr	r3, [pc, #80]	@ (8003b68 <prvAddCurrentTaskToDelayedList+0x94>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	68ba      	ldr	r2, [r7, #8]
 8003b1c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003b1e:	68ba      	ldr	r2, [r7, #8]
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d209      	bcs.n	8003b3a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b26:	4b12      	ldr	r3, [pc, #72]	@ (8003b70 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	4b0f      	ldr	r3, [pc, #60]	@ (8003b68 <prvAddCurrentTaskToDelayedList+0x94>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	3304      	adds	r3, #4
 8003b30:	4619      	mov	r1, r3
 8003b32:	4610      	mov	r0, r2
 8003b34:	f7fe fc01 	bl	800233a <vListInsert>
}
 8003b38:	e010      	b.n	8003b5c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b3a:	4b0e      	ldr	r3, [pc, #56]	@ (8003b74 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	4b0a      	ldr	r3, [pc, #40]	@ (8003b68 <prvAddCurrentTaskToDelayedList+0x94>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	3304      	adds	r3, #4
 8003b44:	4619      	mov	r1, r3
 8003b46:	4610      	mov	r0, r2
 8003b48:	f7fe fbf7 	bl	800233a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003b4c:	4b0a      	ldr	r3, [pc, #40]	@ (8003b78 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	68ba      	ldr	r2, [r7, #8]
 8003b52:	429a      	cmp	r2, r3
 8003b54:	d202      	bcs.n	8003b5c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003b56:	4a08      	ldr	r2, [pc, #32]	@ (8003b78 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	6013      	str	r3, [r2, #0]
}
 8003b5c:	bf00      	nop
 8003b5e:	3710      	adds	r7, #16
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}
 8003b64:	20000d48 	.word	0x20000d48
 8003b68:	20000870 	.word	0x20000870
 8003b6c:	20000d30 	.word	0x20000d30
 8003b70:	20000d00 	.word	0x20000d00
 8003b74:	20000cfc 	.word	0x20000cfc
 8003b78:	20000d64 	.word	0x20000d64

08003b7c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b08a      	sub	sp, #40	@ 0x28
 8003b80:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003b82:	2300      	movs	r3, #0
 8003b84:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003b86:	f000 fb13 	bl	80041b0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003b8a:	4b1d      	ldr	r3, [pc, #116]	@ (8003c00 <xTimerCreateTimerTask+0x84>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d021      	beq.n	8003bd6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003b92:	2300      	movs	r3, #0
 8003b94:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003b96:	2300      	movs	r3, #0
 8003b98:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003b9a:	1d3a      	adds	r2, r7, #4
 8003b9c:	f107 0108 	add.w	r1, r7, #8
 8003ba0:	f107 030c 	add.w	r3, r7, #12
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f7fe fb5d 	bl	8002264 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003baa:	6879      	ldr	r1, [r7, #4]
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	68fa      	ldr	r2, [r7, #12]
 8003bb0:	9202      	str	r2, [sp, #8]
 8003bb2:	9301      	str	r3, [sp, #4]
 8003bb4:	2302      	movs	r3, #2
 8003bb6:	9300      	str	r3, [sp, #0]
 8003bb8:	2300      	movs	r3, #0
 8003bba:	460a      	mov	r2, r1
 8003bbc:	4911      	ldr	r1, [pc, #68]	@ (8003c04 <xTimerCreateTimerTask+0x88>)
 8003bbe:	4812      	ldr	r0, [pc, #72]	@ (8003c08 <xTimerCreateTimerTask+0x8c>)
 8003bc0:	f7ff f8e8 	bl	8002d94 <xTaskCreateStatic>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	4a11      	ldr	r2, [pc, #68]	@ (8003c0c <xTimerCreateTimerTask+0x90>)
 8003bc8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003bca:	4b10      	ldr	r3, [pc, #64]	@ (8003c0c <xTimerCreateTimerTask+0x90>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d001      	beq.n	8003bd6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d10b      	bne.n	8003bf4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8003bdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003be0:	f383 8811 	msr	BASEPRI, r3
 8003be4:	f3bf 8f6f 	isb	sy
 8003be8:	f3bf 8f4f 	dsb	sy
 8003bec:	613b      	str	r3, [r7, #16]
}
 8003bee:	bf00      	nop
 8003bf0:	bf00      	nop
 8003bf2:	e7fd      	b.n	8003bf0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003bf4:	697b      	ldr	r3, [r7, #20]
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3718      	adds	r7, #24
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	20000da0 	.word	0x20000da0
 8003c04:	08005554 	.word	0x08005554
 8003c08:	08003d49 	.word	0x08003d49
 8003c0c:	20000da4 	.word	0x20000da4

08003c10 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b08a      	sub	sp, #40	@ 0x28
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	60f8      	str	r0, [r7, #12]
 8003c18:	60b9      	str	r1, [r7, #8]
 8003c1a:	607a      	str	r2, [r7, #4]
 8003c1c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d10b      	bne.n	8003c40 <xTimerGenericCommand+0x30>
	__asm volatile
 8003c28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c2c:	f383 8811 	msr	BASEPRI, r3
 8003c30:	f3bf 8f6f 	isb	sy
 8003c34:	f3bf 8f4f 	dsb	sy
 8003c38:	623b      	str	r3, [r7, #32]
}
 8003c3a:	bf00      	nop
 8003c3c:	bf00      	nop
 8003c3e:	e7fd      	b.n	8003c3c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003c40:	4b19      	ldr	r3, [pc, #100]	@ (8003ca8 <xTimerGenericCommand+0x98>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d02a      	beq.n	8003c9e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	2b05      	cmp	r3, #5
 8003c58:	dc18      	bgt.n	8003c8c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003c5a:	f7ff fead 	bl	80039b8 <xTaskGetSchedulerState>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	2b02      	cmp	r3, #2
 8003c62:	d109      	bne.n	8003c78 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003c64:	4b10      	ldr	r3, [pc, #64]	@ (8003ca8 <xTimerGenericCommand+0x98>)
 8003c66:	6818      	ldr	r0, [r3, #0]
 8003c68:	f107 0110 	add.w	r1, r7, #16
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c70:	f7fe fcc2 	bl	80025f8 <xQueueGenericSend>
 8003c74:	6278      	str	r0, [r7, #36]	@ 0x24
 8003c76:	e012      	b.n	8003c9e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003c78:	4b0b      	ldr	r3, [pc, #44]	@ (8003ca8 <xTimerGenericCommand+0x98>)
 8003c7a:	6818      	ldr	r0, [r3, #0]
 8003c7c:	f107 0110 	add.w	r1, r7, #16
 8003c80:	2300      	movs	r3, #0
 8003c82:	2200      	movs	r2, #0
 8003c84:	f7fe fcb8 	bl	80025f8 <xQueueGenericSend>
 8003c88:	6278      	str	r0, [r7, #36]	@ 0x24
 8003c8a:	e008      	b.n	8003c9e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003c8c:	4b06      	ldr	r3, [pc, #24]	@ (8003ca8 <xTimerGenericCommand+0x98>)
 8003c8e:	6818      	ldr	r0, [r3, #0]
 8003c90:	f107 0110 	add.w	r1, r7, #16
 8003c94:	2300      	movs	r3, #0
 8003c96:	683a      	ldr	r2, [r7, #0]
 8003c98:	f7fe fd98 	bl	80027cc <xQueueGenericSendFromISR>
 8003c9c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	3728      	adds	r7, #40	@ 0x28
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}
 8003ca8:	20000da0 	.word	0x20000da0

08003cac <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b088      	sub	sp, #32
 8003cb0:	af02      	add	r7, sp, #8
 8003cb2:	6078      	str	r0, [r7, #4]
 8003cb4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003cb6:	4b23      	ldr	r3, [pc, #140]	@ (8003d44 <prvProcessExpiredTimer+0x98>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	68db      	ldr	r3, [r3, #12]
 8003cbc:	68db      	ldr	r3, [r3, #12]
 8003cbe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	3304      	adds	r3, #4
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f7fe fb71 	bl	80023ac <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003cd0:	f003 0304 	and.w	r3, r3, #4
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d023      	beq.n	8003d20 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	699a      	ldr	r2, [r3, #24]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	18d1      	adds	r1, r2, r3
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	683a      	ldr	r2, [r7, #0]
 8003ce4:	6978      	ldr	r0, [r7, #20]
 8003ce6:	f000 f8d5 	bl	8003e94 <prvInsertTimerInActiveList>
 8003cea:	4603      	mov	r3, r0
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d020      	beq.n	8003d32 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	9300      	str	r3, [sp, #0]
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	2100      	movs	r1, #0
 8003cfa:	6978      	ldr	r0, [r7, #20]
 8003cfc:	f7ff ff88 	bl	8003c10 <xTimerGenericCommand>
 8003d00:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d114      	bne.n	8003d32 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8003d08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d0c:	f383 8811 	msr	BASEPRI, r3
 8003d10:	f3bf 8f6f 	isb	sy
 8003d14:	f3bf 8f4f 	dsb	sy
 8003d18:	60fb      	str	r3, [r7, #12]
}
 8003d1a:	bf00      	nop
 8003d1c:	bf00      	nop
 8003d1e:	e7fd      	b.n	8003d1c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003d26:	f023 0301 	bic.w	r3, r3, #1
 8003d2a:	b2da      	uxtb	r2, r3
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	6a1b      	ldr	r3, [r3, #32]
 8003d36:	6978      	ldr	r0, [r7, #20]
 8003d38:	4798      	blx	r3
}
 8003d3a:	bf00      	nop
 8003d3c:	3718      	adds	r7, #24
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}
 8003d42:	bf00      	nop
 8003d44:	20000d98 	.word	0x20000d98

08003d48 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b084      	sub	sp, #16
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003d50:	f107 0308 	add.w	r3, r7, #8
 8003d54:	4618      	mov	r0, r3
 8003d56:	f000 f859 	bl	8003e0c <prvGetNextExpireTime>
 8003d5a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	4619      	mov	r1, r3
 8003d60:	68f8      	ldr	r0, [r7, #12]
 8003d62:	f000 f805 	bl	8003d70 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003d66:	f000 f8d7 	bl	8003f18 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003d6a:	bf00      	nop
 8003d6c:	e7f0      	b.n	8003d50 <prvTimerTask+0x8>
	...

08003d70 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b084      	sub	sp, #16
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003d7a:	f7ff fa5f 	bl	800323c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003d7e:	f107 0308 	add.w	r3, r7, #8
 8003d82:	4618      	mov	r0, r3
 8003d84:	f000 f866 	bl	8003e54 <prvSampleTimeNow>
 8003d88:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d130      	bne.n	8003df2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d10a      	bne.n	8003dac <prvProcessTimerOrBlockTask+0x3c>
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	d806      	bhi.n	8003dac <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003d9e:	f7ff fa5b 	bl	8003258 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003da2:	68f9      	ldr	r1, [r7, #12]
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	f7ff ff81 	bl	8003cac <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003daa:	e024      	b.n	8003df6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d008      	beq.n	8003dc4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003db2:	4b13      	ldr	r3, [pc, #76]	@ (8003e00 <prvProcessTimerOrBlockTask+0x90>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d101      	bne.n	8003dc0 <prvProcessTimerOrBlockTask+0x50>
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e000      	b.n	8003dc2 <prvProcessTimerOrBlockTask+0x52>
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003dc4:	4b0f      	ldr	r3, [pc, #60]	@ (8003e04 <prvProcessTimerOrBlockTask+0x94>)
 8003dc6:	6818      	ldr	r0, [r3, #0]
 8003dc8:	687a      	ldr	r2, [r7, #4]
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	683a      	ldr	r2, [r7, #0]
 8003dd0:	4619      	mov	r1, r3
 8003dd2:	f7fe ffab 	bl	8002d2c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003dd6:	f7ff fa3f 	bl	8003258 <xTaskResumeAll>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d10a      	bne.n	8003df6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003de0:	4b09      	ldr	r3, [pc, #36]	@ (8003e08 <prvProcessTimerOrBlockTask+0x98>)
 8003de2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003de6:	601a      	str	r2, [r3, #0]
 8003de8:	f3bf 8f4f 	dsb	sy
 8003dec:	f3bf 8f6f 	isb	sy
}
 8003df0:	e001      	b.n	8003df6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003df2:	f7ff fa31 	bl	8003258 <xTaskResumeAll>
}
 8003df6:	bf00      	nop
 8003df8:	3710      	adds	r7, #16
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	bf00      	nop
 8003e00:	20000d9c 	.word	0x20000d9c
 8003e04:	20000da0 	.word	0x20000da0
 8003e08:	e000ed04 	.word	0xe000ed04

08003e0c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b085      	sub	sp, #20
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003e14:	4b0e      	ldr	r3, [pc, #56]	@ (8003e50 <prvGetNextExpireTime+0x44>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d101      	bne.n	8003e22 <prvGetNextExpireTime+0x16>
 8003e1e:	2201      	movs	r2, #1
 8003e20:	e000      	b.n	8003e24 <prvGetNextExpireTime+0x18>
 8003e22:	2200      	movs	r2, #0
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d105      	bne.n	8003e3c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003e30:	4b07      	ldr	r3, [pc, #28]	@ (8003e50 <prvGetNextExpireTime+0x44>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	68db      	ldr	r3, [r3, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	60fb      	str	r3, [r7, #12]
 8003e3a:	e001      	b.n	8003e40 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003e40:	68fb      	ldr	r3, [r7, #12]
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3714      	adds	r7, #20
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr
 8003e4e:	bf00      	nop
 8003e50:	20000d98 	.word	0x20000d98

08003e54 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b084      	sub	sp, #16
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003e5c:	f7ff fa8c 	bl	8003378 <xTaskGetTickCount>
 8003e60:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003e62:	4b0b      	ldr	r3, [pc, #44]	@ (8003e90 <prvSampleTimeNow+0x3c>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	68fa      	ldr	r2, [r7, #12]
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d205      	bcs.n	8003e78 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003e6c:	f000 f93a 	bl	80040e4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2201      	movs	r2, #1
 8003e74:	601a      	str	r2, [r3, #0]
 8003e76:	e002      	b.n	8003e7e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003e7e:	4a04      	ldr	r2, [pc, #16]	@ (8003e90 <prvSampleTimeNow+0x3c>)
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003e84:	68fb      	ldr	r3, [r7, #12]
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3710      	adds	r7, #16
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	bf00      	nop
 8003e90:	20000da8 	.word	0x20000da8

08003e94 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b086      	sub	sp, #24
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	60f8      	str	r0, [r7, #12]
 8003e9c:	60b9      	str	r1, [r7, #8]
 8003e9e:	607a      	str	r2, [r7, #4]
 8003ea0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	68ba      	ldr	r2, [r7, #8]
 8003eaa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	68fa      	ldr	r2, [r7, #12]
 8003eb0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003eb2:	68ba      	ldr	r2, [r7, #8]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	d812      	bhi.n	8003ee0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	1ad2      	subs	r2, r2, r3
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	699b      	ldr	r3, [r3, #24]
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d302      	bcc.n	8003ece <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	617b      	str	r3, [r7, #20]
 8003ecc:	e01b      	b.n	8003f06 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003ece:	4b10      	ldr	r3, [pc, #64]	@ (8003f10 <prvInsertTimerInActiveList+0x7c>)
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	3304      	adds	r3, #4
 8003ed6:	4619      	mov	r1, r3
 8003ed8:	4610      	mov	r0, r2
 8003eda:	f7fe fa2e 	bl	800233a <vListInsert>
 8003ede:	e012      	b.n	8003f06 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003ee0:	687a      	ldr	r2, [r7, #4]
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d206      	bcs.n	8003ef6 <prvInsertTimerInActiveList+0x62>
 8003ee8:	68ba      	ldr	r2, [r7, #8]
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	429a      	cmp	r2, r3
 8003eee:	d302      	bcc.n	8003ef6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	617b      	str	r3, [r7, #20]
 8003ef4:	e007      	b.n	8003f06 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003ef6:	4b07      	ldr	r3, [pc, #28]	@ (8003f14 <prvInsertTimerInActiveList+0x80>)
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	3304      	adds	r3, #4
 8003efe:	4619      	mov	r1, r3
 8003f00:	4610      	mov	r0, r2
 8003f02:	f7fe fa1a 	bl	800233a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003f06:	697b      	ldr	r3, [r7, #20]
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3718      	adds	r7, #24
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}
 8003f10:	20000d9c 	.word	0x20000d9c
 8003f14:	20000d98 	.word	0x20000d98

08003f18 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b08e      	sub	sp, #56	@ 0x38
 8003f1c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003f1e:	e0ce      	b.n	80040be <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	da19      	bge.n	8003f5a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003f26:	1d3b      	adds	r3, r7, #4
 8003f28:	3304      	adds	r3, #4
 8003f2a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8003f2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d10b      	bne.n	8003f4a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8003f32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f36:	f383 8811 	msr	BASEPRI, r3
 8003f3a:	f3bf 8f6f 	isb	sy
 8003f3e:	f3bf 8f4f 	dsb	sy
 8003f42:	61fb      	str	r3, [r7, #28]
}
 8003f44:	bf00      	nop
 8003f46:	bf00      	nop
 8003f48:	e7fd      	b.n	8003f46 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003f4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f50:	6850      	ldr	r0, [r2, #4]
 8003f52:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f54:	6892      	ldr	r2, [r2, #8]
 8003f56:	4611      	mov	r1, r2
 8003f58:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	f2c0 80ae 	blt.w	80040be <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003f66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f68:	695b      	ldr	r3, [r3, #20]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d004      	beq.n	8003f78 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003f6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f70:	3304      	adds	r3, #4
 8003f72:	4618      	mov	r0, r3
 8003f74:	f7fe fa1a 	bl	80023ac <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003f78:	463b      	mov	r3, r7
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f7ff ff6a 	bl	8003e54 <prvSampleTimeNow>
 8003f80:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2b09      	cmp	r3, #9
 8003f86:	f200 8097 	bhi.w	80040b8 <prvProcessReceivedCommands+0x1a0>
 8003f8a:	a201      	add	r2, pc, #4	@ (adr r2, 8003f90 <prvProcessReceivedCommands+0x78>)
 8003f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f90:	08003fb9 	.word	0x08003fb9
 8003f94:	08003fb9 	.word	0x08003fb9
 8003f98:	08003fb9 	.word	0x08003fb9
 8003f9c:	0800402f 	.word	0x0800402f
 8003fa0:	08004043 	.word	0x08004043
 8003fa4:	0800408f 	.word	0x0800408f
 8003fa8:	08003fb9 	.word	0x08003fb9
 8003fac:	08003fb9 	.word	0x08003fb9
 8003fb0:	0800402f 	.word	0x0800402f
 8003fb4:	08004043 	.word	0x08004043
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003fb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fba:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003fbe:	f043 0301 	orr.w	r3, r3, #1
 8003fc2:	b2da      	uxtb	r2, r3
 8003fc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fc6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003fca:	68ba      	ldr	r2, [r7, #8]
 8003fcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fce:	699b      	ldr	r3, [r3, #24]
 8003fd0:	18d1      	adds	r1, r2, r3
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fd6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003fd8:	f7ff ff5c 	bl	8003e94 <prvInsertTimerInActiveList>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d06c      	beq.n	80040bc <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003fe2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fe4:	6a1b      	ldr	r3, [r3, #32]
 8003fe6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003fe8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003fea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003ff0:	f003 0304 	and.w	r3, r3, #4
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d061      	beq.n	80040bc <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003ff8:	68ba      	ldr	r2, [r7, #8]
 8003ffa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ffc:	699b      	ldr	r3, [r3, #24]
 8003ffe:	441a      	add	r2, r3
 8004000:	2300      	movs	r3, #0
 8004002:	9300      	str	r3, [sp, #0]
 8004004:	2300      	movs	r3, #0
 8004006:	2100      	movs	r1, #0
 8004008:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800400a:	f7ff fe01 	bl	8003c10 <xTimerGenericCommand>
 800400e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004010:	6a3b      	ldr	r3, [r7, #32]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d152      	bne.n	80040bc <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8004016:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800401a:	f383 8811 	msr	BASEPRI, r3
 800401e:	f3bf 8f6f 	isb	sy
 8004022:	f3bf 8f4f 	dsb	sy
 8004026:	61bb      	str	r3, [r7, #24]
}
 8004028:	bf00      	nop
 800402a:	bf00      	nop
 800402c:	e7fd      	b.n	800402a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800402e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004030:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004034:	f023 0301 	bic.w	r3, r3, #1
 8004038:	b2da      	uxtb	r2, r3
 800403a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800403c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004040:	e03d      	b.n	80040be <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004042:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004044:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004048:	f043 0301 	orr.w	r3, r3, #1
 800404c:	b2da      	uxtb	r2, r3
 800404e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004050:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004054:	68ba      	ldr	r2, [r7, #8]
 8004056:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004058:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800405a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800405c:	699b      	ldr	r3, [r3, #24]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d10b      	bne.n	800407a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8004062:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004066:	f383 8811 	msr	BASEPRI, r3
 800406a:	f3bf 8f6f 	isb	sy
 800406e:	f3bf 8f4f 	dsb	sy
 8004072:	617b      	str	r3, [r7, #20]
}
 8004074:	bf00      	nop
 8004076:	bf00      	nop
 8004078:	e7fd      	b.n	8004076 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800407a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800407c:	699a      	ldr	r2, [r3, #24]
 800407e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004080:	18d1      	adds	r1, r2, r3
 8004082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004084:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004086:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004088:	f7ff ff04 	bl	8003e94 <prvInsertTimerInActiveList>
					break;
 800408c:	e017      	b.n	80040be <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800408e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004090:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004094:	f003 0302 	and.w	r3, r3, #2
 8004098:	2b00      	cmp	r3, #0
 800409a:	d103      	bne.n	80040a4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800409c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800409e:	f000 fbeb 	bl	8004878 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80040a2:	e00c      	b.n	80040be <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80040a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040a6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80040aa:	f023 0301 	bic.w	r3, r3, #1
 80040ae:	b2da      	uxtb	r2, r3
 80040b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040b2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80040b6:	e002      	b.n	80040be <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80040b8:	bf00      	nop
 80040ba:	e000      	b.n	80040be <prvProcessReceivedCommands+0x1a6>
					break;
 80040bc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80040be:	4b08      	ldr	r3, [pc, #32]	@ (80040e0 <prvProcessReceivedCommands+0x1c8>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	1d39      	adds	r1, r7, #4
 80040c4:	2200      	movs	r2, #0
 80040c6:	4618      	mov	r0, r3
 80040c8:	f7fe fc1e 	bl	8002908 <xQueueReceive>
 80040cc:	4603      	mov	r3, r0
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	f47f af26 	bne.w	8003f20 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80040d4:	bf00      	nop
 80040d6:	bf00      	nop
 80040d8:	3730      	adds	r7, #48	@ 0x30
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}
 80040de:	bf00      	nop
 80040e0:	20000da0 	.word	0x20000da0

080040e4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b088      	sub	sp, #32
 80040e8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80040ea:	e049      	b.n	8004180 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80040ec:	4b2e      	ldr	r3, [pc, #184]	@ (80041a8 <prvSwitchTimerLists+0xc4>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	68db      	ldr	r3, [r3, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040f6:	4b2c      	ldr	r3, [pc, #176]	@ (80041a8 <prvSwitchTimerLists+0xc4>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	68db      	ldr	r3, [r3, #12]
 80040fc:	68db      	ldr	r3, [r3, #12]
 80040fe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	3304      	adds	r3, #4
 8004104:	4618      	mov	r0, r3
 8004106:	f7fe f951 	bl	80023ac <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	6a1b      	ldr	r3, [r3, #32]
 800410e:	68f8      	ldr	r0, [r7, #12]
 8004110:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004118:	f003 0304 	and.w	r3, r3, #4
 800411c:	2b00      	cmp	r3, #0
 800411e:	d02f      	beq.n	8004180 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	699b      	ldr	r3, [r3, #24]
 8004124:	693a      	ldr	r2, [r7, #16]
 8004126:	4413      	add	r3, r2
 8004128:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800412a:	68ba      	ldr	r2, [r7, #8]
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	429a      	cmp	r2, r3
 8004130:	d90e      	bls.n	8004150 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	68ba      	ldr	r2, [r7, #8]
 8004136:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	68fa      	ldr	r2, [r7, #12]
 800413c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800413e:	4b1a      	ldr	r3, [pc, #104]	@ (80041a8 <prvSwitchTimerLists+0xc4>)
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	3304      	adds	r3, #4
 8004146:	4619      	mov	r1, r3
 8004148:	4610      	mov	r0, r2
 800414a:	f7fe f8f6 	bl	800233a <vListInsert>
 800414e:	e017      	b.n	8004180 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004150:	2300      	movs	r3, #0
 8004152:	9300      	str	r3, [sp, #0]
 8004154:	2300      	movs	r3, #0
 8004156:	693a      	ldr	r2, [r7, #16]
 8004158:	2100      	movs	r1, #0
 800415a:	68f8      	ldr	r0, [r7, #12]
 800415c:	f7ff fd58 	bl	8003c10 <xTimerGenericCommand>
 8004160:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d10b      	bne.n	8004180 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8004168:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800416c:	f383 8811 	msr	BASEPRI, r3
 8004170:	f3bf 8f6f 	isb	sy
 8004174:	f3bf 8f4f 	dsb	sy
 8004178:	603b      	str	r3, [r7, #0]
}
 800417a:	bf00      	nop
 800417c:	bf00      	nop
 800417e:	e7fd      	b.n	800417c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004180:	4b09      	ldr	r3, [pc, #36]	@ (80041a8 <prvSwitchTimerLists+0xc4>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d1b0      	bne.n	80040ec <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800418a:	4b07      	ldr	r3, [pc, #28]	@ (80041a8 <prvSwitchTimerLists+0xc4>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004190:	4b06      	ldr	r3, [pc, #24]	@ (80041ac <prvSwitchTimerLists+0xc8>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a04      	ldr	r2, [pc, #16]	@ (80041a8 <prvSwitchTimerLists+0xc4>)
 8004196:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004198:	4a04      	ldr	r2, [pc, #16]	@ (80041ac <prvSwitchTimerLists+0xc8>)
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	6013      	str	r3, [r2, #0]
}
 800419e:	bf00      	nop
 80041a0:	3718      	adds	r7, #24
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	bf00      	nop
 80041a8:	20000d98 	.word	0x20000d98
 80041ac:	20000d9c 	.word	0x20000d9c

080041b0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b082      	sub	sp, #8
 80041b4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80041b6:	f000 f96f 	bl	8004498 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80041ba:	4b15      	ldr	r3, [pc, #84]	@ (8004210 <prvCheckForValidListAndQueue+0x60>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d120      	bne.n	8004204 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80041c2:	4814      	ldr	r0, [pc, #80]	@ (8004214 <prvCheckForValidListAndQueue+0x64>)
 80041c4:	f7fe f868 	bl	8002298 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80041c8:	4813      	ldr	r0, [pc, #76]	@ (8004218 <prvCheckForValidListAndQueue+0x68>)
 80041ca:	f7fe f865 	bl	8002298 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80041ce:	4b13      	ldr	r3, [pc, #76]	@ (800421c <prvCheckForValidListAndQueue+0x6c>)
 80041d0:	4a10      	ldr	r2, [pc, #64]	@ (8004214 <prvCheckForValidListAndQueue+0x64>)
 80041d2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80041d4:	4b12      	ldr	r3, [pc, #72]	@ (8004220 <prvCheckForValidListAndQueue+0x70>)
 80041d6:	4a10      	ldr	r2, [pc, #64]	@ (8004218 <prvCheckForValidListAndQueue+0x68>)
 80041d8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80041da:	2300      	movs	r3, #0
 80041dc:	9300      	str	r3, [sp, #0]
 80041de:	4b11      	ldr	r3, [pc, #68]	@ (8004224 <prvCheckForValidListAndQueue+0x74>)
 80041e0:	4a11      	ldr	r2, [pc, #68]	@ (8004228 <prvCheckForValidListAndQueue+0x78>)
 80041e2:	2110      	movs	r1, #16
 80041e4:	200a      	movs	r0, #10
 80041e6:	f7fe f967 	bl	80024b8 <xQueueGenericCreateStatic>
 80041ea:	4603      	mov	r3, r0
 80041ec:	4a08      	ldr	r2, [pc, #32]	@ (8004210 <prvCheckForValidListAndQueue+0x60>)
 80041ee:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80041f0:	4b07      	ldr	r3, [pc, #28]	@ (8004210 <prvCheckForValidListAndQueue+0x60>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d005      	beq.n	8004204 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80041f8:	4b05      	ldr	r3, [pc, #20]	@ (8004210 <prvCheckForValidListAndQueue+0x60>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	490b      	ldr	r1, [pc, #44]	@ (800422c <prvCheckForValidListAndQueue+0x7c>)
 80041fe:	4618      	mov	r0, r3
 8004200:	f7fe fd6a 	bl	8002cd8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004204:	f000 f97a 	bl	80044fc <vPortExitCritical>
}
 8004208:	bf00      	nop
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}
 800420e:	bf00      	nop
 8004210:	20000da0 	.word	0x20000da0
 8004214:	20000d70 	.word	0x20000d70
 8004218:	20000d84 	.word	0x20000d84
 800421c:	20000d98 	.word	0x20000d98
 8004220:	20000d9c 	.word	0x20000d9c
 8004224:	20000e4c 	.word	0x20000e4c
 8004228:	20000dac 	.word	0x20000dac
 800422c:	0800555c 	.word	0x0800555c

08004230 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004230:	b480      	push	{r7}
 8004232:	b085      	sub	sp, #20
 8004234:	af00      	add	r7, sp, #0
 8004236:	60f8      	str	r0, [r7, #12]
 8004238:	60b9      	str	r1, [r7, #8]
 800423a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	3b04      	subs	r3, #4
 8004240:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004248:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	3b04      	subs	r3, #4
 800424e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	f023 0201 	bic.w	r2, r3, #1
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	3b04      	subs	r3, #4
 800425e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004260:	4a0c      	ldr	r2, [pc, #48]	@ (8004294 <pxPortInitialiseStack+0x64>)
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	3b14      	subs	r3, #20
 800426a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800426c:	687a      	ldr	r2, [r7, #4]
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	3b04      	subs	r3, #4
 8004276:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f06f 0202 	mvn.w	r2, #2
 800427e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	3b20      	subs	r3, #32
 8004284:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004286:	68fb      	ldr	r3, [r7, #12]
}
 8004288:	4618      	mov	r0, r3
 800428a:	3714      	adds	r7, #20
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr
 8004294:	08004299 	.word	0x08004299

08004298 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004298:	b480      	push	{r7}
 800429a:	b085      	sub	sp, #20
 800429c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800429e:	2300      	movs	r3, #0
 80042a0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80042a2:	4b13      	ldr	r3, [pc, #76]	@ (80042f0 <prvTaskExitError+0x58>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042aa:	d00b      	beq.n	80042c4 <prvTaskExitError+0x2c>
	__asm volatile
 80042ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042b0:	f383 8811 	msr	BASEPRI, r3
 80042b4:	f3bf 8f6f 	isb	sy
 80042b8:	f3bf 8f4f 	dsb	sy
 80042bc:	60fb      	str	r3, [r7, #12]
}
 80042be:	bf00      	nop
 80042c0:	bf00      	nop
 80042c2:	e7fd      	b.n	80042c0 <prvTaskExitError+0x28>
	__asm volatile
 80042c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042c8:	f383 8811 	msr	BASEPRI, r3
 80042cc:	f3bf 8f6f 	isb	sy
 80042d0:	f3bf 8f4f 	dsb	sy
 80042d4:	60bb      	str	r3, [r7, #8]
}
 80042d6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80042d8:	bf00      	nop
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d0fc      	beq.n	80042da <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80042e0:	bf00      	nop
 80042e2:	bf00      	nop
 80042e4:	3714      	adds	r7, #20
 80042e6:	46bd      	mov	sp, r7
 80042e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ec:	4770      	bx	lr
 80042ee:	bf00      	nop
 80042f0:	2000000c 	.word	0x2000000c
	...

08004300 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004300:	4b07      	ldr	r3, [pc, #28]	@ (8004320 <pxCurrentTCBConst2>)
 8004302:	6819      	ldr	r1, [r3, #0]
 8004304:	6808      	ldr	r0, [r1, #0]
 8004306:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800430a:	f380 8809 	msr	PSP, r0
 800430e:	f3bf 8f6f 	isb	sy
 8004312:	f04f 0000 	mov.w	r0, #0
 8004316:	f380 8811 	msr	BASEPRI, r0
 800431a:	4770      	bx	lr
 800431c:	f3af 8000 	nop.w

08004320 <pxCurrentTCBConst2>:
 8004320:	20000870 	.word	0x20000870
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004324:	bf00      	nop
 8004326:	bf00      	nop

08004328 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004328:	4808      	ldr	r0, [pc, #32]	@ (800434c <prvPortStartFirstTask+0x24>)
 800432a:	6800      	ldr	r0, [r0, #0]
 800432c:	6800      	ldr	r0, [r0, #0]
 800432e:	f380 8808 	msr	MSP, r0
 8004332:	f04f 0000 	mov.w	r0, #0
 8004336:	f380 8814 	msr	CONTROL, r0
 800433a:	b662      	cpsie	i
 800433c:	b661      	cpsie	f
 800433e:	f3bf 8f4f 	dsb	sy
 8004342:	f3bf 8f6f 	isb	sy
 8004346:	df00      	svc	0
 8004348:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800434a:	bf00      	nop
 800434c:	e000ed08 	.word	0xe000ed08

08004350 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b086      	sub	sp, #24
 8004354:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004356:	4b47      	ldr	r3, [pc, #284]	@ (8004474 <xPortStartScheduler+0x124>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a47      	ldr	r2, [pc, #284]	@ (8004478 <xPortStartScheduler+0x128>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d10b      	bne.n	8004378 <xPortStartScheduler+0x28>
	__asm volatile
 8004360:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004364:	f383 8811 	msr	BASEPRI, r3
 8004368:	f3bf 8f6f 	isb	sy
 800436c:	f3bf 8f4f 	dsb	sy
 8004370:	60fb      	str	r3, [r7, #12]
}
 8004372:	bf00      	nop
 8004374:	bf00      	nop
 8004376:	e7fd      	b.n	8004374 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004378:	4b3e      	ldr	r3, [pc, #248]	@ (8004474 <xPortStartScheduler+0x124>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a3f      	ldr	r2, [pc, #252]	@ (800447c <xPortStartScheduler+0x12c>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d10b      	bne.n	800439a <xPortStartScheduler+0x4a>
	__asm volatile
 8004382:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004386:	f383 8811 	msr	BASEPRI, r3
 800438a:	f3bf 8f6f 	isb	sy
 800438e:	f3bf 8f4f 	dsb	sy
 8004392:	613b      	str	r3, [r7, #16]
}
 8004394:	bf00      	nop
 8004396:	bf00      	nop
 8004398:	e7fd      	b.n	8004396 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800439a:	4b39      	ldr	r3, [pc, #228]	@ (8004480 <xPortStartScheduler+0x130>)
 800439c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	781b      	ldrb	r3, [r3, #0]
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	22ff      	movs	r2, #255	@ 0xff
 80043aa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	781b      	ldrb	r3, [r3, #0]
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80043b4:	78fb      	ldrb	r3, [r7, #3]
 80043b6:	b2db      	uxtb	r3, r3
 80043b8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80043bc:	b2da      	uxtb	r2, r3
 80043be:	4b31      	ldr	r3, [pc, #196]	@ (8004484 <xPortStartScheduler+0x134>)
 80043c0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80043c2:	4b31      	ldr	r3, [pc, #196]	@ (8004488 <xPortStartScheduler+0x138>)
 80043c4:	2207      	movs	r2, #7
 80043c6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80043c8:	e009      	b.n	80043de <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80043ca:	4b2f      	ldr	r3, [pc, #188]	@ (8004488 <xPortStartScheduler+0x138>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	3b01      	subs	r3, #1
 80043d0:	4a2d      	ldr	r2, [pc, #180]	@ (8004488 <xPortStartScheduler+0x138>)
 80043d2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80043d4:	78fb      	ldrb	r3, [r7, #3]
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	005b      	lsls	r3, r3, #1
 80043da:	b2db      	uxtb	r3, r3
 80043dc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80043de:	78fb      	ldrb	r3, [r7, #3]
 80043e0:	b2db      	uxtb	r3, r3
 80043e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043e6:	2b80      	cmp	r3, #128	@ 0x80
 80043e8:	d0ef      	beq.n	80043ca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80043ea:	4b27      	ldr	r3, [pc, #156]	@ (8004488 <xPortStartScheduler+0x138>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f1c3 0307 	rsb	r3, r3, #7
 80043f2:	2b04      	cmp	r3, #4
 80043f4:	d00b      	beq.n	800440e <xPortStartScheduler+0xbe>
	__asm volatile
 80043f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043fa:	f383 8811 	msr	BASEPRI, r3
 80043fe:	f3bf 8f6f 	isb	sy
 8004402:	f3bf 8f4f 	dsb	sy
 8004406:	60bb      	str	r3, [r7, #8]
}
 8004408:	bf00      	nop
 800440a:	bf00      	nop
 800440c:	e7fd      	b.n	800440a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800440e:	4b1e      	ldr	r3, [pc, #120]	@ (8004488 <xPortStartScheduler+0x138>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	021b      	lsls	r3, r3, #8
 8004414:	4a1c      	ldr	r2, [pc, #112]	@ (8004488 <xPortStartScheduler+0x138>)
 8004416:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004418:	4b1b      	ldr	r3, [pc, #108]	@ (8004488 <xPortStartScheduler+0x138>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004420:	4a19      	ldr	r2, [pc, #100]	@ (8004488 <xPortStartScheduler+0x138>)
 8004422:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	b2da      	uxtb	r2, r3
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800442c:	4b17      	ldr	r3, [pc, #92]	@ (800448c <xPortStartScheduler+0x13c>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a16      	ldr	r2, [pc, #88]	@ (800448c <xPortStartScheduler+0x13c>)
 8004432:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004436:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004438:	4b14      	ldr	r3, [pc, #80]	@ (800448c <xPortStartScheduler+0x13c>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a13      	ldr	r2, [pc, #76]	@ (800448c <xPortStartScheduler+0x13c>)
 800443e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004442:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004444:	f000 f8da 	bl	80045fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004448:	4b11      	ldr	r3, [pc, #68]	@ (8004490 <xPortStartScheduler+0x140>)
 800444a:	2200      	movs	r2, #0
 800444c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800444e:	f000 f8f9 	bl	8004644 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004452:	4b10      	ldr	r3, [pc, #64]	@ (8004494 <xPortStartScheduler+0x144>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a0f      	ldr	r2, [pc, #60]	@ (8004494 <xPortStartScheduler+0x144>)
 8004458:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800445c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800445e:	f7ff ff63 	bl	8004328 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004462:	f7ff f831 	bl	80034c8 <vTaskSwitchContext>
	prvTaskExitError();
 8004466:	f7ff ff17 	bl	8004298 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800446a:	2300      	movs	r3, #0
}
 800446c:	4618      	mov	r0, r3
 800446e:	3718      	adds	r7, #24
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}
 8004474:	e000ed00 	.word	0xe000ed00
 8004478:	410fc271 	.word	0x410fc271
 800447c:	410fc270 	.word	0x410fc270
 8004480:	e000e400 	.word	0xe000e400
 8004484:	20000e9c 	.word	0x20000e9c
 8004488:	20000ea0 	.word	0x20000ea0
 800448c:	e000ed20 	.word	0xe000ed20
 8004490:	2000000c 	.word	0x2000000c
 8004494:	e000ef34 	.word	0xe000ef34

08004498 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004498:	b480      	push	{r7}
 800449a:	b083      	sub	sp, #12
 800449c:	af00      	add	r7, sp, #0
	__asm volatile
 800449e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044a2:	f383 8811 	msr	BASEPRI, r3
 80044a6:	f3bf 8f6f 	isb	sy
 80044aa:	f3bf 8f4f 	dsb	sy
 80044ae:	607b      	str	r3, [r7, #4]
}
 80044b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80044b2:	4b10      	ldr	r3, [pc, #64]	@ (80044f4 <vPortEnterCritical+0x5c>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	3301      	adds	r3, #1
 80044b8:	4a0e      	ldr	r2, [pc, #56]	@ (80044f4 <vPortEnterCritical+0x5c>)
 80044ba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80044bc:	4b0d      	ldr	r3, [pc, #52]	@ (80044f4 <vPortEnterCritical+0x5c>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d110      	bne.n	80044e6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80044c4:	4b0c      	ldr	r3, [pc, #48]	@ (80044f8 <vPortEnterCritical+0x60>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d00b      	beq.n	80044e6 <vPortEnterCritical+0x4e>
	__asm volatile
 80044ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044d2:	f383 8811 	msr	BASEPRI, r3
 80044d6:	f3bf 8f6f 	isb	sy
 80044da:	f3bf 8f4f 	dsb	sy
 80044de:	603b      	str	r3, [r7, #0]
}
 80044e0:	bf00      	nop
 80044e2:	bf00      	nop
 80044e4:	e7fd      	b.n	80044e2 <vPortEnterCritical+0x4a>
	}
}
 80044e6:	bf00      	nop
 80044e8:	370c      	adds	r7, #12
 80044ea:	46bd      	mov	sp, r7
 80044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f0:	4770      	bx	lr
 80044f2:	bf00      	nop
 80044f4:	2000000c 	.word	0x2000000c
 80044f8:	e000ed04 	.word	0xe000ed04

080044fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80044fc:	b480      	push	{r7}
 80044fe:	b083      	sub	sp, #12
 8004500:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004502:	4b12      	ldr	r3, [pc, #72]	@ (800454c <vPortExitCritical+0x50>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d10b      	bne.n	8004522 <vPortExitCritical+0x26>
	__asm volatile
 800450a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800450e:	f383 8811 	msr	BASEPRI, r3
 8004512:	f3bf 8f6f 	isb	sy
 8004516:	f3bf 8f4f 	dsb	sy
 800451a:	607b      	str	r3, [r7, #4]
}
 800451c:	bf00      	nop
 800451e:	bf00      	nop
 8004520:	e7fd      	b.n	800451e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004522:	4b0a      	ldr	r3, [pc, #40]	@ (800454c <vPortExitCritical+0x50>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	3b01      	subs	r3, #1
 8004528:	4a08      	ldr	r2, [pc, #32]	@ (800454c <vPortExitCritical+0x50>)
 800452a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800452c:	4b07      	ldr	r3, [pc, #28]	@ (800454c <vPortExitCritical+0x50>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d105      	bne.n	8004540 <vPortExitCritical+0x44>
 8004534:	2300      	movs	r3, #0
 8004536:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	f383 8811 	msr	BASEPRI, r3
}
 800453e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004540:	bf00      	nop
 8004542:	370c      	adds	r7, #12
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr
 800454c:	2000000c 	.word	0x2000000c

08004550 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004550:	f3ef 8009 	mrs	r0, PSP
 8004554:	f3bf 8f6f 	isb	sy
 8004558:	4b15      	ldr	r3, [pc, #84]	@ (80045b0 <pxCurrentTCBConst>)
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	f01e 0f10 	tst.w	lr, #16
 8004560:	bf08      	it	eq
 8004562:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004566:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800456a:	6010      	str	r0, [r2, #0]
 800456c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004570:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004574:	f380 8811 	msr	BASEPRI, r0
 8004578:	f3bf 8f4f 	dsb	sy
 800457c:	f3bf 8f6f 	isb	sy
 8004580:	f7fe ffa2 	bl	80034c8 <vTaskSwitchContext>
 8004584:	f04f 0000 	mov.w	r0, #0
 8004588:	f380 8811 	msr	BASEPRI, r0
 800458c:	bc09      	pop	{r0, r3}
 800458e:	6819      	ldr	r1, [r3, #0]
 8004590:	6808      	ldr	r0, [r1, #0]
 8004592:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004596:	f01e 0f10 	tst.w	lr, #16
 800459a:	bf08      	it	eq
 800459c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80045a0:	f380 8809 	msr	PSP, r0
 80045a4:	f3bf 8f6f 	isb	sy
 80045a8:	4770      	bx	lr
 80045aa:	bf00      	nop
 80045ac:	f3af 8000 	nop.w

080045b0 <pxCurrentTCBConst>:
 80045b0:	20000870 	.word	0x20000870
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80045b4:	bf00      	nop
 80045b6:	bf00      	nop

080045b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b082      	sub	sp, #8
 80045bc:	af00      	add	r7, sp, #0
	__asm volatile
 80045be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045c2:	f383 8811 	msr	BASEPRI, r3
 80045c6:	f3bf 8f6f 	isb	sy
 80045ca:	f3bf 8f4f 	dsb	sy
 80045ce:	607b      	str	r3, [r7, #4]
}
 80045d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80045d2:	f7fe fee1 	bl	8003398 <xTaskIncrementTick>
 80045d6:	4603      	mov	r3, r0
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d003      	beq.n	80045e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80045dc:	4b06      	ldr	r3, [pc, #24]	@ (80045f8 <xPortSysTickHandler+0x40>)
 80045de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80045e2:	601a      	str	r2, [r3, #0]
 80045e4:	2300      	movs	r3, #0
 80045e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	f383 8811 	msr	BASEPRI, r3
}
 80045ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80045f0:	bf00      	nop
 80045f2:	3708      	adds	r7, #8
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}
 80045f8:	e000ed04 	.word	0xe000ed04

080045fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80045fc:	b480      	push	{r7}
 80045fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004600:	4b0b      	ldr	r3, [pc, #44]	@ (8004630 <vPortSetupTimerInterrupt+0x34>)
 8004602:	2200      	movs	r2, #0
 8004604:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004606:	4b0b      	ldr	r3, [pc, #44]	@ (8004634 <vPortSetupTimerInterrupt+0x38>)
 8004608:	2200      	movs	r2, #0
 800460a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800460c:	4b0a      	ldr	r3, [pc, #40]	@ (8004638 <vPortSetupTimerInterrupt+0x3c>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a0a      	ldr	r2, [pc, #40]	@ (800463c <vPortSetupTimerInterrupt+0x40>)
 8004612:	fba2 2303 	umull	r2, r3, r2, r3
 8004616:	099b      	lsrs	r3, r3, #6
 8004618:	4a09      	ldr	r2, [pc, #36]	@ (8004640 <vPortSetupTimerInterrupt+0x44>)
 800461a:	3b01      	subs	r3, #1
 800461c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800461e:	4b04      	ldr	r3, [pc, #16]	@ (8004630 <vPortSetupTimerInterrupt+0x34>)
 8004620:	2207      	movs	r2, #7
 8004622:	601a      	str	r2, [r3, #0]
}
 8004624:	bf00      	nop
 8004626:	46bd      	mov	sp, r7
 8004628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462c:	4770      	bx	lr
 800462e:	bf00      	nop
 8004630:	e000e010 	.word	0xe000e010
 8004634:	e000e018 	.word	0xe000e018
 8004638:	20000000 	.word	0x20000000
 800463c:	10624dd3 	.word	0x10624dd3
 8004640:	e000e014 	.word	0xe000e014

08004644 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004644:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004654 <vPortEnableVFP+0x10>
 8004648:	6801      	ldr	r1, [r0, #0]
 800464a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800464e:	6001      	str	r1, [r0, #0]
 8004650:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004652:	bf00      	nop
 8004654:	e000ed88 	.word	0xe000ed88

08004658 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004658:	b480      	push	{r7}
 800465a:	b085      	sub	sp, #20
 800465c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800465e:	f3ef 8305 	mrs	r3, IPSR
 8004662:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2b0f      	cmp	r3, #15
 8004668:	d915      	bls.n	8004696 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800466a:	4a18      	ldr	r2, [pc, #96]	@ (80046cc <vPortValidateInterruptPriority+0x74>)
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	4413      	add	r3, r2
 8004670:	781b      	ldrb	r3, [r3, #0]
 8004672:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004674:	4b16      	ldr	r3, [pc, #88]	@ (80046d0 <vPortValidateInterruptPriority+0x78>)
 8004676:	781b      	ldrb	r3, [r3, #0]
 8004678:	7afa      	ldrb	r2, [r7, #11]
 800467a:	429a      	cmp	r2, r3
 800467c:	d20b      	bcs.n	8004696 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800467e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004682:	f383 8811 	msr	BASEPRI, r3
 8004686:	f3bf 8f6f 	isb	sy
 800468a:	f3bf 8f4f 	dsb	sy
 800468e:	607b      	str	r3, [r7, #4]
}
 8004690:	bf00      	nop
 8004692:	bf00      	nop
 8004694:	e7fd      	b.n	8004692 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004696:	4b0f      	ldr	r3, [pc, #60]	@ (80046d4 <vPortValidateInterruptPriority+0x7c>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800469e:	4b0e      	ldr	r3, [pc, #56]	@ (80046d8 <vPortValidateInterruptPriority+0x80>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	429a      	cmp	r2, r3
 80046a4:	d90b      	bls.n	80046be <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80046a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046aa:	f383 8811 	msr	BASEPRI, r3
 80046ae:	f3bf 8f6f 	isb	sy
 80046b2:	f3bf 8f4f 	dsb	sy
 80046b6:	603b      	str	r3, [r7, #0]
}
 80046b8:	bf00      	nop
 80046ba:	bf00      	nop
 80046bc:	e7fd      	b.n	80046ba <vPortValidateInterruptPriority+0x62>
	}
 80046be:	bf00      	nop
 80046c0:	3714      	adds	r7, #20
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr
 80046ca:	bf00      	nop
 80046cc:	e000e3f0 	.word	0xe000e3f0
 80046d0:	20000e9c 	.word	0x20000e9c
 80046d4:	e000ed0c 	.word	0xe000ed0c
 80046d8:	20000ea0 	.word	0x20000ea0

080046dc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b08a      	sub	sp, #40	@ 0x28
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80046e4:	2300      	movs	r3, #0
 80046e6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80046e8:	f7fe fda8 	bl	800323c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80046ec:	4b5c      	ldr	r3, [pc, #368]	@ (8004860 <pvPortMalloc+0x184>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d101      	bne.n	80046f8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80046f4:	f000 f924 	bl	8004940 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80046f8:	4b5a      	ldr	r3, [pc, #360]	@ (8004864 <pvPortMalloc+0x188>)
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	4013      	ands	r3, r2
 8004700:	2b00      	cmp	r3, #0
 8004702:	f040 8095 	bne.w	8004830 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d01e      	beq.n	800474a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800470c:	2208      	movs	r2, #8
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	4413      	add	r3, r2
 8004712:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	f003 0307 	and.w	r3, r3, #7
 800471a:	2b00      	cmp	r3, #0
 800471c:	d015      	beq.n	800474a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	f023 0307 	bic.w	r3, r3, #7
 8004724:	3308      	adds	r3, #8
 8004726:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	f003 0307 	and.w	r3, r3, #7
 800472e:	2b00      	cmp	r3, #0
 8004730:	d00b      	beq.n	800474a <pvPortMalloc+0x6e>
	__asm volatile
 8004732:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004736:	f383 8811 	msr	BASEPRI, r3
 800473a:	f3bf 8f6f 	isb	sy
 800473e:	f3bf 8f4f 	dsb	sy
 8004742:	617b      	str	r3, [r7, #20]
}
 8004744:	bf00      	nop
 8004746:	bf00      	nop
 8004748:	e7fd      	b.n	8004746 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d06f      	beq.n	8004830 <pvPortMalloc+0x154>
 8004750:	4b45      	ldr	r3, [pc, #276]	@ (8004868 <pvPortMalloc+0x18c>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	429a      	cmp	r2, r3
 8004758:	d86a      	bhi.n	8004830 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800475a:	4b44      	ldr	r3, [pc, #272]	@ (800486c <pvPortMalloc+0x190>)
 800475c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800475e:	4b43      	ldr	r3, [pc, #268]	@ (800486c <pvPortMalloc+0x190>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004764:	e004      	b.n	8004770 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004768:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800476a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	687a      	ldr	r2, [r7, #4]
 8004776:	429a      	cmp	r2, r3
 8004778:	d903      	bls.n	8004782 <pvPortMalloc+0xa6>
 800477a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d1f1      	bne.n	8004766 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004782:	4b37      	ldr	r3, [pc, #220]	@ (8004860 <pvPortMalloc+0x184>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004788:	429a      	cmp	r2, r3
 800478a:	d051      	beq.n	8004830 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800478c:	6a3b      	ldr	r3, [r7, #32]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	2208      	movs	r2, #8
 8004792:	4413      	add	r3, r2
 8004794:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004798:	681a      	ldr	r2, [r3, #0]
 800479a:	6a3b      	ldr	r3, [r7, #32]
 800479c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800479e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047a0:	685a      	ldr	r2, [r3, #4]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	1ad2      	subs	r2, r2, r3
 80047a6:	2308      	movs	r3, #8
 80047a8:	005b      	lsls	r3, r3, #1
 80047aa:	429a      	cmp	r2, r3
 80047ac:	d920      	bls.n	80047f0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80047ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	4413      	add	r3, r2
 80047b4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80047b6:	69bb      	ldr	r3, [r7, #24]
 80047b8:	f003 0307 	and.w	r3, r3, #7
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d00b      	beq.n	80047d8 <pvPortMalloc+0xfc>
	__asm volatile
 80047c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047c4:	f383 8811 	msr	BASEPRI, r3
 80047c8:	f3bf 8f6f 	isb	sy
 80047cc:	f3bf 8f4f 	dsb	sy
 80047d0:	613b      	str	r3, [r7, #16]
}
 80047d2:	bf00      	nop
 80047d4:	bf00      	nop
 80047d6:	e7fd      	b.n	80047d4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80047d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047da:	685a      	ldr	r2, [r3, #4]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	1ad2      	subs	r2, r2, r3
 80047e0:	69bb      	ldr	r3, [r7, #24]
 80047e2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80047e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047e6:	687a      	ldr	r2, [r7, #4]
 80047e8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80047ea:	69b8      	ldr	r0, [r7, #24]
 80047ec:	f000 f90a 	bl	8004a04 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80047f0:	4b1d      	ldr	r3, [pc, #116]	@ (8004868 <pvPortMalloc+0x18c>)
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	1ad3      	subs	r3, r2, r3
 80047fa:	4a1b      	ldr	r2, [pc, #108]	@ (8004868 <pvPortMalloc+0x18c>)
 80047fc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80047fe:	4b1a      	ldr	r3, [pc, #104]	@ (8004868 <pvPortMalloc+0x18c>)
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	4b1b      	ldr	r3, [pc, #108]	@ (8004870 <pvPortMalloc+0x194>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	429a      	cmp	r2, r3
 8004808:	d203      	bcs.n	8004812 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800480a:	4b17      	ldr	r3, [pc, #92]	@ (8004868 <pvPortMalloc+0x18c>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a18      	ldr	r2, [pc, #96]	@ (8004870 <pvPortMalloc+0x194>)
 8004810:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004814:	685a      	ldr	r2, [r3, #4]
 8004816:	4b13      	ldr	r3, [pc, #76]	@ (8004864 <pvPortMalloc+0x188>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	431a      	orrs	r2, r3
 800481c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800481e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004822:	2200      	movs	r2, #0
 8004824:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004826:	4b13      	ldr	r3, [pc, #76]	@ (8004874 <pvPortMalloc+0x198>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	3301      	adds	r3, #1
 800482c:	4a11      	ldr	r2, [pc, #68]	@ (8004874 <pvPortMalloc+0x198>)
 800482e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004830:	f7fe fd12 	bl	8003258 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004834:	69fb      	ldr	r3, [r7, #28]
 8004836:	f003 0307 	and.w	r3, r3, #7
 800483a:	2b00      	cmp	r3, #0
 800483c:	d00b      	beq.n	8004856 <pvPortMalloc+0x17a>
	__asm volatile
 800483e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004842:	f383 8811 	msr	BASEPRI, r3
 8004846:	f3bf 8f6f 	isb	sy
 800484a:	f3bf 8f4f 	dsb	sy
 800484e:	60fb      	str	r3, [r7, #12]
}
 8004850:	bf00      	nop
 8004852:	bf00      	nop
 8004854:	e7fd      	b.n	8004852 <pvPortMalloc+0x176>
	return pvReturn;
 8004856:	69fb      	ldr	r3, [r7, #28]
}
 8004858:	4618      	mov	r0, r3
 800485a:	3728      	adds	r7, #40	@ 0x28
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}
 8004860:	20004aac 	.word	0x20004aac
 8004864:	20004ac0 	.word	0x20004ac0
 8004868:	20004ab0 	.word	0x20004ab0
 800486c:	20004aa4 	.word	0x20004aa4
 8004870:	20004ab4 	.word	0x20004ab4
 8004874:	20004ab8 	.word	0x20004ab8

08004878 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b086      	sub	sp, #24
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d04f      	beq.n	800492a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800488a:	2308      	movs	r3, #8
 800488c:	425b      	negs	r3, r3
 800488e:	697a      	ldr	r2, [r7, #20]
 8004890:	4413      	add	r3, r2
 8004892:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	685a      	ldr	r2, [r3, #4]
 800489c:	4b25      	ldr	r3, [pc, #148]	@ (8004934 <vPortFree+0xbc>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4013      	ands	r3, r2
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d10b      	bne.n	80048be <vPortFree+0x46>
	__asm volatile
 80048a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048aa:	f383 8811 	msr	BASEPRI, r3
 80048ae:	f3bf 8f6f 	isb	sy
 80048b2:	f3bf 8f4f 	dsb	sy
 80048b6:	60fb      	str	r3, [r7, #12]
}
 80048b8:	bf00      	nop
 80048ba:	bf00      	nop
 80048bc:	e7fd      	b.n	80048ba <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d00b      	beq.n	80048de <vPortFree+0x66>
	__asm volatile
 80048c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048ca:	f383 8811 	msr	BASEPRI, r3
 80048ce:	f3bf 8f6f 	isb	sy
 80048d2:	f3bf 8f4f 	dsb	sy
 80048d6:	60bb      	str	r3, [r7, #8]
}
 80048d8:	bf00      	nop
 80048da:	bf00      	nop
 80048dc:	e7fd      	b.n	80048da <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	685a      	ldr	r2, [r3, #4]
 80048e2:	4b14      	ldr	r3, [pc, #80]	@ (8004934 <vPortFree+0xbc>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4013      	ands	r3, r2
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d01e      	beq.n	800492a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d11a      	bne.n	800492a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	685a      	ldr	r2, [r3, #4]
 80048f8:	4b0e      	ldr	r3, [pc, #56]	@ (8004934 <vPortFree+0xbc>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	43db      	mvns	r3, r3
 80048fe:	401a      	ands	r2, r3
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004904:	f7fe fc9a 	bl	800323c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	685a      	ldr	r2, [r3, #4]
 800490c:	4b0a      	ldr	r3, [pc, #40]	@ (8004938 <vPortFree+0xc0>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4413      	add	r3, r2
 8004912:	4a09      	ldr	r2, [pc, #36]	@ (8004938 <vPortFree+0xc0>)
 8004914:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004916:	6938      	ldr	r0, [r7, #16]
 8004918:	f000 f874 	bl	8004a04 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800491c:	4b07      	ldr	r3, [pc, #28]	@ (800493c <vPortFree+0xc4>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	3301      	adds	r3, #1
 8004922:	4a06      	ldr	r2, [pc, #24]	@ (800493c <vPortFree+0xc4>)
 8004924:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004926:	f7fe fc97 	bl	8003258 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800492a:	bf00      	nop
 800492c:	3718      	adds	r7, #24
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}
 8004932:	bf00      	nop
 8004934:	20004ac0 	.word	0x20004ac0
 8004938:	20004ab0 	.word	0x20004ab0
 800493c:	20004abc 	.word	0x20004abc

08004940 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004940:	b480      	push	{r7}
 8004942:	b085      	sub	sp, #20
 8004944:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004946:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800494a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800494c:	4b27      	ldr	r3, [pc, #156]	@ (80049ec <prvHeapInit+0xac>)
 800494e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f003 0307 	and.w	r3, r3, #7
 8004956:	2b00      	cmp	r3, #0
 8004958:	d00c      	beq.n	8004974 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	3307      	adds	r3, #7
 800495e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f023 0307 	bic.w	r3, r3, #7
 8004966:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004968:	68ba      	ldr	r2, [r7, #8]
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	1ad3      	subs	r3, r2, r3
 800496e:	4a1f      	ldr	r2, [pc, #124]	@ (80049ec <prvHeapInit+0xac>)
 8004970:	4413      	add	r3, r2
 8004972:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004978:	4a1d      	ldr	r2, [pc, #116]	@ (80049f0 <prvHeapInit+0xb0>)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800497e:	4b1c      	ldr	r3, [pc, #112]	@ (80049f0 <prvHeapInit+0xb0>)
 8004980:	2200      	movs	r2, #0
 8004982:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	68ba      	ldr	r2, [r7, #8]
 8004988:	4413      	add	r3, r2
 800498a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800498c:	2208      	movs	r2, #8
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	1a9b      	subs	r3, r3, r2
 8004992:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f023 0307 	bic.w	r3, r3, #7
 800499a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	4a15      	ldr	r2, [pc, #84]	@ (80049f4 <prvHeapInit+0xb4>)
 80049a0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80049a2:	4b14      	ldr	r3, [pc, #80]	@ (80049f4 <prvHeapInit+0xb4>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	2200      	movs	r2, #0
 80049a8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80049aa:	4b12      	ldr	r3, [pc, #72]	@ (80049f4 <prvHeapInit+0xb4>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	2200      	movs	r2, #0
 80049b0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	68fa      	ldr	r2, [r7, #12]
 80049ba:	1ad2      	subs	r2, r2, r3
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80049c0:	4b0c      	ldr	r3, [pc, #48]	@ (80049f4 <prvHeapInit+0xb4>)
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	4a0a      	ldr	r2, [pc, #40]	@ (80049f8 <prvHeapInit+0xb8>)
 80049ce:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	4a09      	ldr	r2, [pc, #36]	@ (80049fc <prvHeapInit+0xbc>)
 80049d6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80049d8:	4b09      	ldr	r3, [pc, #36]	@ (8004a00 <prvHeapInit+0xc0>)
 80049da:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80049de:	601a      	str	r2, [r3, #0]
}
 80049e0:	bf00      	nop
 80049e2:	3714      	adds	r7, #20
 80049e4:	46bd      	mov	sp, r7
 80049e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ea:	4770      	bx	lr
 80049ec:	20000ea4 	.word	0x20000ea4
 80049f0:	20004aa4 	.word	0x20004aa4
 80049f4:	20004aac 	.word	0x20004aac
 80049f8:	20004ab4 	.word	0x20004ab4
 80049fc:	20004ab0 	.word	0x20004ab0
 8004a00:	20004ac0 	.word	0x20004ac0

08004a04 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004a04:	b480      	push	{r7}
 8004a06:	b085      	sub	sp, #20
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004a0c:	4b28      	ldr	r3, [pc, #160]	@ (8004ab0 <prvInsertBlockIntoFreeList+0xac>)
 8004a0e:	60fb      	str	r3, [r7, #12]
 8004a10:	e002      	b.n	8004a18 <prvInsertBlockIntoFreeList+0x14>
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	60fb      	str	r3, [r7, #12]
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	687a      	ldr	r2, [r7, #4]
 8004a1e:	429a      	cmp	r2, r3
 8004a20:	d8f7      	bhi.n	8004a12 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	68ba      	ldr	r2, [r7, #8]
 8004a2c:	4413      	add	r3, r2
 8004a2e:	687a      	ldr	r2, [r7, #4]
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d108      	bne.n	8004a46 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	685a      	ldr	r2, [r3, #4]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	441a      	add	r2, r3
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	68ba      	ldr	r2, [r7, #8]
 8004a50:	441a      	add	r2, r3
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	429a      	cmp	r2, r3
 8004a58:	d118      	bne.n	8004a8c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	4b15      	ldr	r3, [pc, #84]	@ (8004ab4 <prvInsertBlockIntoFreeList+0xb0>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	429a      	cmp	r2, r3
 8004a64:	d00d      	beq.n	8004a82 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	685a      	ldr	r2, [r3, #4]
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	441a      	add	r2, r3
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	601a      	str	r2, [r3, #0]
 8004a80:	e008      	b.n	8004a94 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004a82:	4b0c      	ldr	r3, [pc, #48]	@ (8004ab4 <prvInsertBlockIntoFreeList+0xb0>)
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	601a      	str	r2, [r3, #0]
 8004a8a:	e003      	b.n	8004a94 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004a94:	68fa      	ldr	r2, [r7, #12]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	d002      	beq.n	8004aa2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	687a      	ldr	r2, [r7, #4]
 8004aa0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004aa2:	bf00      	nop
 8004aa4:	3714      	adds	r7, #20
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aac:	4770      	bx	lr
 8004aae:	bf00      	nop
 8004ab0:	20004aa4 	.word	0x20004aa4
 8004ab4:	20004aac 	.word	0x20004aac

08004ab8 <std>:
 8004ab8:	2300      	movs	r3, #0
 8004aba:	b510      	push	{r4, lr}
 8004abc:	4604      	mov	r4, r0
 8004abe:	e9c0 3300 	strd	r3, r3, [r0]
 8004ac2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004ac6:	6083      	str	r3, [r0, #8]
 8004ac8:	8181      	strh	r1, [r0, #12]
 8004aca:	6643      	str	r3, [r0, #100]	@ 0x64
 8004acc:	81c2      	strh	r2, [r0, #14]
 8004ace:	6183      	str	r3, [r0, #24]
 8004ad0:	4619      	mov	r1, r3
 8004ad2:	2208      	movs	r2, #8
 8004ad4:	305c      	adds	r0, #92	@ 0x5c
 8004ad6:	f000 f9e7 	bl	8004ea8 <memset>
 8004ada:	4b0d      	ldr	r3, [pc, #52]	@ (8004b10 <std+0x58>)
 8004adc:	6263      	str	r3, [r4, #36]	@ 0x24
 8004ade:	4b0d      	ldr	r3, [pc, #52]	@ (8004b14 <std+0x5c>)
 8004ae0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004ae2:	4b0d      	ldr	r3, [pc, #52]	@ (8004b18 <std+0x60>)
 8004ae4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004ae6:	4b0d      	ldr	r3, [pc, #52]	@ (8004b1c <std+0x64>)
 8004ae8:	6323      	str	r3, [r4, #48]	@ 0x30
 8004aea:	4b0d      	ldr	r3, [pc, #52]	@ (8004b20 <std+0x68>)
 8004aec:	6224      	str	r4, [r4, #32]
 8004aee:	429c      	cmp	r4, r3
 8004af0:	d006      	beq.n	8004b00 <std+0x48>
 8004af2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004af6:	4294      	cmp	r4, r2
 8004af8:	d002      	beq.n	8004b00 <std+0x48>
 8004afa:	33d0      	adds	r3, #208	@ 0xd0
 8004afc:	429c      	cmp	r4, r3
 8004afe:	d105      	bne.n	8004b0c <std+0x54>
 8004b00:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004b04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b08:	f000 baa4 	b.w	8005054 <__retarget_lock_init_recursive>
 8004b0c:	bd10      	pop	{r4, pc}
 8004b0e:	bf00      	nop
 8004b10:	08004cf9 	.word	0x08004cf9
 8004b14:	08004d1b 	.word	0x08004d1b
 8004b18:	08004d53 	.word	0x08004d53
 8004b1c:	08004d77 	.word	0x08004d77
 8004b20:	20004ac4 	.word	0x20004ac4

08004b24 <stdio_exit_handler>:
 8004b24:	4a02      	ldr	r2, [pc, #8]	@ (8004b30 <stdio_exit_handler+0xc>)
 8004b26:	4903      	ldr	r1, [pc, #12]	@ (8004b34 <stdio_exit_handler+0x10>)
 8004b28:	4803      	ldr	r0, [pc, #12]	@ (8004b38 <stdio_exit_handler+0x14>)
 8004b2a:	f000 b869 	b.w	8004c00 <_fwalk_sglue>
 8004b2e:	bf00      	nop
 8004b30:	20000010 	.word	0x20000010
 8004b34:	08005371 	.word	0x08005371
 8004b38:	20000020 	.word	0x20000020

08004b3c <cleanup_stdio>:
 8004b3c:	6841      	ldr	r1, [r0, #4]
 8004b3e:	4b0c      	ldr	r3, [pc, #48]	@ (8004b70 <cleanup_stdio+0x34>)
 8004b40:	4299      	cmp	r1, r3
 8004b42:	b510      	push	{r4, lr}
 8004b44:	4604      	mov	r4, r0
 8004b46:	d001      	beq.n	8004b4c <cleanup_stdio+0x10>
 8004b48:	f000 fc12 	bl	8005370 <_fflush_r>
 8004b4c:	68a1      	ldr	r1, [r4, #8]
 8004b4e:	4b09      	ldr	r3, [pc, #36]	@ (8004b74 <cleanup_stdio+0x38>)
 8004b50:	4299      	cmp	r1, r3
 8004b52:	d002      	beq.n	8004b5a <cleanup_stdio+0x1e>
 8004b54:	4620      	mov	r0, r4
 8004b56:	f000 fc0b 	bl	8005370 <_fflush_r>
 8004b5a:	68e1      	ldr	r1, [r4, #12]
 8004b5c:	4b06      	ldr	r3, [pc, #24]	@ (8004b78 <cleanup_stdio+0x3c>)
 8004b5e:	4299      	cmp	r1, r3
 8004b60:	d004      	beq.n	8004b6c <cleanup_stdio+0x30>
 8004b62:	4620      	mov	r0, r4
 8004b64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b68:	f000 bc02 	b.w	8005370 <_fflush_r>
 8004b6c:	bd10      	pop	{r4, pc}
 8004b6e:	bf00      	nop
 8004b70:	20004ac4 	.word	0x20004ac4
 8004b74:	20004b2c 	.word	0x20004b2c
 8004b78:	20004b94 	.word	0x20004b94

08004b7c <global_stdio_init.part.0>:
 8004b7c:	b510      	push	{r4, lr}
 8004b7e:	4b0b      	ldr	r3, [pc, #44]	@ (8004bac <global_stdio_init.part.0+0x30>)
 8004b80:	4c0b      	ldr	r4, [pc, #44]	@ (8004bb0 <global_stdio_init.part.0+0x34>)
 8004b82:	4a0c      	ldr	r2, [pc, #48]	@ (8004bb4 <global_stdio_init.part.0+0x38>)
 8004b84:	601a      	str	r2, [r3, #0]
 8004b86:	4620      	mov	r0, r4
 8004b88:	2200      	movs	r2, #0
 8004b8a:	2104      	movs	r1, #4
 8004b8c:	f7ff ff94 	bl	8004ab8 <std>
 8004b90:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004b94:	2201      	movs	r2, #1
 8004b96:	2109      	movs	r1, #9
 8004b98:	f7ff ff8e 	bl	8004ab8 <std>
 8004b9c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004ba0:	2202      	movs	r2, #2
 8004ba2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ba6:	2112      	movs	r1, #18
 8004ba8:	f7ff bf86 	b.w	8004ab8 <std>
 8004bac:	20004bfc 	.word	0x20004bfc
 8004bb0:	20004ac4 	.word	0x20004ac4
 8004bb4:	08004b25 	.word	0x08004b25

08004bb8 <__sfp_lock_acquire>:
 8004bb8:	4801      	ldr	r0, [pc, #4]	@ (8004bc0 <__sfp_lock_acquire+0x8>)
 8004bba:	f000 ba4c 	b.w	8005056 <__retarget_lock_acquire_recursive>
 8004bbe:	bf00      	nop
 8004bc0:	20004c05 	.word	0x20004c05

08004bc4 <__sfp_lock_release>:
 8004bc4:	4801      	ldr	r0, [pc, #4]	@ (8004bcc <__sfp_lock_release+0x8>)
 8004bc6:	f000 ba47 	b.w	8005058 <__retarget_lock_release_recursive>
 8004bca:	bf00      	nop
 8004bcc:	20004c05 	.word	0x20004c05

08004bd0 <__sinit>:
 8004bd0:	b510      	push	{r4, lr}
 8004bd2:	4604      	mov	r4, r0
 8004bd4:	f7ff fff0 	bl	8004bb8 <__sfp_lock_acquire>
 8004bd8:	6a23      	ldr	r3, [r4, #32]
 8004bda:	b11b      	cbz	r3, 8004be4 <__sinit+0x14>
 8004bdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004be0:	f7ff bff0 	b.w	8004bc4 <__sfp_lock_release>
 8004be4:	4b04      	ldr	r3, [pc, #16]	@ (8004bf8 <__sinit+0x28>)
 8004be6:	6223      	str	r3, [r4, #32]
 8004be8:	4b04      	ldr	r3, [pc, #16]	@ (8004bfc <__sinit+0x2c>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d1f5      	bne.n	8004bdc <__sinit+0xc>
 8004bf0:	f7ff ffc4 	bl	8004b7c <global_stdio_init.part.0>
 8004bf4:	e7f2      	b.n	8004bdc <__sinit+0xc>
 8004bf6:	bf00      	nop
 8004bf8:	08004b3d 	.word	0x08004b3d
 8004bfc:	20004bfc 	.word	0x20004bfc

08004c00 <_fwalk_sglue>:
 8004c00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c04:	4607      	mov	r7, r0
 8004c06:	4688      	mov	r8, r1
 8004c08:	4614      	mov	r4, r2
 8004c0a:	2600      	movs	r6, #0
 8004c0c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004c10:	f1b9 0901 	subs.w	r9, r9, #1
 8004c14:	d505      	bpl.n	8004c22 <_fwalk_sglue+0x22>
 8004c16:	6824      	ldr	r4, [r4, #0]
 8004c18:	2c00      	cmp	r4, #0
 8004c1a:	d1f7      	bne.n	8004c0c <_fwalk_sglue+0xc>
 8004c1c:	4630      	mov	r0, r6
 8004c1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c22:	89ab      	ldrh	r3, [r5, #12]
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d907      	bls.n	8004c38 <_fwalk_sglue+0x38>
 8004c28:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004c2c:	3301      	adds	r3, #1
 8004c2e:	d003      	beq.n	8004c38 <_fwalk_sglue+0x38>
 8004c30:	4629      	mov	r1, r5
 8004c32:	4638      	mov	r0, r7
 8004c34:	47c0      	blx	r8
 8004c36:	4306      	orrs	r6, r0
 8004c38:	3568      	adds	r5, #104	@ 0x68
 8004c3a:	e7e9      	b.n	8004c10 <_fwalk_sglue+0x10>

08004c3c <_puts_r>:
 8004c3c:	6a03      	ldr	r3, [r0, #32]
 8004c3e:	b570      	push	{r4, r5, r6, lr}
 8004c40:	6884      	ldr	r4, [r0, #8]
 8004c42:	4605      	mov	r5, r0
 8004c44:	460e      	mov	r6, r1
 8004c46:	b90b      	cbnz	r3, 8004c4c <_puts_r+0x10>
 8004c48:	f7ff ffc2 	bl	8004bd0 <__sinit>
 8004c4c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004c4e:	07db      	lsls	r3, r3, #31
 8004c50:	d405      	bmi.n	8004c5e <_puts_r+0x22>
 8004c52:	89a3      	ldrh	r3, [r4, #12]
 8004c54:	0598      	lsls	r0, r3, #22
 8004c56:	d402      	bmi.n	8004c5e <_puts_r+0x22>
 8004c58:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004c5a:	f000 f9fc 	bl	8005056 <__retarget_lock_acquire_recursive>
 8004c5e:	89a3      	ldrh	r3, [r4, #12]
 8004c60:	0719      	lsls	r1, r3, #28
 8004c62:	d502      	bpl.n	8004c6a <_puts_r+0x2e>
 8004c64:	6923      	ldr	r3, [r4, #16]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d135      	bne.n	8004cd6 <_puts_r+0x9a>
 8004c6a:	4621      	mov	r1, r4
 8004c6c:	4628      	mov	r0, r5
 8004c6e:	f000 f8c5 	bl	8004dfc <__swsetup_r>
 8004c72:	b380      	cbz	r0, 8004cd6 <_puts_r+0x9a>
 8004c74:	f04f 35ff 	mov.w	r5, #4294967295
 8004c78:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004c7a:	07da      	lsls	r2, r3, #31
 8004c7c:	d405      	bmi.n	8004c8a <_puts_r+0x4e>
 8004c7e:	89a3      	ldrh	r3, [r4, #12]
 8004c80:	059b      	lsls	r3, r3, #22
 8004c82:	d402      	bmi.n	8004c8a <_puts_r+0x4e>
 8004c84:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004c86:	f000 f9e7 	bl	8005058 <__retarget_lock_release_recursive>
 8004c8a:	4628      	mov	r0, r5
 8004c8c:	bd70      	pop	{r4, r5, r6, pc}
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	da04      	bge.n	8004c9c <_puts_r+0x60>
 8004c92:	69a2      	ldr	r2, [r4, #24]
 8004c94:	429a      	cmp	r2, r3
 8004c96:	dc17      	bgt.n	8004cc8 <_puts_r+0x8c>
 8004c98:	290a      	cmp	r1, #10
 8004c9a:	d015      	beq.n	8004cc8 <_puts_r+0x8c>
 8004c9c:	6823      	ldr	r3, [r4, #0]
 8004c9e:	1c5a      	adds	r2, r3, #1
 8004ca0:	6022      	str	r2, [r4, #0]
 8004ca2:	7019      	strb	r1, [r3, #0]
 8004ca4:	68a3      	ldr	r3, [r4, #8]
 8004ca6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004caa:	3b01      	subs	r3, #1
 8004cac:	60a3      	str	r3, [r4, #8]
 8004cae:	2900      	cmp	r1, #0
 8004cb0:	d1ed      	bne.n	8004c8e <_puts_r+0x52>
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	da11      	bge.n	8004cda <_puts_r+0x9e>
 8004cb6:	4622      	mov	r2, r4
 8004cb8:	210a      	movs	r1, #10
 8004cba:	4628      	mov	r0, r5
 8004cbc:	f000 f85f 	bl	8004d7e <__swbuf_r>
 8004cc0:	3001      	adds	r0, #1
 8004cc2:	d0d7      	beq.n	8004c74 <_puts_r+0x38>
 8004cc4:	250a      	movs	r5, #10
 8004cc6:	e7d7      	b.n	8004c78 <_puts_r+0x3c>
 8004cc8:	4622      	mov	r2, r4
 8004cca:	4628      	mov	r0, r5
 8004ccc:	f000 f857 	bl	8004d7e <__swbuf_r>
 8004cd0:	3001      	adds	r0, #1
 8004cd2:	d1e7      	bne.n	8004ca4 <_puts_r+0x68>
 8004cd4:	e7ce      	b.n	8004c74 <_puts_r+0x38>
 8004cd6:	3e01      	subs	r6, #1
 8004cd8:	e7e4      	b.n	8004ca4 <_puts_r+0x68>
 8004cda:	6823      	ldr	r3, [r4, #0]
 8004cdc:	1c5a      	adds	r2, r3, #1
 8004cde:	6022      	str	r2, [r4, #0]
 8004ce0:	220a      	movs	r2, #10
 8004ce2:	701a      	strb	r2, [r3, #0]
 8004ce4:	e7ee      	b.n	8004cc4 <_puts_r+0x88>
	...

08004ce8 <puts>:
 8004ce8:	4b02      	ldr	r3, [pc, #8]	@ (8004cf4 <puts+0xc>)
 8004cea:	4601      	mov	r1, r0
 8004cec:	6818      	ldr	r0, [r3, #0]
 8004cee:	f7ff bfa5 	b.w	8004c3c <_puts_r>
 8004cf2:	bf00      	nop
 8004cf4:	2000001c 	.word	0x2000001c

08004cf8 <__sread>:
 8004cf8:	b510      	push	{r4, lr}
 8004cfa:	460c      	mov	r4, r1
 8004cfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d00:	f000 f95a 	bl	8004fb8 <_read_r>
 8004d04:	2800      	cmp	r0, #0
 8004d06:	bfab      	itete	ge
 8004d08:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004d0a:	89a3      	ldrhlt	r3, [r4, #12]
 8004d0c:	181b      	addge	r3, r3, r0
 8004d0e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004d12:	bfac      	ite	ge
 8004d14:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004d16:	81a3      	strhlt	r3, [r4, #12]
 8004d18:	bd10      	pop	{r4, pc}

08004d1a <__swrite>:
 8004d1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d1e:	461f      	mov	r7, r3
 8004d20:	898b      	ldrh	r3, [r1, #12]
 8004d22:	05db      	lsls	r3, r3, #23
 8004d24:	4605      	mov	r5, r0
 8004d26:	460c      	mov	r4, r1
 8004d28:	4616      	mov	r6, r2
 8004d2a:	d505      	bpl.n	8004d38 <__swrite+0x1e>
 8004d2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d30:	2302      	movs	r3, #2
 8004d32:	2200      	movs	r2, #0
 8004d34:	f000 f92e 	bl	8004f94 <_lseek_r>
 8004d38:	89a3      	ldrh	r3, [r4, #12]
 8004d3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004d3e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004d42:	81a3      	strh	r3, [r4, #12]
 8004d44:	4632      	mov	r2, r6
 8004d46:	463b      	mov	r3, r7
 8004d48:	4628      	mov	r0, r5
 8004d4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d4e:	f000 b945 	b.w	8004fdc <_write_r>

08004d52 <__sseek>:
 8004d52:	b510      	push	{r4, lr}
 8004d54:	460c      	mov	r4, r1
 8004d56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d5a:	f000 f91b 	bl	8004f94 <_lseek_r>
 8004d5e:	1c43      	adds	r3, r0, #1
 8004d60:	89a3      	ldrh	r3, [r4, #12]
 8004d62:	bf15      	itete	ne
 8004d64:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004d66:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004d6a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004d6e:	81a3      	strheq	r3, [r4, #12]
 8004d70:	bf18      	it	ne
 8004d72:	81a3      	strhne	r3, [r4, #12]
 8004d74:	bd10      	pop	{r4, pc}

08004d76 <__sclose>:
 8004d76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d7a:	f000 b89d 	b.w	8004eb8 <_close_r>

08004d7e <__swbuf_r>:
 8004d7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d80:	460e      	mov	r6, r1
 8004d82:	4614      	mov	r4, r2
 8004d84:	4605      	mov	r5, r0
 8004d86:	b118      	cbz	r0, 8004d90 <__swbuf_r+0x12>
 8004d88:	6a03      	ldr	r3, [r0, #32]
 8004d8a:	b90b      	cbnz	r3, 8004d90 <__swbuf_r+0x12>
 8004d8c:	f7ff ff20 	bl	8004bd0 <__sinit>
 8004d90:	69a3      	ldr	r3, [r4, #24]
 8004d92:	60a3      	str	r3, [r4, #8]
 8004d94:	89a3      	ldrh	r3, [r4, #12]
 8004d96:	071a      	lsls	r2, r3, #28
 8004d98:	d501      	bpl.n	8004d9e <__swbuf_r+0x20>
 8004d9a:	6923      	ldr	r3, [r4, #16]
 8004d9c:	b943      	cbnz	r3, 8004db0 <__swbuf_r+0x32>
 8004d9e:	4621      	mov	r1, r4
 8004da0:	4628      	mov	r0, r5
 8004da2:	f000 f82b 	bl	8004dfc <__swsetup_r>
 8004da6:	b118      	cbz	r0, 8004db0 <__swbuf_r+0x32>
 8004da8:	f04f 37ff 	mov.w	r7, #4294967295
 8004dac:	4638      	mov	r0, r7
 8004dae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004db0:	6823      	ldr	r3, [r4, #0]
 8004db2:	6922      	ldr	r2, [r4, #16]
 8004db4:	1a98      	subs	r0, r3, r2
 8004db6:	6963      	ldr	r3, [r4, #20]
 8004db8:	b2f6      	uxtb	r6, r6
 8004dba:	4283      	cmp	r3, r0
 8004dbc:	4637      	mov	r7, r6
 8004dbe:	dc05      	bgt.n	8004dcc <__swbuf_r+0x4e>
 8004dc0:	4621      	mov	r1, r4
 8004dc2:	4628      	mov	r0, r5
 8004dc4:	f000 fad4 	bl	8005370 <_fflush_r>
 8004dc8:	2800      	cmp	r0, #0
 8004dca:	d1ed      	bne.n	8004da8 <__swbuf_r+0x2a>
 8004dcc:	68a3      	ldr	r3, [r4, #8]
 8004dce:	3b01      	subs	r3, #1
 8004dd0:	60a3      	str	r3, [r4, #8]
 8004dd2:	6823      	ldr	r3, [r4, #0]
 8004dd4:	1c5a      	adds	r2, r3, #1
 8004dd6:	6022      	str	r2, [r4, #0]
 8004dd8:	701e      	strb	r6, [r3, #0]
 8004dda:	6962      	ldr	r2, [r4, #20]
 8004ddc:	1c43      	adds	r3, r0, #1
 8004dde:	429a      	cmp	r2, r3
 8004de0:	d004      	beq.n	8004dec <__swbuf_r+0x6e>
 8004de2:	89a3      	ldrh	r3, [r4, #12]
 8004de4:	07db      	lsls	r3, r3, #31
 8004de6:	d5e1      	bpl.n	8004dac <__swbuf_r+0x2e>
 8004de8:	2e0a      	cmp	r6, #10
 8004dea:	d1df      	bne.n	8004dac <__swbuf_r+0x2e>
 8004dec:	4621      	mov	r1, r4
 8004dee:	4628      	mov	r0, r5
 8004df0:	f000 fabe 	bl	8005370 <_fflush_r>
 8004df4:	2800      	cmp	r0, #0
 8004df6:	d0d9      	beq.n	8004dac <__swbuf_r+0x2e>
 8004df8:	e7d6      	b.n	8004da8 <__swbuf_r+0x2a>
	...

08004dfc <__swsetup_r>:
 8004dfc:	b538      	push	{r3, r4, r5, lr}
 8004dfe:	4b29      	ldr	r3, [pc, #164]	@ (8004ea4 <__swsetup_r+0xa8>)
 8004e00:	4605      	mov	r5, r0
 8004e02:	6818      	ldr	r0, [r3, #0]
 8004e04:	460c      	mov	r4, r1
 8004e06:	b118      	cbz	r0, 8004e10 <__swsetup_r+0x14>
 8004e08:	6a03      	ldr	r3, [r0, #32]
 8004e0a:	b90b      	cbnz	r3, 8004e10 <__swsetup_r+0x14>
 8004e0c:	f7ff fee0 	bl	8004bd0 <__sinit>
 8004e10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e14:	0719      	lsls	r1, r3, #28
 8004e16:	d422      	bmi.n	8004e5e <__swsetup_r+0x62>
 8004e18:	06da      	lsls	r2, r3, #27
 8004e1a:	d407      	bmi.n	8004e2c <__swsetup_r+0x30>
 8004e1c:	2209      	movs	r2, #9
 8004e1e:	602a      	str	r2, [r5, #0]
 8004e20:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004e24:	81a3      	strh	r3, [r4, #12]
 8004e26:	f04f 30ff 	mov.w	r0, #4294967295
 8004e2a:	e033      	b.n	8004e94 <__swsetup_r+0x98>
 8004e2c:	0758      	lsls	r0, r3, #29
 8004e2e:	d512      	bpl.n	8004e56 <__swsetup_r+0x5a>
 8004e30:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004e32:	b141      	cbz	r1, 8004e46 <__swsetup_r+0x4a>
 8004e34:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004e38:	4299      	cmp	r1, r3
 8004e3a:	d002      	beq.n	8004e42 <__swsetup_r+0x46>
 8004e3c:	4628      	mov	r0, r5
 8004e3e:	f000 f91b 	bl	8005078 <_free_r>
 8004e42:	2300      	movs	r3, #0
 8004e44:	6363      	str	r3, [r4, #52]	@ 0x34
 8004e46:	89a3      	ldrh	r3, [r4, #12]
 8004e48:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004e4c:	81a3      	strh	r3, [r4, #12]
 8004e4e:	2300      	movs	r3, #0
 8004e50:	6063      	str	r3, [r4, #4]
 8004e52:	6923      	ldr	r3, [r4, #16]
 8004e54:	6023      	str	r3, [r4, #0]
 8004e56:	89a3      	ldrh	r3, [r4, #12]
 8004e58:	f043 0308 	orr.w	r3, r3, #8
 8004e5c:	81a3      	strh	r3, [r4, #12]
 8004e5e:	6923      	ldr	r3, [r4, #16]
 8004e60:	b94b      	cbnz	r3, 8004e76 <__swsetup_r+0x7a>
 8004e62:	89a3      	ldrh	r3, [r4, #12]
 8004e64:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004e68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e6c:	d003      	beq.n	8004e76 <__swsetup_r+0x7a>
 8004e6e:	4621      	mov	r1, r4
 8004e70:	4628      	mov	r0, r5
 8004e72:	f000 facb 	bl	800540c <__smakebuf_r>
 8004e76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e7a:	f013 0201 	ands.w	r2, r3, #1
 8004e7e:	d00a      	beq.n	8004e96 <__swsetup_r+0x9a>
 8004e80:	2200      	movs	r2, #0
 8004e82:	60a2      	str	r2, [r4, #8]
 8004e84:	6962      	ldr	r2, [r4, #20]
 8004e86:	4252      	negs	r2, r2
 8004e88:	61a2      	str	r2, [r4, #24]
 8004e8a:	6922      	ldr	r2, [r4, #16]
 8004e8c:	b942      	cbnz	r2, 8004ea0 <__swsetup_r+0xa4>
 8004e8e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004e92:	d1c5      	bne.n	8004e20 <__swsetup_r+0x24>
 8004e94:	bd38      	pop	{r3, r4, r5, pc}
 8004e96:	0799      	lsls	r1, r3, #30
 8004e98:	bf58      	it	pl
 8004e9a:	6962      	ldrpl	r2, [r4, #20]
 8004e9c:	60a2      	str	r2, [r4, #8]
 8004e9e:	e7f4      	b.n	8004e8a <__swsetup_r+0x8e>
 8004ea0:	2000      	movs	r0, #0
 8004ea2:	e7f7      	b.n	8004e94 <__swsetup_r+0x98>
 8004ea4:	2000001c 	.word	0x2000001c

08004ea8 <memset>:
 8004ea8:	4402      	add	r2, r0
 8004eaa:	4603      	mov	r3, r0
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d100      	bne.n	8004eb2 <memset+0xa>
 8004eb0:	4770      	bx	lr
 8004eb2:	f803 1b01 	strb.w	r1, [r3], #1
 8004eb6:	e7f9      	b.n	8004eac <memset+0x4>

08004eb8 <_close_r>:
 8004eb8:	b538      	push	{r3, r4, r5, lr}
 8004eba:	4d06      	ldr	r5, [pc, #24]	@ (8004ed4 <_close_r+0x1c>)
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	4604      	mov	r4, r0
 8004ec0:	4608      	mov	r0, r1
 8004ec2:	602b      	str	r3, [r5, #0]
 8004ec4:	f7fb fde5 	bl	8000a92 <_close>
 8004ec8:	1c43      	adds	r3, r0, #1
 8004eca:	d102      	bne.n	8004ed2 <_close_r+0x1a>
 8004ecc:	682b      	ldr	r3, [r5, #0]
 8004ece:	b103      	cbz	r3, 8004ed2 <_close_r+0x1a>
 8004ed0:	6023      	str	r3, [r4, #0]
 8004ed2:	bd38      	pop	{r3, r4, r5, pc}
 8004ed4:	20004c00 	.word	0x20004c00

08004ed8 <_reclaim_reent>:
 8004ed8:	4b2d      	ldr	r3, [pc, #180]	@ (8004f90 <_reclaim_reent+0xb8>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4283      	cmp	r3, r0
 8004ede:	b570      	push	{r4, r5, r6, lr}
 8004ee0:	4604      	mov	r4, r0
 8004ee2:	d053      	beq.n	8004f8c <_reclaim_reent+0xb4>
 8004ee4:	69c3      	ldr	r3, [r0, #28]
 8004ee6:	b31b      	cbz	r3, 8004f30 <_reclaim_reent+0x58>
 8004ee8:	68db      	ldr	r3, [r3, #12]
 8004eea:	b163      	cbz	r3, 8004f06 <_reclaim_reent+0x2e>
 8004eec:	2500      	movs	r5, #0
 8004eee:	69e3      	ldr	r3, [r4, #28]
 8004ef0:	68db      	ldr	r3, [r3, #12]
 8004ef2:	5959      	ldr	r1, [r3, r5]
 8004ef4:	b9b1      	cbnz	r1, 8004f24 <_reclaim_reent+0x4c>
 8004ef6:	3504      	adds	r5, #4
 8004ef8:	2d80      	cmp	r5, #128	@ 0x80
 8004efa:	d1f8      	bne.n	8004eee <_reclaim_reent+0x16>
 8004efc:	69e3      	ldr	r3, [r4, #28]
 8004efe:	4620      	mov	r0, r4
 8004f00:	68d9      	ldr	r1, [r3, #12]
 8004f02:	f000 f8b9 	bl	8005078 <_free_r>
 8004f06:	69e3      	ldr	r3, [r4, #28]
 8004f08:	6819      	ldr	r1, [r3, #0]
 8004f0a:	b111      	cbz	r1, 8004f12 <_reclaim_reent+0x3a>
 8004f0c:	4620      	mov	r0, r4
 8004f0e:	f000 f8b3 	bl	8005078 <_free_r>
 8004f12:	69e3      	ldr	r3, [r4, #28]
 8004f14:	689d      	ldr	r5, [r3, #8]
 8004f16:	b15d      	cbz	r5, 8004f30 <_reclaim_reent+0x58>
 8004f18:	4629      	mov	r1, r5
 8004f1a:	4620      	mov	r0, r4
 8004f1c:	682d      	ldr	r5, [r5, #0]
 8004f1e:	f000 f8ab 	bl	8005078 <_free_r>
 8004f22:	e7f8      	b.n	8004f16 <_reclaim_reent+0x3e>
 8004f24:	680e      	ldr	r6, [r1, #0]
 8004f26:	4620      	mov	r0, r4
 8004f28:	f000 f8a6 	bl	8005078 <_free_r>
 8004f2c:	4631      	mov	r1, r6
 8004f2e:	e7e1      	b.n	8004ef4 <_reclaim_reent+0x1c>
 8004f30:	6961      	ldr	r1, [r4, #20]
 8004f32:	b111      	cbz	r1, 8004f3a <_reclaim_reent+0x62>
 8004f34:	4620      	mov	r0, r4
 8004f36:	f000 f89f 	bl	8005078 <_free_r>
 8004f3a:	69e1      	ldr	r1, [r4, #28]
 8004f3c:	b111      	cbz	r1, 8004f44 <_reclaim_reent+0x6c>
 8004f3e:	4620      	mov	r0, r4
 8004f40:	f000 f89a 	bl	8005078 <_free_r>
 8004f44:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8004f46:	b111      	cbz	r1, 8004f4e <_reclaim_reent+0x76>
 8004f48:	4620      	mov	r0, r4
 8004f4a:	f000 f895 	bl	8005078 <_free_r>
 8004f4e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004f50:	b111      	cbz	r1, 8004f58 <_reclaim_reent+0x80>
 8004f52:	4620      	mov	r0, r4
 8004f54:	f000 f890 	bl	8005078 <_free_r>
 8004f58:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8004f5a:	b111      	cbz	r1, 8004f62 <_reclaim_reent+0x8a>
 8004f5c:	4620      	mov	r0, r4
 8004f5e:	f000 f88b 	bl	8005078 <_free_r>
 8004f62:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8004f64:	b111      	cbz	r1, 8004f6c <_reclaim_reent+0x94>
 8004f66:	4620      	mov	r0, r4
 8004f68:	f000 f886 	bl	8005078 <_free_r>
 8004f6c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8004f6e:	b111      	cbz	r1, 8004f76 <_reclaim_reent+0x9e>
 8004f70:	4620      	mov	r0, r4
 8004f72:	f000 f881 	bl	8005078 <_free_r>
 8004f76:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8004f78:	b111      	cbz	r1, 8004f80 <_reclaim_reent+0xa8>
 8004f7a:	4620      	mov	r0, r4
 8004f7c:	f000 f87c 	bl	8005078 <_free_r>
 8004f80:	6a23      	ldr	r3, [r4, #32]
 8004f82:	b11b      	cbz	r3, 8004f8c <_reclaim_reent+0xb4>
 8004f84:	4620      	mov	r0, r4
 8004f86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004f8a:	4718      	bx	r3
 8004f8c:	bd70      	pop	{r4, r5, r6, pc}
 8004f8e:	bf00      	nop
 8004f90:	2000001c 	.word	0x2000001c

08004f94 <_lseek_r>:
 8004f94:	b538      	push	{r3, r4, r5, lr}
 8004f96:	4d07      	ldr	r5, [pc, #28]	@ (8004fb4 <_lseek_r+0x20>)
 8004f98:	4604      	mov	r4, r0
 8004f9a:	4608      	mov	r0, r1
 8004f9c:	4611      	mov	r1, r2
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	602a      	str	r2, [r5, #0]
 8004fa2:	461a      	mov	r2, r3
 8004fa4:	f7fb fd9c 	bl	8000ae0 <_lseek>
 8004fa8:	1c43      	adds	r3, r0, #1
 8004faa:	d102      	bne.n	8004fb2 <_lseek_r+0x1e>
 8004fac:	682b      	ldr	r3, [r5, #0]
 8004fae:	b103      	cbz	r3, 8004fb2 <_lseek_r+0x1e>
 8004fb0:	6023      	str	r3, [r4, #0]
 8004fb2:	bd38      	pop	{r3, r4, r5, pc}
 8004fb4:	20004c00 	.word	0x20004c00

08004fb8 <_read_r>:
 8004fb8:	b538      	push	{r3, r4, r5, lr}
 8004fba:	4d07      	ldr	r5, [pc, #28]	@ (8004fd8 <_read_r+0x20>)
 8004fbc:	4604      	mov	r4, r0
 8004fbe:	4608      	mov	r0, r1
 8004fc0:	4611      	mov	r1, r2
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	602a      	str	r2, [r5, #0]
 8004fc6:	461a      	mov	r2, r3
 8004fc8:	f7fb fd2a 	bl	8000a20 <_read>
 8004fcc:	1c43      	adds	r3, r0, #1
 8004fce:	d102      	bne.n	8004fd6 <_read_r+0x1e>
 8004fd0:	682b      	ldr	r3, [r5, #0]
 8004fd2:	b103      	cbz	r3, 8004fd6 <_read_r+0x1e>
 8004fd4:	6023      	str	r3, [r4, #0]
 8004fd6:	bd38      	pop	{r3, r4, r5, pc}
 8004fd8:	20004c00 	.word	0x20004c00

08004fdc <_write_r>:
 8004fdc:	b538      	push	{r3, r4, r5, lr}
 8004fde:	4d07      	ldr	r5, [pc, #28]	@ (8004ffc <_write_r+0x20>)
 8004fe0:	4604      	mov	r4, r0
 8004fe2:	4608      	mov	r0, r1
 8004fe4:	4611      	mov	r1, r2
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	602a      	str	r2, [r5, #0]
 8004fea:	461a      	mov	r2, r3
 8004fec:	f7fb fd35 	bl	8000a5a <_write>
 8004ff0:	1c43      	adds	r3, r0, #1
 8004ff2:	d102      	bne.n	8004ffa <_write_r+0x1e>
 8004ff4:	682b      	ldr	r3, [r5, #0]
 8004ff6:	b103      	cbz	r3, 8004ffa <_write_r+0x1e>
 8004ff8:	6023      	str	r3, [r4, #0]
 8004ffa:	bd38      	pop	{r3, r4, r5, pc}
 8004ffc:	20004c00 	.word	0x20004c00

08005000 <__errno>:
 8005000:	4b01      	ldr	r3, [pc, #4]	@ (8005008 <__errno+0x8>)
 8005002:	6818      	ldr	r0, [r3, #0]
 8005004:	4770      	bx	lr
 8005006:	bf00      	nop
 8005008:	2000001c 	.word	0x2000001c

0800500c <__libc_init_array>:
 800500c:	b570      	push	{r4, r5, r6, lr}
 800500e:	4d0d      	ldr	r5, [pc, #52]	@ (8005044 <__libc_init_array+0x38>)
 8005010:	4c0d      	ldr	r4, [pc, #52]	@ (8005048 <__libc_init_array+0x3c>)
 8005012:	1b64      	subs	r4, r4, r5
 8005014:	10a4      	asrs	r4, r4, #2
 8005016:	2600      	movs	r6, #0
 8005018:	42a6      	cmp	r6, r4
 800501a:	d109      	bne.n	8005030 <__libc_init_array+0x24>
 800501c:	4d0b      	ldr	r5, [pc, #44]	@ (800504c <__libc_init_array+0x40>)
 800501e:	4c0c      	ldr	r4, [pc, #48]	@ (8005050 <__libc_init_array+0x44>)
 8005020:	f000 fa62 	bl	80054e8 <_init>
 8005024:	1b64      	subs	r4, r4, r5
 8005026:	10a4      	asrs	r4, r4, #2
 8005028:	2600      	movs	r6, #0
 800502a:	42a6      	cmp	r6, r4
 800502c:	d105      	bne.n	800503a <__libc_init_array+0x2e>
 800502e:	bd70      	pop	{r4, r5, r6, pc}
 8005030:	f855 3b04 	ldr.w	r3, [r5], #4
 8005034:	4798      	blx	r3
 8005036:	3601      	adds	r6, #1
 8005038:	e7ee      	b.n	8005018 <__libc_init_array+0xc>
 800503a:	f855 3b04 	ldr.w	r3, [r5], #4
 800503e:	4798      	blx	r3
 8005040:	3601      	adds	r6, #1
 8005042:	e7f2      	b.n	800502a <__libc_init_array+0x1e>
 8005044:	080055a8 	.word	0x080055a8
 8005048:	080055a8 	.word	0x080055a8
 800504c:	080055a8 	.word	0x080055a8
 8005050:	080055ac 	.word	0x080055ac

08005054 <__retarget_lock_init_recursive>:
 8005054:	4770      	bx	lr

08005056 <__retarget_lock_acquire_recursive>:
 8005056:	4770      	bx	lr

08005058 <__retarget_lock_release_recursive>:
 8005058:	4770      	bx	lr

0800505a <memcpy>:
 800505a:	440a      	add	r2, r1
 800505c:	4291      	cmp	r1, r2
 800505e:	f100 33ff 	add.w	r3, r0, #4294967295
 8005062:	d100      	bne.n	8005066 <memcpy+0xc>
 8005064:	4770      	bx	lr
 8005066:	b510      	push	{r4, lr}
 8005068:	f811 4b01 	ldrb.w	r4, [r1], #1
 800506c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005070:	4291      	cmp	r1, r2
 8005072:	d1f9      	bne.n	8005068 <memcpy+0xe>
 8005074:	bd10      	pop	{r4, pc}
	...

08005078 <_free_r>:
 8005078:	b538      	push	{r3, r4, r5, lr}
 800507a:	4605      	mov	r5, r0
 800507c:	2900      	cmp	r1, #0
 800507e:	d041      	beq.n	8005104 <_free_r+0x8c>
 8005080:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005084:	1f0c      	subs	r4, r1, #4
 8005086:	2b00      	cmp	r3, #0
 8005088:	bfb8      	it	lt
 800508a:	18e4      	addlt	r4, r4, r3
 800508c:	f000 f8e0 	bl	8005250 <__malloc_lock>
 8005090:	4a1d      	ldr	r2, [pc, #116]	@ (8005108 <_free_r+0x90>)
 8005092:	6813      	ldr	r3, [r2, #0]
 8005094:	b933      	cbnz	r3, 80050a4 <_free_r+0x2c>
 8005096:	6063      	str	r3, [r4, #4]
 8005098:	6014      	str	r4, [r2, #0]
 800509a:	4628      	mov	r0, r5
 800509c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80050a0:	f000 b8dc 	b.w	800525c <__malloc_unlock>
 80050a4:	42a3      	cmp	r3, r4
 80050a6:	d908      	bls.n	80050ba <_free_r+0x42>
 80050a8:	6820      	ldr	r0, [r4, #0]
 80050aa:	1821      	adds	r1, r4, r0
 80050ac:	428b      	cmp	r3, r1
 80050ae:	bf01      	itttt	eq
 80050b0:	6819      	ldreq	r1, [r3, #0]
 80050b2:	685b      	ldreq	r3, [r3, #4]
 80050b4:	1809      	addeq	r1, r1, r0
 80050b6:	6021      	streq	r1, [r4, #0]
 80050b8:	e7ed      	b.n	8005096 <_free_r+0x1e>
 80050ba:	461a      	mov	r2, r3
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	b10b      	cbz	r3, 80050c4 <_free_r+0x4c>
 80050c0:	42a3      	cmp	r3, r4
 80050c2:	d9fa      	bls.n	80050ba <_free_r+0x42>
 80050c4:	6811      	ldr	r1, [r2, #0]
 80050c6:	1850      	adds	r0, r2, r1
 80050c8:	42a0      	cmp	r0, r4
 80050ca:	d10b      	bne.n	80050e4 <_free_r+0x6c>
 80050cc:	6820      	ldr	r0, [r4, #0]
 80050ce:	4401      	add	r1, r0
 80050d0:	1850      	adds	r0, r2, r1
 80050d2:	4283      	cmp	r3, r0
 80050d4:	6011      	str	r1, [r2, #0]
 80050d6:	d1e0      	bne.n	800509a <_free_r+0x22>
 80050d8:	6818      	ldr	r0, [r3, #0]
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	6053      	str	r3, [r2, #4]
 80050de:	4408      	add	r0, r1
 80050e0:	6010      	str	r0, [r2, #0]
 80050e2:	e7da      	b.n	800509a <_free_r+0x22>
 80050e4:	d902      	bls.n	80050ec <_free_r+0x74>
 80050e6:	230c      	movs	r3, #12
 80050e8:	602b      	str	r3, [r5, #0]
 80050ea:	e7d6      	b.n	800509a <_free_r+0x22>
 80050ec:	6820      	ldr	r0, [r4, #0]
 80050ee:	1821      	adds	r1, r4, r0
 80050f0:	428b      	cmp	r3, r1
 80050f2:	bf04      	itt	eq
 80050f4:	6819      	ldreq	r1, [r3, #0]
 80050f6:	685b      	ldreq	r3, [r3, #4]
 80050f8:	6063      	str	r3, [r4, #4]
 80050fa:	bf04      	itt	eq
 80050fc:	1809      	addeq	r1, r1, r0
 80050fe:	6021      	streq	r1, [r4, #0]
 8005100:	6054      	str	r4, [r2, #4]
 8005102:	e7ca      	b.n	800509a <_free_r+0x22>
 8005104:	bd38      	pop	{r3, r4, r5, pc}
 8005106:	bf00      	nop
 8005108:	20004c0c 	.word	0x20004c0c

0800510c <sbrk_aligned>:
 800510c:	b570      	push	{r4, r5, r6, lr}
 800510e:	4e0f      	ldr	r6, [pc, #60]	@ (800514c <sbrk_aligned+0x40>)
 8005110:	460c      	mov	r4, r1
 8005112:	6831      	ldr	r1, [r6, #0]
 8005114:	4605      	mov	r5, r0
 8005116:	b911      	cbnz	r1, 800511e <sbrk_aligned+0x12>
 8005118:	f000 f9d6 	bl	80054c8 <_sbrk_r>
 800511c:	6030      	str	r0, [r6, #0]
 800511e:	4621      	mov	r1, r4
 8005120:	4628      	mov	r0, r5
 8005122:	f000 f9d1 	bl	80054c8 <_sbrk_r>
 8005126:	1c43      	adds	r3, r0, #1
 8005128:	d103      	bne.n	8005132 <sbrk_aligned+0x26>
 800512a:	f04f 34ff 	mov.w	r4, #4294967295
 800512e:	4620      	mov	r0, r4
 8005130:	bd70      	pop	{r4, r5, r6, pc}
 8005132:	1cc4      	adds	r4, r0, #3
 8005134:	f024 0403 	bic.w	r4, r4, #3
 8005138:	42a0      	cmp	r0, r4
 800513a:	d0f8      	beq.n	800512e <sbrk_aligned+0x22>
 800513c:	1a21      	subs	r1, r4, r0
 800513e:	4628      	mov	r0, r5
 8005140:	f000 f9c2 	bl	80054c8 <_sbrk_r>
 8005144:	3001      	adds	r0, #1
 8005146:	d1f2      	bne.n	800512e <sbrk_aligned+0x22>
 8005148:	e7ef      	b.n	800512a <sbrk_aligned+0x1e>
 800514a:	bf00      	nop
 800514c:	20004c08 	.word	0x20004c08

08005150 <_malloc_r>:
 8005150:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005154:	1ccd      	adds	r5, r1, #3
 8005156:	f025 0503 	bic.w	r5, r5, #3
 800515a:	3508      	adds	r5, #8
 800515c:	2d0c      	cmp	r5, #12
 800515e:	bf38      	it	cc
 8005160:	250c      	movcc	r5, #12
 8005162:	2d00      	cmp	r5, #0
 8005164:	4606      	mov	r6, r0
 8005166:	db01      	blt.n	800516c <_malloc_r+0x1c>
 8005168:	42a9      	cmp	r1, r5
 800516a:	d904      	bls.n	8005176 <_malloc_r+0x26>
 800516c:	230c      	movs	r3, #12
 800516e:	6033      	str	r3, [r6, #0]
 8005170:	2000      	movs	r0, #0
 8005172:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005176:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800524c <_malloc_r+0xfc>
 800517a:	f000 f869 	bl	8005250 <__malloc_lock>
 800517e:	f8d8 3000 	ldr.w	r3, [r8]
 8005182:	461c      	mov	r4, r3
 8005184:	bb44      	cbnz	r4, 80051d8 <_malloc_r+0x88>
 8005186:	4629      	mov	r1, r5
 8005188:	4630      	mov	r0, r6
 800518a:	f7ff ffbf 	bl	800510c <sbrk_aligned>
 800518e:	1c43      	adds	r3, r0, #1
 8005190:	4604      	mov	r4, r0
 8005192:	d158      	bne.n	8005246 <_malloc_r+0xf6>
 8005194:	f8d8 4000 	ldr.w	r4, [r8]
 8005198:	4627      	mov	r7, r4
 800519a:	2f00      	cmp	r7, #0
 800519c:	d143      	bne.n	8005226 <_malloc_r+0xd6>
 800519e:	2c00      	cmp	r4, #0
 80051a0:	d04b      	beq.n	800523a <_malloc_r+0xea>
 80051a2:	6823      	ldr	r3, [r4, #0]
 80051a4:	4639      	mov	r1, r7
 80051a6:	4630      	mov	r0, r6
 80051a8:	eb04 0903 	add.w	r9, r4, r3
 80051ac:	f000 f98c 	bl	80054c8 <_sbrk_r>
 80051b0:	4581      	cmp	r9, r0
 80051b2:	d142      	bne.n	800523a <_malloc_r+0xea>
 80051b4:	6821      	ldr	r1, [r4, #0]
 80051b6:	1a6d      	subs	r5, r5, r1
 80051b8:	4629      	mov	r1, r5
 80051ba:	4630      	mov	r0, r6
 80051bc:	f7ff ffa6 	bl	800510c <sbrk_aligned>
 80051c0:	3001      	adds	r0, #1
 80051c2:	d03a      	beq.n	800523a <_malloc_r+0xea>
 80051c4:	6823      	ldr	r3, [r4, #0]
 80051c6:	442b      	add	r3, r5
 80051c8:	6023      	str	r3, [r4, #0]
 80051ca:	f8d8 3000 	ldr.w	r3, [r8]
 80051ce:	685a      	ldr	r2, [r3, #4]
 80051d0:	bb62      	cbnz	r2, 800522c <_malloc_r+0xdc>
 80051d2:	f8c8 7000 	str.w	r7, [r8]
 80051d6:	e00f      	b.n	80051f8 <_malloc_r+0xa8>
 80051d8:	6822      	ldr	r2, [r4, #0]
 80051da:	1b52      	subs	r2, r2, r5
 80051dc:	d420      	bmi.n	8005220 <_malloc_r+0xd0>
 80051de:	2a0b      	cmp	r2, #11
 80051e0:	d917      	bls.n	8005212 <_malloc_r+0xc2>
 80051e2:	1961      	adds	r1, r4, r5
 80051e4:	42a3      	cmp	r3, r4
 80051e6:	6025      	str	r5, [r4, #0]
 80051e8:	bf18      	it	ne
 80051ea:	6059      	strne	r1, [r3, #4]
 80051ec:	6863      	ldr	r3, [r4, #4]
 80051ee:	bf08      	it	eq
 80051f0:	f8c8 1000 	streq.w	r1, [r8]
 80051f4:	5162      	str	r2, [r4, r5]
 80051f6:	604b      	str	r3, [r1, #4]
 80051f8:	4630      	mov	r0, r6
 80051fa:	f000 f82f 	bl	800525c <__malloc_unlock>
 80051fe:	f104 000b 	add.w	r0, r4, #11
 8005202:	1d23      	adds	r3, r4, #4
 8005204:	f020 0007 	bic.w	r0, r0, #7
 8005208:	1ac2      	subs	r2, r0, r3
 800520a:	bf1c      	itt	ne
 800520c:	1a1b      	subne	r3, r3, r0
 800520e:	50a3      	strne	r3, [r4, r2]
 8005210:	e7af      	b.n	8005172 <_malloc_r+0x22>
 8005212:	6862      	ldr	r2, [r4, #4]
 8005214:	42a3      	cmp	r3, r4
 8005216:	bf0c      	ite	eq
 8005218:	f8c8 2000 	streq.w	r2, [r8]
 800521c:	605a      	strne	r2, [r3, #4]
 800521e:	e7eb      	b.n	80051f8 <_malloc_r+0xa8>
 8005220:	4623      	mov	r3, r4
 8005222:	6864      	ldr	r4, [r4, #4]
 8005224:	e7ae      	b.n	8005184 <_malloc_r+0x34>
 8005226:	463c      	mov	r4, r7
 8005228:	687f      	ldr	r7, [r7, #4]
 800522a:	e7b6      	b.n	800519a <_malloc_r+0x4a>
 800522c:	461a      	mov	r2, r3
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	42a3      	cmp	r3, r4
 8005232:	d1fb      	bne.n	800522c <_malloc_r+0xdc>
 8005234:	2300      	movs	r3, #0
 8005236:	6053      	str	r3, [r2, #4]
 8005238:	e7de      	b.n	80051f8 <_malloc_r+0xa8>
 800523a:	230c      	movs	r3, #12
 800523c:	6033      	str	r3, [r6, #0]
 800523e:	4630      	mov	r0, r6
 8005240:	f000 f80c 	bl	800525c <__malloc_unlock>
 8005244:	e794      	b.n	8005170 <_malloc_r+0x20>
 8005246:	6005      	str	r5, [r0, #0]
 8005248:	e7d6      	b.n	80051f8 <_malloc_r+0xa8>
 800524a:	bf00      	nop
 800524c:	20004c0c 	.word	0x20004c0c

08005250 <__malloc_lock>:
 8005250:	4801      	ldr	r0, [pc, #4]	@ (8005258 <__malloc_lock+0x8>)
 8005252:	f7ff bf00 	b.w	8005056 <__retarget_lock_acquire_recursive>
 8005256:	bf00      	nop
 8005258:	20004c04 	.word	0x20004c04

0800525c <__malloc_unlock>:
 800525c:	4801      	ldr	r0, [pc, #4]	@ (8005264 <__malloc_unlock+0x8>)
 800525e:	f7ff befb 	b.w	8005058 <__retarget_lock_release_recursive>
 8005262:	bf00      	nop
 8005264:	20004c04 	.word	0x20004c04

08005268 <__sflush_r>:
 8005268:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800526c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005270:	0716      	lsls	r6, r2, #28
 8005272:	4605      	mov	r5, r0
 8005274:	460c      	mov	r4, r1
 8005276:	d454      	bmi.n	8005322 <__sflush_r+0xba>
 8005278:	684b      	ldr	r3, [r1, #4]
 800527a:	2b00      	cmp	r3, #0
 800527c:	dc02      	bgt.n	8005284 <__sflush_r+0x1c>
 800527e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005280:	2b00      	cmp	r3, #0
 8005282:	dd48      	ble.n	8005316 <__sflush_r+0xae>
 8005284:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005286:	2e00      	cmp	r6, #0
 8005288:	d045      	beq.n	8005316 <__sflush_r+0xae>
 800528a:	2300      	movs	r3, #0
 800528c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005290:	682f      	ldr	r7, [r5, #0]
 8005292:	6a21      	ldr	r1, [r4, #32]
 8005294:	602b      	str	r3, [r5, #0]
 8005296:	d030      	beq.n	80052fa <__sflush_r+0x92>
 8005298:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800529a:	89a3      	ldrh	r3, [r4, #12]
 800529c:	0759      	lsls	r1, r3, #29
 800529e:	d505      	bpl.n	80052ac <__sflush_r+0x44>
 80052a0:	6863      	ldr	r3, [r4, #4]
 80052a2:	1ad2      	subs	r2, r2, r3
 80052a4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80052a6:	b10b      	cbz	r3, 80052ac <__sflush_r+0x44>
 80052a8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80052aa:	1ad2      	subs	r2, r2, r3
 80052ac:	2300      	movs	r3, #0
 80052ae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80052b0:	6a21      	ldr	r1, [r4, #32]
 80052b2:	4628      	mov	r0, r5
 80052b4:	47b0      	blx	r6
 80052b6:	1c43      	adds	r3, r0, #1
 80052b8:	89a3      	ldrh	r3, [r4, #12]
 80052ba:	d106      	bne.n	80052ca <__sflush_r+0x62>
 80052bc:	6829      	ldr	r1, [r5, #0]
 80052be:	291d      	cmp	r1, #29
 80052c0:	d82b      	bhi.n	800531a <__sflush_r+0xb2>
 80052c2:	4a2a      	ldr	r2, [pc, #168]	@ (800536c <__sflush_r+0x104>)
 80052c4:	40ca      	lsrs	r2, r1
 80052c6:	07d6      	lsls	r6, r2, #31
 80052c8:	d527      	bpl.n	800531a <__sflush_r+0xb2>
 80052ca:	2200      	movs	r2, #0
 80052cc:	6062      	str	r2, [r4, #4]
 80052ce:	04d9      	lsls	r1, r3, #19
 80052d0:	6922      	ldr	r2, [r4, #16]
 80052d2:	6022      	str	r2, [r4, #0]
 80052d4:	d504      	bpl.n	80052e0 <__sflush_r+0x78>
 80052d6:	1c42      	adds	r2, r0, #1
 80052d8:	d101      	bne.n	80052de <__sflush_r+0x76>
 80052da:	682b      	ldr	r3, [r5, #0]
 80052dc:	b903      	cbnz	r3, 80052e0 <__sflush_r+0x78>
 80052de:	6560      	str	r0, [r4, #84]	@ 0x54
 80052e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80052e2:	602f      	str	r7, [r5, #0]
 80052e4:	b1b9      	cbz	r1, 8005316 <__sflush_r+0xae>
 80052e6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80052ea:	4299      	cmp	r1, r3
 80052ec:	d002      	beq.n	80052f4 <__sflush_r+0x8c>
 80052ee:	4628      	mov	r0, r5
 80052f0:	f7ff fec2 	bl	8005078 <_free_r>
 80052f4:	2300      	movs	r3, #0
 80052f6:	6363      	str	r3, [r4, #52]	@ 0x34
 80052f8:	e00d      	b.n	8005316 <__sflush_r+0xae>
 80052fa:	2301      	movs	r3, #1
 80052fc:	4628      	mov	r0, r5
 80052fe:	47b0      	blx	r6
 8005300:	4602      	mov	r2, r0
 8005302:	1c50      	adds	r0, r2, #1
 8005304:	d1c9      	bne.n	800529a <__sflush_r+0x32>
 8005306:	682b      	ldr	r3, [r5, #0]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d0c6      	beq.n	800529a <__sflush_r+0x32>
 800530c:	2b1d      	cmp	r3, #29
 800530e:	d001      	beq.n	8005314 <__sflush_r+0xac>
 8005310:	2b16      	cmp	r3, #22
 8005312:	d11e      	bne.n	8005352 <__sflush_r+0xea>
 8005314:	602f      	str	r7, [r5, #0]
 8005316:	2000      	movs	r0, #0
 8005318:	e022      	b.n	8005360 <__sflush_r+0xf8>
 800531a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800531e:	b21b      	sxth	r3, r3
 8005320:	e01b      	b.n	800535a <__sflush_r+0xf2>
 8005322:	690f      	ldr	r7, [r1, #16]
 8005324:	2f00      	cmp	r7, #0
 8005326:	d0f6      	beq.n	8005316 <__sflush_r+0xae>
 8005328:	0793      	lsls	r3, r2, #30
 800532a:	680e      	ldr	r6, [r1, #0]
 800532c:	bf08      	it	eq
 800532e:	694b      	ldreq	r3, [r1, #20]
 8005330:	600f      	str	r7, [r1, #0]
 8005332:	bf18      	it	ne
 8005334:	2300      	movne	r3, #0
 8005336:	eba6 0807 	sub.w	r8, r6, r7
 800533a:	608b      	str	r3, [r1, #8]
 800533c:	f1b8 0f00 	cmp.w	r8, #0
 8005340:	dde9      	ble.n	8005316 <__sflush_r+0xae>
 8005342:	6a21      	ldr	r1, [r4, #32]
 8005344:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005346:	4643      	mov	r3, r8
 8005348:	463a      	mov	r2, r7
 800534a:	4628      	mov	r0, r5
 800534c:	47b0      	blx	r6
 800534e:	2800      	cmp	r0, #0
 8005350:	dc08      	bgt.n	8005364 <__sflush_r+0xfc>
 8005352:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005356:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800535a:	81a3      	strh	r3, [r4, #12]
 800535c:	f04f 30ff 	mov.w	r0, #4294967295
 8005360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005364:	4407      	add	r7, r0
 8005366:	eba8 0800 	sub.w	r8, r8, r0
 800536a:	e7e7      	b.n	800533c <__sflush_r+0xd4>
 800536c:	20400001 	.word	0x20400001

08005370 <_fflush_r>:
 8005370:	b538      	push	{r3, r4, r5, lr}
 8005372:	690b      	ldr	r3, [r1, #16]
 8005374:	4605      	mov	r5, r0
 8005376:	460c      	mov	r4, r1
 8005378:	b913      	cbnz	r3, 8005380 <_fflush_r+0x10>
 800537a:	2500      	movs	r5, #0
 800537c:	4628      	mov	r0, r5
 800537e:	bd38      	pop	{r3, r4, r5, pc}
 8005380:	b118      	cbz	r0, 800538a <_fflush_r+0x1a>
 8005382:	6a03      	ldr	r3, [r0, #32]
 8005384:	b90b      	cbnz	r3, 800538a <_fflush_r+0x1a>
 8005386:	f7ff fc23 	bl	8004bd0 <__sinit>
 800538a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d0f3      	beq.n	800537a <_fflush_r+0xa>
 8005392:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005394:	07d0      	lsls	r0, r2, #31
 8005396:	d404      	bmi.n	80053a2 <_fflush_r+0x32>
 8005398:	0599      	lsls	r1, r3, #22
 800539a:	d402      	bmi.n	80053a2 <_fflush_r+0x32>
 800539c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800539e:	f7ff fe5a 	bl	8005056 <__retarget_lock_acquire_recursive>
 80053a2:	4628      	mov	r0, r5
 80053a4:	4621      	mov	r1, r4
 80053a6:	f7ff ff5f 	bl	8005268 <__sflush_r>
 80053aa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80053ac:	07da      	lsls	r2, r3, #31
 80053ae:	4605      	mov	r5, r0
 80053b0:	d4e4      	bmi.n	800537c <_fflush_r+0xc>
 80053b2:	89a3      	ldrh	r3, [r4, #12]
 80053b4:	059b      	lsls	r3, r3, #22
 80053b6:	d4e1      	bmi.n	800537c <_fflush_r+0xc>
 80053b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80053ba:	f7ff fe4d 	bl	8005058 <__retarget_lock_release_recursive>
 80053be:	e7dd      	b.n	800537c <_fflush_r+0xc>

080053c0 <__swhatbuf_r>:
 80053c0:	b570      	push	{r4, r5, r6, lr}
 80053c2:	460c      	mov	r4, r1
 80053c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053c8:	2900      	cmp	r1, #0
 80053ca:	b096      	sub	sp, #88	@ 0x58
 80053cc:	4615      	mov	r5, r2
 80053ce:	461e      	mov	r6, r3
 80053d0:	da0d      	bge.n	80053ee <__swhatbuf_r+0x2e>
 80053d2:	89a3      	ldrh	r3, [r4, #12]
 80053d4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80053d8:	f04f 0100 	mov.w	r1, #0
 80053dc:	bf14      	ite	ne
 80053de:	2340      	movne	r3, #64	@ 0x40
 80053e0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80053e4:	2000      	movs	r0, #0
 80053e6:	6031      	str	r1, [r6, #0]
 80053e8:	602b      	str	r3, [r5, #0]
 80053ea:	b016      	add	sp, #88	@ 0x58
 80053ec:	bd70      	pop	{r4, r5, r6, pc}
 80053ee:	466a      	mov	r2, sp
 80053f0:	f000 f848 	bl	8005484 <_fstat_r>
 80053f4:	2800      	cmp	r0, #0
 80053f6:	dbec      	blt.n	80053d2 <__swhatbuf_r+0x12>
 80053f8:	9901      	ldr	r1, [sp, #4]
 80053fa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80053fe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005402:	4259      	negs	r1, r3
 8005404:	4159      	adcs	r1, r3
 8005406:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800540a:	e7eb      	b.n	80053e4 <__swhatbuf_r+0x24>

0800540c <__smakebuf_r>:
 800540c:	898b      	ldrh	r3, [r1, #12]
 800540e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005410:	079d      	lsls	r5, r3, #30
 8005412:	4606      	mov	r6, r0
 8005414:	460c      	mov	r4, r1
 8005416:	d507      	bpl.n	8005428 <__smakebuf_r+0x1c>
 8005418:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800541c:	6023      	str	r3, [r4, #0]
 800541e:	6123      	str	r3, [r4, #16]
 8005420:	2301      	movs	r3, #1
 8005422:	6163      	str	r3, [r4, #20]
 8005424:	b003      	add	sp, #12
 8005426:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005428:	ab01      	add	r3, sp, #4
 800542a:	466a      	mov	r2, sp
 800542c:	f7ff ffc8 	bl	80053c0 <__swhatbuf_r>
 8005430:	9f00      	ldr	r7, [sp, #0]
 8005432:	4605      	mov	r5, r0
 8005434:	4639      	mov	r1, r7
 8005436:	4630      	mov	r0, r6
 8005438:	f7ff fe8a 	bl	8005150 <_malloc_r>
 800543c:	b948      	cbnz	r0, 8005452 <__smakebuf_r+0x46>
 800543e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005442:	059a      	lsls	r2, r3, #22
 8005444:	d4ee      	bmi.n	8005424 <__smakebuf_r+0x18>
 8005446:	f023 0303 	bic.w	r3, r3, #3
 800544a:	f043 0302 	orr.w	r3, r3, #2
 800544e:	81a3      	strh	r3, [r4, #12]
 8005450:	e7e2      	b.n	8005418 <__smakebuf_r+0xc>
 8005452:	89a3      	ldrh	r3, [r4, #12]
 8005454:	6020      	str	r0, [r4, #0]
 8005456:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800545a:	81a3      	strh	r3, [r4, #12]
 800545c:	9b01      	ldr	r3, [sp, #4]
 800545e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005462:	b15b      	cbz	r3, 800547c <__smakebuf_r+0x70>
 8005464:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005468:	4630      	mov	r0, r6
 800546a:	f000 f81d 	bl	80054a8 <_isatty_r>
 800546e:	b128      	cbz	r0, 800547c <__smakebuf_r+0x70>
 8005470:	89a3      	ldrh	r3, [r4, #12]
 8005472:	f023 0303 	bic.w	r3, r3, #3
 8005476:	f043 0301 	orr.w	r3, r3, #1
 800547a:	81a3      	strh	r3, [r4, #12]
 800547c:	89a3      	ldrh	r3, [r4, #12]
 800547e:	431d      	orrs	r5, r3
 8005480:	81a5      	strh	r5, [r4, #12]
 8005482:	e7cf      	b.n	8005424 <__smakebuf_r+0x18>

08005484 <_fstat_r>:
 8005484:	b538      	push	{r3, r4, r5, lr}
 8005486:	4d07      	ldr	r5, [pc, #28]	@ (80054a4 <_fstat_r+0x20>)
 8005488:	2300      	movs	r3, #0
 800548a:	4604      	mov	r4, r0
 800548c:	4608      	mov	r0, r1
 800548e:	4611      	mov	r1, r2
 8005490:	602b      	str	r3, [r5, #0]
 8005492:	f7fb fb0a 	bl	8000aaa <_fstat>
 8005496:	1c43      	adds	r3, r0, #1
 8005498:	d102      	bne.n	80054a0 <_fstat_r+0x1c>
 800549a:	682b      	ldr	r3, [r5, #0]
 800549c:	b103      	cbz	r3, 80054a0 <_fstat_r+0x1c>
 800549e:	6023      	str	r3, [r4, #0]
 80054a0:	bd38      	pop	{r3, r4, r5, pc}
 80054a2:	bf00      	nop
 80054a4:	20004c00 	.word	0x20004c00

080054a8 <_isatty_r>:
 80054a8:	b538      	push	{r3, r4, r5, lr}
 80054aa:	4d06      	ldr	r5, [pc, #24]	@ (80054c4 <_isatty_r+0x1c>)
 80054ac:	2300      	movs	r3, #0
 80054ae:	4604      	mov	r4, r0
 80054b0:	4608      	mov	r0, r1
 80054b2:	602b      	str	r3, [r5, #0]
 80054b4:	f7fb fb09 	bl	8000aca <_isatty>
 80054b8:	1c43      	adds	r3, r0, #1
 80054ba:	d102      	bne.n	80054c2 <_isatty_r+0x1a>
 80054bc:	682b      	ldr	r3, [r5, #0]
 80054be:	b103      	cbz	r3, 80054c2 <_isatty_r+0x1a>
 80054c0:	6023      	str	r3, [r4, #0]
 80054c2:	bd38      	pop	{r3, r4, r5, pc}
 80054c4:	20004c00 	.word	0x20004c00

080054c8 <_sbrk_r>:
 80054c8:	b538      	push	{r3, r4, r5, lr}
 80054ca:	4d06      	ldr	r5, [pc, #24]	@ (80054e4 <_sbrk_r+0x1c>)
 80054cc:	2300      	movs	r3, #0
 80054ce:	4604      	mov	r4, r0
 80054d0:	4608      	mov	r0, r1
 80054d2:	602b      	str	r3, [r5, #0]
 80054d4:	f7fb fb12 	bl	8000afc <_sbrk>
 80054d8:	1c43      	adds	r3, r0, #1
 80054da:	d102      	bne.n	80054e2 <_sbrk_r+0x1a>
 80054dc:	682b      	ldr	r3, [r5, #0]
 80054de:	b103      	cbz	r3, 80054e2 <_sbrk_r+0x1a>
 80054e0:	6023      	str	r3, [r4, #0]
 80054e2:	bd38      	pop	{r3, r4, r5, pc}
 80054e4:	20004c00 	.word	0x20004c00

080054e8 <_init>:
 80054e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054ea:	bf00      	nop
 80054ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054ee:	bc08      	pop	{r3}
 80054f0:	469e      	mov	lr, r3
 80054f2:	4770      	bx	lr

080054f4 <_fini>:
 80054f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054f6:	bf00      	nop
 80054f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054fa:	bc08      	pop	{r3}
 80054fc:	469e      	mov	lr, r3
 80054fe:	4770      	bx	lr
